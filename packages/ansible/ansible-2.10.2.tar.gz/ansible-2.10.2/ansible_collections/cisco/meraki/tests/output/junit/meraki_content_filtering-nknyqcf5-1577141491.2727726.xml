<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="1" tests="23" time="43.22968864440918">
	<testsuite disabled="0" errors="0" failures="1" name="meraki_content_filtering-nknyqcf5" skipped="1" tests="23" time="43.22968864440918">
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:7" name="[localhost] meraki: meraki_content_filtering : Test an API key is provided msg=Please define an API key" time="0.446829">
			<skipped message="Conditional result was False" type="skipped"/>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:12" name="[localhost] meraki: meraki_content_filtering : Create network auth_key={{ auth_key }}, state=present, org_name={{test_org_name}}, net_name={{test_net_name}}, type=appliance, timezone=America/Chicago" time="3.657999">
			<system-out>{
&quot;ansible_facts&quot;: {
&quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;
},
&quot;changed&quot;: false,
&quot;data&quot;: {
&quot;disable_my_meraki_com&quot;: false,
&quot;disable_remote_status_page&quot;: true,
&quot;id&quot;: &quot;N_624874448297682281&quot;,
&quot;name&quot;: &quot;Home - Appliance&quot;,
&quot;organization_id&quot;: &quot;133277&quot;,
&quot;product_types&quot;: [
&quot;appliance&quot;
],
&quot;tags&quot;: null,
&quot;time_zone&quot;: &quot;America/Chicago&quot;,
&quot;type&quot;: &quot;appliance&quot;
},
&quot;deprecations&quot;: [
{
&quot;msg&quot;: &quot;Distribution Ubuntu 18.04 on host localhost should use /usr/bin/python3, but is using /usr/bin/python for backward compatibility with prior Ansible releases. A future Ansible release will default to using the discovered platform python for this host. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information&quot;,
&quot;version&quot;: &quot;2.12&quot;
}
],
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:23" name="[localhost] meraki: meraki_content_filtering : set_fact net_id={{create_net_appliance.data.id}}" time="0.415570">
			<system-out>{
&quot;ansible_facts&quot;: {
&quot;net_id&quot;: &quot;N_624874448297682281&quot;
},
&quot;changed&quot;: false
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:26" name="[localhost] meraki: meraki_content_filtering : Test net_name and id exclusivity auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, net_id=12345, state=present, allowed_urls=['http://www.ansible.com/*']" time="1.032378">
			<system-out>{
&quot;changed&quot;: false,
&quot;msg&quot;: &quot;net_name and net_id are mutually exclusive&quot;,
&quot;response&quot;: null,
&quot;status&quot;: null,
&quot;warnings&quot;: [
&quot;The value 12345 (type int) in a string field was converted to '12345' (type string). If this does not look like what you expect, quote the entire value to ensure it does not change.&quot;
]
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:38" name="[localhost] meraki: meraki_content_filtering : assert that=['net_exclusive.msg == &quot;net_name and net_id are mutually exclusive&quot;']" time="0.440269">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:42" name="[localhost] meraki: meraki_content_filtering : Set single allowed URL pattern with check mode auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*']" time="4.145383">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:53" name="[localhost] meraki: meraki_content_filtering : assert that=['single_allowed_check.data.allowed_url_patterns | length == 1', 'single_allowed_check is changed']" time="0.387643">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:58" name="[localhost] meraki: meraki_content_filtering : Set single allowed URL pattern auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*']" time="4.970523">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:68" name="[localhost] meraki: meraki_content_filtering : assert that=['single_allowed.data.allowed_url_patterns | length == 1']" time="0.409444">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:72" name="[localhost] meraki: meraki_content_filtering : Set single allowed URL pattern for idempotency with check mode auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*']" time="4.022072">
			<system-out>{
&quot;changed&quot;: false,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:83" name="[localhost] meraki: meraki_content_filtering : debug var=single_allowed_idempotent_check" time="0.383527">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;single_allowed_idempotent_check&quot;: {
        &quot;changed&quot;: false,
        &quot;data&quot;: {
            &quot;allowed_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;
            ],
            &quot;blocked_url_categories&quot;: [
                {
                    &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                    &quot;name&quot;: &quot;Adult and Pornography&quot;
                }
            ],
            &quot;blocked_url_patterns&quot;: [],
            &quot;url_category_list_size&quot;: &quot;fullList&quot;
        },
        &quot;failed&quot;: false,
        &quot;response&quot;: &quot;OK (unknown bytes)&quot;,
        &quot;status&quot;: 200
    }
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:86" name="[localhost] meraki: meraki_content_filtering : assert that=['single_allowed_idempotent_check is not changed', 'single_allowed.data.allowed_url_patterns | length == 1']" time="0.399166">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:91" name="[localhost] meraki: meraki_content_filtering : Set single allowed URL pattern for idempotency auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*']" time="4.304670">
			<system-out>{
&quot;changed&quot;: false,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:101" name="[localhost] meraki: meraki_content_filtering : debug var=single_allowed_idempotent" time="0.383925">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;single_allowed_idempotent&quot;: {
        &quot;changed&quot;: false,
        &quot;data&quot;: {
            &quot;allowed_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;
            ],
            &quot;blocked_url_categories&quot;: [
                {
                    &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                    &quot;name&quot;: &quot;Adult and Pornography&quot;
                }
            ],
            &quot;blocked_url_patterns&quot;: [],
            &quot;url_category_list_size&quot;: &quot;fullList&quot;
        },
        &quot;failed&quot;: false,
        &quot;response&quot;: &quot;OK (unknown bytes)&quot;,
        &quot;status&quot;: 200
    }
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:104" name="[localhost] meraki: meraki_content_filtering : assert that=['single_allowed_idempotent.changed == False', 'single_allowed_idempotent.data is defined']" time="0.373645">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:109" name="[localhost] meraki: meraki_content_filtering : Set single blocked URL pattern using net_id auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, blocked_urls=['http://www.ansible.com/*']" time="4.893441">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:119" name="[localhost] meraki: meraki_content_filtering : debug var=single_blocked" time="0.369774">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;single_blocked&quot;: {
        &quot;changed&quot;: true,
        &quot;data&quot;: {
            &quot;allowed_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;
            ],
            &quot;blocked_url_categories&quot;: [
                {
                    &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                    &quot;name&quot;: &quot;Adult and Pornography&quot;
                }
            ],
            &quot;blocked_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;
            ],
            &quot;url_category_list_size&quot;: &quot;fullList&quot;
        },
        &quot;diff&quot;: {
            &quot;after&quot;: {
                &quot;blockedUrlPatterns&quot;: [
                    &quot;http://www.ansible.com/*&quot;
                ]
            },
            &quot;before&quot;: {
                &quot;allowedUrlPatterns&quot;: [
                    &quot;http://www.ansible.com/*&quot;
                ],
                &quot;blockedUrlCategories&quot;: [
                    {
                        &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                        &quot;name&quot;: &quot;Adult and Pornography&quot;
                    }
                ],
                &quot;blockedUrlPatterns&quot;: [],
                &quot;urlCategoryListSize&quot;: &quot;fullList&quot;
            }
        },
        &quot;failed&quot;: false,
        &quot;response&quot;: &quot;OK (unknown bytes)&quot;,
        &quot;status&quot;: 200
    }
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:122" name="[localhost] meraki: meraki_content_filtering : assert that=['single_blocked.data.blocked_url_patterns | length == 1']" time="0.367852">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:126" name="[localhost] meraki: meraki_content_filtering : Set two allowed URL pattern auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*', 'http://www.redhat.com']" time="5.056419">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;,
&quot;http://www.redhat.com&quot;
],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [
&quot;http://www.ansible.com/*&quot;
],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:137" name="[localhost] meraki: meraki_content_filtering : debug var=two_allowed" time="0.365258">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;two_allowed&quot;: {
        &quot;changed&quot;: true,
        &quot;data&quot;: {
            &quot;allowed_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;,
                &quot;http://www.redhat.com&quot;
            ],
            &quot;blocked_url_categories&quot;: [
                {
                    &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                    &quot;name&quot;: &quot;Adult and Pornography&quot;
                }
            ],
            &quot;blocked_url_patterns&quot;: [
                &quot;http://www.ansible.com/*&quot;
            ],
            &quot;url_category_list_size&quot;: &quot;fullList&quot;
        },
        &quot;diff&quot;: {
            &quot;after&quot;: {
                &quot;allowedUrlPatterns&quot;: [
                    &quot;http://www.ansible.com/*&quot;,
                    &quot;http://www.redhat.com&quot;
                ]
            },
            &quot;before&quot;: {
                &quot;allowedUrlPatterns&quot;: [
                    &quot;http://www.ansible.com/*&quot;
                ],
                &quot;blockedUrlCategories&quot;: [
                    {
                        &quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
                        &quot;name&quot;: &quot;Adult and Pornography&quot;
                    }
                ],
                &quot;blockedUrlPatterns&quot;: [
                    &quot;http://www.ansible.com/*&quot;
                ],
                &quot;urlCategoryListSize&quot;: &quot;fullList&quot;
            }
        },
        &quot;failed&quot;: false,
        &quot;response&quot;: &quot;OK (unknown bytes)&quot;,
        &quot;status&quot;: 200
    }
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:140" name="[localhost] meraki: meraki_content_filtering : assert that=['two_allowed.changed == True', 'two_allowed.data.allowed_url_patterns | length == 2']" time="0.364492">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:145" name="[localhost] meraki: meraki_content_filtering : Set blocked URL category using net_id auth_key={{auth_key}}, org_name={{test_org_name}}, net_id={{net_id}}, net_name={{test_net_name}}, state=present, category_list_size=full list, blocked_categories=['Adult and Pornography']" time="0.591944">
			<failure message="net_name and net_id are mutually exclusive" type="failure">{
&quot;changed&quot;: false,
&quot;msg&quot;: &quot;net_name and net_id are mutually exclusive&quot;,
&quot;response&quot;: null,
&quot;status&quot;: null
}</failure>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-0ag8zysb-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:241" name="[localhost] meraki: meraki_content_filtering : Reset policies auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, category_list_size=full list, allowed_urls=[None], blocked_urls=[None]" time="5.447465">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [],
&quot;blocked_url_categories&quot;: [
{
&quot;id&quot;: &quot;meraki:contentFiltering/category/11&quot;,
&quot;name&quot;: &quot;Adult and Pornography&quot;
}
],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
	</testsuite>
</testsuites>
