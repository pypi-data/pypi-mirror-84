<?xml version="1.0" ?>
<testsuites disabled="0" errors="0" failures="1" tests="7" time="26.54900336265564">
	<testsuite disabled="0" errors="0" failures="1" name="meraki_content_filtering-es2936_l" skipped="1" tests="7" time="26.54900336265564">
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:7" name="[localhost] meraki: meraki_content_filtering : Test an API key is provided msg=Please define an API key" time="0.329755">
			<skipped message="Conditional result was False" type="skipped"/>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:12" name="[localhost] meraki: meraki_content_filtering : Create network auth_key={{ auth_key }}, state=present, org_name={{test_org_name}}, net_name={{test_net_name}}, type=appliance, timezone=America/Chicago" time="4.053913">
			<system-out>{
&quot;ansible_facts&quot;: {
&quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;
},
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;disable_my_meraki_com&quot;: false,
&quot;disable_remote_status_page&quot;: true,
&quot;enrollment_string&quot;: null,
&quot;id&quot;: &quot;N_624874448297682395&quot;,
&quot;name&quot;: &quot;Home - Appliance&quot;,
&quot;organization_id&quot;: &quot;133277&quot;,
&quot;product_types&quot;: [
&quot;appliance&quot;
],
&quot;tags&quot;: &quot;&quot;,
&quot;time_zone&quot;: &quot;America/Chicago&quot;,
&quot;type&quot;: &quot;appliance&quot;
},
&quot;deprecations&quot;: [
{
&quot;msg&quot;: &quot;Distribution Ubuntu 18.04 on host localhost should use /usr/bin/python3, but is using /usr/bin/python for backward compatibility with prior Ansible releases. A future Ansible release will default to using the discovered platform python for this host. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information&quot;,
&quot;version&quot;: &quot;2.12&quot;
}
],
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 201
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:23" name="[localhost] meraki: meraki_content_filtering : Test net_name and id exclusivity auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, net_id=12345, state=present, allowed_urls=['http://www.ansible.com/*']" time="0.691153">
			<system-out>{
&quot;changed&quot;: false,
&quot;msg&quot;: &quot;net_name and net_id are mutually exclusive&quot;,
&quot;response&quot;: null,
&quot;status&quot;: null,
&quot;warnings&quot;: [
&quot;The value 12345 (type int) in a string field was converted to '12345' (type string). If this does not look like what you expect, quote the entire value to ensure it does not change.&quot;
]
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:35" name="[localhost] meraki: meraki_content_filtering : assert that=['net_exclusive.msg == &quot;net_name and net_id are mutually exclusive&quot;']" time="0.355558">
			<system-out>{
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;All assertions passed&quot;
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:39" name="[localhost] meraki: meraki_content_filtering : Set single allowed URL pattern with check mode auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, allowed_urls=['http://www.ansible.com/*']" time="12.256191">
			<failure message="Unable to get configuration templates" type="failure">{
&quot;changed&quot;: false,
&quot;msg&quot;: &quot;Unable to get configuration templates&quot;,
&quot;response&quot;: &quot;Request failed: &lt;urlopen error [Errno -3] Temporary failure in name resolution&gt;&quot;,
&quot;status&quot;: -1
}</failure>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:237" name="[localhost] meraki: meraki_content_filtering : Reset policies auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=present, category_list_size=full list, allowed_urls=[None], blocked_urls=[None]" time="4.585102">
			<system-out>{
&quot;changed&quot;: true,
&quot;data&quot;: {
&quot;allowed_url_patterns&quot;: [],
&quot;blocked_url_categories&quot;: [],
&quot;blocked_url_patterns&quot;: [],
&quot;url_category_list_size&quot;: &quot;fullList&quot;
},
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 200
}</system-out>
		</testcase>
		<testcase classname="/root/ansible/ansible_collections/cisco/meraki/tests/output/.tmp/integration/meraki_content_filtering-tf01oino-ÅÑŚÌβŁÈ/tests/integration/targets/meraki_content_filtering/tasks/main.yml:249" name="[localhost] meraki: meraki_content_filtering : Delete network auth_key={{auth_key}}, org_name={{test_org_name}}, net_name={{test_net_name}}, state=absent" time="4.277331">
			<system-out>{
&quot;changed&quot;: true,
&quot;response&quot;: &quot;OK (unknown bytes)&quot;,
&quot;status&quot;: 204
}</system-out>
		</testcase>
	</testsuite>
</testsuites>
