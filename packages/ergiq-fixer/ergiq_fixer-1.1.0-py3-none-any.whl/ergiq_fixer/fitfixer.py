import math
import sys
import os.path
import click
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.dom import minidom
from pytz import utc
from fitparse import FitFile


def get_localized_timestamp(msg):
    return get_localized_time(msg, "timestamp")


def get_localized_time(msg, field):
    return utc.localize(msg.get_value(field)).isoformat()


def add_record(record, track):
    tp = SubElement(track, "Trackpoint")
    time = SubElement(tp, "Time")
    time.text = get_localized_timestamp(record)
    distance = SubElement(tp, "DistanceMeters")
    distance.text = str(record.get_value("Distance"))
    altitude = SubElement(tp, "AltitudeMeters")
    altitude.text = str(record.get_value("enhanced_altitude"))
    hr_val = record.get_value("Heart Rate")
    if hr_val is not None:
        heartratebpm = SubElement(tp, "HeartRateBpm")
        hr = SubElement(heartratebpm, "Value")
        hr.text = str(hr_val)
    extensions = SubElement(tp, "Extensions")
    tpx = SubElement(extensions, "ns3:TPX")
    speed = SubElement(tpx, "ns3:Speed")
    speed.text = str(record.get_value("Speed"))
    watts = SubElement(tpx, "ns3:Watts")
    watts.text = str(record.get_value("Power"))


def start_lap(activity, event):
    lap = SubElement(activity, "Lap")
    track = SubElement(lap, "Track")
    trigger_method = SubElement(lap, "TriggerMethod")
    trigger_method.text = event.get_value("timer_trigger").title()
    intensity = SubElement(lap, "Intensity")
    intensity.text = "Active"

    return lap, track


def end_lap(msg, lap):
    lap.set("StartTime", get_localized_time(msg, "start_time"))
    elapsed_time = msg.get_value("total_elapsed_time")
    max_hr_bpm = SubElement(lap, "MaximumHeartRateBpm")
    max_hr = SubElement(max_hr_bpm, "Value")
    max_hr.text = str(msg.get_value("Max Heart Rate"))

    avg_hr_bpm = SubElement(lap, "AverageHeartRateBpm")
    avg_hr = SubElement(avg_hr_bpm, "Value")
    avg_hr.text = str(msg.get_value("Avg Heart Rate"))

    distance_meters = SubElement(lap, "DistanceMeters")
    distance_meters.text = str(msg.get_value("Distance"))

    total_time = SubElement(lap, "TotalTimeSeconds")
    total_time.text = str(math.floor(elapsed_time + 0.1))

    max_speed = SubElement(lap, "MaximumSpeed")
    max_speed.text = str(msg.get_value("Max Speed"))

    calories = SubElement(lap, "Calories")
    calories.text = str(msg.get_value("Calories"))

    extensions = SubElement(lap, "Extensions")
    lx = SubElement(extensions, "ns3:LX")

    if avg_power := msg.get_value("Avg Power"):
        avg_power_elm = SubElement(lx, "ns3:AvgWatts")
        avg_power_elm.text = str(avg_power)

    if max_power := msg.get_value("Max Power"):
        max_power_elm = SubElement(lx, "ns3:MaxWatts")
        max_power_elm.text = str(max_power)

    if avg_speed := msg.get_value("Avg Speed"):
        avg_speed_elm = SubElement(lx, "ns3:AvgSpeed")
        avg_speed_elm.text = str(avg_speed)

    if avg_spm := msg.get_value("Avg Stroke Rate"):
        avg_spm_elm = SubElement(lx, "ns3:MaxBikeCadence")
        avg_spm_elm.text = str(avg_spm)


def add_deviceinfo(activity):
    creator = SubElement(activity, "Creator")
    creator.set("xsi:type", "Device_t")


def parse_fitfile(fitfile):
    top = Element("TrainingCenterDatabase")
    top.set(
        "xsi:schemaLocation",
        "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd",
    )
    top.set("xmlns:ns5", "http://www.garmin.com/xmlschemas/ActivityGoals/v1")
    top.set("xmlns:ns3", "http://www.garmin.com/xmlschemas/ActivityExtension/v2")
    top.set("xmlns:ns2", "http://www.garmin.com/xmlschemas/UserProfile/v2")
    top.set("xmlns", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")
    top.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
    top.set("xmlns:ns4", "http://www.garmin.com/xmlschemas/ProfileExtension/v1")
    top.append(Comment("Generated by erqiq-fixer"))
    try:
        event = list(fitfile.get_messages("event"))[0]
        sport = list(fitfile.get_messages("sport"))[0]
    except IndexError:
        sys.stdout.write(f"Fit file is missing event or sport record")
        sys.exit(-1)

    activities = SubElement(top, "Activities")
    activity = SubElement(activities, "Activity")
    activity.set("Sport", "Rowing")
    id = SubElement(activity, "Id")
    id.text = get_localized_timestamp(event)

    current_lap, current_track = start_lap(activity, event)

    for message in fitfile.get_messages():
        if message.name == "record":
            add_record(message, current_track)
        elif message.name == "lap":
            end_lap(message, current_lap)
            current_lap, current_track = start_lap(activity, event)

    return top


@click.group()
def cli():
    """Parses fit files with ConnectIQ data and exports to TCX"""


@cli.command("parse")
@click.argument("fitfile", type=click.Path(exists=True, dir_okay=False))
def parse(fitfile):
    filename = click.format_filename(fitfile)
    ff = FitFile(filename)
    xml = parse_fitfile(ff)
    dom = minidom.parseString(tostring(xml, "utf-8"))
    activity_id = os.path.basename(filename).split(".")[0]
    with open(f"activity_{activity_id}.tcx", "w") as output:
        output.write(dom.toprettyxml(encoding="UTF-8").decode("UTF-8"))


if __name__ == "__main__":
    cli()
