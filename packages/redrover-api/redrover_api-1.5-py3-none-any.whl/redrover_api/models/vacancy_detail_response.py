# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class VacancyDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vacancy_id': 'int',
        'vacancy_detail_id': 'int',
        'assignment_id': 'int',
        'absence_detail': 'SimpleAbsenceDetail',
        'position': 'SimplePosition',
        'substitute': 'SimplePerson',
        'location': 'SimpleLocation',
        'start': 'datetime',
        'end': 'datetime',
        'actual_duration_minutes': 'int',
        'accounting_codes': 'list[AccountingCodeAllocation]',
        'pay_duration': 'float',
        'pay_unit': 'str',
        'pay_code': 'PayCode',
        'reason': 'Reason',
        'verified': 'bool',
        'verified_at_utc': 'datetime',
        'verify_comment': 'str',
        'notes_to_admin': 'str',
        'created_utc': 'datetime',
        'approval_status': 'str',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'vacancy_id': 'vacancyId',
        'vacancy_detail_id': 'vacancyDetailId',
        'assignment_id': 'assignmentId',
        'absence_detail': 'absenceDetail',
        'position': 'position',
        'substitute': 'substitute',
        'location': 'location',
        'start': 'start',
        'end': 'end',
        'actual_duration_minutes': 'actualDurationMinutes',
        'accounting_codes': 'accountingCodes',
        'pay_duration': 'payDuration',
        'pay_unit': 'payUnit',
        'pay_code': 'payCode',
        'reason': 'reason',
        'verified': 'verified',
        'verified_at_utc': 'verifiedAtUtc',
        'verify_comment': 'verifyComment',
        'notes_to_admin': 'notesToAdmin',
        'created_utc': 'createdUtc',
        'approval_status': 'approvalStatus',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, vacancy_id=None, vacancy_detail_id=None, assignment_id=None, absence_detail=None, position=None, substitute=None, location=None, start=None, end=None, actual_duration_minutes=None, accounting_codes=None, pay_duration=None, pay_unit=None, pay_code=None, reason=None, verified=None, verified_at_utc=None, verify_comment=None, notes_to_admin=None, created_utc=None, approval_status=None, is_deleted=None, local_vars_configuration=None):  # noqa: E501
        """VacancyDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vacancy_id = None
        self._vacancy_detail_id = None
        self._assignment_id = None
        self._absence_detail = None
        self._position = None
        self._substitute = None
        self._location = None
        self._start = None
        self._end = None
        self._actual_duration_minutes = None
        self._accounting_codes = None
        self._pay_duration = None
        self._pay_unit = None
        self._pay_code = None
        self._reason = None
        self._verified = None
        self._verified_at_utc = None
        self._verify_comment = None
        self._notes_to_admin = None
        self._created_utc = None
        self._approval_status = None
        self._is_deleted = None
        self.discriminator = None

        if vacancy_id is not None:
            self.vacancy_id = vacancy_id
        if vacancy_detail_id is not None:
            self.vacancy_detail_id = vacancy_detail_id
        self.assignment_id = assignment_id
        if absence_detail is not None:
            self.absence_detail = absence_detail
        if position is not None:
            self.position = position
        if substitute is not None:
            self.substitute = substitute
        if location is not None:
            self.location = location
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if actual_duration_minutes is not None:
            self.actual_duration_minutes = actual_duration_minutes
        self.accounting_codes = accounting_codes
        if pay_duration is not None:
            self.pay_duration = pay_duration
        self.pay_unit = pay_unit
        if pay_code is not None:
            self.pay_code = pay_code
        if reason is not None:
            self.reason = reason
        if verified is not None:
            self.verified = verified
        self.verified_at_utc = verified_at_utc
        self.verify_comment = verify_comment
        self.notes_to_admin = notes_to_admin
        if created_utc is not None:
            self.created_utc = created_utc
        self.approval_status = approval_status
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def vacancy_id(self):
        """Gets the vacancy_id of this VacancyDetailResponse.  # noqa: E501


        :return: The vacancy_id of this VacancyDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._vacancy_id

    @vacancy_id.setter
    def vacancy_id(self, vacancy_id):
        """Sets the vacancy_id of this VacancyDetailResponse.


        :param vacancy_id: The vacancy_id of this VacancyDetailResponse.  # noqa: E501
        :type vacancy_id: int
        """

        self._vacancy_id = vacancy_id

    @property
    def vacancy_detail_id(self):
        """Gets the vacancy_detail_id of this VacancyDetailResponse.  # noqa: E501


        :return: The vacancy_detail_id of this VacancyDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._vacancy_detail_id

    @vacancy_detail_id.setter
    def vacancy_detail_id(self, vacancy_detail_id):
        """Sets the vacancy_detail_id of this VacancyDetailResponse.


        :param vacancy_detail_id: The vacancy_detail_id of this VacancyDetailResponse.  # noqa: E501
        :type vacancy_detail_id: int
        """

        self._vacancy_detail_id = vacancy_detail_id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this VacancyDetailResponse.  # noqa: E501


        :return: The assignment_id of this VacancyDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this VacancyDetailResponse.


        :param assignment_id: The assignment_id of this VacancyDetailResponse.  # noqa: E501
        :type assignment_id: int
        """

        self._assignment_id = assignment_id

    @property
    def absence_detail(self):
        """Gets the absence_detail of this VacancyDetailResponse.  # noqa: E501


        :return: The absence_detail of this VacancyDetailResponse.  # noqa: E501
        :rtype: SimpleAbsenceDetail
        """
        return self._absence_detail

    @absence_detail.setter
    def absence_detail(self, absence_detail):
        """Sets the absence_detail of this VacancyDetailResponse.


        :param absence_detail: The absence_detail of this VacancyDetailResponse.  # noqa: E501
        :type absence_detail: SimpleAbsenceDetail
        """

        self._absence_detail = absence_detail

    @property
    def position(self):
        """Gets the position of this VacancyDetailResponse.  # noqa: E501


        :return: The position of this VacancyDetailResponse.  # noqa: E501
        :rtype: SimplePosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VacancyDetailResponse.


        :param position: The position of this VacancyDetailResponse.  # noqa: E501
        :type position: SimplePosition
        """

        self._position = position

    @property
    def substitute(self):
        """Gets the substitute of this VacancyDetailResponse.  # noqa: E501


        :return: The substitute of this VacancyDetailResponse.  # noqa: E501
        :rtype: SimplePerson
        """
        return self._substitute

    @substitute.setter
    def substitute(self, substitute):
        """Sets the substitute of this VacancyDetailResponse.


        :param substitute: The substitute of this VacancyDetailResponse.  # noqa: E501
        :type substitute: SimplePerson
        """

        self._substitute = substitute

    @property
    def location(self):
        """Gets the location of this VacancyDetailResponse.  # noqa: E501


        :return: The location of this VacancyDetailResponse.  # noqa: E501
        :rtype: SimpleLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VacancyDetailResponse.


        :param location: The location of this VacancyDetailResponse.  # noqa: E501
        :type location: SimpleLocation
        """

        self._location = location

    @property
    def start(self):
        """Gets the start of this VacancyDetailResponse.  # noqa: E501


        :return: The start of this VacancyDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this VacancyDetailResponse.


        :param start: The start of this VacancyDetailResponse.  # noqa: E501
        :type start: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this VacancyDetailResponse.  # noqa: E501


        :return: The end of this VacancyDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this VacancyDetailResponse.


        :param end: The end of this VacancyDetailResponse.  # noqa: E501
        :type end: datetime
        """

        self._end = end

    @property
    def actual_duration_minutes(self):
        """Gets the actual_duration_minutes of this VacancyDetailResponse.  # noqa: E501


        :return: The actual_duration_minutes of this VacancyDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._actual_duration_minutes

    @actual_duration_minutes.setter
    def actual_duration_minutes(self, actual_duration_minutes):
        """Sets the actual_duration_minutes of this VacancyDetailResponse.


        :param actual_duration_minutes: The actual_duration_minutes of this VacancyDetailResponse.  # noqa: E501
        :type actual_duration_minutes: int
        """

        self._actual_duration_minutes = actual_duration_minutes

    @property
    def accounting_codes(self):
        """Gets the accounting_codes of this VacancyDetailResponse.  # noqa: E501


        :return: The accounting_codes of this VacancyDetailResponse.  # noqa: E501
        :rtype: list[AccountingCodeAllocation]
        """
        return self._accounting_codes

    @accounting_codes.setter
    def accounting_codes(self, accounting_codes):
        """Sets the accounting_codes of this VacancyDetailResponse.


        :param accounting_codes: The accounting_codes of this VacancyDetailResponse.  # noqa: E501
        :type accounting_codes: list[AccountingCodeAllocation]
        """

        self._accounting_codes = accounting_codes

    @property
    def pay_duration(self):
        """Gets the pay_duration of this VacancyDetailResponse.  # noqa: E501


        :return: The pay_duration of this VacancyDetailResponse.  # noqa: E501
        :rtype: float
        """
        return self._pay_duration

    @pay_duration.setter
    def pay_duration(self, pay_duration):
        """Sets the pay_duration of this VacancyDetailResponse.


        :param pay_duration: The pay_duration of this VacancyDetailResponse.  # noqa: E501
        :type pay_duration: float
        """

        self._pay_duration = pay_duration

    @property
    def pay_unit(self):
        """Gets the pay_unit of this VacancyDetailResponse.  # noqa: E501


        :return: The pay_unit of this VacancyDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._pay_unit

    @pay_unit.setter
    def pay_unit(self, pay_unit):
        """Sets the pay_unit of this VacancyDetailResponse.


        :param pay_unit: The pay_unit of this VacancyDetailResponse.  # noqa: E501
        :type pay_unit: str
        """

        self._pay_unit = pay_unit

    @property
    def pay_code(self):
        """Gets the pay_code of this VacancyDetailResponse.  # noqa: E501


        :return: The pay_code of this VacancyDetailResponse.  # noqa: E501
        :rtype: PayCode
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this VacancyDetailResponse.


        :param pay_code: The pay_code of this VacancyDetailResponse.  # noqa: E501
        :type pay_code: PayCode
        """

        self._pay_code = pay_code

    @property
    def reason(self):
        """Gets the reason of this VacancyDetailResponse.  # noqa: E501


        :return: The reason of this VacancyDetailResponse.  # noqa: E501
        :rtype: Reason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this VacancyDetailResponse.


        :param reason: The reason of this VacancyDetailResponse.  # noqa: E501
        :type reason: Reason
        """

        self._reason = reason

    @property
    def verified(self):
        """Gets the verified of this VacancyDetailResponse.  # noqa: E501


        :return: The verified of this VacancyDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this VacancyDetailResponse.


        :param verified: The verified of this VacancyDetailResponse.  # noqa: E501
        :type verified: bool
        """

        self._verified = verified

    @property
    def verified_at_utc(self):
        """Gets the verified_at_utc of this VacancyDetailResponse.  # noqa: E501


        :return: The verified_at_utc of this VacancyDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._verified_at_utc

    @verified_at_utc.setter
    def verified_at_utc(self, verified_at_utc):
        """Sets the verified_at_utc of this VacancyDetailResponse.


        :param verified_at_utc: The verified_at_utc of this VacancyDetailResponse.  # noqa: E501
        :type verified_at_utc: datetime
        """

        self._verified_at_utc = verified_at_utc

    @property
    def verify_comment(self):
        """Gets the verify_comment of this VacancyDetailResponse.  # noqa: E501


        :return: The verify_comment of this VacancyDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._verify_comment

    @verify_comment.setter
    def verify_comment(self, verify_comment):
        """Sets the verify_comment of this VacancyDetailResponse.


        :param verify_comment: The verify_comment of this VacancyDetailResponse.  # noqa: E501
        :type verify_comment: str
        """

        self._verify_comment = verify_comment

    @property
    def notes_to_admin(self):
        """Gets the notes_to_admin of this VacancyDetailResponse.  # noqa: E501


        :return: The notes_to_admin of this VacancyDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_admin

    @notes_to_admin.setter
    def notes_to_admin(self, notes_to_admin):
        """Sets the notes_to_admin of this VacancyDetailResponse.


        :param notes_to_admin: The notes_to_admin of this VacancyDetailResponse.  # noqa: E501
        :type notes_to_admin: str
        """

        self._notes_to_admin = notes_to_admin

    @property
    def created_utc(self):
        """Gets the created_utc of this VacancyDetailResponse.  # noqa: E501


        :return: The created_utc of this VacancyDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_utc

    @created_utc.setter
    def created_utc(self, created_utc):
        """Sets the created_utc of this VacancyDetailResponse.


        :param created_utc: The created_utc of this VacancyDetailResponse.  # noqa: E501
        :type created_utc: datetime
        """

        self._created_utc = created_utc

    @property
    def approval_status(self):
        """Gets the approval_status of this VacancyDetailResponse.  # noqa: E501


        :return: The approval_status of this VacancyDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this VacancyDetailResponse.


        :param approval_status: The approval_status of this VacancyDetailResponse.  # noqa: E501
        :type approval_status: str
        """

        self._approval_status = approval_status

    @property
    def is_deleted(self):
        """Gets the is_deleted of this VacancyDetailResponse.  # noqa: E501


        :return: The is_deleted of this VacancyDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this VacancyDetailResponse.


        :param is_deleted: The is_deleted of this VacancyDetailResponse.  # noqa: E501
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VacancyDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VacancyDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
