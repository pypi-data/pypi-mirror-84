# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class Assembly(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'defined_types': 'list[TypeInfo]',
        'exported_types': 'list[Type]',
        'code_base': 'str',
        'entry_point': 'MethodInfo',
        'full_name': 'str',
        'image_runtime_version': 'str',
        'is_dynamic': 'bool',
        'location': 'str',
        'reflection_only': 'bool',
        'is_collectible': 'bool',
        'is_fully_trusted': 'bool',
        'custom_attributes': 'list[CustomAttributeData]',
        'escaped_code_base': 'str',
        'manifest_module': 'Module',
        'modules': 'list[Module]',
        'global_assembly_cache': 'bool',
        'host_context': 'int',
        'security_rule_set': 'SecurityRuleSet'
    }

    attribute_map = {
        'defined_types': 'definedTypes',
        'exported_types': 'exportedTypes',
        'code_base': 'codeBase',
        'entry_point': 'entryPoint',
        'full_name': 'fullName',
        'image_runtime_version': 'imageRuntimeVersion',
        'is_dynamic': 'isDynamic',
        'location': 'location',
        'reflection_only': 'reflectionOnly',
        'is_collectible': 'isCollectible',
        'is_fully_trusted': 'isFullyTrusted',
        'custom_attributes': 'customAttributes',
        'escaped_code_base': 'escapedCodeBase',
        'manifest_module': 'manifestModule',
        'modules': 'modules',
        'global_assembly_cache': 'globalAssemblyCache',
        'host_context': 'hostContext',
        'security_rule_set': 'securityRuleSet'
    }

    def __init__(self, defined_types=None, exported_types=None, code_base=None, entry_point=None, full_name=None, image_runtime_version=None, is_dynamic=None, location=None, reflection_only=None, is_collectible=None, is_fully_trusted=None, custom_attributes=None, escaped_code_base=None, manifest_module=None, modules=None, global_assembly_cache=None, host_context=None, security_rule_set=None, local_vars_configuration=None):  # noqa: E501
        """Assembly - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._defined_types = None
        self._exported_types = None
        self._code_base = None
        self._entry_point = None
        self._full_name = None
        self._image_runtime_version = None
        self._is_dynamic = None
        self._location = None
        self._reflection_only = None
        self._is_collectible = None
        self._is_fully_trusted = None
        self._custom_attributes = None
        self._escaped_code_base = None
        self._manifest_module = None
        self._modules = None
        self._global_assembly_cache = None
        self._host_context = None
        self._security_rule_set = None
        self.discriminator = None

        self.defined_types = defined_types
        self.exported_types = exported_types
        self.code_base = code_base
        if entry_point is not None:
            self.entry_point = entry_point
        self.full_name = full_name
        self.image_runtime_version = image_runtime_version
        if is_dynamic is not None:
            self.is_dynamic = is_dynamic
        self.location = location
        if reflection_only is not None:
            self.reflection_only = reflection_only
        if is_collectible is not None:
            self.is_collectible = is_collectible
        if is_fully_trusted is not None:
            self.is_fully_trusted = is_fully_trusted
        self.custom_attributes = custom_attributes
        self.escaped_code_base = escaped_code_base
        if manifest_module is not None:
            self.manifest_module = manifest_module
        self.modules = modules
        if global_assembly_cache is not None:
            self.global_assembly_cache = global_assembly_cache
        if host_context is not None:
            self.host_context = host_context
        if security_rule_set is not None:
            self.security_rule_set = security_rule_set

    @property
    def defined_types(self):
        """Gets the defined_types of this Assembly.  # noqa: E501


        :return: The defined_types of this Assembly.  # noqa: E501
        :rtype: list[TypeInfo]
        """
        return self._defined_types

    @defined_types.setter
    def defined_types(self, defined_types):
        """Sets the defined_types of this Assembly.


        :param defined_types: The defined_types of this Assembly.  # noqa: E501
        :type defined_types: list[TypeInfo]
        """

        self._defined_types = defined_types

    @property
    def exported_types(self):
        """Gets the exported_types of this Assembly.  # noqa: E501


        :return: The exported_types of this Assembly.  # noqa: E501
        :rtype: list[Type]
        """
        return self._exported_types

    @exported_types.setter
    def exported_types(self, exported_types):
        """Sets the exported_types of this Assembly.


        :param exported_types: The exported_types of this Assembly.  # noqa: E501
        :type exported_types: list[Type]
        """

        self._exported_types = exported_types

    @property
    def code_base(self):
        """Gets the code_base of this Assembly.  # noqa: E501


        :return: The code_base of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._code_base

    @code_base.setter
    def code_base(self, code_base):
        """Sets the code_base of this Assembly.


        :param code_base: The code_base of this Assembly.  # noqa: E501
        :type code_base: str
        """

        self._code_base = code_base

    @property
    def entry_point(self):
        """Gets the entry_point of this Assembly.  # noqa: E501


        :return: The entry_point of this Assembly.  # noqa: E501
        :rtype: MethodInfo
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this Assembly.


        :param entry_point: The entry_point of this Assembly.  # noqa: E501
        :type entry_point: MethodInfo
        """

        self._entry_point = entry_point

    @property
    def full_name(self):
        """Gets the full_name of this Assembly.  # noqa: E501


        :return: The full_name of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Assembly.


        :param full_name: The full_name of this Assembly.  # noqa: E501
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def image_runtime_version(self):
        """Gets the image_runtime_version of this Assembly.  # noqa: E501


        :return: The image_runtime_version of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._image_runtime_version

    @image_runtime_version.setter
    def image_runtime_version(self, image_runtime_version):
        """Sets the image_runtime_version of this Assembly.


        :param image_runtime_version: The image_runtime_version of this Assembly.  # noqa: E501
        :type image_runtime_version: str
        """

        self._image_runtime_version = image_runtime_version

    @property
    def is_dynamic(self):
        """Gets the is_dynamic of this Assembly.  # noqa: E501


        :return: The is_dynamic of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._is_dynamic

    @is_dynamic.setter
    def is_dynamic(self, is_dynamic):
        """Sets the is_dynamic of this Assembly.


        :param is_dynamic: The is_dynamic of this Assembly.  # noqa: E501
        :type is_dynamic: bool
        """

        self._is_dynamic = is_dynamic

    @property
    def location(self):
        """Gets the location of this Assembly.  # noqa: E501


        :return: The location of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Assembly.


        :param location: The location of this Assembly.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def reflection_only(self):
        """Gets the reflection_only of this Assembly.  # noqa: E501


        :return: The reflection_only of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._reflection_only

    @reflection_only.setter
    def reflection_only(self, reflection_only):
        """Sets the reflection_only of this Assembly.


        :param reflection_only: The reflection_only of this Assembly.  # noqa: E501
        :type reflection_only: bool
        """

        self._reflection_only = reflection_only

    @property
    def is_collectible(self):
        """Gets the is_collectible of this Assembly.  # noqa: E501


        :return: The is_collectible of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._is_collectible

    @is_collectible.setter
    def is_collectible(self, is_collectible):
        """Sets the is_collectible of this Assembly.


        :param is_collectible: The is_collectible of this Assembly.  # noqa: E501
        :type is_collectible: bool
        """

        self._is_collectible = is_collectible

    @property
    def is_fully_trusted(self):
        """Gets the is_fully_trusted of this Assembly.  # noqa: E501


        :return: The is_fully_trusted of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._is_fully_trusted

    @is_fully_trusted.setter
    def is_fully_trusted(self, is_fully_trusted):
        """Sets the is_fully_trusted of this Assembly.


        :param is_fully_trusted: The is_fully_trusted of this Assembly.  # noqa: E501
        :type is_fully_trusted: bool
        """

        self._is_fully_trusted = is_fully_trusted

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Assembly.  # noqa: E501


        :return: The custom_attributes of this Assembly.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Assembly.


        :param custom_attributes: The custom_attributes of this Assembly.  # noqa: E501
        :type custom_attributes: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def escaped_code_base(self):
        """Gets the escaped_code_base of this Assembly.  # noqa: E501


        :return: The escaped_code_base of this Assembly.  # noqa: E501
        :rtype: str
        """
        return self._escaped_code_base

    @escaped_code_base.setter
    def escaped_code_base(self, escaped_code_base):
        """Sets the escaped_code_base of this Assembly.


        :param escaped_code_base: The escaped_code_base of this Assembly.  # noqa: E501
        :type escaped_code_base: str
        """

        self._escaped_code_base = escaped_code_base

    @property
    def manifest_module(self):
        """Gets the manifest_module of this Assembly.  # noqa: E501


        :return: The manifest_module of this Assembly.  # noqa: E501
        :rtype: Module
        """
        return self._manifest_module

    @manifest_module.setter
    def manifest_module(self, manifest_module):
        """Sets the manifest_module of this Assembly.


        :param manifest_module: The manifest_module of this Assembly.  # noqa: E501
        :type manifest_module: Module
        """

        self._manifest_module = manifest_module

    @property
    def modules(self):
        """Gets the modules of this Assembly.  # noqa: E501


        :return: The modules of this Assembly.  # noqa: E501
        :rtype: list[Module]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this Assembly.


        :param modules: The modules of this Assembly.  # noqa: E501
        :type modules: list[Module]
        """

        self._modules = modules

    @property
    def global_assembly_cache(self):
        """Gets the global_assembly_cache of this Assembly.  # noqa: E501


        :return: The global_assembly_cache of this Assembly.  # noqa: E501
        :rtype: bool
        """
        return self._global_assembly_cache

    @global_assembly_cache.setter
    def global_assembly_cache(self, global_assembly_cache):
        """Sets the global_assembly_cache of this Assembly.


        :param global_assembly_cache: The global_assembly_cache of this Assembly.  # noqa: E501
        :type global_assembly_cache: bool
        """

        self._global_assembly_cache = global_assembly_cache

    @property
    def host_context(self):
        """Gets the host_context of this Assembly.  # noqa: E501


        :return: The host_context of this Assembly.  # noqa: E501
        :rtype: int
        """
        return self._host_context

    @host_context.setter
    def host_context(self, host_context):
        """Sets the host_context of this Assembly.


        :param host_context: The host_context of this Assembly.  # noqa: E501
        :type host_context: int
        """

        self._host_context = host_context

    @property
    def security_rule_set(self):
        """Gets the security_rule_set of this Assembly.  # noqa: E501


        :return: The security_rule_set of this Assembly.  # noqa: E501
        :rtype: SecurityRuleSet
        """
        return self._security_rule_set

    @security_rule_set.setter
    def security_rule_set(self, security_rule_set):
        """Sets the security_rule_set of this Assembly.


        :param security_rule_set: The security_rule_set of this Assembly.  # noqa: E501
        :type security_rule_set: SecurityRuleSet
        """

        self._security_rule_set = security_rule_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assembly):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Assembly):
            return True

        return self.to_dict() != other.to_dict()
