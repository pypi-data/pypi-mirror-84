# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class MemberInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'member_type': 'MemberTypes',
        'declaring_type': 'Type',
        'reflected_type': 'Type',
        'name': 'str',
        'module': 'Module',
        'custom_attributes': 'list[CustomAttributeData]',
        'is_collectible': 'bool',
        'metadata_token': 'int'
    }

    attribute_map = {
        'member_type': 'memberType',
        'declaring_type': 'declaringType',
        'reflected_type': 'reflectedType',
        'name': 'name',
        'module': 'module',
        'custom_attributes': 'customAttributes',
        'is_collectible': 'isCollectible',
        'metadata_token': 'metadataToken'
    }

    def __init__(self, member_type=None, declaring_type=None, reflected_type=None, name=None, module=None, custom_attributes=None, is_collectible=None, metadata_token=None, local_vars_configuration=None):  # noqa: E501
        """MemberInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._member_type = None
        self._declaring_type = None
        self._reflected_type = None
        self._name = None
        self._module = None
        self._custom_attributes = None
        self._is_collectible = None
        self._metadata_token = None
        self.discriminator = None

        if member_type is not None:
            self.member_type = member_type
        if declaring_type is not None:
            self.declaring_type = declaring_type
        if reflected_type is not None:
            self.reflected_type = reflected_type
        self.name = name
        if module is not None:
            self.module = module
        self.custom_attributes = custom_attributes
        if is_collectible is not None:
            self.is_collectible = is_collectible
        if metadata_token is not None:
            self.metadata_token = metadata_token

    @property
    def member_type(self):
        """Gets the member_type of this MemberInfo.  # noqa: E501


        :return: The member_type of this MemberInfo.  # noqa: E501
        :rtype: MemberTypes
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this MemberInfo.


        :param member_type: The member_type of this MemberInfo.  # noqa: E501
        :type member_type: MemberTypes
        """

        self._member_type = member_type

    @property
    def declaring_type(self):
        """Gets the declaring_type of this MemberInfo.  # noqa: E501


        :return: The declaring_type of this MemberInfo.  # noqa: E501
        :rtype: Type
        """
        return self._declaring_type

    @declaring_type.setter
    def declaring_type(self, declaring_type):
        """Sets the declaring_type of this MemberInfo.


        :param declaring_type: The declaring_type of this MemberInfo.  # noqa: E501
        :type declaring_type: Type
        """

        self._declaring_type = declaring_type

    @property
    def reflected_type(self):
        """Gets the reflected_type of this MemberInfo.  # noqa: E501


        :return: The reflected_type of this MemberInfo.  # noqa: E501
        :rtype: Type
        """
        return self._reflected_type

    @reflected_type.setter
    def reflected_type(self, reflected_type):
        """Sets the reflected_type of this MemberInfo.


        :param reflected_type: The reflected_type of this MemberInfo.  # noqa: E501
        :type reflected_type: Type
        """

        self._reflected_type = reflected_type

    @property
    def name(self):
        """Gets the name of this MemberInfo.  # noqa: E501


        :return: The name of this MemberInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberInfo.


        :param name: The name of this MemberInfo.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def module(self):
        """Gets the module of this MemberInfo.  # noqa: E501


        :return: The module of this MemberInfo.  # noqa: E501
        :rtype: Module
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this MemberInfo.


        :param module: The module of this MemberInfo.  # noqa: E501
        :type module: Module
        """

        self._module = module

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this MemberInfo.  # noqa: E501


        :return: The custom_attributes of this MemberInfo.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this MemberInfo.


        :param custom_attributes: The custom_attributes of this MemberInfo.  # noqa: E501
        :type custom_attributes: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def is_collectible(self):
        """Gets the is_collectible of this MemberInfo.  # noqa: E501


        :return: The is_collectible of this MemberInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_collectible

    @is_collectible.setter
    def is_collectible(self, is_collectible):
        """Sets the is_collectible of this MemberInfo.


        :param is_collectible: The is_collectible of this MemberInfo.  # noqa: E501
        :type is_collectible: bool
        """

        self._is_collectible = is_collectible

    @property
    def metadata_token(self):
        """Gets the metadata_token of this MemberInfo.  # noqa: E501


        :return: The metadata_token of this MemberInfo.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this MemberInfo.


        :param metadata_token: The metadata_token of this MemberInfo.  # noqa: E501
        :type metadata_token: int
        """

        self._metadata_token = metadata_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemberInfo):
            return True

        return self.to_dict() != other.to_dict()
