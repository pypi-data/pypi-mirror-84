# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class TimeOffBalanceDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'absence_reason': 'Int32Locator',
        'absence_reason_id': 'int',
        'absence_reason_category': 'Int32Locator',
        'absence_reason_category_id': 'int',
        'school_year': 'Int32Locator',
        'school_year_id': 'int',
        'as_of': 'datetime',
        'absence_reason_tracking_type_id': 'AbsenceReasonTrackingTypeEnum',
        'balance': 'float',
        'skip_concurrency_check': 'bool',
        'provided_properties': 'list[PropertyInfo]'
    }

    attribute_map = {
        'absence_reason': 'absenceReason',
        'absence_reason_id': 'absenceReasonId',
        'absence_reason_category': 'absenceReasonCategory',
        'absence_reason_category_id': 'absenceReasonCategoryId',
        'school_year': 'schoolYear',
        'school_year_id': 'schoolYearId',
        'as_of': 'asOf',
        'absence_reason_tracking_type_id': 'absenceReasonTrackingTypeId',
        'balance': 'balance',
        'skip_concurrency_check': 'skipConcurrencyCheck',
        'provided_properties': 'providedProperties'
    }

    def __init__(self, absence_reason=None, absence_reason_id=None, absence_reason_category=None, absence_reason_category_id=None, school_year=None, school_year_id=None, as_of=None, absence_reason_tracking_type_id=None, balance=None, skip_concurrency_check=None, provided_properties=None, local_vars_configuration=None):  # noqa: E501
        """TimeOffBalanceDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._absence_reason = None
        self._absence_reason_id = None
        self._absence_reason_category = None
        self._absence_reason_category_id = None
        self._school_year = None
        self._school_year_id = None
        self._as_of = None
        self._absence_reason_tracking_type_id = None
        self._balance = None
        self._skip_concurrency_check = None
        self._provided_properties = None
        self.discriminator = None

        if absence_reason is not None:
            self.absence_reason = absence_reason
        self.absence_reason_id = absence_reason_id
        if absence_reason_category is not None:
            self.absence_reason_category = absence_reason_category
        self.absence_reason_category_id = absence_reason_category_id
        if school_year is not None:
            self.school_year = school_year
        if school_year_id is not None:
            self.school_year_id = school_year_id
        if as_of is not None:
            self.as_of = as_of
        if absence_reason_tracking_type_id is not None:
            self.absence_reason_tracking_type_id = absence_reason_tracking_type_id
        if balance is not None:
            self.balance = balance
        if skip_concurrency_check is not None:
            self.skip_concurrency_check = skip_concurrency_check
        self.provided_properties = provided_properties

    @property
    def absence_reason(self):
        """Gets the absence_reason of this TimeOffBalanceDto.  # noqa: E501


        :return: The absence_reason of this TimeOffBalanceDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._absence_reason

    @absence_reason.setter
    def absence_reason(self, absence_reason):
        """Sets the absence_reason of this TimeOffBalanceDto.


        :param absence_reason: The absence_reason of this TimeOffBalanceDto.  # noqa: E501
        :type absence_reason: Int32Locator
        """

        self._absence_reason = absence_reason

    @property
    def absence_reason_id(self):
        """Gets the absence_reason_id of this TimeOffBalanceDto.  # noqa: E501


        :return: The absence_reason_id of this TimeOffBalanceDto.  # noqa: E501
        :rtype: int
        """
        return self._absence_reason_id

    @absence_reason_id.setter
    def absence_reason_id(self, absence_reason_id):
        """Sets the absence_reason_id of this TimeOffBalanceDto.


        :param absence_reason_id: The absence_reason_id of this TimeOffBalanceDto.  # noqa: E501
        :type absence_reason_id: int
        """

        self._absence_reason_id = absence_reason_id

    @property
    def absence_reason_category(self):
        """Gets the absence_reason_category of this TimeOffBalanceDto.  # noqa: E501


        :return: The absence_reason_category of this TimeOffBalanceDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._absence_reason_category

    @absence_reason_category.setter
    def absence_reason_category(self, absence_reason_category):
        """Sets the absence_reason_category of this TimeOffBalanceDto.


        :param absence_reason_category: The absence_reason_category of this TimeOffBalanceDto.  # noqa: E501
        :type absence_reason_category: Int32Locator
        """

        self._absence_reason_category = absence_reason_category

    @property
    def absence_reason_category_id(self):
        """Gets the absence_reason_category_id of this TimeOffBalanceDto.  # noqa: E501


        :return: The absence_reason_category_id of this TimeOffBalanceDto.  # noqa: E501
        :rtype: int
        """
        return self._absence_reason_category_id

    @absence_reason_category_id.setter
    def absence_reason_category_id(self, absence_reason_category_id):
        """Sets the absence_reason_category_id of this TimeOffBalanceDto.


        :param absence_reason_category_id: The absence_reason_category_id of this TimeOffBalanceDto.  # noqa: E501
        :type absence_reason_category_id: int
        """

        self._absence_reason_category_id = absence_reason_category_id

    @property
    def school_year(self):
        """Gets the school_year of this TimeOffBalanceDto.  # noqa: E501


        :return: The school_year of this TimeOffBalanceDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this TimeOffBalanceDto.


        :param school_year: The school_year of this TimeOffBalanceDto.  # noqa: E501
        :type school_year: Int32Locator
        """

        self._school_year = school_year

    @property
    def school_year_id(self):
        """Gets the school_year_id of this TimeOffBalanceDto.  # noqa: E501


        :return: The school_year_id of this TimeOffBalanceDto.  # noqa: E501
        :rtype: int
        """
        return self._school_year_id

    @school_year_id.setter
    def school_year_id(self, school_year_id):
        """Sets the school_year_id of this TimeOffBalanceDto.


        :param school_year_id: The school_year_id of this TimeOffBalanceDto.  # noqa: E501
        :type school_year_id: int
        """

        self._school_year_id = school_year_id

    @property
    def as_of(self):
        """Gets the as_of of this TimeOffBalanceDto.  # noqa: E501


        :return: The as_of of this TimeOffBalanceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this TimeOffBalanceDto.


        :param as_of: The as_of of this TimeOffBalanceDto.  # noqa: E501
        :type as_of: datetime
        """

        self._as_of = as_of

    @property
    def absence_reason_tracking_type_id(self):
        """Gets the absence_reason_tracking_type_id of this TimeOffBalanceDto.  # noqa: E501


        :return: The absence_reason_tracking_type_id of this TimeOffBalanceDto.  # noqa: E501
        :rtype: AbsenceReasonTrackingTypeEnum
        """
        return self._absence_reason_tracking_type_id

    @absence_reason_tracking_type_id.setter
    def absence_reason_tracking_type_id(self, absence_reason_tracking_type_id):
        """Sets the absence_reason_tracking_type_id of this TimeOffBalanceDto.


        :param absence_reason_tracking_type_id: The absence_reason_tracking_type_id of this TimeOffBalanceDto.  # noqa: E501
        :type absence_reason_tracking_type_id: AbsenceReasonTrackingTypeEnum
        """

        self._absence_reason_tracking_type_id = absence_reason_tracking_type_id

    @property
    def balance(self):
        """Gets the balance of this TimeOffBalanceDto.  # noqa: E501


        :return: The balance of this TimeOffBalanceDto.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TimeOffBalanceDto.


        :param balance: The balance of this TimeOffBalanceDto.  # noqa: E501
        :type balance: float
        """

        self._balance = balance

    @property
    def skip_concurrency_check(self):
        """Gets the skip_concurrency_check of this TimeOffBalanceDto.  # noqa: E501


        :return: The skip_concurrency_check of this TimeOffBalanceDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_concurrency_check

    @skip_concurrency_check.setter
    def skip_concurrency_check(self, skip_concurrency_check):
        """Sets the skip_concurrency_check of this TimeOffBalanceDto.


        :param skip_concurrency_check: The skip_concurrency_check of this TimeOffBalanceDto.  # noqa: E501
        :type skip_concurrency_check: bool
        """

        self._skip_concurrency_check = skip_concurrency_check

    @property
    def provided_properties(self):
        """Gets the provided_properties of this TimeOffBalanceDto.  # noqa: E501


        :return: The provided_properties of this TimeOffBalanceDto.  # noqa: E501
        :rtype: list[PropertyInfo]
        """
        return self._provided_properties

    @provided_properties.setter
    def provided_properties(self, provided_properties):
        """Sets the provided_properties of this TimeOffBalanceDto.


        :param provided_properties: The provided_properties of this TimeOffBalanceDto.  # noqa: E501
        :type provided_properties: list[PropertyInfo]
        """

        self._provided_properties = provided_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeOffBalanceDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeOffBalanceDto):
            return True

        return self.to_dict() != other.to_dict()
