# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AccessControlDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_locations': 'bool',
        'all_position_types': 'bool',
        'locations': 'list[Int32Locator]',
        'location_groups': 'list[Int32Locator]',
        'position_types': 'list[Int32Locator]',
        'location_ids': 'list[int]',
        'location_group_ids': 'list[int]',
        'position_type_ids': 'list[int]',
        'skip_concurrency_check': 'bool',
        'provided_properties': 'list[PropertyInfo]'
    }

    attribute_map = {
        'all_locations': 'allLocations',
        'all_position_types': 'allPositionTypes',
        'locations': 'locations',
        'location_groups': 'locationGroups',
        'position_types': 'positionTypes',
        'location_ids': 'locationIds',
        'location_group_ids': 'locationGroupIds',
        'position_type_ids': 'positionTypeIds',
        'skip_concurrency_check': 'skipConcurrencyCheck',
        'provided_properties': 'providedProperties'
    }

    def __init__(self, all_locations=None, all_position_types=None, locations=None, location_groups=None, position_types=None, location_ids=None, location_group_ids=None, position_type_ids=None, skip_concurrency_check=None, provided_properties=None, local_vars_configuration=None):  # noqa: E501
        """AccessControlDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_locations = None
        self._all_position_types = None
        self._locations = None
        self._location_groups = None
        self._position_types = None
        self._location_ids = None
        self._location_group_ids = None
        self._position_type_ids = None
        self._skip_concurrency_check = None
        self._provided_properties = None
        self.discriminator = None

        if all_locations is not None:
            self.all_locations = all_locations
        if all_position_types is not None:
            self.all_position_types = all_position_types
        self.locations = locations
        self.location_groups = location_groups
        self.position_types = position_types
        self.location_ids = location_ids
        self.location_group_ids = location_group_ids
        self.position_type_ids = position_type_ids
        if skip_concurrency_check is not None:
            self.skip_concurrency_check = skip_concurrency_check
        self.provided_properties = provided_properties

    @property
    def all_locations(self):
        """Gets the all_locations of this AccessControlDto.  # noqa: E501


        :return: The all_locations of this AccessControlDto.  # noqa: E501
        :rtype: bool
        """
        return self._all_locations

    @all_locations.setter
    def all_locations(self, all_locations):
        """Sets the all_locations of this AccessControlDto.


        :param all_locations: The all_locations of this AccessControlDto.  # noqa: E501
        :type all_locations: bool
        """

        self._all_locations = all_locations

    @property
    def all_position_types(self):
        """Gets the all_position_types of this AccessControlDto.  # noqa: E501


        :return: The all_position_types of this AccessControlDto.  # noqa: E501
        :rtype: bool
        """
        return self._all_position_types

    @all_position_types.setter
    def all_position_types(self, all_position_types):
        """Sets the all_position_types of this AccessControlDto.


        :param all_position_types: The all_position_types of this AccessControlDto.  # noqa: E501
        :type all_position_types: bool
        """

        self._all_position_types = all_position_types

    @property
    def locations(self):
        """Gets the locations of this AccessControlDto.  # noqa: E501


        :return: The locations of this AccessControlDto.  # noqa: E501
        :rtype: list[Int32Locator]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this AccessControlDto.


        :param locations: The locations of this AccessControlDto.  # noqa: E501
        :type locations: list[Int32Locator]
        """

        self._locations = locations

    @property
    def location_groups(self):
        """Gets the location_groups of this AccessControlDto.  # noqa: E501


        :return: The location_groups of this AccessControlDto.  # noqa: E501
        :rtype: list[Int32Locator]
        """
        return self._location_groups

    @location_groups.setter
    def location_groups(self, location_groups):
        """Sets the location_groups of this AccessControlDto.


        :param location_groups: The location_groups of this AccessControlDto.  # noqa: E501
        :type location_groups: list[Int32Locator]
        """

        self._location_groups = location_groups

    @property
    def position_types(self):
        """Gets the position_types of this AccessControlDto.  # noqa: E501


        :return: The position_types of this AccessControlDto.  # noqa: E501
        :rtype: list[Int32Locator]
        """
        return self._position_types

    @position_types.setter
    def position_types(self, position_types):
        """Sets the position_types of this AccessControlDto.


        :param position_types: The position_types of this AccessControlDto.  # noqa: E501
        :type position_types: list[Int32Locator]
        """

        self._position_types = position_types

    @property
    def location_ids(self):
        """Gets the location_ids of this AccessControlDto.  # noqa: E501


        :return: The location_ids of this AccessControlDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this AccessControlDto.


        :param location_ids: The location_ids of this AccessControlDto.  # noqa: E501
        :type location_ids: list[int]
        """

        self._location_ids = location_ids

    @property
    def location_group_ids(self):
        """Gets the location_group_ids of this AccessControlDto.  # noqa: E501


        :return: The location_group_ids of this AccessControlDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_group_ids

    @location_group_ids.setter
    def location_group_ids(self, location_group_ids):
        """Sets the location_group_ids of this AccessControlDto.


        :param location_group_ids: The location_group_ids of this AccessControlDto.  # noqa: E501
        :type location_group_ids: list[int]
        """

        self._location_group_ids = location_group_ids

    @property
    def position_type_ids(self):
        """Gets the position_type_ids of this AccessControlDto.  # noqa: E501


        :return: The position_type_ids of this AccessControlDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._position_type_ids

    @position_type_ids.setter
    def position_type_ids(self, position_type_ids):
        """Sets the position_type_ids of this AccessControlDto.


        :param position_type_ids: The position_type_ids of this AccessControlDto.  # noqa: E501
        :type position_type_ids: list[int]
        """

        self._position_type_ids = position_type_ids

    @property
    def skip_concurrency_check(self):
        """Gets the skip_concurrency_check of this AccessControlDto.  # noqa: E501


        :return: The skip_concurrency_check of this AccessControlDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_concurrency_check

    @skip_concurrency_check.setter
    def skip_concurrency_check(self, skip_concurrency_check):
        """Sets the skip_concurrency_check of this AccessControlDto.


        :param skip_concurrency_check: The skip_concurrency_check of this AccessControlDto.  # noqa: E501
        :type skip_concurrency_check: bool
        """

        self._skip_concurrency_check = skip_concurrency_check

    @property
    def provided_properties(self):
        """Gets the provided_properties of this AccessControlDto.  # noqa: E501


        :return: The provided_properties of this AccessControlDto.  # noqa: E501
        :rtype: list[PropertyInfo]
        """
        return self._provided_properties

    @provided_properties.setter
    def provided_properties(self, provided_properties):
        """Sets the provided_properties of this AccessControlDto.


        :param provided_properties: The provided_properties of this AccessControlDto.  # noqa: E501
        :type provided_properties: list[PropertyInfo]
        """

        self._provided_properties = provided_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControlDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessControlDto):
            return True

        return self.to_dict() != other.to_dict()
