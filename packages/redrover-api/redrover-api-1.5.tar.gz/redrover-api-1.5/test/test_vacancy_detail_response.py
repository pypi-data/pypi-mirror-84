# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import redrover_api
from redrover_api.models.vacancy_detail_response import VacancyDetailResponse  # noqa: E501
from redrover_api.rest import ApiException

class TestVacancyDetailResponse(unittest.TestCase):
    """VacancyDetailResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test VacancyDetailResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = redrover_api.models.vacancy_detail_response.VacancyDetailResponse()  # noqa: E501
        if include_optional :
            return VacancyDetailResponse(
                vacancy_id = 56, 
                vacancy_detail_id = 56, 
                assignment_id = 56, 
                absence_detail = redrover_api.models.simple_absence_detail.SimpleAbsenceDetail(
                    absence_id = 56, 
                    absence_detail_id = 56, 
                    employee = redrover_api.models.simple_person.SimplePerson(
                        id = 56, 
                        external_id = '0', 
                        first_name = '0', 
                        middle_name = '0', 
                        last_name = '0', 
                        source_organization_id = 56, ), 
                    start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    reasons = [
                        redrover_api.models.reason.Reason(
                            vacancy_reason_id = 56, 
                            absence_reason_id = 56, 
                            external_id = '0', 
                            name = '0', )
                        ], ), 
                position = redrover_api.models.simple_position.SimplePosition(
                    id = 56, 
                    title = '0', 
                    hours_per_full_work_day = 1.337, ), 
                substitute = redrover_api.models.simple_person.SimplePerson(
                    id = 56, 
                    external_id = '0', 
                    first_name = '0', 
                    middle_name = '0', 
                    last_name = '0', 
                    source_organization_id = 56, ), 
                location = redrover_api.models.simple_location.SimpleLocation(
                    id = 56, 
                    external_id = '0', 
                    name = '0', ), 
                start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                actual_duration_minutes = 56, 
                accounting_codes = [
                    redrover_api.models.accounting_code_allocation.AccountingCodeAllocation(
                        accounting_code = redrover_api.models.accounting_code.AccountingCode(
                            id = 56, 
                            code = '0', 
                            name = '0', ), 
                        allocation = 1.337, )
                    ], 
                pay_duration = 1.337, 
                pay_unit = '0', 
                pay_code = redrover_api.models.pay_code.PayCode(
                    id = 56, 
                    code = '0', 
                    name = '0', ), 
                reason = redrover_api.models.reason.Reason(
                    vacancy_reason_id = 56, 
                    absence_reason_id = 56, 
                    external_id = '0', 
                    name = '0', ), 
                verified = True, 
                verified_at_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                verify_comment = '0', 
                notes_to_admin = '0', 
                created_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                approval_status = '0', 
                is_deleted = True
            )
        else :
            return VacancyDetailResponse(
        )

    def testVacancyDetailResponse(self):
        """Test VacancyDetailResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
