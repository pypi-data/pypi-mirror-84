# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class Int32Locator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'skip_concurrency_check': 'bool',
        'provided_properties': 'list[PropertyInfo]'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'skip_concurrency_check': 'skipConcurrencyCheck',
        'provided_properties': 'providedProperties'
    }

    def __init__(self, id=None, external_id=None, skip_concurrency_check=None, provided_properties=None, local_vars_configuration=None):  # noqa: E501
        """Int32Locator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._skip_concurrency_check = None
        self._provided_properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        if skip_concurrency_check is not None:
            self.skip_concurrency_check = skip_concurrency_check
        self.provided_properties = provided_properties

    @property
    def id(self):
        """Gets the id of this Int32Locator.  # noqa: E501


        :return: The id of this Int32Locator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Int32Locator.


        :param id: The id of this Int32Locator.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this Int32Locator.  # noqa: E501


        :return: The external_id of this Int32Locator.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Int32Locator.


        :param external_id: The external_id of this Int32Locator.  # noqa: E501
        :type external_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 50):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `50`")  # noqa: E501

        self._external_id = external_id

    @property
    def skip_concurrency_check(self):
        """Gets the skip_concurrency_check of this Int32Locator.  # noqa: E501


        :return: The skip_concurrency_check of this Int32Locator.  # noqa: E501
        :rtype: bool
        """
        return self._skip_concurrency_check

    @skip_concurrency_check.setter
    def skip_concurrency_check(self, skip_concurrency_check):
        """Sets the skip_concurrency_check of this Int32Locator.


        :param skip_concurrency_check: The skip_concurrency_check of this Int32Locator.  # noqa: E501
        :type skip_concurrency_check: bool
        """

        self._skip_concurrency_check = skip_concurrency_check

    @property
    def provided_properties(self):
        """Gets the provided_properties of this Int32Locator.  # noqa: E501


        :return: The provided_properties of this Int32Locator.  # noqa: E501
        :rtype: list[PropertyInfo]
        """
        return self._provided_properties

    @provided_properties.setter
    def provided_properties(self, provided_properties):
        """Sets the provided_properties of this Int32Locator.


        :param provided_properties: The provided_properties of this Int32Locator.  # noqa: E501
        :type provided_properties: list[PropertyInfo]
        """

        self._provided_properties = provided_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Int32Locator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Int32Locator):
            return True

        return self.to_dict() != other.to_dict()
