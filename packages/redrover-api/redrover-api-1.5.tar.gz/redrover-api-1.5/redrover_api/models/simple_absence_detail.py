# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class SimpleAbsenceDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'absence_id': 'int',
        'absence_detail_id': 'int',
        'employee': 'SimplePerson',
        'start': 'datetime',
        'end': 'datetime',
        'reasons': 'list[Reason]'
    }

    attribute_map = {
        'absence_id': 'absenceId',
        'absence_detail_id': 'absenceDetailId',
        'employee': 'employee',
        'start': 'start',
        'end': 'end',
        'reasons': 'reasons'
    }

    def __init__(self, absence_id=None, absence_detail_id=None, employee=None, start=None, end=None, reasons=None, local_vars_configuration=None):  # noqa: E501
        """SimpleAbsenceDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._absence_id = None
        self._absence_detail_id = None
        self._employee = None
        self._start = None
        self._end = None
        self._reasons = None
        self.discriminator = None

        if absence_id is not None:
            self.absence_id = absence_id
        if absence_detail_id is not None:
            self.absence_detail_id = absence_detail_id
        if employee is not None:
            self.employee = employee
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        self.reasons = reasons

    @property
    def absence_id(self):
        """Gets the absence_id of this SimpleAbsenceDetail.  # noqa: E501


        :return: The absence_id of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: int
        """
        return self._absence_id

    @absence_id.setter
    def absence_id(self, absence_id):
        """Sets the absence_id of this SimpleAbsenceDetail.


        :param absence_id: The absence_id of this SimpleAbsenceDetail.  # noqa: E501
        :type absence_id: int
        """

        self._absence_id = absence_id

    @property
    def absence_detail_id(self):
        """Gets the absence_detail_id of this SimpleAbsenceDetail.  # noqa: E501


        :return: The absence_detail_id of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: int
        """
        return self._absence_detail_id

    @absence_detail_id.setter
    def absence_detail_id(self, absence_detail_id):
        """Sets the absence_detail_id of this SimpleAbsenceDetail.


        :param absence_detail_id: The absence_detail_id of this SimpleAbsenceDetail.  # noqa: E501
        :type absence_detail_id: int
        """

        self._absence_detail_id = absence_detail_id

    @property
    def employee(self):
        """Gets the employee of this SimpleAbsenceDetail.  # noqa: E501


        :return: The employee of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: SimplePerson
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this SimpleAbsenceDetail.


        :param employee: The employee of this SimpleAbsenceDetail.  # noqa: E501
        :type employee: SimplePerson
        """

        self._employee = employee

    @property
    def start(self):
        """Gets the start of this SimpleAbsenceDetail.  # noqa: E501


        :return: The start of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SimpleAbsenceDetail.


        :param start: The start of this SimpleAbsenceDetail.  # noqa: E501
        :type start: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this SimpleAbsenceDetail.  # noqa: E501


        :return: The end of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SimpleAbsenceDetail.


        :param end: The end of this SimpleAbsenceDetail.  # noqa: E501
        :type end: datetime
        """

        self._end = end

    @property
    def reasons(self):
        """Gets the reasons of this SimpleAbsenceDetail.  # noqa: E501


        :return: The reasons of this SimpleAbsenceDetail.  # noqa: E501
        :rtype: list[Reason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this SimpleAbsenceDetail.


        :param reasons: The reasons of this SimpleAbsenceDetail.  # noqa: E501
        :type reasons: list[Reason]
        """

        self._reasons = reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleAbsenceDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleAbsenceDetail):
            return True

        return self.to_dict() != other.to_dict()
