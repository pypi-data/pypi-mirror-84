# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class OrganizationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'org_id': 'int',
        'name': 'str',
        'api_key': 'str',
        'granted_at_utc': 'datetime'
    }

    attribute_map = {
        'org_id': 'orgId',
        'name': 'name',
        'api_key': 'apiKey',
        'granted_at_utc': 'grantedAtUtc'
    }

    def __init__(self, org_id=None, name=None, api_key=None, granted_at_utc=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._org_id = None
        self._name = None
        self._api_key = None
        self._granted_at_utc = None
        self.discriminator = None

        if org_id is not None:
            self.org_id = org_id
        self.name = name
        self.api_key = api_key
        if granted_at_utc is not None:
            self.granted_at_utc = granted_at_utc

    @property
    def org_id(self):
        """Gets the org_id of this OrganizationResponse.  # noqa: E501


        :return: The org_id of this OrganizationResponse.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrganizationResponse.


        :param org_id: The org_id of this OrganizationResponse.  # noqa: E501
        :type org_id: int
        """

        self._org_id = org_id

    @property
    def name(self):
        """Gets the name of this OrganizationResponse.  # noqa: E501


        :return: The name of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationResponse.


        :param name: The name of this OrganizationResponse.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def api_key(self):
        """Gets the api_key of this OrganizationResponse.  # noqa: E501


        :return: The api_key of this OrganizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this OrganizationResponse.


        :param api_key: The api_key of this OrganizationResponse.  # noqa: E501
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def granted_at_utc(self):
        """Gets the granted_at_utc of this OrganizationResponse.  # noqa: E501


        :return: The granted_at_utc of this OrganizationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._granted_at_utc

    @granted_at_utc.setter
    def granted_at_utc(self, granted_at_utc):
        """Sets the granted_at_utc of this OrganizationResponse.


        :param granted_at_utc: The granted_at_utc of this OrganizationResponse.  # noqa: E501
        :type granted_at_utc: datetime
        """

        self._granted_at_utc = granted_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationResponse):
            return True

        return self.to_dict() != other.to_dict()
