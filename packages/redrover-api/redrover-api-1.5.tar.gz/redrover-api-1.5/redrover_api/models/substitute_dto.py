# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class SubstituteDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'role': 'OrgUserRoleFlag',
        'related_orgs': 'list[SubstituteRelatedOrgDto]',
        'attributes': 'list[SubstituteAttributeDto]',
        'pay_code_id': 'int',
        'pay_code': 'Int32Locator',
        'org_id': 'int',
        'row_version': 'int',
        'id': 'int',
        'secondary_identifier': 'str',
        'external_id': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'skip_mail_gun_validation': 'bool',
        'date_of_birth': 'datetime',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'postal_code': 'str',
        'state': 'str',
        'state_id': 'StateEnum',
        'country': 'str',
        'country_id': 'CountryEnum',
        'phone_number': 'str',
        'active': 'bool',
        'permission_set': 'Int32Locator',
        'permission_set_id': 'int',
        'remove_future_assignments_on_inactivate': 'bool',
        'related_org_ids': 'list[int]',
        'invite_immediately': 'bool',
        'skip_concurrency_check': 'bool',
        'provided_properties': 'list[PropertyInfo]'
    }

    attribute_map = {
        'role': 'role',
        'related_orgs': 'relatedOrgs',
        'attributes': 'attributes',
        'pay_code_id': 'payCodeId',
        'pay_code': 'payCode',
        'org_id': 'orgId',
        'row_version': 'rowVersion',
        'id': 'id',
        'secondary_identifier': 'secondaryIdentifier',
        'external_id': 'externalId',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'email': 'email',
        'skip_mail_gun_validation': 'skipMailGunValidation',
        'date_of_birth': 'dateOfBirth',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'postal_code': 'postalCode',
        'state': 'state',
        'state_id': 'stateId',
        'country': 'country',
        'country_id': 'countryId',
        'phone_number': 'phoneNumber',
        'active': 'active',
        'permission_set': 'permissionSet',
        'permission_set_id': 'permissionSetId',
        'remove_future_assignments_on_inactivate': 'removeFutureAssignmentsOnInactivate',
        'related_org_ids': 'relatedOrgIds',
        'invite_immediately': 'inviteImmediately',
        'skip_concurrency_check': 'skipConcurrencyCheck',
        'provided_properties': 'providedProperties'
    }

    def __init__(self, role=None, related_orgs=None, attributes=None, pay_code_id=None, pay_code=None, org_id=None, row_version=None, id=None, secondary_identifier=None, external_id=None, first_name=None, middle_name=None, last_name=None, email=None, skip_mail_gun_validation=None, date_of_birth=None, address1=None, address2=None, city=None, postal_code=None, state=None, state_id=None, country=None, country_id=None, phone_number=None, active=None, permission_set=None, permission_set_id=None, remove_future_assignments_on_inactivate=None, related_org_ids=None, invite_immediately=None, skip_concurrency_check=None, provided_properties=None, local_vars_configuration=None):  # noqa: E501
        """SubstituteDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._role = None
        self._related_orgs = None
        self._attributes = None
        self._pay_code_id = None
        self._pay_code = None
        self._org_id = None
        self._row_version = None
        self._id = None
        self._secondary_identifier = None
        self._external_id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email = None
        self._skip_mail_gun_validation = None
        self._date_of_birth = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._postal_code = None
        self._state = None
        self._state_id = None
        self._country = None
        self._country_id = None
        self._phone_number = None
        self._active = None
        self._permission_set = None
        self._permission_set_id = None
        self._remove_future_assignments_on_inactivate = None
        self._related_org_ids = None
        self._invite_immediately = None
        self._skip_concurrency_check = None
        self._provided_properties = None
        self.discriminator = None

        if role is not None:
            self.role = role
        self.related_orgs = related_orgs
        self.attributes = attributes
        self.pay_code_id = pay_code_id
        if pay_code is not None:
            self.pay_code = pay_code
        if org_id is not None:
            self.org_id = org_id
        if row_version is not None:
            self.row_version = row_version
        if id is not None:
            self.id = id
        self.secondary_identifier = secondary_identifier
        self.external_id = external_id
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.email = email
        if skip_mail_gun_validation is not None:
            self.skip_mail_gun_validation = skip_mail_gun_validation
        self.date_of_birth = date_of_birth
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.postal_code = postal_code
        self.state = state
        if state_id is not None:
            self.state_id = state_id
        self.country = country
        if country_id is not None:
            self.country_id = country_id
        self.phone_number = phone_number
        if active is not None:
            self.active = active
        if permission_set is not None:
            self.permission_set = permission_set
        if permission_set_id is not None:
            self.permission_set_id = permission_set_id
        if remove_future_assignments_on_inactivate is not None:
            self.remove_future_assignments_on_inactivate = remove_future_assignments_on_inactivate
        self.related_org_ids = related_org_ids
        self.invite_immediately = invite_immediately
        if skip_concurrency_check is not None:
            self.skip_concurrency_check = skip_concurrency_check
        self.provided_properties = provided_properties

    @property
    def role(self):
        """Gets the role of this SubstituteDto.  # noqa: E501


        :return: The role of this SubstituteDto.  # noqa: E501
        :rtype: OrgUserRoleFlag
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SubstituteDto.


        :param role: The role of this SubstituteDto.  # noqa: E501
        :type role: OrgUserRoleFlag
        """

        self._role = role

    @property
    def related_orgs(self):
        """Gets the related_orgs of this SubstituteDto.  # noqa: E501


        :return: The related_orgs of this SubstituteDto.  # noqa: E501
        :rtype: list[SubstituteRelatedOrgDto]
        """
        return self._related_orgs

    @related_orgs.setter
    def related_orgs(self, related_orgs):
        """Sets the related_orgs of this SubstituteDto.


        :param related_orgs: The related_orgs of this SubstituteDto.  # noqa: E501
        :type related_orgs: list[SubstituteRelatedOrgDto]
        """

        self._related_orgs = related_orgs

    @property
    def attributes(self):
        """Gets the attributes of this SubstituteDto.  # noqa: E501


        :return: The attributes of this SubstituteDto.  # noqa: E501
        :rtype: list[SubstituteAttributeDto]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SubstituteDto.


        :param attributes: The attributes of this SubstituteDto.  # noqa: E501
        :type attributes: list[SubstituteAttributeDto]
        """

        self._attributes = attributes

    @property
    def pay_code_id(self):
        """Gets the pay_code_id of this SubstituteDto.  # noqa: E501


        :return: The pay_code_id of this SubstituteDto.  # noqa: E501
        :rtype: int
        """
        return self._pay_code_id

    @pay_code_id.setter
    def pay_code_id(self, pay_code_id):
        """Sets the pay_code_id of this SubstituteDto.


        :param pay_code_id: The pay_code_id of this SubstituteDto.  # noqa: E501
        :type pay_code_id: int
        """

        self._pay_code_id = pay_code_id

    @property
    def pay_code(self):
        """Gets the pay_code of this SubstituteDto.  # noqa: E501


        :return: The pay_code of this SubstituteDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this SubstituteDto.


        :param pay_code: The pay_code of this SubstituteDto.  # noqa: E501
        :type pay_code: Int32Locator
        """

        self._pay_code = pay_code

    @property
    def org_id(self):
        """Gets the org_id of this SubstituteDto.  # noqa: E501


        :return: The org_id of this SubstituteDto.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SubstituteDto.


        :param org_id: The org_id of this SubstituteDto.  # noqa: E501
        :type org_id: int
        """

        self._org_id = org_id

    @property
    def row_version(self):
        """Gets the row_version of this SubstituteDto.  # noqa: E501


        :return: The row_version of this SubstituteDto.  # noqa: E501
        :rtype: int
        """
        return self._row_version

    @row_version.setter
    def row_version(self, row_version):
        """Sets the row_version of this SubstituteDto.


        :param row_version: The row_version of this SubstituteDto.  # noqa: E501
        :type row_version: int
        """

        self._row_version = row_version

    @property
    def id(self):
        """Gets the id of this SubstituteDto.  # noqa: E501


        :return: The id of this SubstituteDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubstituteDto.


        :param id: The id of this SubstituteDto.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this SubstituteDto.  # noqa: E501


        :return: The secondary_identifier of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this SubstituteDto.


        :param secondary_identifier: The secondary_identifier of this SubstituteDto.  # noqa: E501
        :type secondary_identifier: str
        """
        if (self.local_vars_configuration.client_side_validation and
                secondary_identifier is not None and len(secondary_identifier) > 50):
            raise ValueError("Invalid value for `secondary_identifier`, length must be less than or equal to `50`")  # noqa: E501

        self._secondary_identifier = secondary_identifier

    @property
    def external_id(self):
        """Gets the external_id of this SubstituteDto.  # noqa: E501


        :return: The external_id of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SubstituteDto.


        :param external_id: The external_id of this SubstituteDto.  # noqa: E501
        :type external_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 50):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `50`")  # noqa: E501

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this SubstituteDto.  # noqa: E501


        :return: The first_name of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SubstituteDto.


        :param first_name: The first_name of this SubstituteDto.  # noqa: E501
        :type first_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 40):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `40`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this SubstituteDto.  # noqa: E501


        :return: The middle_name of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this SubstituteDto.


        :param middle_name: The middle_name of this SubstituteDto.  # noqa: E501
        :type middle_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 40):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `40`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this SubstituteDto.  # noqa: E501


        :return: The last_name of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SubstituteDto.


        :param last_name: The last_name of this SubstituteDto.  # noqa: E501
        :type last_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 40):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `40`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this SubstituteDto.  # noqa: E501


        :return: The email of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubstituteDto.


        :param email: The email of this SubstituteDto.  # noqa: E501
        :type email: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 100):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")  # noqa: E501

        self._email = email

    @property
    def skip_mail_gun_validation(self):
        """Gets the skip_mail_gun_validation of this SubstituteDto.  # noqa: E501


        :return: The skip_mail_gun_validation of this SubstituteDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_mail_gun_validation

    @skip_mail_gun_validation.setter
    def skip_mail_gun_validation(self, skip_mail_gun_validation):
        """Sets the skip_mail_gun_validation of this SubstituteDto.


        :param skip_mail_gun_validation: The skip_mail_gun_validation of this SubstituteDto.  # noqa: E501
        :type skip_mail_gun_validation: bool
        """

        self._skip_mail_gun_validation = skip_mail_gun_validation

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SubstituteDto.  # noqa: E501


        :return: The date_of_birth of this SubstituteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SubstituteDto.


        :param date_of_birth: The date_of_birth of this SubstituteDto.  # noqa: E501
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def address1(self):
        """Gets the address1 of this SubstituteDto.  # noqa: E501


        :return: The address1 of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this SubstituteDto.


        :param address1: The address1 of this SubstituteDto.  # noqa: E501
        :type address1: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address1 is not None and len(address1) > 100):
            raise ValueError("Invalid value for `address1`, length must be less than or equal to `100`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this SubstituteDto.  # noqa: E501


        :return: The address2 of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this SubstituteDto.


        :param address2: The address2 of this SubstituteDto.  # noqa: E501
        :type address2: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address2 is not None and len(address2) > 100):
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `100`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this SubstituteDto.  # noqa: E501


        :return: The city of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SubstituteDto.


        :param city: The city of this SubstituteDto.  # noqa: E501
        :type city: str
        """
        if (self.local_vars_configuration.client_side_validation and
                city is not None and len(city) > 40):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `40`")  # noqa: E501

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this SubstituteDto.  # noqa: E501


        :return: The postal_code of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SubstituteDto.


        :param postal_code: The postal_code of this SubstituteDto.  # noqa: E501
        :type postal_code: str
        """
        if (self.local_vars_configuration.client_side_validation and
                postal_code is not None and len(postal_code) > 20):
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `20`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this SubstituteDto.  # noqa: E501


        :return: The state of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubstituteDto.


        :param state: The state of this SubstituteDto.  # noqa: E501
        :type state: str
        """

        self._state = state

    @property
    def state_id(self):
        """Gets the state_id of this SubstituteDto.  # noqa: E501


        :return: The state_id of this SubstituteDto.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this SubstituteDto.


        :param state_id: The state_id of this SubstituteDto.  # noqa: E501
        :type state_id: StateEnum
        """

        self._state_id = state_id

    @property
    def country(self):
        """Gets the country of this SubstituteDto.  # noqa: E501


        :return: The country of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SubstituteDto.


        :param country: The country of this SubstituteDto.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def country_id(self):
        """Gets the country_id of this SubstituteDto.  # noqa: E501


        :return: The country_id of this SubstituteDto.  # noqa: E501
        :rtype: CountryEnum
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this SubstituteDto.


        :param country_id: The country_id of this SubstituteDto.  # noqa: E501
        :type country_id: CountryEnum
        """

        self._country_id = country_id

    @property
    def phone_number(self):
        """Gets the phone_number of this SubstituteDto.  # noqa: E501


        :return: The phone_number of this SubstituteDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SubstituteDto.


        :param phone_number: The phone_number of this SubstituteDto.  # noqa: E501
        :type phone_number: str
        """
        if (self.local_vars_configuration.client_side_validation and
                phone_number is not None and len(phone_number) > 20):
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def active(self):
        """Gets the active of this SubstituteDto.  # noqa: E501


        :return: The active of this SubstituteDto.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubstituteDto.


        :param active: The active of this SubstituteDto.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def permission_set(self):
        """Gets the permission_set of this SubstituteDto.  # noqa: E501


        :return: The permission_set of this SubstituteDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this SubstituteDto.


        :param permission_set: The permission_set of this SubstituteDto.  # noqa: E501
        :type permission_set: Int32Locator
        """

        self._permission_set = permission_set

    @property
    def permission_set_id(self):
        """Gets the permission_set_id of this SubstituteDto.  # noqa: E501


        :return: The permission_set_id of this SubstituteDto.  # noqa: E501
        :rtype: int
        """
        return self._permission_set_id

    @permission_set_id.setter
    def permission_set_id(self, permission_set_id):
        """Sets the permission_set_id of this SubstituteDto.


        :param permission_set_id: The permission_set_id of this SubstituteDto.  # noqa: E501
        :type permission_set_id: int
        """

        self._permission_set_id = permission_set_id

    @property
    def remove_future_assignments_on_inactivate(self):
        """Gets the remove_future_assignments_on_inactivate of this SubstituteDto.  # noqa: E501


        :return: The remove_future_assignments_on_inactivate of this SubstituteDto.  # noqa: E501
        :rtype: bool
        """
        return self._remove_future_assignments_on_inactivate

    @remove_future_assignments_on_inactivate.setter
    def remove_future_assignments_on_inactivate(self, remove_future_assignments_on_inactivate):
        """Sets the remove_future_assignments_on_inactivate of this SubstituteDto.


        :param remove_future_assignments_on_inactivate: The remove_future_assignments_on_inactivate of this SubstituteDto.  # noqa: E501
        :type remove_future_assignments_on_inactivate: bool
        """

        self._remove_future_assignments_on_inactivate = remove_future_assignments_on_inactivate

    @property
    def related_org_ids(self):
        """Gets the related_org_ids of this SubstituteDto.  # noqa: E501


        :return: The related_org_ids of this SubstituteDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_org_ids

    @related_org_ids.setter
    def related_org_ids(self, related_org_ids):
        """Sets the related_org_ids of this SubstituteDto.


        :param related_org_ids: The related_org_ids of this SubstituteDto.  # noqa: E501
        :type related_org_ids: list[int]
        """

        self._related_org_ids = related_org_ids

    @property
    def invite_immediately(self):
        """Gets the invite_immediately of this SubstituteDto.  # noqa: E501


        :return: The invite_immediately of this SubstituteDto.  # noqa: E501
        :rtype: bool
        """
        return self._invite_immediately

    @invite_immediately.setter
    def invite_immediately(self, invite_immediately):
        """Sets the invite_immediately of this SubstituteDto.


        :param invite_immediately: The invite_immediately of this SubstituteDto.  # noqa: E501
        :type invite_immediately: bool
        """

        self._invite_immediately = invite_immediately

    @property
    def skip_concurrency_check(self):
        """Gets the skip_concurrency_check of this SubstituteDto.  # noqa: E501


        :return: The skip_concurrency_check of this SubstituteDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_concurrency_check

    @skip_concurrency_check.setter
    def skip_concurrency_check(self, skip_concurrency_check):
        """Sets the skip_concurrency_check of this SubstituteDto.


        :param skip_concurrency_check: The skip_concurrency_check of this SubstituteDto.  # noqa: E501
        :type skip_concurrency_check: bool
        """

        self._skip_concurrency_check = skip_concurrency_check

    @property
    def provided_properties(self):
        """Gets the provided_properties of this SubstituteDto.  # noqa: E501


        :return: The provided_properties of this SubstituteDto.  # noqa: E501
        :rtype: list[PropertyInfo]
        """
        return self._provided_properties

    @provided_properties.setter
    def provided_properties(self, provided_properties):
        """Sets the provided_properties of this SubstituteDto.


        :param provided_properties: The provided_properties of this SubstituteDto.  # noqa: E501
        :type provided_properties: list[PropertyInfo]
        """

        self._provided_properties = provided_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstituteDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubstituteDto):
            return True

        return self.to_dict() != other.to_dict()
