# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionScheduleItemDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location': 'Int32Locator',
        'location_id': 'int',
        'bell_schedule': 'Int32Locator',
        'bell_schedule_id': 'int',
        'start_period': 'Int32Locator',
        'start_period_id': 'int',
        'end_period': 'Int32Locator',
        'end_period_id': 'int',
        'start_time': 'TimeSpan',
        'end_time': 'TimeSpan',
        'next_start_time': 'TimeSpan',
        'skip_concurrency_check': 'bool',
        'provided_properties': 'list[PropertyInfo]'
    }

    attribute_map = {
        'location': 'location',
        'location_id': 'locationId',
        'bell_schedule': 'bellSchedule',
        'bell_schedule_id': 'bellScheduleId',
        'start_period': 'startPeriod',
        'start_period_id': 'startPeriodId',
        'end_period': 'endPeriod',
        'end_period_id': 'endPeriodId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'next_start_time': 'nextStartTime',
        'skip_concurrency_check': 'skipConcurrencyCheck',
        'provided_properties': 'providedProperties'
    }

    def __init__(self, location=None, location_id=None, bell_schedule=None, bell_schedule_id=None, start_period=None, start_period_id=None, end_period=None, end_period_id=None, start_time=None, end_time=None, next_start_time=None, skip_concurrency_check=None, provided_properties=None, local_vars_configuration=None):  # noqa: E501
        """PositionScheduleItemDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location = None
        self._location_id = None
        self._bell_schedule = None
        self._bell_schedule_id = None
        self._start_period = None
        self._start_period_id = None
        self._end_period = None
        self._end_period_id = None
        self._start_time = None
        self._end_time = None
        self._next_start_time = None
        self._skip_concurrency_check = None
        self._provided_properties = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if location_id is not None:
            self.location_id = location_id
        if bell_schedule is not None:
            self.bell_schedule = bell_schedule
        if bell_schedule_id is not None:
            self.bell_schedule_id = bell_schedule_id
        if start_period is not None:
            self.start_period = start_period
        if start_period_id is not None:
            self.start_period_id = start_period_id
        if end_period is not None:
            self.end_period = end_period
        if end_period_id is not None:
            self.end_period_id = end_period_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if next_start_time is not None:
            self.next_start_time = next_start_time
        if skip_concurrency_check is not None:
            self.skip_concurrency_check = skip_concurrency_check
        self.provided_properties = provided_properties

    @property
    def location(self):
        """Gets the location of this PositionScheduleItemDto.  # noqa: E501


        :return: The location of this PositionScheduleItemDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PositionScheduleItemDto.


        :param location: The location of this PositionScheduleItemDto.  # noqa: E501
        :type location: Int32Locator
        """

        self._location = location

    @property
    def location_id(self):
        """Gets the location_id of this PositionScheduleItemDto.  # noqa: E501


        :return: The location_id of this PositionScheduleItemDto.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this PositionScheduleItemDto.


        :param location_id: The location_id of this PositionScheduleItemDto.  # noqa: E501
        :type location_id: int
        """

        self._location_id = location_id

    @property
    def bell_schedule(self):
        """Gets the bell_schedule of this PositionScheduleItemDto.  # noqa: E501


        :return: The bell_schedule of this PositionScheduleItemDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._bell_schedule

    @bell_schedule.setter
    def bell_schedule(self, bell_schedule):
        """Sets the bell_schedule of this PositionScheduleItemDto.


        :param bell_schedule: The bell_schedule of this PositionScheduleItemDto.  # noqa: E501
        :type bell_schedule: Int32Locator
        """

        self._bell_schedule = bell_schedule

    @property
    def bell_schedule_id(self):
        """Gets the bell_schedule_id of this PositionScheduleItemDto.  # noqa: E501


        :return: The bell_schedule_id of this PositionScheduleItemDto.  # noqa: E501
        :rtype: int
        """
        return self._bell_schedule_id

    @bell_schedule_id.setter
    def bell_schedule_id(self, bell_schedule_id):
        """Sets the bell_schedule_id of this PositionScheduleItemDto.


        :param bell_schedule_id: The bell_schedule_id of this PositionScheduleItemDto.  # noqa: E501
        :type bell_schedule_id: int
        """

        self._bell_schedule_id = bell_schedule_id

    @property
    def start_period(self):
        """Gets the start_period of this PositionScheduleItemDto.  # noqa: E501


        :return: The start_period of this PositionScheduleItemDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period):
        """Sets the start_period of this PositionScheduleItemDto.


        :param start_period: The start_period of this PositionScheduleItemDto.  # noqa: E501
        :type start_period: Int32Locator
        """

        self._start_period = start_period

    @property
    def start_period_id(self):
        """Gets the start_period_id of this PositionScheduleItemDto.  # noqa: E501


        :return: The start_period_id of this PositionScheduleItemDto.  # noqa: E501
        :rtype: int
        """
        return self._start_period_id

    @start_period_id.setter
    def start_period_id(self, start_period_id):
        """Sets the start_period_id of this PositionScheduleItemDto.


        :param start_period_id: The start_period_id of this PositionScheduleItemDto.  # noqa: E501
        :type start_period_id: int
        """

        self._start_period_id = start_period_id

    @property
    def end_period(self):
        """Gets the end_period of this PositionScheduleItemDto.  # noqa: E501


        :return: The end_period of this PositionScheduleItemDto.  # noqa: E501
        :rtype: Int32Locator
        """
        return self._end_period

    @end_period.setter
    def end_period(self, end_period):
        """Sets the end_period of this PositionScheduleItemDto.


        :param end_period: The end_period of this PositionScheduleItemDto.  # noqa: E501
        :type end_period: Int32Locator
        """

        self._end_period = end_period

    @property
    def end_period_id(self):
        """Gets the end_period_id of this PositionScheduleItemDto.  # noqa: E501


        :return: The end_period_id of this PositionScheduleItemDto.  # noqa: E501
        :rtype: int
        """
        return self._end_period_id

    @end_period_id.setter
    def end_period_id(self, end_period_id):
        """Sets the end_period_id of this PositionScheduleItemDto.


        :param end_period_id: The end_period_id of this PositionScheduleItemDto.  # noqa: E501
        :type end_period_id: int
        """

        self._end_period_id = end_period_id

    @property
    def start_time(self):
        """Gets the start_time of this PositionScheduleItemDto.  # noqa: E501


        :return: The start_time of this PositionScheduleItemDto.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PositionScheduleItemDto.


        :param start_time: The start_time of this PositionScheduleItemDto.  # noqa: E501
        :type start_time: TimeSpan
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this PositionScheduleItemDto.  # noqa: E501


        :return: The end_time of this PositionScheduleItemDto.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PositionScheduleItemDto.


        :param end_time: The end_time of this PositionScheduleItemDto.  # noqa: E501
        :type end_time: TimeSpan
        """

        self._end_time = end_time

    @property
    def next_start_time(self):
        """Gets the next_start_time of this PositionScheduleItemDto.  # noqa: E501


        :return: The next_start_time of this PositionScheduleItemDto.  # noqa: E501
        :rtype: TimeSpan
        """
        return self._next_start_time

    @next_start_time.setter
    def next_start_time(self, next_start_time):
        """Sets the next_start_time of this PositionScheduleItemDto.


        :param next_start_time: The next_start_time of this PositionScheduleItemDto.  # noqa: E501
        :type next_start_time: TimeSpan
        """

        self._next_start_time = next_start_time

    @property
    def skip_concurrency_check(self):
        """Gets the skip_concurrency_check of this PositionScheduleItemDto.  # noqa: E501


        :return: The skip_concurrency_check of this PositionScheduleItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._skip_concurrency_check

    @skip_concurrency_check.setter
    def skip_concurrency_check(self, skip_concurrency_check):
        """Sets the skip_concurrency_check of this PositionScheduleItemDto.


        :param skip_concurrency_check: The skip_concurrency_check of this PositionScheduleItemDto.  # noqa: E501
        :type skip_concurrency_check: bool
        """

        self._skip_concurrency_check = skip_concurrency_check

    @property
    def provided_properties(self):
        """Gets the provided_properties of this PositionScheduleItemDto.  # noqa: E501


        :return: The provided_properties of this PositionScheduleItemDto.  # noqa: E501
        :rtype: list[PropertyInfo]
        """
        return self._provided_properties

    @provided_properties.setter
    def provided_properties(self, provided_properties):
        """Sets the provided_properties of this PositionScheduleItemDto.


        :param provided_properties: The provided_properties of this PositionScheduleItemDto.  # noqa: E501
        :type provided_properties: list[PropertyInfo]
        """

        self._provided_properties = provided_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionScheduleItemDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionScheduleItemDto):
            return True

        return self.to_dict() != other.to_dict()
