# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class Module(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assembly': 'Assembly',
        'fully_qualified_name': 'str',
        'name': 'str',
        'md_stream_version': 'int',
        'module_version_id': 'str',
        'scope_name': 'str',
        'module_handle': 'ModuleHandle',
        'custom_attributes': 'list[CustomAttributeData]',
        'metadata_token': 'int'
    }

    attribute_map = {
        'assembly': 'assembly',
        'fully_qualified_name': 'fullyQualifiedName',
        'name': 'name',
        'md_stream_version': 'mdStreamVersion',
        'module_version_id': 'moduleVersionId',
        'scope_name': 'scopeName',
        'module_handle': 'moduleHandle',
        'custom_attributes': 'customAttributes',
        'metadata_token': 'metadataToken'
    }

    def __init__(self, assembly=None, fully_qualified_name=None, name=None, md_stream_version=None, module_version_id=None, scope_name=None, module_handle=None, custom_attributes=None, metadata_token=None, local_vars_configuration=None):  # noqa: E501
        """Module - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assembly = None
        self._fully_qualified_name = None
        self._name = None
        self._md_stream_version = None
        self._module_version_id = None
        self._scope_name = None
        self._module_handle = None
        self._custom_attributes = None
        self._metadata_token = None
        self.discriminator = None

        if assembly is not None:
            self.assembly = assembly
        self.fully_qualified_name = fully_qualified_name
        self.name = name
        if md_stream_version is not None:
            self.md_stream_version = md_stream_version
        if module_version_id is not None:
            self.module_version_id = module_version_id
        self.scope_name = scope_name
        if module_handle is not None:
            self.module_handle = module_handle
        self.custom_attributes = custom_attributes
        if metadata_token is not None:
            self.metadata_token = metadata_token

    @property
    def assembly(self):
        """Gets the assembly of this Module.  # noqa: E501


        :return: The assembly of this Module.  # noqa: E501
        :rtype: Assembly
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this Module.


        :param assembly: The assembly of this Module.  # noqa: E501
        :type assembly: Assembly
        """

        self._assembly = assembly

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this Module.  # noqa: E501


        :return: The fully_qualified_name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this Module.


        :param fully_qualified_name: The fully_qualified_name of this Module.  # noqa: E501
        :type fully_qualified_name: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def name(self):
        """Gets the name of this Module.  # noqa: E501


        :return: The name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Module.


        :param name: The name of this Module.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def md_stream_version(self):
        """Gets the md_stream_version of this Module.  # noqa: E501


        :return: The md_stream_version of this Module.  # noqa: E501
        :rtype: int
        """
        return self._md_stream_version

    @md_stream_version.setter
    def md_stream_version(self, md_stream_version):
        """Sets the md_stream_version of this Module.


        :param md_stream_version: The md_stream_version of this Module.  # noqa: E501
        :type md_stream_version: int
        """

        self._md_stream_version = md_stream_version

    @property
    def module_version_id(self):
        """Gets the module_version_id of this Module.  # noqa: E501


        :return: The module_version_id of this Module.  # noqa: E501
        :rtype: str
        """
        return self._module_version_id

    @module_version_id.setter
    def module_version_id(self, module_version_id):
        """Sets the module_version_id of this Module.


        :param module_version_id: The module_version_id of this Module.  # noqa: E501
        :type module_version_id: str
        """

        self._module_version_id = module_version_id

    @property
    def scope_name(self):
        """Gets the scope_name of this Module.  # noqa: E501


        :return: The scope_name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this Module.


        :param scope_name: The scope_name of this Module.  # noqa: E501
        :type scope_name: str
        """

        self._scope_name = scope_name

    @property
    def module_handle(self):
        """Gets the module_handle of this Module.  # noqa: E501


        :return: The module_handle of this Module.  # noqa: E501
        :rtype: ModuleHandle
        """
        return self._module_handle

    @module_handle.setter
    def module_handle(self, module_handle):
        """Sets the module_handle of this Module.


        :param module_handle: The module_handle of this Module.  # noqa: E501
        :type module_handle: ModuleHandle
        """

        self._module_handle = module_handle

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Module.  # noqa: E501


        :return: The custom_attributes of this Module.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Module.


        :param custom_attributes: The custom_attributes of this Module.  # noqa: E501
        :type custom_attributes: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def metadata_token(self):
        """Gets the metadata_token of this Module.  # noqa: E501


        :return: The metadata_token of this Module.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this Module.


        :param metadata_token: The metadata_token of this Module.  # noqa: E501
        :type metadata_token: int
        """

        self._metadata_token = metadata_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Module):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Module):
            return True

        return self.to_dict() != other.to_dict()
