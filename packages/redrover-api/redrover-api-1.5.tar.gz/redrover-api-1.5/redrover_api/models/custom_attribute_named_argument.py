# coding: utf-8

"""
    Red Rover API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: contact@edustaff.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class CustomAttributeNamedArgument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'member_info': 'MemberInfo',
        'typed_value': 'CustomAttributeTypedArgument',
        'member_name': 'str',
        'is_field': 'bool'
    }

    attribute_map = {
        'member_info': 'memberInfo',
        'typed_value': 'typedValue',
        'member_name': 'memberName',
        'is_field': 'isField'
    }

    def __init__(self, member_info=None, typed_value=None, member_name=None, is_field=None, local_vars_configuration=None):  # noqa: E501
        """CustomAttributeNamedArgument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._member_info = None
        self._typed_value = None
        self._member_name = None
        self._is_field = None
        self.discriminator = None

        if member_info is not None:
            self.member_info = member_info
        if typed_value is not None:
            self.typed_value = typed_value
        self.member_name = member_name
        if is_field is not None:
            self.is_field = is_field

    @property
    def member_info(self):
        """Gets the member_info of this CustomAttributeNamedArgument.  # noqa: E501


        :return: The member_info of this CustomAttributeNamedArgument.  # noqa: E501
        :rtype: MemberInfo
        """
        return self._member_info

    @member_info.setter
    def member_info(self, member_info):
        """Sets the member_info of this CustomAttributeNamedArgument.


        :param member_info: The member_info of this CustomAttributeNamedArgument.  # noqa: E501
        :type member_info: MemberInfo
        """

        self._member_info = member_info

    @property
    def typed_value(self):
        """Gets the typed_value of this CustomAttributeNamedArgument.  # noqa: E501


        :return: The typed_value of this CustomAttributeNamedArgument.  # noqa: E501
        :rtype: CustomAttributeTypedArgument
        """
        return self._typed_value

    @typed_value.setter
    def typed_value(self, typed_value):
        """Sets the typed_value of this CustomAttributeNamedArgument.


        :param typed_value: The typed_value of this CustomAttributeNamedArgument.  # noqa: E501
        :type typed_value: CustomAttributeTypedArgument
        """

        self._typed_value = typed_value

    @property
    def member_name(self):
        """Gets the member_name of this CustomAttributeNamedArgument.  # noqa: E501


        :return: The member_name of this CustomAttributeNamedArgument.  # noqa: E501
        :rtype: str
        """
        return self._member_name

    @member_name.setter
    def member_name(self, member_name):
        """Sets the member_name of this CustomAttributeNamedArgument.


        :param member_name: The member_name of this CustomAttributeNamedArgument.  # noqa: E501
        :type member_name: str
        """

        self._member_name = member_name

    @property
    def is_field(self):
        """Gets the is_field of this CustomAttributeNamedArgument.  # noqa: E501


        :return: The is_field of this CustomAttributeNamedArgument.  # noqa: E501
        :rtype: bool
        """
        return self._is_field

    @is_field.setter
    def is_field(self, is_field):
        """Sets the is_field of this CustomAttributeNamedArgument.


        :param is_field: The is_field of this CustomAttributeNamedArgument.  # noqa: E501
        :type is_field: bool
        """

        self._is_field = is_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAttributeNamedArgument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomAttributeNamedArgument):
            return True

        return self.to_dict() != other.to_dict()
