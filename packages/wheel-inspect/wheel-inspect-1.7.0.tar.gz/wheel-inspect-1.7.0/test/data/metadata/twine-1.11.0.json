{
    "metadata_version": "2.0",
    "name": "twine",
    "version": "1.11.0",
    "summary": "Collection of utilities for publishing packages on PyPI",
    "home_page": "https://twine.readthedocs.io/",
    "author": "Donald Stufft and individual contributors",
    "author_email": "donald@stufft.io",
    "license": "Apache License, Version 2.0",
    "project_url": [
        {
            "label": "Packaging tutorial",
            "url": "https://packaging.python.org/tutorials/distributing-packages/"},
        {
            "label": "Twine documentation",
            "url": "https://twine.readthedocs.io/en/latest/"
        },
        {
            "label": "Twine source",
            "url": "https://github.com/pypa/twine/"
        }
    ],
    "platform": [],
    "classifier": [
        "Intended Audience :: Developers",
        "License :: OSI Approved :: Apache Software License",
        "Natural Language :: English",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX",
        "Operating System :: POSIX :: BSD",
        "Operating System :: POSIX :: Linux",
        "Operating System :: Microsoft :: Windows",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.3",
        "Programming Language :: Python :: 3.4",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "requires_dist": [
        {
            "name": "tqdm",
            "url": null,
            "extras": [],
            "specifier": ">=4.14",
            "marker": null
        },
        {
            "name": "requests",
            "url": null,
            "extras": [],
            "specifier": "!=2.15,!=2.16,>=2.5.0",
            "marker": null
        },
        {
            "name": "requests-toolbelt",
            "url": null,
            "extras": [],
            "specifier": ">=0.8.0",
            "marker": null
        },
        {
            "name": "pkginfo",
            "url": null,
            "extras": [],
            "specifier": ">=1.4.2",
            "marker": null
        },
        {
            "name": "setuptools",
            "url": null,
            "extras": [],
            "specifier": ">=0.7.0",
            "marker": null
        },
        {
            "name": "argparse",
            "url": null,
            "extras": [],
            "specifier": "",
            "marker": "python_version == \"2.6\""
        },
        {
            "name": "pyblake2",
            "url": null,
            "extras": [],
            "specifier": "",
            "marker": "extra == \"with-blake2\" and python_version < \"3.6\""
        },
        {
            "name": "keyring",
            "url": null,
            "extras": [],
            "specifier": "",
            "marker": "extra == \"keyring\""
        }
    ],
    "BODY": "twine\n=====\n\n.. rtd-inclusion-marker-do-not-remove\n\nTwine is `a utility`_ for `publishing`_ packages on `PyPI`_.\n\nCurrently it only supports registering `projects`_ and uploading `distributions`_.\n\n\nWhy Should I Use This?\n----------------------\n\nThe goal of ``twine`` is to improve PyPI interaction by improving\nsecurity and testability.\n\nThe biggest reason to use ``twine`` is that it securely authenticates\nyou to `PyPI`_ over HTTPS using a verified connection, while ``python\nsetup.py upload`` `only recently stopped using HTTP\n<https://bugs.python.org/issue12226>`_ in Python 2.7.9+ and Python\n3.2+. This means anytime you use ``python setup.py upload`` with an\nolder Python version, you expose your username and password to being\neasily sniffed. Twine uses only verified TLS to upload to PyPI,\nprotecting your credentials from theft.\n\nSecondly, it allows you to precreate your distribution files.\n``python setup.py upload`` only allows you to upload something that you've\ncreated in the same command invocation. This means that you cannot test the\nexact file you're going to upload to PyPI to ensure that it works before\nuploading it.\n\nFinally, ``twine`` allows you to pre-sign your files and pass the\n``.asc`` files into the command line invocation (``twine upload\nmyproject-1.0.1.tar.gz myproject-1.0.1.tar.gz.asc``). This enables you\nto be assured that you're typing your ``gpg`` passphrase into ``gpg``\nitself and not anything else, since *you* will be the one directly\nexecuting ``gpg --detach-sign -a <filename>``.\n\n\nFeatures\n--------\n\n- Verified HTTPS connections\n- Uploading doesn't require executing ``setup.py``\n- Uploading files that have already been created, allowing testing of\n  distributions before release\n- Supports uploading any packaging format (including `wheels`_)\n\n\nInstallation\n------------\n\n.. code-block:: console\n\n    $ pip install twine\n\n\nUsing Twine\n-----------\n\n1. Create some distributions in the normal way:\n\n   .. code-block:: console\n\n       $ python setup.py sdist bdist_wheel\n\n2. Upload with ``twine`` to `Test PyPI`_ and verify things look right. Twine will automatically prompt for your username and password:\n\n   .. code-block:: console\n\n       $ twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n       username: ...\n       password:\n       ...\n\n3. Upload to `PyPI`_:\n\n   .. code-block:: console\n\n       $ twine upload dist/*\n\n4. Done!\n\nMore documentation on using ``twine`` to upload packages to PyPI is in\nthe `Python Packaging User Guide`_.\n\nKeyring Support\n---------------\n\nInstead of typing in your password every time you upload a distribution, Twine\nallows you to store your username and password securely using `keyring`_.\n\nTo use the keyring, you must first install the keyring packages:\n\n- On Windows and MacOS you just need to install ``keyring``, for example,\n  ``pip install --user keyring``.\n- On Linux, in addition to the ``keyring`` package you also need to ensure the\n  ``python3-dbus`` system package is installed. For example, ``apt install\n  python3-dbus``. See `Keyring's installation instructions`_ for more details.\n\nOnce keyring is installed you can use the ``keyring`` program to set your\nusername and password to use for each package index (repository) you want to\nupload to using Twine.\n\nTo set your username and password for test PyPI run the following command.\n``keyring`` will prompt you for your password:\n\n.. code-block:: console\n\n    $ keyring set https://test.pypi.org/legacy/ your-username\n    # or\n    $ python3 -m keyring set https://test.pypi.org/legacy/ your-username\n\nTo set your username and password for PyPI run this command, again, ``keyring``\nwill prompt for the password:\n\n.. code-block:: console\n\n    $ keyring set https://upload.pypi.org/legacy/ your-username\n    # or\n    $ python3 -m keyring set https://upload.pypi.org/legacy/ your-username\n\n\nThe next time you run ``twine`` it will prompt you for a username and will grab the appropriate password from the keyring.\n\n.. Note:: If you are using Linux in a headless environment (such as on a\n    server) you'll need to do some additional steps to ensure that Keyring can\n    store secrets securely. See `Using Keyring on headless systems`_.\n\n.. _`keyring`: https://pypi.org/project/keyring/\n.. _`Keyring's installation instructions`:\n    https://keyring.readthedocs.io/en/latest#installation-instructions\n.. _`Using Keyring on headless systems`:\n    https://keyring.readthedocs.io/en/latest/#using-keyring-on-headless-linux-systems\n\n\nOptions\n-------\n\n.. code-block:: console\n\n    $ twine upload -h\n\n    usage: twine upload [-h] [-r REPOSITORY] [--repository-url REPOSITORY_URL]\n                        [-s] [--sign-with SIGN_WITH] [-i IDENTITY] [-u USERNAME]\n                        [-p PASSWORD] [-c COMMENT] [--config-file CONFIG_FILE]\n                        [--skip-existing] [--cert path] [--client-cert path]\n                        dist [dist ...]\n\n    positional arguments:\n      dist                  The distribution files to upload to the repository\n                            (package index). Usually dist/* . May additionally\n                            contain a .asc file to include an existing signature\n                            with the file upload.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -r REPOSITORY, --repository REPOSITORY\n                            The repository (package index) to upload the package\n                            to. Should be a section in the config file (default:\n                            pypi). (Can also be set via TWINE_REPOSITORY\n                            environment variable.)\n      --repository-url REPOSITORY_URL\n                            The repository (package index) URL to upload the\n                            package to. This overrides --repository. (Can also be\n                            set via TWINE_REPOSITORY_URL environment variable.)\n      -s, --sign            Sign files to upload using GPG.\n      --sign-with SIGN_WITH\n                            GPG program used to sign uploads (default: gpg).\n      -i IDENTITY, --identity IDENTITY\n                            GPG identity used to sign files.\n      -u USERNAME, --username USERNAME\n                            The username to authenticate to the repository\n                            (package index) as. (Can also be set via\n                            TWINE_USERNAME environment variable.)\n      -p PASSWORD, --password PASSWORD\n                            The password to authenticate to the repository\n                            (package index) with. (Can also be set via\n                            TWINE_PASSWORD environment variable.)\n      -c COMMENT, --comment COMMENT\n                            The comment to include with the distribution file.\n      --config-file CONFIG_FILE\n                            The .pypirc config file to use.\n      --skip-existing       Continue uploading files if one already exists. (Only\n                            valid when uploading to PyPI. Other implementations\n                            may not support this.)\n      --cert path           Path to alternate CA bundle (can also be set via\n                            TWINE_CERT environment variable).\n      --client-cert path    Path to SSL client certificate, a single file\n                            containing the private key and the certificate in PEM\n                            format.\n\nTwine also includes a ``register`` command.\n\n.. WARNING::\n   ``register`` is `no longer necessary if you are\n   uploading to pypi.org\n   <https://packaging.python.org/guides/migrating-to-pypi-org/#registering-package-names-metadata>`_. As\n   such, it is `no longer supported\n   <https://github.com/pypa/warehouse/issues/1627>`_ in `Warehouse`_\n   (the new PyPI software running on pypi.org). However, you may need\n   this if you are using a different package index.\n\nFor completeness, its usage:\n\n.. code-block:: console\n\n    $ twine register -h\n\n    usage: twine register [-h] -r REPOSITORY [--repository-url REPOSITORY_URL]\n                          [-u USERNAME] [-p PASSWORD] [-c COMMENT]\n                          [--config-file CONFIG_FILE] [--cert path]\n                          [--client-cert path]\n                          package\n\n    positional arguments:\n      package               File from which we read the package metadata.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -r REPOSITORY, --repository REPOSITORY\n                            The repository (package index) to register the package\n                            to. Should be a section in the config file. (Can also\n                            be set via TWINE_REPOSITORY environment variable.)\n                            Initial package registration no longer necessary on\n                            pypi.org:\n                            https://packaging.python.org/guides/migrating-to-pypi-\n                            org/\n      --repository-url REPOSITORY_URL\n                            The repository (package index) URL to register the\n                            package to. This overrides --repository. (Can also be\n                            set via TWINE_REPOSITORY_URL environment variable.)\n      -u USERNAME, --username USERNAME\n                            The username to authenticate to the repository\n                            (package index) as. (Can also be set via\n                            TWINE_USERNAME environment variable.)\n      -p PASSWORD, --password PASSWORD\n                            The password to authenticate to the repository\n                            (package index) with. (Can also be set via\n                            TWINE_PASSWORD environment variable.)\n      -c COMMENT, --comment COMMENT\n                            The comment to include with the distribution file.\n      --config-file CONFIG_FILE\n                            The .pypirc config file to use.\n      --cert path           Path to alternate CA bundle (can also be set via\n                            TWINE_CERT environment variable).\n      --client-cert path    Path to SSL client certificate, a single file\n                            containing the private key and the certificate in PEM\n                            format.\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nTwine also supports configuration via environment variables. Options passed on\nthe command line will take precedence over options set via environment\nvariables. Definition via environment variable is helpful in environments where\nit is not convenient to create a `.pypirc` file, such as a CI/build server, for\nexample.\n\n* ``TWINE_USERNAME`` - the username to use for authentication to the repository.\n* ``TWINE_PASSWORD`` - the password to use for authentication to the repository.\n* ``TWINE_REPOSITORY`` - the repository configuration, either defined as a\n  section in `.pypirc` or provided as a full URL.\n* ``TWINE_REPOSITORY_URL`` - the repository URL to use.\n* ``TWINE_CERT`` - custom CA certificate to use for repositories with\n  self-signed or untrusted certificates.\n\nResources\n---------\n\n* `IRC <https://webchat.freenode.net/?channels=%23pypa>`_\n  (``#pypa`` - irc.freenode.net)\n* `GitHub repository <https://github.com/pypa/twine>`_\n* User and developer `documentation`_\n* `Python Packaging User Guide`_\n\nContributing\n------------\n\nSee our `developer documentation`_ for how to get started, an\narchitectural overview, and our future development plans.\n\nCode of Conduct\n---------------\n\nEveryone interacting in the ``twine`` project's codebases, issue\ntrackers, chat rooms, and mailing lists is expected to follow the\n`PyPA Code of Conduct`_.\n\n.. _`a utility`: https://pypi.org/project/twine/\n.. _`publishing`: https://packaging.python.org/tutorials/distributing-packages/\n.. _`PyPI`: https://pypi.org\n.. _`Test PyPI`: https://packaging.python.org/guides/using-testpypi/\n.. _`Python Packaging User Guide`: https://packaging.python.org/tutorials/distributing-packages/\n.. _`documentation`: https://twine.readthedocs.io/\n.. _`developer documentation`: https://twine.readthedocs.io/en/latest/contributing.html\n.. _`projects`: https://packaging.python.org/glossary/#term-project\n.. _`distributions`: https://packaging.python.org/glossary/#term-distribution-package\n.. _`PyPA Code of Conduct`: https://www.pypa.io/en/latest/code-of-conduct/\n.. _`Warehouse`: https://github.com/pypa/warehouse\n.. _`wheels`: https://packaging.python.org/glossary/#term-wheel\n\n\n"
}
