# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mxdevtool
else:
    import _mxdevtool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mxdevtool.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _mxdevtool.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _mxdevtool.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _mxdevtool.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _mxdevtool.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _mxdevtool.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _mxdevtool.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _mxdevtool.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _mxdevtool.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _mxdevtool.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _mxdevtool.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mxdevtool:
_mxdevtool.SwigPyIterator_swigregister(SwigPyIterator)
cvar = _mxdevtool.cvar
__version__ = cvar.__version__

Sunday = _mxdevtool.Sunday

Monday = _mxdevtool.Monday

Tuesday = _mxdevtool.Tuesday

Wednesday = _mxdevtool.Wednesday

Thursday = _mxdevtool.Thursday

Friday = _mxdevtool.Friday

Saturday = _mxdevtool.Saturday

January = _mxdevtool.January

February = _mxdevtool.February

March = _mxdevtool.March

April = _mxdevtool.April

May = _mxdevtool.May

June = _mxdevtool.June

July = _mxdevtool.July

August = _mxdevtool.August

September = _mxdevtool.September

October = _mxdevtool.October

November = _mxdevtool.November

December = _mxdevtool.December

Days = _mxdevtool.Days

Weeks = _mxdevtool.Weeks

Months = _mxdevtool.Months

Years = _mxdevtool.Years

NoFrequency = _mxdevtool.NoFrequency

Once = _mxdevtool.Once

Annual = _mxdevtool.Annual

Semiannual = _mxdevtool.Semiannual

EveryFourthMonth = _mxdevtool.EveryFourthMonth

Quarterly = _mxdevtool.Quarterly

Bimonthly = _mxdevtool.Bimonthly

Monthly = _mxdevtool.Monthly

EveryFourthWeek = _mxdevtool.EveryFourthWeek

Biweekly = _mxdevtool.Biweekly

Weekly = _mxdevtool.Weekly

Daily = _mxdevtool.Daily

OtherFrequency = _mxdevtool.OtherFrequency

class Period(object):
    r"""Proxy of C++ Period class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def length(self) -> "Integer":
        r"""length(Period self) -> Integer"""
        return _mxdevtool.Period_length(self)

    def units(self) -> "TimeUnit":
        r"""units(Period self) -> TimeUnit"""
        return _mxdevtool.Period_units(self)

    def frequency(self) -> "Frequency":
        r"""frequency(Period self) -> Frequency"""
        return _mxdevtool.Period_frequency(self)

    def __init__(self, *args):
        r"""
        __init__(Period self) -> Period
        __init__(Period self, Integer n, TimeUnit units) -> Period
        __init__(Period self, Frequency arg2) -> Period
        __init__(Period self, std::string const & str) -> Period
        """
        _mxdevtool.Period_swiginit(self, _mxdevtool.new_Period(*args))

    def __str__(self) -> "std::string":
        r"""__str__(Period self) -> std::string"""
        return _mxdevtool.Period___str__(self)

    def __repr__(self) -> "std::string":
        r"""__repr__(Period self) -> std::string"""
        return _mxdevtool.Period___repr__(self)

    def __neg__(self) -> "Period":
        r"""__neg__(Period self) -> Period"""
        return _mxdevtool.Period___neg__(self)

    def __mul__(self, n: "Integer") -> "Period":
        r"""__mul__(Period self, Integer n) -> Period"""
        return _mxdevtool.Period___mul__(self, n)

    def __rmul__(self, n: "Integer") -> "Period":
        r"""__rmul__(Period self, Integer n) -> Period"""
        return _mxdevtool.Period___rmul__(self, n)

    def __lt__(self, other: "Period") -> "bool":
        r"""__lt__(Period self, Period other) -> bool"""
        return _mxdevtool.Period___lt__(self, other)

    def __eq__(self, other: "Period") -> "bool":
        r"""__eq__(Period self, Period other) -> bool"""
        return _mxdevtool.Period___eq__(self, other)

    def __cmp__(self, other: "Period") -> "int":
        r"""__cmp__(Period self, Period other) -> int"""
        return _mxdevtool.Period___cmp__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Period

# Register Period in _mxdevtool:
_mxdevtool.Period_swigregister(Period)

class PeriodInterval(object):
    r"""Proxy of C++ PeriodInterval class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(PeriodInterval self) -> PeriodInterval
        __init__(PeriodInterval self, Period startPeriod, bool includeStartPeriod=True) -> PeriodInterval
        __init__(PeriodInterval self, Period startPeriod, Period endPeriod, bool includeStartPeriod=True, bool includeEndPeriod=False) -> PeriodInterval
        __init__(PeriodInterval self, std::string const & startPeriodStr, bool includeStartPeriod=True) -> PeriodInterval
        __init__(PeriodInterval self, std::string const & startPeriodStr, std::string const & endPeriodStr, bool includeStartPeriod=True, bool includeEndPeriod=False) -> PeriodInterval
        """
        _mxdevtool.PeriodInterval_swiginit(self, _mxdevtool.new_PeriodInterval(*args))

    def __str__(self) -> "std::string":
        r"""__str__(PeriodInterval self) -> std::string"""
        return _mxdevtool.PeriodInterval___str__(self)

    def __repr__(self) -> "std::string":
        r"""__repr__(PeriodInterval self) -> std::string"""
        return _mxdevtool.PeriodInterval___repr__(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodInterval

# Register PeriodInterval in _mxdevtool:
_mxdevtool.PeriodInterval_swigregister(PeriodInterval)

class WholePeriodInterval(object):
    r"""Proxy of C++ WholePeriodInterval class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(WholePeriodInterval self) -> WholePeriodInterval"""
        _mxdevtool.WholePeriodInterval_swiginit(self, _mxdevtool.new_WholePeriodInterval())
    __swig_destroy__ = _mxdevtool.delete_WholePeriodInterval

# Register WholePeriodInterval in _mxdevtool:
_mxdevtool.WholePeriodInterval_swigregister(WholePeriodInterval)

class PeriodVector(object):
    r"""Proxy of C++ std::vector< Period > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(PeriodVector self) -> SwigPyIterator"""
        return _mxdevtool.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(PeriodVector self) -> bool"""
        return _mxdevtool.PeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(PeriodVector self) -> bool"""
        return _mxdevtool.PeriodVector___bool__(self)

    def __len__(self) -> "std::vector< Period >::size_type":
        r"""__len__(PeriodVector self) -> std::vector< Period >::size_type"""
        return _mxdevtool.PeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "std::vector< Period,std::allocator< Period > > *":
        r"""__getslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j) -> PeriodVector"""
        return _mxdevtool.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j)
        __setslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j, PeriodVector v)
        """
        return _mxdevtool.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "void":
        r"""__delslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j)"""
        return _mxdevtool.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(PeriodVector self, std::vector< Period >::difference_type i)
        __delitem__(PeriodVector self, PySliceObject * slice)
        """
        return _mxdevtool.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Period >::value_type const &":
        r"""
        __getitem__(PeriodVector self, PySliceObject * slice) -> PeriodVector
        __getitem__(PeriodVector self, std::vector< Period >::difference_type i) -> Period
        """
        return _mxdevtool.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(PeriodVector self, PySliceObject * slice, PeriodVector v)
        __setitem__(PeriodVector self, PySliceObject * slice)
        __setitem__(PeriodVector self, std::vector< Period >::difference_type i, Period x)
        """
        return _mxdevtool.PeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Period >::value_type":
        r"""pop(PeriodVector self) -> Period"""
        return _mxdevtool.PeriodVector_pop(self)

    def append(self, x: "Period") -> "void":
        r"""append(PeriodVector self, Period x)"""
        return _mxdevtool.PeriodVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(PeriodVector self) -> bool"""
        return _mxdevtool.PeriodVector_empty(self)

    def size(self) -> "std::vector< Period >::size_type":
        r"""size(PeriodVector self) -> std::vector< Period >::size_type"""
        return _mxdevtool.PeriodVector_size(self)

    def swap(self, v: "PeriodVector") -> "void":
        r"""swap(PeriodVector self, PeriodVector v)"""
        return _mxdevtool.PeriodVector_swap(self, v)

    def begin(self) -> "std::vector< Period >::iterator":
        r"""begin(PeriodVector self) -> std::vector< Period >::iterator"""
        return _mxdevtool.PeriodVector_begin(self)

    def end(self) -> "std::vector< Period >::iterator":
        r"""end(PeriodVector self) -> std::vector< Period >::iterator"""
        return _mxdevtool.PeriodVector_end(self)

    def rbegin(self) -> "std::vector< Period >::reverse_iterator":
        r"""rbegin(PeriodVector self) -> std::vector< Period >::reverse_iterator"""
        return _mxdevtool.PeriodVector_rbegin(self)

    def rend(self) -> "std::vector< Period >::reverse_iterator":
        r"""rend(PeriodVector self) -> std::vector< Period >::reverse_iterator"""
        return _mxdevtool.PeriodVector_rend(self)

    def clear(self) -> "void":
        r"""clear(PeriodVector self)"""
        return _mxdevtool.PeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< Period >::allocator_type":
        r"""get_allocator(PeriodVector self) -> std::vector< Period >::allocator_type"""
        return _mxdevtool.PeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(PeriodVector self)"""
        return _mxdevtool.PeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Period >::iterator":
        r"""
        erase(PeriodVector self, std::vector< Period >::iterator pos) -> std::vector< Period >::iterator
        erase(PeriodVector self, std::vector< Period >::iterator first, std::vector< Period >::iterator last) -> std::vector< Period >::iterator
        """
        return _mxdevtool.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PeriodVector self) -> PeriodVector
        __init__(PeriodVector self, PeriodVector other) -> PeriodVector
        __init__(PeriodVector self, std::vector< Period >::size_type size) -> PeriodVector
        __init__(PeriodVector self, std::vector< Period >::size_type size, Period value) -> PeriodVector
        """
        _mxdevtool.PeriodVector_swiginit(self, _mxdevtool.new_PeriodVector(*args))

    def push_back(self, x: "Period") -> "void":
        r"""push_back(PeriodVector self, Period x)"""
        return _mxdevtool.PeriodVector_push_back(self, x)

    def front(self) -> "std::vector< Period >::value_type const &":
        r"""front(PeriodVector self) -> Period"""
        return _mxdevtool.PeriodVector_front(self)

    def back(self) -> "std::vector< Period >::value_type const &":
        r"""back(PeriodVector self) -> Period"""
        return _mxdevtool.PeriodVector_back(self)

    def assign(self, n: "std::vector< Period >::size_type", x: "Period") -> "void":
        r"""assign(PeriodVector self, std::vector< Period >::size_type n, Period x)"""
        return _mxdevtool.PeriodVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(PeriodVector self, std::vector< Period >::size_type new_size)
        resize(PeriodVector self, std::vector< Period >::size_type new_size, Period x)
        """
        return _mxdevtool.PeriodVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(PeriodVector self, std::vector< Period >::iterator pos, Period x) -> std::vector< Period >::iterator
        insert(PeriodVector self, std::vector< Period >::iterator pos, std::vector< Period >::size_type n, Period x)
        """
        return _mxdevtool.PeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< Period >::size_type") -> "void":
        r"""reserve(PeriodVector self, std::vector< Period >::size_type n)"""
        return _mxdevtool.PeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< Period >::size_type":
        r"""capacity(PeriodVector self) -> std::vector< Period >::size_type"""
        return _mxdevtool.PeriodVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodVector

# Register PeriodVector in _mxdevtool:
_mxdevtool.PeriodVector_swigregister(PeriodVector)

class PeriodIntervalVector(object):
    r"""Proxy of C++ std::vector< PeriodInterval > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(PeriodIntervalVector self) -> SwigPyIterator"""
        return _mxdevtool.PeriodIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(PeriodIntervalVector self) -> bool"""
        return _mxdevtool.PeriodIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(PeriodIntervalVector self) -> bool"""
        return _mxdevtool.PeriodIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< PeriodInterval >::size_type":
        r"""__len__(PeriodIntervalVector self) -> std::vector< PeriodInterval >::size_type"""
        return _mxdevtool.PeriodIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< PeriodInterval >::difference_type", j: "std::vector< PeriodInterval >::difference_type") -> "std::vector< PeriodInterval,std::allocator< PeriodInterval > > *":
        r"""__getslice__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i, std::vector< PeriodInterval >::difference_type j) -> PeriodIntervalVector"""
        return _mxdevtool.PeriodIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i, std::vector< PeriodInterval >::difference_type j)
        __setslice__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i, std::vector< PeriodInterval >::difference_type j, PeriodIntervalVector v)
        """
        return _mxdevtool.PeriodIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PeriodInterval >::difference_type", j: "std::vector< PeriodInterval >::difference_type") -> "void":
        r"""__delslice__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i, std::vector< PeriodInterval >::difference_type j)"""
        return _mxdevtool.PeriodIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i)
        __delitem__(PeriodIntervalVector self, PySliceObject * slice)
        """
        return _mxdevtool.PeriodIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PeriodInterval >::value_type const &":
        r"""
        __getitem__(PeriodIntervalVector self, PySliceObject * slice) -> PeriodIntervalVector
        __getitem__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i) -> PeriodInterval
        """
        return _mxdevtool.PeriodIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(PeriodIntervalVector self, PySliceObject * slice, PeriodIntervalVector v)
        __setitem__(PeriodIntervalVector self, PySliceObject * slice)
        __setitem__(PeriodIntervalVector self, std::vector< PeriodInterval >::difference_type i, PeriodInterval x)
        """
        return _mxdevtool.PeriodIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< PeriodInterval >::value_type":
        r"""pop(PeriodIntervalVector self) -> PeriodInterval"""
        return _mxdevtool.PeriodIntervalVector_pop(self)

    def append(self, x: "PeriodInterval") -> "void":
        r"""append(PeriodIntervalVector self, PeriodInterval x)"""
        return _mxdevtool.PeriodIntervalVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(PeriodIntervalVector self) -> bool"""
        return _mxdevtool.PeriodIntervalVector_empty(self)

    def size(self) -> "std::vector< PeriodInterval >::size_type":
        r"""size(PeriodIntervalVector self) -> std::vector< PeriodInterval >::size_type"""
        return _mxdevtool.PeriodIntervalVector_size(self)

    def swap(self, v: "PeriodIntervalVector") -> "void":
        r"""swap(PeriodIntervalVector self, PeriodIntervalVector v)"""
        return _mxdevtool.PeriodIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< PeriodInterval >::iterator":
        r"""begin(PeriodIntervalVector self) -> std::vector< PeriodInterval >::iterator"""
        return _mxdevtool.PeriodIntervalVector_begin(self)

    def end(self) -> "std::vector< PeriodInterval >::iterator":
        r"""end(PeriodIntervalVector self) -> std::vector< PeriodInterval >::iterator"""
        return _mxdevtool.PeriodIntervalVector_end(self)

    def rbegin(self) -> "std::vector< PeriodInterval >::reverse_iterator":
        r"""rbegin(PeriodIntervalVector self) -> std::vector< PeriodInterval >::reverse_iterator"""
        return _mxdevtool.PeriodIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< PeriodInterval >::reverse_iterator":
        r"""rend(PeriodIntervalVector self) -> std::vector< PeriodInterval >::reverse_iterator"""
        return _mxdevtool.PeriodIntervalVector_rend(self)

    def clear(self) -> "void":
        r"""clear(PeriodIntervalVector self)"""
        return _mxdevtool.PeriodIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< PeriodInterval >::allocator_type":
        r"""get_allocator(PeriodIntervalVector self) -> std::vector< PeriodInterval >::allocator_type"""
        return _mxdevtool.PeriodIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(PeriodIntervalVector self)"""
        return _mxdevtool.PeriodIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< PeriodInterval >::iterator":
        r"""
        erase(PeriodIntervalVector self, std::vector< PeriodInterval >::iterator pos) -> std::vector< PeriodInterval >::iterator
        erase(PeriodIntervalVector self, std::vector< PeriodInterval >::iterator first, std::vector< PeriodInterval >::iterator last) -> std::vector< PeriodInterval >::iterator
        """
        return _mxdevtool.PeriodIntervalVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PeriodIntervalVector self) -> PeriodIntervalVector
        __init__(PeriodIntervalVector self, PeriodIntervalVector other) -> PeriodIntervalVector
        __init__(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type size) -> PeriodIntervalVector
        __init__(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type size, PeriodInterval value) -> PeriodIntervalVector
        """
        _mxdevtool.PeriodIntervalVector_swiginit(self, _mxdevtool.new_PeriodIntervalVector(*args))

    def push_back(self, x: "PeriodInterval") -> "void":
        r"""push_back(PeriodIntervalVector self, PeriodInterval x)"""
        return _mxdevtool.PeriodIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< PeriodInterval >::value_type const &":
        r"""front(PeriodIntervalVector self) -> PeriodInterval"""
        return _mxdevtool.PeriodIntervalVector_front(self)

    def back(self) -> "std::vector< PeriodInterval >::value_type const &":
        r"""back(PeriodIntervalVector self) -> PeriodInterval"""
        return _mxdevtool.PeriodIntervalVector_back(self)

    def assign(self, n: "std::vector< PeriodInterval >::size_type", x: "PeriodInterval") -> "void":
        r"""assign(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type n, PeriodInterval x)"""
        return _mxdevtool.PeriodIntervalVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type new_size)
        resize(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type new_size, PeriodInterval x)
        """
        return _mxdevtool.PeriodIntervalVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(PeriodIntervalVector self, std::vector< PeriodInterval >::iterator pos, PeriodInterval x) -> std::vector< PeriodInterval >::iterator
        insert(PeriodIntervalVector self, std::vector< PeriodInterval >::iterator pos, std::vector< PeriodInterval >::size_type n, PeriodInterval x)
        """
        return _mxdevtool.PeriodIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< PeriodInterval >::size_type") -> "void":
        r"""reserve(PeriodIntervalVector self, std::vector< PeriodInterval >::size_type n)"""
        return _mxdevtool.PeriodIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< PeriodInterval >::size_type":
        r"""capacity(PeriodIntervalVector self) -> std::vector< PeriodInterval >::size_type"""
        return _mxdevtool.PeriodIntervalVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_PeriodIntervalVector

# Register PeriodIntervalVector in _mxdevtool:
_mxdevtool.PeriodIntervalVector_swigregister(PeriodIntervalVector)

class Date(object):
    r"""Proxy of C++ Date class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def weekday(self) -> "Weekday":
        r"""weekday(Date self) -> Weekday"""
        return _mxdevtool.Date_weekday(self)

    def dayOfMonth(self) -> "Day":
        r"""dayOfMonth(Date self) -> Day"""
        return _mxdevtool.Date_dayOfMonth(self)

    def dayOfYear(self) -> "Day":
        r"""dayOfYear(Date self) -> Day"""
        return _mxdevtool.Date_dayOfYear(self)

    def month(self) -> "Month":
        r"""month(Date self) -> Month"""
        return _mxdevtool.Date_month(self)

    def year(self) -> "Year":
        r"""year(Date self) -> Year"""
        return _mxdevtool.Date_year(self)

    @staticmethod
    def isLeap(y: "Year") -> "bool":
        r"""isLeap(Year y) -> bool"""
        return _mxdevtool.Date_isLeap(y)

    @staticmethod
    def minDate() -> "Date":
        r"""minDate() -> Date"""
        return _mxdevtool.Date_minDate()

    @staticmethod
    def maxDate() -> "Date":
        r"""maxDate() -> Date"""
        return _mxdevtool.Date_maxDate()

    @staticmethod
    def todaysDate() -> "Date":
        r"""todaysDate() -> Date"""
        return _mxdevtool.Date_todaysDate()

    @staticmethod
    def endOfMonth(arg1: "Date") -> "Date":
        r"""endOfMonth(Date arg1) -> Date"""
        return _mxdevtool.Date_endOfMonth(arg1)

    @staticmethod
    def isEndOfMonth(arg1: "Date") -> "bool":
        r"""isEndOfMonth(Date arg1) -> bool"""
        return _mxdevtool.Date_isEndOfMonth(arg1)

    @staticmethod
    def nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
        r"""nextWeekday(Date arg1, Weekday arg2) -> Date"""
        return _mxdevtool.Date_nextWeekday(arg1, arg2)

    @staticmethod
    def nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
        r"""nthWeekday(Size n, Weekday arg2, Month m, Year y) -> Date"""
        return _mxdevtool.Date_nthWeekday(n, arg2, m, y)

    def __add__(self, *args) -> "Date":
        r"""
        __add__(Date self, BigInteger days) -> Date
        __add__(Date self, Period arg2) -> Date
        """
        return _mxdevtool.Date___add__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Date self) -> Date
        __init__(Date self, BigInteger serialNumber) -> Date
        __init__(Date self, int y, int m, int d) -> Date
        __init__(Date self, std::string const & str, std::string fmt) -> Date
        """
        _mxdevtool.Date_swiginit(self, _mxdevtool.new_Date(*args))

    def weekdayNumber(self) -> "Integer":
        r"""weekdayNumber(Date self) -> Integer"""
        return _mxdevtool.Date_weekdayNumber(self)

    def __str__(self) -> "std::string":
        r"""__str__(Date self) -> std::string"""
        return _mxdevtool.Date___str__(self)

    def __repr__(self) -> "std::string":
        r"""__repr__(Date self) -> std::string"""
        return _mxdevtool.Date___repr__(self)

    def ISO(self) -> "std::string":
        r"""ISO(Date self) -> std::string"""
        return _mxdevtool.Date_ISO(self)

    def __sub__(self, *args) -> "BigInteger":
        r"""
        __sub__(Date self, BigInteger days) -> Date
        __sub__(Date self, Period arg2) -> Date
        __sub__(Date self, Date other) -> BigInteger
        """
        return _mxdevtool.Date___sub__(self, *args)

    def __eq__(self, other: "Date") -> "bool":
        r"""__eq__(Date self, Date other) -> bool"""
        return _mxdevtool.Date___eq__(self, other)

    def __cmp__(self, other: "Date") -> "int":
        r"""__cmp__(Date self, Date other) -> int"""
        return _mxdevtool.Date___cmp__(self, other)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Date self) -> bool"""
        return _mxdevtool.Date___nonzero__(self)

    def __hash__(self) -> "int":
        r"""__hash__(Date self) -> int"""
        return _mxdevtool.Date___hash__(self)

    def __lt__(self, other: "Date") -> "bool":
        r"""__lt__(Date self, Date other) -> bool"""
        return _mxdevtool.Date___lt__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Date

# Register Date in _mxdevtool:
_mxdevtool.Date_swigregister(Date)

def Date_isLeap(y: "Year") -> "bool":
    r"""Date_isLeap(Year y) -> bool"""
    return _mxdevtool.Date_isLeap(y)

def Date_minDate() -> "Date":
    r"""Date_minDate() -> Date"""
    return _mxdevtool.Date_minDate()

def Date_maxDate() -> "Date":
    r"""Date_maxDate() -> Date"""
    return _mxdevtool.Date_maxDate()

def Date_todaysDate() -> "Date":
    r"""Date_todaysDate() -> Date"""
    return _mxdevtool.Date_todaysDate()

def Date_endOfMonth(arg1: "Date") -> "Date":
    r"""Date_endOfMonth(Date arg1) -> Date"""
    return _mxdevtool.Date_endOfMonth(arg1)

def Date_isEndOfMonth(arg1: "Date") -> "bool":
    r"""Date_isEndOfMonth(Date arg1) -> bool"""
    return _mxdevtool.Date_isEndOfMonth(arg1)

def Date_nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
    r"""Date_nextWeekday(Date arg1, Weekday arg2) -> Date"""
    return _mxdevtool.Date_nextWeekday(arg1, arg2)

def Date_nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
    r"""Date_nthWeekday(Size n, Weekday arg2, Month m, Year y) -> Date"""
    return _mxdevtool.Date_nthWeekday(n, arg2, m, y)

class DateParser(object):
    r"""Proxy of C++ DateParser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
        r"""parseFormatted(std::string const & str, std::string const & fmt) -> Date"""
        return _mxdevtool.DateParser_parseFormatted(str, fmt)

    @staticmethod
    def parseISO(str: "std::string const &") -> "Date":
        r"""parseISO(std::string const & str) -> Date"""
        return _mxdevtool.DateParser_parseISO(str)

    @staticmethod
    def parse(str: "std::string const &", fmt: "std::string") -> "Date":
        r"""parse(std::string const & str, std::string fmt) -> Date"""
        return _mxdevtool.DateParser_parse(str, fmt)

    def __init__(self):
        r"""__init__(DateParser self) -> DateParser"""
        _mxdevtool.DateParser_swiginit(self, _mxdevtool.new_DateParser())
    __swig_destroy__ = _mxdevtool.delete_DateParser

# Register DateParser in _mxdevtool:
_mxdevtool.DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
    r"""DateParser_parseFormatted(std::string const & str, std::string const & fmt) -> Date"""
    return _mxdevtool.DateParser_parseFormatted(str, fmt)

def DateParser_parseISO(str: "std::string const &") -> "Date":
    r"""DateParser_parseISO(std::string const & str) -> Date"""
    return _mxdevtool.DateParser_parseISO(str)

def DateParser_parse(str: "std::string const &", fmt: "std::string") -> "Date":
    r"""DateParser_parse(std::string const & str, std::string fmt) -> Date"""
    return _mxdevtool.DateParser_parse(str, fmt)

class PeriodParser(object):
    r"""Proxy of C++ PeriodParser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(str: "std::string const &") -> "Period":
        r"""parse(std::string const & str) -> Period"""
        return _mxdevtool.PeriodParser_parse(str)

    def __init__(self):
        r"""__init__(PeriodParser self) -> PeriodParser"""
        _mxdevtool.PeriodParser_swiginit(self, _mxdevtool.new_PeriodParser())
    __swig_destroy__ = _mxdevtool.delete_PeriodParser

# Register PeriodParser in _mxdevtool:
_mxdevtool.PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str: "std::string const &") -> "Period":
    r"""PeriodParser_parse(std::string const & str) -> Period"""
    return _mxdevtool.PeriodParser_parse(str)


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(object):
    r"""Proxy of C++ std::vector< Date > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DateVector self) -> SwigPyIterator"""
        return _mxdevtool.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DateVector self) -> bool"""
        return _mxdevtool.DateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DateVector self) -> bool"""
        return _mxdevtool.DateVector___bool__(self)

    def __len__(self) -> "std::vector< Date >::size_type":
        r"""__len__(DateVector self) -> std::vector< Date >::size_type"""
        return _mxdevtool.DateVector___len__(self)

    def __getslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "std::vector< Date,std::allocator< Date > > *":
        r"""__getslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j) -> DateVector"""
        return _mxdevtool.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j, DateVector v)
        """
        return _mxdevtool.DateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "void":
        r"""__delslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)"""
        return _mxdevtool.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DateVector self, std::vector< Date >::difference_type i)
        __delitem__(DateVector self, PySliceObject * slice)
        """
        return _mxdevtool.DateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Date >::value_type const &":
        r"""
        __getitem__(DateVector self, PySliceObject * slice) -> DateVector
        __getitem__(DateVector self, std::vector< Date >::difference_type i) -> Date
        """
        return _mxdevtool.DateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DateVector self, PySliceObject * slice, DateVector v)
        __setitem__(DateVector self, PySliceObject * slice)
        __setitem__(DateVector self, std::vector< Date >::difference_type i, Date x)
        """
        return _mxdevtool.DateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Date >::value_type":
        r"""pop(DateVector self) -> Date"""
        return _mxdevtool.DateVector_pop(self)

    def append(self, x: "Date") -> "void":
        r"""append(DateVector self, Date x)"""
        return _mxdevtool.DateVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DateVector self) -> bool"""
        return _mxdevtool.DateVector_empty(self)

    def size(self) -> "std::vector< Date >::size_type":
        r"""size(DateVector self) -> std::vector< Date >::size_type"""
        return _mxdevtool.DateVector_size(self)

    def swap(self, v: "DateVector") -> "void":
        r"""swap(DateVector self, DateVector v)"""
        return _mxdevtool.DateVector_swap(self, v)

    def begin(self) -> "std::vector< Date >::iterator":
        r"""begin(DateVector self) -> std::vector< Date >::iterator"""
        return _mxdevtool.DateVector_begin(self)

    def end(self) -> "std::vector< Date >::iterator":
        r"""end(DateVector self) -> std::vector< Date >::iterator"""
        return _mxdevtool.DateVector_end(self)

    def rbegin(self) -> "std::vector< Date >::reverse_iterator":
        r"""rbegin(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _mxdevtool.DateVector_rbegin(self)

    def rend(self) -> "std::vector< Date >::reverse_iterator":
        r"""rend(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _mxdevtool.DateVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DateVector self)"""
        return _mxdevtool.DateVector_clear(self)

    def get_allocator(self) -> "std::vector< Date >::allocator_type":
        r"""get_allocator(DateVector self) -> std::vector< Date >::allocator_type"""
        return _mxdevtool.DateVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DateVector self)"""
        return _mxdevtool.DateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Date >::iterator":
        r"""
        erase(DateVector self, std::vector< Date >::iterator pos) -> std::vector< Date >::iterator
        erase(DateVector self, std::vector< Date >::iterator first, std::vector< Date >::iterator last) -> std::vector< Date >::iterator
        """
        return _mxdevtool.DateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DateVector self) -> DateVector
        __init__(DateVector self, DateVector other) -> DateVector
        __init__(DateVector self, std::vector< Date >::size_type size) -> DateVector
        __init__(DateVector self, std::vector< Date >::size_type size, Date value) -> DateVector
        """
        _mxdevtool.DateVector_swiginit(self, _mxdevtool.new_DateVector(*args))

    def push_back(self, x: "Date") -> "void":
        r"""push_back(DateVector self, Date x)"""
        return _mxdevtool.DateVector_push_back(self, x)

    def front(self) -> "std::vector< Date >::value_type const &":
        r"""front(DateVector self) -> Date"""
        return _mxdevtool.DateVector_front(self)

    def back(self) -> "std::vector< Date >::value_type const &":
        r"""back(DateVector self) -> Date"""
        return _mxdevtool.DateVector_back(self)

    def assign(self, n: "std::vector< Date >::size_type", x: "Date") -> "void":
        r"""assign(DateVector self, std::vector< Date >::size_type n, Date x)"""
        return _mxdevtool.DateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DateVector self, std::vector< Date >::size_type new_size)
        resize(DateVector self, std::vector< Date >::size_type new_size, Date x)
        """
        return _mxdevtool.DateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DateVector self, std::vector< Date >::iterator pos, Date x) -> std::vector< Date >::iterator
        insert(DateVector self, std::vector< Date >::iterator pos, std::vector< Date >::size_type n, Date x)
        """
        return _mxdevtool.DateVector_insert(self, *args)

    def reserve(self, n: "std::vector< Date >::size_type") -> "void":
        r"""reserve(DateVector self, std::vector< Date >::size_type n)"""
        return _mxdevtool.DateVector_reserve(self, n)

    def capacity(self) -> "std::vector< Date >::size_type":
        r"""capacity(DateVector self) -> std::vector< Date >::size_type"""
        return _mxdevtool.DateVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DateVector

# Register DateVector in _mxdevtool:
_mxdevtool.DateVector_swigregister(DateVector)

class IMM(object):
    r"""Proxy of C++ IMM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _mxdevtool.IMM_F
    
    G = _mxdevtool.IMM_G
    
    H = _mxdevtool.IMM_H
    
    J = _mxdevtool.IMM_J
    
    K = _mxdevtool.IMM_K
    
    M = _mxdevtool.IMM_M
    
    N = _mxdevtool.IMM_N
    
    Q = _mxdevtool.IMM_Q
    
    U = _mxdevtool.IMM_U
    
    V = _mxdevtool.IMM_V
    
    X = _mxdevtool.IMM_X
    
    Z = _mxdevtool.IMM_Z
    

    @staticmethod
    def isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
        r"""isIMMdate(Date d, bool mainCycle=True) -> bool"""
        return _mxdevtool.IMM_isIMMdate(d, mainCycle)

    @staticmethod
    def isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
        r"""isIMMcode(std::string const & code, bool mainCycle=True) -> bool"""
        return _mxdevtool.IMM_isIMMcode(code, mainCycle)

    @staticmethod
    def code(immDate: "Date") -> "std::string":
        r"""code(Date immDate) -> std::string"""
        return _mxdevtool.IMM_code(immDate)

    @staticmethod
    def date(*args) -> "Date":
        r"""date(std::string const & immCode, Date referenceDate=Date()) -> Date"""
        return _mxdevtool.IMM_date(*args)

    @staticmethod
    def nextDate(*args) -> "Date":
        r"""
        nextDate(Date d=Date(), bool mainCycle=True) -> Date
        nextDate(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> Date
        """
        return _mxdevtool.IMM_nextDate(*args)

    @staticmethod
    def nextCode(*args) -> "std::string":
        r"""
        nextCode(Date d=Date(), bool mainCycle=True) -> std::string
        nextCode(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> std::string
        """
        return _mxdevtool.IMM_nextCode(*args)

    def __init__(self):
        r"""__init__(IMM self) -> IMM"""
        _mxdevtool.IMM_swiginit(self, _mxdevtool.new_IMM())
    __swig_destroy__ = _mxdevtool.delete_IMM

# Register IMM in _mxdevtool:
_mxdevtool.IMM_swigregister(IMM)

def IMM_isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
    r"""IMM_isIMMdate(Date d, bool mainCycle=True) -> bool"""
    return _mxdevtool.IMM_isIMMdate(d, mainCycle)

def IMM_isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
    r"""IMM_isIMMcode(std::string const & code, bool mainCycle=True) -> bool"""
    return _mxdevtool.IMM_isIMMcode(code, mainCycle)

def IMM_code(immDate: "Date") -> "std::string":
    r"""IMM_code(Date immDate) -> std::string"""
    return _mxdevtool.IMM_code(immDate)

def IMM_date(*args) -> "Date":
    r"""IMM_date(std::string const & immCode, Date referenceDate=Date()) -> Date"""
    return _mxdevtool.IMM_date(*args)

def IMM_nextDate(*args) -> "Date":
    r"""
    IMM_nextDate(Date d=Date(), bool mainCycle=True) -> Date
    IMM_nextDate(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> Date
    """
    return _mxdevtool.IMM_nextDate(*args)

def IMM_nextCode(*args) -> "std::string":
    r"""
    IMM_nextCode(Date d=Date(), bool mainCycle=True) -> std::string
    IMM_nextCode(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> std::string
    """
    return _mxdevtool.IMM_nextCode(*args)

class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _mxdevtool.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IntVector self) -> bool"""
        return _mxdevtool.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(IntVector self) -> bool"""
        return _mxdevtool.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _mxdevtool.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _mxdevtool.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _mxdevtool.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _mxdevtool.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _mxdevtool.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _mxdevtool.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _mxdevtool.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _mxdevtool.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _mxdevtool.IntVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(IntVector self) -> bool"""
        return _mxdevtool.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _mxdevtool.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        r"""swap(IntVector self, IntVector v)"""
        return _mxdevtool.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _mxdevtool.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _mxdevtool.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _mxdevtool.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _mxdevtool.IntVector_rend(self)

    def clear(self) -> "void":
        r"""clear(IntVector self)"""
        return _mxdevtool.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _mxdevtool.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(IntVector self)"""
        return _mxdevtool.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _mxdevtool.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _mxdevtool.IntVector_swiginit(self, _mxdevtool.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _mxdevtool.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _mxdevtool.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _mxdevtool.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _mxdevtool.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _mxdevtool.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _mxdevtool.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _mxdevtool.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _mxdevtool.IntVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_IntVector

# Register IntVector in _mxdevtool:
_mxdevtool.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    r"""Proxy of C++ std::vector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(UnsignedIntVector self) -> SwigPyIterator"""
        return _mxdevtool.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(UnsignedIntVector self) -> bool"""
        return _mxdevtool.UnsignedIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(UnsignedIntVector self) -> bool"""
        return _mxdevtool.UnsignedIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        r"""__len__(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _mxdevtool.UnsignedIntVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        r"""__getslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> UnsignedIntVector"""
        return _mxdevtool.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, UnsignedIntVector v)
        """
        return _mxdevtool.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        r"""__delslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _mxdevtool.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i)
        __delitem__(UnsignedIntVector self, PySliceObject * slice)
        """
        return _mxdevtool.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        r"""
        __getitem__(UnsignedIntVector self, PySliceObject * slice) -> UnsignedIntVector
        __getitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _mxdevtool.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(UnsignedIntVector self, PySliceObject * slice, UnsignedIntVector v)
        __setitem__(UnsignedIntVector self, PySliceObject * slice)
        __setitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _mxdevtool.UnsignedIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        r"""pop(UnsignedIntVector self) -> std::vector< unsigned int >::value_type"""
        return _mxdevtool.UnsignedIntVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        r"""append(UnsignedIntVector self, std::vector< unsigned int >::value_type const & x)"""
        return _mxdevtool.UnsignedIntVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(UnsignedIntVector self) -> bool"""
        return _mxdevtool.UnsignedIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        r"""size(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _mxdevtool.UnsignedIntVector_size(self)

    def swap(self, v: "UnsignedIntVector") -> "void":
        r"""swap(UnsignedIntVector self, UnsignedIntVector v)"""
        return _mxdevtool.UnsignedIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        r"""begin(UnsignedIntVector self) -> std::vector< unsigned int >::iterator"""
        return _mxdevtool.UnsignedIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        r"""end(UnsignedIntVector self) -> std::vector< unsigned int >::iterator"""
        return _mxdevtool.UnsignedIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        r"""rbegin(UnsignedIntVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _mxdevtool.UnsignedIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        r"""rend(UnsignedIntVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _mxdevtool.UnsignedIntVector_rend(self)

    def clear(self) -> "void":
        r"""clear(UnsignedIntVector self)"""
        return _mxdevtool.UnsignedIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        r"""get_allocator(UnsignedIntVector self) -> std::vector< unsigned int >::allocator_type"""
        return _mxdevtool.UnsignedIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(UnsignedIntVector self)"""
        return _mxdevtool.UnsignedIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        r"""
        erase(UnsignedIntVector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(UnsignedIntVector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _mxdevtool.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UnsignedIntVector self) -> UnsignedIntVector
        __init__(UnsignedIntVector self, UnsignedIntVector other) -> UnsignedIntVector
        __init__(UnsignedIntVector self, std::vector< unsigned int >::size_type size) -> UnsignedIntVector
        __init__(UnsignedIntVector self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> UnsignedIntVector
        """
        _mxdevtool.UnsignedIntVector_swiginit(self, _mxdevtool.new_UnsignedIntVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        r"""push_back(UnsignedIntVector self, std::vector< unsigned int >::value_type const & x)"""
        return _mxdevtool.UnsignedIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        r"""front(UnsignedIntVector self) -> std::vector< unsigned int >::value_type const &"""
        return _mxdevtool.UnsignedIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        r"""back(UnsignedIntVector self) -> std::vector< unsigned int >::value_type const &"""
        return _mxdevtool.UnsignedIntVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        r"""assign(UnsignedIntVector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _mxdevtool.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(UnsignedIntVector self, std::vector< unsigned int >::size_type new_size)
        resize(UnsignedIntVector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _mxdevtool.UnsignedIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(UnsignedIntVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(UnsignedIntVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _mxdevtool.UnsignedIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        r"""reserve(UnsignedIntVector self, std::vector< unsigned int >::size_type n)"""
        return _mxdevtool.UnsignedIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        r"""capacity(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _mxdevtool.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_UnsignedIntVector

# Register UnsignedIntVector in _mxdevtool:
_mxdevtool.UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _mxdevtool.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _mxdevtool.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVector self) -> bool"""
        return _mxdevtool.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _mxdevtool.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        r"""__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _mxdevtool.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _mxdevtool.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        r"""__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _mxdevtool.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _mxdevtool.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _mxdevtool.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _mxdevtool.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _mxdevtool.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _mxdevtool.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVector self) -> bool"""
        return _mxdevtool.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _mxdevtool.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        r"""swap(DoubleVector self, DoubleVector v)"""
        return _mxdevtool.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _mxdevtool.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _mxdevtool.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _mxdevtool.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _mxdevtool.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVector self)"""
        return _mxdevtool.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _mxdevtool.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVector self)"""
        return _mxdevtool.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _mxdevtool.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        _mxdevtool.DoubleVector_swiginit(self, _mxdevtool.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _mxdevtool.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _mxdevtool.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _mxdevtool.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        r"""assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _mxdevtool.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _mxdevtool.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _mxdevtool.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        r"""reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _mxdevtool.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _mxdevtool.DoubleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DoubleVector

# Register DoubleVector in _mxdevtool:
_mxdevtool.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVectorVector self) -> SwigPyIterator"""
        return _mxdevtool.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVectorVector self) -> bool"""
        return _mxdevtool.DoubleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVectorVector self) -> bool"""
        return _mxdevtool.DoubleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        r"""__len__(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _mxdevtool.DoubleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        r"""__getslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> DoubleVectorVector"""
        return _mxdevtool.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, DoubleVectorVector v)
        """
        return _mxdevtool.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        r"""__delslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _mxdevtool.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(DoubleVectorVector self, PySliceObject * slice)
        """
        return _mxdevtool.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        r"""
        __getitem__(DoubleVectorVector self, PySliceObject * slice) -> DoubleVectorVector
        __getitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector
        """
        return _mxdevtool.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVectorVector self, PySliceObject * slice, DoubleVectorVector v)
        __setitem__(DoubleVectorVector self, PySliceObject * slice)
        __setitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)
        """
        return _mxdevtool.DoubleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        r"""pop(DoubleVectorVector self) -> DoubleVector"""
        return _mxdevtool.DoubleVectorVector_pop(self)

    def append(self, x: "DoubleVector") -> "void":
        r"""append(DoubleVectorVector self, DoubleVector x)"""
        return _mxdevtool.DoubleVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVectorVector self) -> bool"""
        return _mxdevtool.DoubleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        r"""size(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _mxdevtool.DoubleVectorVector_size(self)

    def swap(self, v: "DoubleVectorVector") -> "void":
        r"""swap(DoubleVectorVector self, DoubleVectorVector v)"""
        return _mxdevtool.DoubleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        r"""begin(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator"""
        return _mxdevtool.DoubleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        r"""end(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator"""
        return _mxdevtool.DoubleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rbegin(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _mxdevtool.DoubleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rend(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _mxdevtool.DoubleVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVectorVector self)"""
        return _mxdevtool.DoubleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        r"""get_allocator(DoubleVectorVector self) -> std::vector< std::vector< double > >::allocator_type"""
        return _mxdevtool.DoubleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVectorVector self)"""
        return _mxdevtool.DoubleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        r"""
        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _mxdevtool.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVectorVector self) -> DoubleVectorVector
        __init__(DoubleVectorVector self, DoubleVectorVector other) -> DoubleVectorVector
        __init__(DoubleVectorVector self, std::vector< std::vector< double > >::size_type size) -> DoubleVectorVector
        __init__(DoubleVectorVector self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> DoubleVectorVector
        """
        _mxdevtool.DoubleVectorVector_swiginit(self, _mxdevtool.new_DoubleVectorVector(*args))

    def push_back(self, x: "DoubleVector") -> "void":
        r"""push_back(DoubleVectorVector self, DoubleVector x)"""
        return _mxdevtool.DoubleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""front(DoubleVectorVector self) -> DoubleVector"""
        return _mxdevtool.DoubleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""back(DoubleVectorVector self) -> DoubleVector"""
        return _mxdevtool.DoubleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "DoubleVector") -> "void":
        r"""assign(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n, DoubleVector x)"""
        return _mxdevtool.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size)
        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)
        """
        return _mxdevtool.DoubleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator
        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, DoubleVector x)
        """
        return _mxdevtool.DoubleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        r"""reserve(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n)"""
        return _mxdevtool.DoubleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        r"""capacity(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _mxdevtool.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_DoubleVectorVector

# Register DoubleVectorVector in _mxdevtool:
_mxdevtool.DoubleVectorVector_swigregister(DoubleVectorVector)

class StrVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(StrVector self) -> SwigPyIterator"""
        return _mxdevtool.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(StrVector self) -> bool"""
        return _mxdevtool.StrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(StrVector self) -> bool"""
        return _mxdevtool.StrVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(StrVector self) -> std::vector< std::string >::size_type"""
        return _mxdevtool.StrVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""__getslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StrVector"""
        return _mxdevtool.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StrVector v)
        """
        return _mxdevtool.StrVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        r"""__delslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _mxdevtool.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(StrVector self, std::vector< std::string >::difference_type i)
        __delitem__(StrVector self, PySliceObject * slice)
        """
        return _mxdevtool.StrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(StrVector self, PySliceObject * slice) -> StrVector
        __getitem__(StrVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _mxdevtool.StrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(StrVector self, PySliceObject * slice, StrVector v)
        __setitem__(StrVector self, PySliceObject * slice)
        __setitem__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _mxdevtool.StrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(StrVector self) -> std::vector< std::string >::value_type"""
        return _mxdevtool.StrVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""append(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _mxdevtool.StrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(StrVector self) -> bool"""
        return _mxdevtool.StrVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(StrVector self) -> std::vector< std::string >::size_type"""
        return _mxdevtool.StrVector_size(self)

    def swap(self, v: "StrVector") -> "void":
        r"""swap(StrVector self, StrVector v)"""
        return _mxdevtool.StrVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(StrVector self) -> std::vector< std::string >::iterator"""
        return _mxdevtool.StrVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(StrVector self) -> std::vector< std::string >::iterator"""
        return _mxdevtool.StrVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _mxdevtool.StrVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _mxdevtool.StrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(StrVector self)"""
        return _mxdevtool.StrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(StrVector self) -> std::vector< std::string >::allocator_type"""
        return _mxdevtool.StrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(StrVector self)"""
        return _mxdevtool.StrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(StrVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StrVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _mxdevtool.StrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StrVector self) -> StrVector
        __init__(StrVector self, StrVector other) -> StrVector
        __init__(StrVector self, std::vector< std::string >::size_type size) -> StrVector
        __init__(StrVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StrVector
        """
        _mxdevtool.StrVector_swiginit(self, _mxdevtool.new_StrVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""push_back(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _mxdevtool.StrVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _mxdevtool.StrVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _mxdevtool.StrVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        r"""assign(StrVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _mxdevtool.StrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(StrVector self, std::vector< std::string >::size_type new_size)
        resize(StrVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _mxdevtool.StrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _mxdevtool.StrVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        r"""reserve(StrVector self, std::vector< std::string >::size_type n)"""
        return _mxdevtool.StrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(StrVector self) -> std::vector< std::string >::size_type"""
        return _mxdevtool.StrVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_StrVector

# Register StrVector in _mxdevtool:
_mxdevtool.StrVector_swigregister(StrVector)

class BoolVector(object):
    r"""Proxy of C++ std::vector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(BoolVector self) -> SwigPyIterator"""
        return _mxdevtool.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(BoolVector self) -> bool"""
        return _mxdevtool.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(BoolVector self) -> bool"""
        return _mxdevtool.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        r"""__len__(BoolVector self) -> std::vector< bool >::size_type"""
        return _mxdevtool.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        r"""__getslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BoolVector"""
        return _mxdevtool.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BoolVector v)
        """
        return _mxdevtool.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        r"""__delslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _mxdevtool.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(BoolVector self, std::vector< bool >::difference_type i)
        __delitem__(BoolVector self, PySliceObject * slice)
        """
        return _mxdevtool.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        r"""
        __getitem__(BoolVector self, PySliceObject * slice) -> BoolVector
        __getitem__(BoolVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _mxdevtool.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(BoolVector self, PySliceObject * slice, BoolVector v)
        __setitem__(BoolVector self, PySliceObject * slice)
        __setitem__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _mxdevtool.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        r"""pop(BoolVector self) -> std::vector< bool >::value_type"""
        return _mxdevtool.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        r"""append(BoolVector self, std::vector< bool >::value_type x)"""
        return _mxdevtool.BoolVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(BoolVector self) -> bool"""
        return _mxdevtool.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        r"""size(BoolVector self) -> std::vector< bool >::size_type"""
        return _mxdevtool.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        r"""swap(BoolVector self, BoolVector v)"""
        return _mxdevtool.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        r"""begin(BoolVector self) -> std::vector< bool >::iterator"""
        return _mxdevtool.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        r"""end(BoolVector self) -> std::vector< bool >::iterator"""
        return _mxdevtool.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        r"""rbegin(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _mxdevtool.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        r"""rend(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _mxdevtool.BoolVector_rend(self)

    def clear(self) -> "void":
        r"""clear(BoolVector self)"""
        return _mxdevtool.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        r"""get_allocator(BoolVector self) -> std::vector< bool >::allocator_type"""
        return _mxdevtool.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(BoolVector self)"""
        return _mxdevtool.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        r"""
        erase(BoolVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(BoolVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _mxdevtool.BoolVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BoolVector self) -> BoolVector
        __init__(BoolVector self, BoolVector other) -> BoolVector
        __init__(BoolVector self, std::vector< bool >::size_type size) -> BoolVector
        __init__(BoolVector self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BoolVector
        """
        _mxdevtool.BoolVector_swiginit(self, _mxdevtool.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        r"""push_back(BoolVector self, std::vector< bool >::value_type x)"""
        return _mxdevtool.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        r"""front(BoolVector self) -> std::vector< bool >::value_type"""
        return _mxdevtool.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        r"""back(BoolVector self) -> std::vector< bool >::value_type"""
        return _mxdevtool.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        r"""assign(BoolVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _mxdevtool.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(BoolVector self, std::vector< bool >::size_type new_size)
        resize(BoolVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _mxdevtool.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _mxdevtool.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        r"""reserve(BoolVector self, std::vector< bool >::size_type n)"""
        return _mxdevtool.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        r"""capacity(BoolVector self) -> std::vector< bool >::size_type"""
        return _mxdevtool.BoolVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_BoolVector

# Register BoolVector in _mxdevtool:
_mxdevtool.BoolVector_swigregister(BoolVector)

class Observable(object):
    r"""Proxy of C++ boost::shared_ptr< Observable > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Observable *":
        r"""__deref__(Observable self) -> Observable *"""
        return _mxdevtool.Observable___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Observable self) -> bool"""
        return _mxdevtool.Observable___nonzero__(self)

    def __init__(self):
        r"""__init__(Observable self) -> Observable"""
        _mxdevtool.Observable_swiginit(self, _mxdevtool.new_Observable())
    __swig_destroy__ = _mxdevtool.delete_Observable

# Register Observable in _mxdevtool:
_mxdevtool.Observable_swigregister(Observable)

class Observer(object):
    r"""Proxy of C++ PyObserver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback: "PyObject *"):
        r"""__init__(Observer self, PyObject * callback) -> Observer"""
        _mxdevtool.Observer_swiginit(self, _mxdevtool.new_Observer(callback))

    def _registerWith(self, arg2: "Observable") -> "void":
        r"""_registerWith(Observer self, Observable arg2)"""
        return _mxdevtool.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2: "Observable") -> "void":
        r"""_unregisterWith(Observer self, Observable arg2)"""
        return _mxdevtool.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        self._registerWith(x.asObservable())
    def unregisterWith(self,x):
        self._unregisterWith(x.asObservable())

    __swig_destroy__ = _mxdevtool.delete_Observer

# Register Observer in _mxdevtool:
_mxdevtool.Observer_swigregister(Observer)

class Array(object):
    r"""Proxy of C++ Array class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Array self) -> Array
        __init__(Array self, Size n, Real fill=0.0) -> Array
        __init__(Array self, Array arg2) -> Array
        """
        _mxdevtool.Array_swiginit(self, _mxdevtool.new_Array(*args))

    def __len__(self) -> "Size":
        r"""__len__(Array self) -> Size"""
        return _mxdevtool.Array___len__(self)

    def __str__(self) -> "std::string":
        r"""__str__(Array self) -> std::string"""
        return _mxdevtool.Array___str__(self)

    def __add__(self, a: "Array") -> "Array":
        r"""__add__(Array self, Array a) -> Array"""
        return _mxdevtool.Array___add__(self, a)

    def __sub__(self, a: "Array") -> "Array":
        r"""__sub__(Array self, Array a) -> Array"""
        return _mxdevtool.Array___sub__(self, a)

    def __mul__(self, *args) -> "Array":
        r"""
        __mul__(Array self, Real a) -> Array
        __mul__(Array self, Array a) -> Real
        __mul__(Array self, Matrix a) -> Array
        """
        return _mxdevtool.Array___mul__(self, *args)

    def __div__(self, a: "Real") -> "Array":
        r"""__div__(Array self, Real a) -> Array"""
        return _mxdevtool.Array___div__(self, a)

    def __rmul__(self, a: "Real") -> "Array":
        r"""__rmul__(Array self, Real a) -> Array"""
        return _mxdevtool.Array___rmul__(self, a)

    def __getslice__(self, i: "Integer", j: "Integer") -> "Array":
        r"""__getslice__(Array self, Integer i, Integer j) -> Array"""
        return _mxdevtool.Array___getslice__(self, i, j)

    def __setslice__(self, i: "Integer", j: "Integer", rhs: "Array") -> "void":
        r"""__setslice__(Array self, Integer i, Integer j, Array rhs)"""
        return _mxdevtool.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Array self) -> bool"""
        return _mxdevtool.Array___nonzero__(self)

    def __getitem__(self, i: "Integer") -> "Real":
        r"""__getitem__(Array self, Integer i) -> Real"""
        return _mxdevtool.Array___getitem__(self, i)

    def __setitem__(self, i: "Integer", x: "Real") -> "void":
        r"""__setitem__(Array self, Integer i, Real x)"""
        return _mxdevtool.Array___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_Array

# Register Array in _mxdevtool:
_mxdevtool.Array_swigregister(Array)

class DefaultLexicographicalViewColumn(object):
    r"""Proxy of C++ DefaultLexicographicalViewColumn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        r"""__getitem__(DefaultLexicographicalViewColumn self, Size i) -> Real"""
        return _mxdevtool.DefaultLexicographicalViewColumn___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        r"""__setitem__(DefaultLexicographicalViewColumn self, Size i, Real x)"""
        return _mxdevtool.DefaultLexicographicalViewColumn___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_DefaultLexicographicalViewColumn

# Register DefaultLexicographicalViewColumn in _mxdevtool:
_mxdevtool.DefaultLexicographicalViewColumn_swigregister(DefaultLexicographicalViewColumn)

class LexicographicalView(object):
    r"""Proxy of C++ DefaultLexicographicalView class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xSize(self) -> "Size":
        r"""xSize(LexicographicalView self) -> Size"""
        return _mxdevtool.LexicographicalView_xSize(self)

    def ySize(self) -> "Size":
        r"""ySize(LexicographicalView self) -> Size"""
        return _mxdevtool.LexicographicalView_ySize(self)

    def __init__(self, a: "Array", xSize: "Size"):
        r"""__init__(LexicographicalView self, Array a, Size xSize) -> LexicographicalView"""
        _mxdevtool.LexicographicalView_swiginit(self, _mxdevtool.new_LexicographicalView(a, xSize))

    def __str__(self) -> "std::string":
        r"""__str__(LexicographicalView self) -> std::string"""
        return _mxdevtool.LexicographicalView___str__(self)

    def __getitem__(self, i: "Size") -> "DefaultLexicographicalViewColumn":
        r"""__getitem__(LexicographicalView self, Size i) -> DefaultLexicographicalViewColumn"""
        return _mxdevtool.LexicographicalView___getitem__(self, i)
    __swig_destroy__ = _mxdevtool.delete_LexicographicalView

# Register LexicographicalView in _mxdevtool:
_mxdevtool.LexicographicalView_swigregister(LexicographicalView)

class MatrixRow(object):
    r"""Proxy of C++ MatrixRow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        r"""__getitem__(MatrixRow self, Size i) -> Real"""
        return _mxdevtool.MatrixRow___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        r"""__setitem__(MatrixRow self, Size i, Real x)"""
        return _mxdevtool.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _mxdevtool.delete_MatrixRow

# Register MatrixRow in _mxdevtool:
_mxdevtool.MatrixRow_swigregister(MatrixRow)

class Matrix(object):
    r"""Proxy of C++ Matrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rows(self) -> "Size":
        r"""rows(Matrix self) -> Size"""
        return _mxdevtool.Matrix_rows(self)

    def columns(self) -> "Size":
        r"""columns(Matrix self) -> Size"""
        return _mxdevtool.Matrix_columns(self)

    def __init__(self, *args):
        r"""
        __init__(Matrix self) -> Matrix
        __init__(Matrix self, Size rows, Size columns, Real fill=0.0) -> Matrix
        __init__(Matrix self, Matrix arg2) -> Matrix
        __init__(Matrix self, int sizex) -> Matrix
        """
        _mxdevtool.Matrix_swiginit(self, _mxdevtool.new_Matrix(*args))

    def __str__(self) -> "std::string":
        r"""__str__(Matrix self) -> std::string"""
        return _mxdevtool.Matrix___str__(self)

    def __add__(self, m: "Matrix") -> "Matrix":
        r"""__add__(Matrix self, Matrix m) -> Matrix"""
        return _mxdevtool.Matrix___add__(self, m)

    def __sub__(self, m: "Matrix") -> "Matrix":
        r"""__sub__(Matrix self, Matrix m) -> Matrix"""
        return _mxdevtool.Matrix___sub__(self, m)

    def __mul__(self, *args) -> "Matrix":
        r"""
        __mul__(Matrix self, Real x) -> Matrix
        __mul__(Matrix self, Array x) -> Array
        __mul__(Matrix self, Matrix x) -> Matrix
        """
        return _mxdevtool.Matrix___mul__(self, *args)

    def __div__(self, x: "Real") -> "Matrix":
        r"""__div__(Matrix self, Real x) -> Matrix"""
        return _mxdevtool.Matrix___div__(self, x)

    def __getitem__(self, i: "Size") -> "MatrixRow":
        r"""__getitem__(Matrix self, Size i) -> MatrixRow"""
        return _mxdevtool.Matrix___getitem__(self, i)

    def __rmul__(self, *args) -> "Matrix":
        r"""
        __rmul__(Matrix self, Real x) -> Matrix
        __rmul__(Matrix self, Array x) -> Array
        __rmul__(Matrix self, Matrix x) -> Matrix
        """
        return _mxdevtool.Matrix___rmul__(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Matrix

# Register Matrix in _mxdevtool:
_mxdevtool.Matrix_swigregister(Matrix)

class SalvagingAlgorithm(object):
    r"""Proxy of C++ SalvagingAlgorithm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAlgorithm = _mxdevtool.SalvagingAlgorithm_NoAlgorithm
    
    Spectral = _mxdevtool.SalvagingAlgorithm_Spectral
    

    def __init__(self):
        r"""__init__(SalvagingAlgorithm self) -> SalvagingAlgorithm"""
        _mxdevtool.SalvagingAlgorithm_swiginit(self, _mxdevtool.new_SalvagingAlgorithm())
    __swig_destroy__ = _mxdevtool.delete_SalvagingAlgorithm

# Register SalvagingAlgorithm in _mxdevtool:
_mxdevtool.SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def transpose(m: "Matrix") -> "Matrix":
    r"""transpose(Matrix m) -> Matrix"""
    return _mxdevtool.transpose(m)

def outerProduct(v1: "Array", v2: "Array") -> "Matrix":
    r"""outerProduct(Array v1, Array v2) -> Matrix"""
    return _mxdevtool.outerProduct(v1, v2)

def pseudoSqrt(m: "Matrix", a: "SalvagingAlgorithm::Type") -> "Matrix":
    r"""pseudoSqrt(Matrix m, SalvagingAlgorithm::Type a) -> Matrix"""
    return _mxdevtool.pseudoSqrt(m, a)

def IdentityMatrix(dim: "int") -> "Matrix":
    r"""IdentityMatrix(int dim) -> Matrix"""
    return _mxdevtool.IdentityMatrix(dim)
class SVD(object):
    r"""Proxy of C++ SVD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "Matrix"):
        r"""__init__(SVD self, Matrix arg2) -> SVD"""
        _mxdevtool.SVD_swiginit(self, _mxdevtool.new_SVD(arg2))

    def U(self) -> "Matrix const &":
        r"""U(SVD self) -> Matrix"""
        return _mxdevtool.SVD_U(self)

    def V(self) -> "Matrix const &":
        r"""V(SVD self) -> Matrix"""
        return _mxdevtool.SVD_V(self)

    def S(self) -> "Matrix":
        r"""S(SVD self) -> Matrix"""
        return _mxdevtool.SVD_S(self)

    def singularValues(self) -> "Array const &":
        r"""singularValues(SVD self) -> Array"""
        return _mxdevtool.SVD_singularValues(self)
    __swig_destroy__ = _mxdevtool.delete_SVD

# Register SVD in _mxdevtool:
_mxdevtool.SVD_swigregister(SVD)

class Quote(object):
    r"""Proxy of C++ boost::shared_ptr< Quote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Quote *":
        r"""__deref__(Quote self) -> Quote *"""
        return _mxdevtool.Quote___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Quote self) -> bool"""
        return _mxdevtool.Quote___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(Quote self) -> Observable"""
        return _mxdevtool.Quote_asObservable(self)

    def __init__(self):
        r"""__init__(Quote self) -> Quote"""
        _mxdevtool.Quote_swiginit(self, _mxdevtool.new_Quote())
    __swig_destroy__ = _mxdevtool.delete_Quote

    def value(self) -> "Real":
        r"""value(Quote self) -> Real"""
        return _mxdevtool.Quote_value(self)

# Register Quote in _mxdevtool:
_mxdevtool.Quote_swigregister(Quote)

class QuoteHandle(object):
    r"""Proxy of C++ Handle< Quote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(QuoteHandle self, Quote arg2=boost::shared_ptr()) -> QuoteHandle"""
        _mxdevtool.QuoteHandle_swiginit(self, _mxdevtool.new_QuoteHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< Quote >":
        r"""__deref__(QuoteHandle self) -> Quote"""
        return _mxdevtool.QuoteHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(QuoteHandle self) -> bool"""
        return _mxdevtool.QuoteHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(QuoteHandle self) -> Observable"""
        return _mxdevtool.QuoteHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandle

    def value(self) -> "Real":
        r"""value(QuoteHandle self) -> Real"""
        return _mxdevtool.QuoteHandle_value(self)

# Register QuoteHandle in _mxdevtool:
_mxdevtool.QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    r"""Proxy of C++ RelinkableHandle< Quote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableQuoteHandle self, Quote arg2=boost::shared_ptr()) -> RelinkableQuoteHandle"""
        _mxdevtool.RelinkableQuoteHandle_swiginit(self, _mxdevtool.new_RelinkableQuoteHandle(*args))

    def linkTo(self, arg2: "Quote") -> "void":
        r"""linkTo(RelinkableQuoteHandle self, Quote arg2)"""
        return _mxdevtool.RelinkableQuoteHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandle

# Register RelinkableQuoteHandle in _mxdevtool:
_mxdevtool.RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class SimpleQuote(Quote):
    r"""Proxy of C++ SimpleQuotePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value: "Real"):
        r"""__init__(SimpleQuote self, Real value) -> SimpleQuote"""
        _mxdevtool.SimpleQuote_swiginit(self, _mxdevtool.new_SimpleQuote(value))

    def setValue(self, value: "Real") -> "void":
        r"""setValue(SimpleQuote self, Real value)"""
        return _mxdevtool.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _mxdevtool.delete_SimpleQuote

# Register SimpleQuote in _mxdevtool:
_mxdevtool.SimpleQuote_swigregister(SimpleQuote)

class QuoteVector(object):
    r"""Proxy of C++ std::vector< boost::shared_ptr< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(QuoteVector self) -> SwigPyIterator"""
        return _mxdevtool.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(QuoteVector self) -> bool"""
        return _mxdevtool.QuoteVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(QuoteVector self) -> bool"""
        return _mxdevtool.QuoteVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        r"""__len__(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::size_type"""
        return _mxdevtool.QuoteVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > *":
        r"""__getslice__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i, std::vector< boost::shared_ptr< Quote > >::difference_type j) -> QuoteVector"""
        return _mxdevtool.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i, std::vector< boost::shared_ptr< Quote > >::difference_type j)
        __setslice__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i, std::vector< boost::shared_ptr< Quote > >::difference_type j, QuoteVector v)
        """
        return _mxdevtool.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "void":
        r"""__delslice__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i, std::vector< boost::shared_ptr< Quote > >::difference_type j)"""
        return _mxdevtool.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i)
        __delitem__(QuoteVector self, PySliceObject * slice)
        """
        return _mxdevtool.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        r"""
        __getitem__(QuoteVector self, PySliceObject * slice) -> QuoteVector
        __getitem__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i) -> Quote
        """
        return _mxdevtool.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(QuoteVector self, PySliceObject * slice, QuoteVector v)
        __setitem__(QuoteVector self, PySliceObject * slice)
        __setitem__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::difference_type i, Quote x)
        """
        return _mxdevtool.QuoteVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type":
        r"""pop(QuoteVector self) -> Quote"""
        return _mxdevtool.QuoteVector_pop(self)

    def append(self, x: "Quote") -> "void":
        r"""append(QuoteVector self, Quote x)"""
        return _mxdevtool.QuoteVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(QuoteVector self) -> bool"""
        return _mxdevtool.QuoteVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        r"""size(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::size_type"""
        return _mxdevtool.QuoteVector_size(self)

    def swap(self, v: "QuoteVector") -> "void":
        r"""swap(QuoteVector self, QuoteVector v)"""
        return _mxdevtool.QuoteVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        r"""begin(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::iterator"""
        return _mxdevtool.QuoteVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        r"""end(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::iterator"""
        return _mxdevtool.QuoteVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        r"""rbegin(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::reverse_iterator"""
        return _mxdevtool.QuoteVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        r"""rend(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::reverse_iterator"""
        return _mxdevtool.QuoteVector_rend(self)

    def clear(self) -> "void":
        r"""clear(QuoteVector self)"""
        return _mxdevtool.QuoteVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Quote > >::allocator_type":
        r"""get_allocator(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::allocator_type"""
        return _mxdevtool.QuoteVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(QuoteVector self)"""
        return _mxdevtool.QuoteVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        r"""
        erase(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::iterator pos) -> std::vector< boost::shared_ptr< Quote > >::iterator
        erase(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::iterator first, std::vector< boost::shared_ptr< Quote > >::iterator last) -> std::vector< boost::shared_ptr< Quote > >::iterator
        """
        return _mxdevtool.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteVector self) -> QuoteVector
        __init__(QuoteVector self, QuoteVector other) -> QuoteVector
        __init__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type size) -> QuoteVector
        __init__(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type size, Quote value) -> QuoteVector
        """
        _mxdevtool.QuoteVector_swiginit(self, _mxdevtool.new_QuoteVector(*args))

    def push_back(self, x: "Quote") -> "void":
        r"""push_back(QuoteVector self, Quote x)"""
        return _mxdevtool.QuoteVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        r"""front(QuoteVector self) -> Quote"""
        return _mxdevtool.QuoteVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        r"""back(QuoteVector self) -> Quote"""
        return _mxdevtool.QuoteVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type", x: "Quote") -> "void":
        r"""assign(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type n, Quote x)"""
        return _mxdevtool.QuoteVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type new_size)
        resize(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type new_size, Quote x)
        """
        return _mxdevtool.QuoteVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::iterator pos, Quote x) -> std::vector< boost::shared_ptr< Quote > >::iterator
        insert(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::iterator pos, std::vector< boost::shared_ptr< Quote > >::size_type n, Quote x)
        """
        return _mxdevtool.QuoteVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type") -> "void":
        r"""reserve(QuoteVector self, std::vector< boost::shared_ptr< Quote > >::size_type n)"""
        return _mxdevtool.QuoteVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        r"""capacity(QuoteVector self) -> std::vector< boost::shared_ptr< Quote > >::size_type"""
        return _mxdevtool.QuoteVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteVector

# Register QuoteVector in _mxdevtool:
_mxdevtool.QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< boost::shared_ptr< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(QuoteVectorVector self) -> SwigPyIterator"""
        return _mxdevtool.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(QuoteVectorVector self) -> bool"""
        return _mxdevtool.QuoteVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(QuoteVectorVector self) -> bool"""
        return _mxdevtool.QuoteVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        r"""__len__(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type"""
        return _mxdevtool.QuoteVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "std::vector< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > >,std::allocator< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > > > *":
        r"""__getslice__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type j) -> QuoteVectorVector"""
        return _mxdevtool.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type j)
        __setslice__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type j, QuoteVectorVector v)
        """
        return _mxdevtool.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "void":
        r"""__delslice__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type j)"""
        return _mxdevtool.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i)
        __delitem__(QuoteVectorVector self, PySliceObject * slice)
        """
        return _mxdevtool.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        r"""
        __getitem__(QuoteVectorVector self, PySliceObject * slice) -> QuoteVectorVector
        __getitem__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i) -> QuoteVector
        """
        return _mxdevtool.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(QuoteVectorVector self, PySliceObject * slice, QuoteVectorVector v)
        __setitem__(QuoteVectorVector self, PySliceObject * slice)
        __setitem__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type i, QuoteVector x)
        """
        return _mxdevtool.QuoteVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type":
        r"""pop(QuoteVectorVector self) -> QuoteVector"""
        return _mxdevtool.QuoteVectorVector_pop(self)

    def append(self, x: "QuoteVector") -> "void":
        r"""append(QuoteVectorVector self, QuoteVector x)"""
        return _mxdevtool.QuoteVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(QuoteVectorVector self) -> bool"""
        return _mxdevtool.QuoteVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        r"""size(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type"""
        return _mxdevtool.QuoteVectorVector_size(self)

    def swap(self, v: "QuoteVectorVector") -> "void":
        r"""swap(QuoteVectorVector self, QuoteVectorVector v)"""
        return _mxdevtool.QuoteVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        r"""begin(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator"""
        return _mxdevtool.QuoteVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        r"""end(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator"""
        return _mxdevtool.QuoteVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        r"""rbegin(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator"""
        return _mxdevtool.QuoteVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        r"""rend(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator"""
        return _mxdevtool.QuoteVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(QuoteVectorVector self)"""
        return _mxdevtool.QuoteVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::allocator_type":
        r"""get_allocator(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::allocator_type"""
        return _mxdevtool.QuoteVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(QuoteVectorVector self)"""
        return _mxdevtool.QuoteVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        r"""
        erase(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator pos) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator
        erase(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator first, std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator last) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator
        """
        return _mxdevtool.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteVectorVector self) -> QuoteVectorVector
        __init__(QuoteVectorVector self, QuoteVectorVector other) -> QuoteVectorVector
        __init__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type size) -> QuoteVectorVector
        __init__(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type size, QuoteVector value) -> QuoteVectorVector
        """
        _mxdevtool.QuoteVectorVector_swiginit(self, _mxdevtool.new_QuoteVectorVector(*args))

    def push_back(self, x: "QuoteVector") -> "void":
        r"""push_back(QuoteVectorVector self, QuoteVector x)"""
        return _mxdevtool.QuoteVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        r"""front(QuoteVectorVector self) -> QuoteVector"""
        return _mxdevtool.QuoteVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        r"""back(QuoteVectorVector self) -> QuoteVector"""
        return _mxdevtool.QuoteVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type", x: "QuoteVector") -> "void":
        r"""assign(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type n, QuoteVector x)"""
        return _mxdevtool.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type new_size)
        resize(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type new_size, QuoteVector x)
        """
        return _mxdevtool.QuoteVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator pos, QuoteVector x) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator
        insert(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator pos, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type n, QuoteVector x)
        """
        return _mxdevtool.QuoteVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type") -> "void":
        r"""reserve(QuoteVectorVector self, std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type n)"""
        return _mxdevtool.QuoteVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        r"""capacity(QuoteVectorVector self) -> std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type"""
        return _mxdevtool.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteVectorVector

# Register QuoteVectorVector in _mxdevtool:
_mxdevtool.QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(object):
    r"""Proxy of C++ std::vector< Handle< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(QuoteHandleVector self) -> SwigPyIterator"""
        return _mxdevtool.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(QuoteHandleVector self) -> bool"""
        return _mxdevtool.QuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(QuoteHandleVector self) -> bool"""
        return _mxdevtool.QuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< Handle< Quote > >::size_type":
        r"""__len__(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _mxdevtool.QuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > *":
        r"""__getslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j) -> QuoteHandleVector"""
        return _mxdevtool.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j)
        __setslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j, QuoteHandleVector v)
        """
        return _mxdevtool.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "void":
        r"""__delslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j)"""
        return _mxdevtool.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i)
        __delitem__(QuoteHandleVector self, PySliceObject * slice)
        """
        return _mxdevtool.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Handle< Quote > >::value_type const &":
        r"""
        __getitem__(QuoteHandleVector self, PySliceObject * slice) -> QuoteHandleVector
        __getitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i) -> QuoteHandle
        """
        return _mxdevtool.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(QuoteHandleVector self, PySliceObject * slice, QuoteHandleVector v)
        __setitem__(QuoteHandleVector self, PySliceObject * slice)
        __setitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, QuoteHandle x)
        """
        return _mxdevtool.QuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Handle< Quote > >::value_type":
        r"""pop(QuoteHandleVector self) -> QuoteHandle"""
        return _mxdevtool.QuoteHandleVector_pop(self)

    def append(self, x: "QuoteHandle") -> "void":
        r"""append(QuoteHandleVector self, QuoteHandle x)"""
        return _mxdevtool.QuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(QuoteHandleVector self) -> bool"""
        return _mxdevtool.QuoteHandleVector_empty(self)

    def size(self) -> "std::vector< Handle< Quote > >::size_type":
        r"""size(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _mxdevtool.QuoteHandleVector_size(self)

    def swap(self, v: "QuoteHandleVector") -> "void":
        r"""swap(QuoteHandleVector self, QuoteHandleVector v)"""
        return _mxdevtool.QuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< Handle< Quote > >::iterator":
        r"""begin(QuoteHandleVector self) -> std::vector< Handle< Quote > >::iterator"""
        return _mxdevtool.QuoteHandleVector_begin(self)

    def end(self) -> "std::vector< Handle< Quote > >::iterator":
        r"""end(QuoteHandleVector self) -> std::vector< Handle< Quote > >::iterator"""
        return _mxdevtool.QuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        r"""rbegin(QuoteHandleVector self) -> std::vector< Handle< Quote > >::reverse_iterator"""
        return _mxdevtool.QuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        r"""rend(QuoteHandleVector self) -> std::vector< Handle< Quote > >::reverse_iterator"""
        return _mxdevtool.QuoteHandleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(QuoteHandleVector self)"""
        return _mxdevtool.QuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< Handle< Quote > >::allocator_type":
        r"""get_allocator(QuoteHandleVector self) -> std::vector< Handle< Quote > >::allocator_type"""
        return _mxdevtool.QuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(QuoteHandleVector self)"""
        return _mxdevtool.QuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Handle< Quote > >::iterator":
        r"""
        erase(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos) -> std::vector< Handle< Quote > >::iterator
        erase(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator first, std::vector< Handle< Quote > >::iterator last) -> std::vector< Handle< Quote > >::iterator
        """
        return _mxdevtool.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteHandleVector self) -> QuoteHandleVector
        __init__(QuoteHandleVector self, QuoteHandleVector other) -> QuoteHandleVector
        __init__(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type size) -> QuoteHandleVector
        __init__(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type size, QuoteHandle value) -> QuoteHandleVector
        """
        _mxdevtool.QuoteHandleVector_swiginit(self, _mxdevtool.new_QuoteHandleVector(*args))

    def push_back(self, x: "QuoteHandle") -> "void":
        r"""push_back(QuoteHandleVector self, QuoteHandle x)"""
        return _mxdevtool.QuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< Handle< Quote > >::value_type const &":
        r"""front(QuoteHandleVector self) -> QuoteHandle"""
        return _mxdevtool.QuoteHandleVector_front(self)

    def back(self) -> "std::vector< Handle< Quote > >::value_type const &":
        r"""back(QuoteHandleVector self) -> QuoteHandle"""
        return _mxdevtool.QuoteHandleVector_back(self)

    def assign(self, n: "std::vector< Handle< Quote > >::size_type", x: "QuoteHandle") -> "void":
        r"""assign(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type n, QuoteHandle x)"""
        return _mxdevtool.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type new_size)
        resize(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type new_size, QuoteHandle x)
        """
        return _mxdevtool.QuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos, QuoteHandle x) -> std::vector< Handle< Quote > >::iterator
        insert(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos, std::vector< Handle< Quote > >::size_type n, QuoteHandle x)
        """
        return _mxdevtool.QuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< Handle< Quote > >::size_type") -> "void":
        r"""reserve(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type n)"""
        return _mxdevtool.QuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< Handle< Quote > >::size_type":
        r"""capacity(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _mxdevtool.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandleVector

# Register QuoteHandleVector in _mxdevtool:
_mxdevtool.QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< Handle< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(QuoteHandleVectorVector self) -> SwigPyIterator"""
        return _mxdevtool.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(QuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(QuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.QuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        r"""__len__(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _mxdevtool.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "std::vector< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > >,std::allocator< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > > > *":
        r"""__getslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j) -> QuoteHandleVectorVector"""
        return _mxdevtool.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j)
        __setslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j, QuoteHandleVectorVector v)
        """
        return _mxdevtool.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "void":
        r"""__delslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j)"""
        return _mxdevtool.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i)
        __delitem__(QuoteHandleVectorVector self, PySliceObject * slice)
        """
        return _mxdevtool.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        r"""
        __getitem__(QuoteHandleVectorVector self, PySliceObject * slice) -> QuoteHandleVectorVector
        __getitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i) -> QuoteHandleVector
        """
        return _mxdevtool.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(QuoteHandleVectorVector self, PySliceObject * slice, QuoteHandleVectorVector v)
        __setitem__(QuoteHandleVectorVector self, PySliceObject * slice)
        __setitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, QuoteHandleVector x)
        """
        return _mxdevtool.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type":
        r"""pop(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _mxdevtool.QuoteHandleVectorVector_pop(self)

    def append(self, x: "QuoteHandleVector") -> "void":
        r"""append(QuoteHandleVectorVector self, QuoteHandleVector x)"""
        return _mxdevtool.QuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(QuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.QuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        r"""size(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _mxdevtool.QuoteHandleVectorVector_size(self)

    def swap(self, v: "QuoteHandleVectorVector") -> "void":
        r"""swap(QuoteHandleVectorVector self, QuoteHandleVectorVector v)"""
        return _mxdevtool.QuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        r"""begin(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::iterator"""
        return _mxdevtool.QuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        r"""end(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::iterator"""
        return _mxdevtool.QuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        r"""rbegin(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::reverse_iterator"""
        return _mxdevtool.QuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        r"""rend(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::reverse_iterator"""
        return _mxdevtool.QuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(QuoteHandleVectorVector self)"""
        return _mxdevtool.QuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< Handle< Quote > > >::allocator_type":
        r"""get_allocator(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::allocator_type"""
        return _mxdevtool.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(QuoteHandleVectorVector self)"""
        return _mxdevtool.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        r"""
        erase(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos) -> std::vector< std::vector< Handle< Quote > > >::iterator
        erase(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator first, std::vector< std::vector< Handle< Quote > > >::iterator last) -> std::vector< std::vector< Handle< Quote > > >::iterator
        """
        return _mxdevtool.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteHandleVectorVector self) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, QuoteHandleVectorVector other) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type size) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type size, QuoteHandleVector value) -> QuoteHandleVectorVector
        """
        _mxdevtool.QuoteHandleVectorVector_swiginit(self, _mxdevtool.new_QuoteHandleVectorVector(*args))

    def push_back(self, x: "QuoteHandleVector") -> "void":
        r"""push_back(QuoteHandleVectorVector self, QuoteHandleVector x)"""
        return _mxdevtool.QuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        r"""front(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _mxdevtool.QuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        r"""back(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _mxdevtool.QuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type", x: "QuoteHandleVector") -> "void":
        r"""assign(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type n, QuoteHandleVector x)"""
        return _mxdevtool.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type new_size)
        resize(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type new_size, QuoteHandleVector x)
        """
        return _mxdevtool.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos, QuoteHandleVector x) -> std::vector< std::vector< Handle< Quote > > >::iterator
        insert(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos, std::vector< std::vector< Handle< Quote > > >::size_type n, QuoteHandleVector x)
        """
        return _mxdevtool.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type") -> "void":
        r"""reserve(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type n)"""
        return _mxdevtool.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        r"""capacity(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _mxdevtool.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_QuoteHandleVectorVector

# Register QuoteHandleVectorVector in _mxdevtool:
_mxdevtool.QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(object):
    r"""Proxy of C++ std::vector< RelinkableHandle< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(RelinkableQuoteHandleVector self) -> SwigPyIterator"""
        return _mxdevtool.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(RelinkableQuoteHandleVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(RelinkableQuoteHandleVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        r"""__len__(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > *":
        r"""__getslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j) -> RelinkableQuoteHandleVector"""
        return _mxdevtool.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j)
        __setslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j, RelinkableQuoteHandleVector v)
        """
        return _mxdevtool.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "void":
        r"""__delslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j)"""
        return _mxdevtool.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i)
        __delitem__(RelinkableQuoteHandleVector self, PySliceObject * slice)
        """
        return _mxdevtool.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        r"""
        __getitem__(RelinkableQuoteHandleVector self, PySliceObject * slice) -> RelinkableQuoteHandleVector
        __getitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i) -> RelinkableQuoteHandle
        """
        return _mxdevtool.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(RelinkableQuoteHandleVector self, PySliceObject * slice, RelinkableQuoteHandleVector v)
        __setitem__(RelinkableQuoteHandleVector self, PySliceObject * slice)
        __setitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, RelinkableQuoteHandle x)
        """
        return _mxdevtool.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< RelinkableHandle< Quote > >::value_type":
        r"""pop(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _mxdevtool.RelinkableQuoteHandleVector_pop(self)

    def append(self, x: "RelinkableQuoteHandle") -> "void":
        r"""append(RelinkableQuoteHandleVector self, RelinkableQuoteHandle x)"""
        return _mxdevtool.RelinkableQuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(RelinkableQuoteHandleVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVector_empty(self)

    def size(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        r"""size(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVector") -> "void":
        r"""swap(RelinkableQuoteHandleVector self, RelinkableQuoteHandleVector v)"""
        return _mxdevtool.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        r"""begin(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::iterator"""
        return _mxdevtool.RelinkableQuoteHandleVector_begin(self)

    def end(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        r"""end(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::iterator"""
        return _mxdevtool.RelinkableQuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        r"""rbegin(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::reverse_iterator"""
        return _mxdevtool.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        r"""rend(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::reverse_iterator"""
        return _mxdevtool.RelinkableQuoteHandleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(RelinkableQuoteHandleVector self)"""
        return _mxdevtool.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< RelinkableHandle< Quote > >::allocator_type":
        r"""get_allocator(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::allocator_type"""
        return _mxdevtool.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(RelinkableQuoteHandleVector self)"""
        return _mxdevtool.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        r"""
        erase(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos) -> std::vector< RelinkableHandle< Quote > >::iterator
        erase(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator first, std::vector< RelinkableHandle< Quote > >::iterator last) -> std::vector< RelinkableHandle< Quote > >::iterator
        """
        return _mxdevtool.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, RelinkableQuoteHandleVector other) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type size) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type size, RelinkableQuoteHandle value) -> RelinkableQuoteHandleVector
        """
        _mxdevtool.RelinkableQuoteHandleVector_swiginit(self, _mxdevtool.new_RelinkableQuoteHandleVector(*args))

    def push_back(self, x: "RelinkableQuoteHandle") -> "void":
        r"""push_back(RelinkableQuoteHandleVector self, RelinkableQuoteHandle x)"""
        return _mxdevtool.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        r"""front(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _mxdevtool.RelinkableQuoteHandleVector_front(self)

    def back(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        r"""back(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _mxdevtool.RelinkableQuoteHandleVector_back(self)

    def assign(self, n: "std::vector< RelinkableHandle< Quote > >::size_type", x: "RelinkableQuoteHandle") -> "void":
        r"""assign(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type n, RelinkableQuoteHandle x)"""
        return _mxdevtool.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type new_size)
        resize(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type new_size, RelinkableQuoteHandle x)
        """
        return _mxdevtool.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos, RelinkableQuoteHandle x) -> std::vector< RelinkableHandle< Quote > >::iterator
        insert(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos, std::vector< RelinkableHandle< Quote > >::size_type n, RelinkableQuoteHandle x)
        """
        return _mxdevtool.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< RelinkableHandle< Quote > >::size_type") -> "void":
        r"""reserve(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type n)"""
        return _mxdevtool.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        r"""capacity(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandleVector

# Register RelinkableQuoteHandleVector in _mxdevtool:
_mxdevtool.RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< RelinkableHandle< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(RelinkableQuoteHandleVectorVector self) -> SwigPyIterator"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        r"""__len__(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "std::vector< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > >,std::allocator< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > > > *":
        r"""__getslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j) -> RelinkableQuoteHandleVectorVector"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j)
        __setslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j, RelinkableQuoteHandleVectorVector v)
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "void":
        r"""__delslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i)
        __delitem__(RelinkableQuoteHandleVectorVector self, PySliceObject * slice)
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        r"""
        __getitem__(RelinkableQuoteHandleVectorVector self, PySliceObject * slice) -> RelinkableQuoteHandleVectorVector
        __getitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i) -> RelinkableQuoteHandleVector
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(RelinkableQuoteHandleVectorVector self, PySliceObject * slice, RelinkableQuoteHandleVectorVector v)
        __setitem__(RelinkableQuoteHandleVectorVector self, PySliceObject * slice)
        __setitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, RelinkableQuoteHandleVector x)
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type":
        r"""pop(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x: "RelinkableQuoteHandleVector") -> "void":
        r"""append(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVector x)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        r"""size(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVectorVector") -> "void":
        r"""swap(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVectorVector v)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        r"""begin(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        r"""end(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        r"""rbegin(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        r"""rend(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(RelinkableQuoteHandleVectorVector self)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::allocator_type":
        r"""get_allocator(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::allocator_type"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(RelinkableQuoteHandleVectorVector self)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        r"""
        erase(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        erase(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator first, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator last) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVectorVector other) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type size) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type size, RelinkableQuoteHandleVector value) -> RelinkableQuoteHandleVectorVector
        """
        _mxdevtool.RelinkableQuoteHandleVectorVector_swiginit(self, _mxdevtool.new_RelinkableQuoteHandleVectorVector(*args))

    def push_back(self, x: "RelinkableQuoteHandleVector") -> "void":
        r"""push_back(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVector x)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        r"""front(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        r"""back(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type", x: "RelinkableQuoteHandleVector") -> "void":
        r"""assign(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n, RelinkableQuoteHandleVector x)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type new_size)
        resize(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type new_size, RelinkableQuoteHandleVector x)
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos, RelinkableQuoteHandleVector x) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        insert(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n, RelinkableQuoteHandleVector x)
        """
        return _mxdevtool.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type") -> "void":
        r"""reserve(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n)"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        r"""capacity(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _mxdevtool.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_RelinkableQuoteHandleVectorVector

# Register RelinkableQuoteHandleVectorVector in _mxdevtool:
_mxdevtool.RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

class PricingEngine(object):
    r"""Proxy of C++ boost::shared_ptr< PricingEngine > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "PricingEngine *":
        r"""__deref__(PricingEngine self) -> PricingEngine *"""
        return _mxdevtool.PricingEngine___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(PricingEngine self) -> bool"""
        return _mxdevtool.PricingEngine___nonzero__(self)

    def __init__(self):
        r"""__init__(PricingEngine self) -> PricingEngine"""
        _mxdevtool.PricingEngine_swiginit(self, _mxdevtool.new_PricingEngine())
    __swig_destroy__ = _mxdevtool.delete_PricingEngine

# Register PricingEngine in _mxdevtool:
_mxdevtool.PricingEngine_swigregister(PricingEngine)

class Instrument(object):
    r"""Proxy of C++ boost::shared_ptr< Instrument > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Instrument *":
        r"""__deref__(Instrument self) -> Instrument *"""
        return _mxdevtool.Instrument___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Instrument self) -> bool"""
        return _mxdevtool.Instrument___nonzero__(self)

    def results(self, resultType: "std::string") -> "std::vector< Real,std::allocator< Real > >":
        r"""results(Instrument self, std::string resultType) -> DoubleVector"""
        return _mxdevtool.Instrument_results(self, resultType)

    def calculateMany(self, *args) -> "std::vector< double,std::allocator< double > >":
        r"""
        calculateMany(Instrument self, std::string parameterName, std::string operand, DoubleVector values, std::string resultName) -> DoubleVector
        calculateMany(Instrument self, StrVector parameterNames, StrVector operands, DoubleVectorVector values, std::string resultName) -> DoubleVector
        """
        return _mxdevtool.Instrument_calculateMany(self, *args)

    def calculateMany2D(self, parameterName1: "std::string", operand1: "std::string", values1: "DoubleVector", parameterName2: "std::string", operand2: "std::string", values2: "DoubleVector", resultName: "std::string") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""calculateMany2D(Instrument self, std::string parameterName1, std::string operand1, DoubleVector values1, std::string parameterName2, std::string operand2, DoubleVector values2, std::string resultName) -> DoubleVectorVector"""
        return _mxdevtool.Instrument_calculateMany2D(self, parameterName1, operand1, values1, parameterName2, operand2, values2, resultName)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(Instrument self) -> Observable"""
        return _mxdevtool.Instrument_asObservable(self)

    def __init__(self):
        r"""__init__(Instrument self) -> Instrument"""
        _mxdevtool.Instrument_swiginit(self, _mxdevtool.new_Instrument())
    __swig_destroy__ = _mxdevtool.delete_Instrument

    def NPV(self) -> "Real":
        r"""NPV(Instrument self) -> Real"""
        return _mxdevtool.Instrument_NPV(self)

    def errorEstimate(self) -> "Real":
        r"""errorEstimate(Instrument self) -> Real"""
        return _mxdevtool.Instrument_errorEstimate(self)

    def isExpired(self) -> "bool":
        r"""isExpired(Instrument self) -> bool"""
        return _mxdevtool.Instrument_isExpired(self)

    def setPricingEngine(self, arg2: "PricingEngine") -> "void":
        r"""setPricingEngine(Instrument self, PricingEngine arg2)"""
        return _mxdevtool.Instrument_setPricingEngine(self, arg2)

    def recalculate(self) -> "void":
        r"""recalculate(Instrument self)"""
        return _mxdevtool.Instrument_recalculate(self)

    def freeze(self) -> "void":
        r"""freeze(Instrument self)"""
        return _mxdevtool.Instrument_freeze(self)

    def unfreeze(self) -> "void":
        r"""unfreeze(Instrument self)"""
        return _mxdevtool.Instrument_unfreeze(self)

# Register Instrument in _mxdevtool:
_mxdevtool.Instrument_swigregister(Instrument)

class InstrumentVector(object):
    r"""Proxy of C++ std::vector< boost::shared_ptr< Instrument > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(InstrumentVector self) -> SwigPyIterator"""
        return _mxdevtool.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(InstrumentVector self) -> bool"""
        return _mxdevtool.InstrumentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(InstrumentVector self) -> bool"""
        return _mxdevtool.InstrumentVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        r"""__len__(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::size_type"""
        return _mxdevtool.InstrumentVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "std::vector< boost::shared_ptr< Instrument >,std::allocator< boost::shared_ptr< Instrument > > > *":
        r"""__getslice__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i, std::vector< boost::shared_ptr< Instrument > >::difference_type j) -> InstrumentVector"""
        return _mxdevtool.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i, std::vector< boost::shared_ptr< Instrument > >::difference_type j)
        __setslice__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i, std::vector< boost::shared_ptr< Instrument > >::difference_type j, InstrumentVector v)
        """
        return _mxdevtool.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "void":
        r"""__delslice__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i, std::vector< boost::shared_ptr< Instrument > >::difference_type j)"""
        return _mxdevtool.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i)
        __delitem__(InstrumentVector self, PySliceObject * slice)
        """
        return _mxdevtool.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        r"""
        __getitem__(InstrumentVector self, PySliceObject * slice) -> InstrumentVector
        __getitem__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i) -> Instrument
        """
        return _mxdevtool.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(InstrumentVector self, PySliceObject * slice, InstrumentVector v)
        __setitem__(InstrumentVector self, PySliceObject * slice)
        __setitem__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::difference_type i, Instrument x)
        """
        return _mxdevtool.InstrumentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type":
        r"""pop(InstrumentVector self) -> Instrument"""
        return _mxdevtool.InstrumentVector_pop(self)

    def append(self, x: "Instrument") -> "void":
        r"""append(InstrumentVector self, Instrument x)"""
        return _mxdevtool.InstrumentVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(InstrumentVector self) -> bool"""
        return _mxdevtool.InstrumentVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        r"""size(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::size_type"""
        return _mxdevtool.InstrumentVector_size(self)

    def swap(self, v: "InstrumentVector") -> "void":
        r"""swap(InstrumentVector self, InstrumentVector v)"""
        return _mxdevtool.InstrumentVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        r"""begin(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::iterator"""
        return _mxdevtool.InstrumentVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        r"""end(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::iterator"""
        return _mxdevtool.InstrumentVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        r"""rbegin(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::reverse_iterator"""
        return _mxdevtool.InstrumentVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        r"""rend(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::reverse_iterator"""
        return _mxdevtool.InstrumentVector_rend(self)

    def clear(self) -> "void":
        r"""clear(InstrumentVector self)"""
        return _mxdevtool.InstrumentVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Instrument > >::allocator_type":
        r"""get_allocator(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::allocator_type"""
        return _mxdevtool.InstrumentVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(InstrumentVector self)"""
        return _mxdevtool.InstrumentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        r"""
        erase(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::iterator pos) -> std::vector< boost::shared_ptr< Instrument > >::iterator
        erase(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::iterator first, std::vector< boost::shared_ptr< Instrument > >::iterator last) -> std::vector< boost::shared_ptr< Instrument > >::iterator
        """
        return _mxdevtool.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(InstrumentVector self) -> InstrumentVector
        __init__(InstrumentVector self, InstrumentVector other) -> InstrumentVector
        __init__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type size) -> InstrumentVector
        __init__(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type size, Instrument value) -> InstrumentVector
        """
        _mxdevtool.InstrumentVector_swiginit(self, _mxdevtool.new_InstrumentVector(*args))

    def push_back(self, x: "Instrument") -> "void":
        r"""push_back(InstrumentVector self, Instrument x)"""
        return _mxdevtool.InstrumentVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        r"""front(InstrumentVector self) -> Instrument"""
        return _mxdevtool.InstrumentVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        r"""back(InstrumentVector self) -> Instrument"""
        return _mxdevtool.InstrumentVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type", x: "Instrument") -> "void":
        r"""assign(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type n, Instrument x)"""
        return _mxdevtool.InstrumentVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type new_size)
        resize(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type new_size, Instrument x)
        """
        return _mxdevtool.InstrumentVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::iterator pos, Instrument x) -> std::vector< boost::shared_ptr< Instrument > >::iterator
        insert(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::iterator pos, std::vector< boost::shared_ptr< Instrument > >::size_type n, Instrument x)
        """
        return _mxdevtool.InstrumentVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type") -> "void":
        r"""reserve(InstrumentVector self, std::vector< boost::shared_ptr< Instrument > >::size_type n)"""
        return _mxdevtool.InstrumentVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        r"""capacity(InstrumentVector self) -> std::vector< boost::shared_ptr< Instrument > >::size_type"""
        return _mxdevtool.InstrumentVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_InstrumentVector

# Register InstrumentVector in _mxdevtool:
_mxdevtool.InstrumentVector_swigregister(InstrumentVector)

class Portfolio(Instrument):
    r"""Proxy of C++ PortfolioInstrumentPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, multiples: "DoubleVector", instruments: "InstrumentVector"):
        r"""__init__(Portfolio self, DoubleVector multiples, InstrumentVector instruments) -> Portfolio"""
        _mxdevtool.Portfolio_swiginit(self, _mxdevtool.new_Portfolio(multiples, instruments))
    __swig_destroy__ = _mxdevtool.delete_Portfolio

# Register Portfolio in _mxdevtool:
_mxdevtool.Portfolio_swigregister(Portfolio)

Following = _mxdevtool.Following

ModifiedFollowing = _mxdevtool.ModifiedFollowing

Preceding = _mxdevtool.Preceding

ModifiedPreceding = _mxdevtool.ModifiedPreceding

Unadjusted = _mxdevtool.Unadjusted

HalfMonthModifiedFollowing = _mxdevtool.HalfMonthModifiedFollowing

JoinHolidays = _mxdevtool.JoinHolidays

JoinBusinessDays = _mxdevtool.JoinBusinessDays

class Calendar(object):
    r"""Proxy of C++ Calendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isWeekend(self, w: "Weekday") -> "bool":
        r"""isWeekend(Calendar self, Weekday w) -> bool"""
        return _mxdevtool.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2: "Date") -> "Date":
        r"""endOfMonth(Calendar self, Date arg2) -> Date"""
        return _mxdevtool.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2: "Date") -> "bool":
        r"""isBusinessDay(Calendar self, Date arg2) -> bool"""
        return _mxdevtool.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2: "Date") -> "bool":
        r"""isHoliday(Calendar self, Date arg2) -> bool"""
        return _mxdevtool.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2: "Date") -> "bool":
        r"""isEndOfMonth(Calendar self, Date arg2) -> bool"""
        return _mxdevtool.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2: "Date") -> "void":
        r"""addHoliday(Calendar self, Date arg2)"""
        return _mxdevtool.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2: "Date") -> "void":
        r"""removeHoliday(Calendar self, Date arg2)"""
        return _mxdevtool.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args) -> "Date":
        r"""adjust(Calendar self, Date d, BusinessDayConvention convention=QuantLib::Following) -> Date"""
        return _mxdevtool.Calendar_adjust(self, *args)

    def businessDaysBetween(self, _from: "Date", to: "Date", includeFirst: "bool"=True, includeLast: "bool"=False) -> "BigInteger":
        r"""businessDaysBetween(Calendar self, Date _from, Date to, bool includeFirst=True, bool includeLast=False) -> BigInteger"""
        return _mxdevtool.Calendar_businessDaysBetween(self, _from, to, includeFirst, includeLast)

    def name(self) -> "std::string":
        r"""name(Calendar self) -> std::string"""
        return _mxdevtool.Calendar_name(self)

    def advance(self, *args) -> "Date":
        r"""
        advance(Calendar self, Date d, Integer n, TimeUnit unit, BusinessDayConvention convention=QuantLib::Following, bool endOfMonth=False) -> Date
        advance(Calendar self, Date d, Period period, BusinessDayConvention convention=QuantLib::Following, bool endOfMonth=False) -> Date
        advance(Calendar self, Date d, std::string const period_str, BusinessDayConvention convention=QuantLib::Following, bool endOfMonth=False) -> Date
        """
        return _mxdevtool.Calendar_advance(self, *args)

    def __init__(self, name: "std::string"):
        r"""__init__(Calendar self, std::string name) -> Calendar"""
        _mxdevtool.Calendar_swiginit(self, _mxdevtool.new_Calendar(name))

    def __str__(self) -> "std::string":
        r"""__str__(Calendar self) -> std::string"""
        return _mxdevtool.Calendar___str__(self)

    def __eq__(self, other: "Calendar") -> "bool":
        r"""__eq__(Calendar self, Calendar other) -> bool"""
        return _mxdevtool.Calendar___eq__(self, other)

    def __ne__(self, other: "Calendar") -> "bool":
        r"""__ne__(Calendar self, Calendar other) -> bool"""
        return _mxdevtool.Calendar___ne__(self, other)
    __swig_destroy__ = _mxdevtool.delete_Calendar

# Register Calendar in _mxdevtool:
_mxdevtool.Calendar_swigregister(Calendar)

class NullCalendar(Calendar):
    r"""Proxy of C++ QuantLib::NullCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NullCalendar self) -> NullCalendar"""
        _mxdevtool.NullCalendar_swiginit(self, _mxdevtool.new_NullCalendar())
    __swig_destroy__ = _mxdevtool.delete_NullCalendar

# Register NullCalendar in _mxdevtool:
_mxdevtool.NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    r"""Proxy of C++ QuantLib::WeekendsOnly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(WeekendsOnly self) -> WeekendsOnly"""
        _mxdevtool.WeekendsOnly_swiginit(self, _mxdevtool.new_WeekendsOnly())
    __swig_destroy__ = _mxdevtool.delete_WeekendsOnly

# Register WeekendsOnly in _mxdevtool:
_mxdevtool.WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    r"""Proxy of C++ QuantLib::JointCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, Calendar arg4, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, Calendar arg4, Calendar arg5, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        """
        _mxdevtool.JointCalendar_swiginit(self, _mxdevtool.new_JointCalendar(*args))
    __swig_destroy__ = _mxdevtool.delete_JointCalendar

# Register JointCalendar in _mxdevtool:
_mxdevtool.JointCalendar_swigregister(JointCalendar)

class SouthKorea(Calendar):
    r"""Proxy of C++ QuantLib::SouthKorea class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SouthKorea self) -> SouthKorea"""
        _mxdevtool.SouthKorea_swiginit(self, _mxdevtool.new_SouthKorea())
    __swig_destroy__ = _mxdevtool.delete_SouthKorea

# Register SouthKorea in _mxdevtool:
_mxdevtool.SouthKorea_swigregister(SouthKorea)

class Japan(Calendar):
    r"""Proxy of C++ QuantLib::Japan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Japan self) -> Japan"""
        _mxdevtool.Japan_swiginit(self, _mxdevtool.new_Japan())
    __swig_destroy__ = _mxdevtool.delete_Japan

# Register Japan in _mxdevtool:
_mxdevtool.Japan_swigregister(Japan)

class China(Calendar):
    r"""Proxy of C++ QuantLib::China class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(China self) -> China"""
        _mxdevtool.China_swiginit(self, _mxdevtool.new_China())
    __swig_destroy__ = _mxdevtool.delete_China

# Register China in _mxdevtool:
_mxdevtool.China_swigregister(China)

class UnitedKingdom(Calendar):
    r"""Proxy of C++ QuantLib::UnitedKingdom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UnitedKingdom self) -> UnitedKingdom"""
        _mxdevtool.UnitedKingdom_swiginit(self, _mxdevtool.new_UnitedKingdom())
    __swig_destroy__ = _mxdevtool.delete_UnitedKingdom

# Register UnitedKingdom in _mxdevtool:
_mxdevtool.UnitedKingdom_swigregister(UnitedKingdom)

class UnitedStates(Calendar):
    r"""Proxy of C++ QuantLib::UnitedStates class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UnitedStates self) -> UnitedStates"""
        _mxdevtool.UnitedStates_swiginit(self, _mxdevtool.new_UnitedStates())
    __swig_destroy__ = _mxdevtool.delete_UnitedStates

# Register UnitedStates in _mxdevtool:
_mxdevtool.UnitedStates_swigregister(UnitedStates)


def nullInt() -> "int":
    r"""nullInt() -> int"""
    return _mxdevtool.nullInt()

def nullDouble() -> "double":
    r"""nullDouble() -> double"""
    return _mxdevtool.nullDouble()
class DayCounter(object):
    r"""Proxy of C++ DayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1: "Date", d2: "Date") -> "BigInteger":
        r"""dayCount(DayCounter self, Date d1, Date d2) -> BigInteger"""
        return _mxdevtool.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args) -> "Time":
        r"""yearFraction(DayCounter self, Date d1, Date d2, Date startRef=Date(), Date endRef=Date()) -> Time"""
        return _mxdevtool.DayCounter_yearFraction(self, *args)

    def name(self) -> "std::string":
        r"""name(DayCounter self) -> std::string"""
        return _mxdevtool.DayCounter_name(self)

    def __str__(self) -> "std::string":
        r"""__str__(DayCounter self) -> std::string"""
        return _mxdevtool.DayCounter___str__(self)

    def __eq__(self, other: "DayCounter") -> "bool":
        r"""__eq__(DayCounter self, DayCounter other) -> bool"""
        return _mxdevtool.DayCounter___eq__(self, other)

    def __ne__(self, other: "DayCounter") -> "bool":
        r"""__ne__(DayCounter self, DayCounter other) -> bool"""
        return _mxdevtool.DayCounter___ne__(self, other)
    __swig_destroy__ = _mxdevtool.delete_DayCounter

# Register DayCounter in _mxdevtool:
_mxdevtool.DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    r"""Proxy of C++ QuantLib::Actual360 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Actual360 self) -> Actual360"""
        _mxdevtool.Actual360_swiginit(self, _mxdevtool.new_Actual360())
    __swig_destroy__ = _mxdevtool.delete_Actual360

# Register Actual360 in _mxdevtool:
_mxdevtool.Actual360_swigregister(Actual360)

class Actual365Fixed(DayCounter):
    r"""Proxy of C++ QuantLib::Actual365Fixed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Actual365Fixed self) -> Actual365Fixed"""
        _mxdevtool.Actual365Fixed_swiginit(self, _mxdevtool.new_Actual365Fixed())
    __swig_destroy__ = _mxdevtool.delete_Actual365Fixed

# Register Actual365Fixed in _mxdevtool:
_mxdevtool.Actual365Fixed_swigregister(Actual365Fixed)

class Actual365NoLeap(DayCounter):
    r"""Proxy of C++ QuantLib::Actual365NoLeap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Actual365NoLeap self) -> Actual365NoLeap"""
        _mxdevtool.Actual365NoLeap_swiginit(self, _mxdevtool.new_Actual365NoLeap())
    __swig_destroy__ = _mxdevtool.delete_Actual365NoLeap

# Register Actual365NoLeap in _mxdevtool:
_mxdevtool.Actual365NoLeap_swigregister(Actual365NoLeap)

class Thirty360(DayCounter):
    r"""Proxy of C++ QuantLib::Thirty360 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USA = _mxdevtool.Thirty360_USA
    
    BondBasis = _mxdevtool.Thirty360_BondBasis
    
    European = _mxdevtool.Thirty360_European
    
    EurobondBasis = _mxdevtool.Thirty360_EurobondBasis
    
    Italian = _mxdevtool.Thirty360_Italian
    

    def __init__(self, *args):
        r"""__init__(Thirty360 self, QuantLib::Thirty360::Convention c=USA) -> Thirty360"""
        _mxdevtool.Thirty360_swiginit(self, _mxdevtool.new_Thirty360(*args))
    __swig_destroy__ = _mxdevtool.delete_Thirty360

# Register Thirty360 in _mxdevtool:
_mxdevtool.Thirty360_swigregister(Thirty360)

class ActualActual(DayCounter):
    r"""Proxy of C++ QuantLib::ActualActual class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISMA = _mxdevtool.ActualActual_ISMA
    
    Bond = _mxdevtool.ActualActual_Bond
    
    ISDA = _mxdevtool.ActualActual_ISDA
    
    Historical = _mxdevtool.ActualActual_Historical
    
    Actual365 = _mxdevtool.ActualActual_Actual365
    
    AFB = _mxdevtool.ActualActual_AFB
    
    Euro = _mxdevtool.ActualActual_Euro
    

    def __init__(self, *args):
        r"""__init__(ActualActual self, QuantLib::ActualActual::Convention c=ISDA) -> ActualActual"""
        _mxdevtool.ActualActual_swiginit(self, _mxdevtool.new_ActualActual(*args))
    __swig_destroy__ = _mxdevtool.delete_ActualActual

# Register ActualActual in _mxdevtool:
_mxdevtool.ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    r"""Proxy of C++ QuantLib::OneDayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OneDayCounter self) -> OneDayCounter"""
        _mxdevtool.OneDayCounter_swiginit(self, _mxdevtool.new_OneDayCounter())
    __swig_destroy__ = _mxdevtool.delete_OneDayCounter

# Register OneDayCounter in _mxdevtool:
_mxdevtool.OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    r"""Proxy of C++ QuantLib::SimpleDayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SimpleDayCounter self) -> SimpleDayCounter"""
        _mxdevtool.SimpleDayCounter_swiginit(self, _mxdevtool.new_SimpleDayCounter())
    __swig_destroy__ = _mxdevtool.delete_SimpleDayCounter

# Register SimpleDayCounter in _mxdevtool:
_mxdevtool.SimpleDayCounter_swigregister(SimpleDayCounter)

class Currency(object):
    r"""Proxy of C++ Currency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def name(self) -> "std::string const &":
        r"""name(Currency self) -> std::string const &"""
        return _mxdevtool.Currency_name(self)

    def code(self) -> "std::string const &":
        r"""code(Currency self) -> std::string const &"""
        return _mxdevtool.Currency_code(self)

    def numericCode(self) -> "Integer":
        r"""numericCode(Currency self) -> Integer"""
        return _mxdevtool.Currency_numericCode(self)

    def symbol(self) -> "std::string const &":
        r"""symbol(Currency self) -> std::string const &"""
        return _mxdevtool.Currency_symbol(self)

    def fractionSymbol(self) -> "std::string const &":
        r"""fractionSymbol(Currency self) -> std::string const &"""
        return _mxdevtool.Currency_fractionSymbol(self)

    def fractionsPerUnit(self) -> "Integer":
        r"""fractionsPerUnit(Currency self) -> Integer"""
        return _mxdevtool.Currency_fractionsPerUnit(self)

    def format(self) -> "std::string":
        r"""format(Currency self) -> std::string"""
        return _mxdevtool.Currency_format(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Currency self) -> bool"""
        return _mxdevtool.Currency___nonzero__(self)

    def triangulationCurrency(self) -> "Currency const &":
        r"""triangulationCurrency(Currency self) -> Currency"""
        return _mxdevtool.Currency_triangulationCurrency(self)

    def __str__(self) -> "std::string":
        r"""__str__(Currency self) -> std::string"""
        return _mxdevtool.Currency___str__(self)

    def __eq__(self, other: "Currency") -> "bool":
        r"""__eq__(Currency self, Currency other) -> bool"""
        return _mxdevtool.Currency___eq__(self, other)

    def __ne__(self, other: "Currency") -> "bool":
        r"""__ne__(Currency self, Currency other) -> bool"""
        return _mxdevtool.Currency___ne__(self, other)

    def __mul__(self, x: "Decimal") -> "Money":
        r"""__mul__(Currency self, Decimal x) -> Money"""
        return _mxdevtool.Currency___mul__(self, x)

    def __rmul__(self, x: "Decimal") -> "Money":
        r"""__rmul__(Currency self, Decimal x) -> Money"""
        return _mxdevtool.Currency___rmul__(self, x)

    def __init__(self):
        r"""__init__(Currency self) -> Currency"""
        _mxdevtool.Currency_swiginit(self, _mxdevtool.new_Currency())
    __swig_destroy__ = _mxdevtool.delete_Currency

# Register Currency in _mxdevtool:
_mxdevtool.Currency_swigregister(Currency)

class CNYCurrency(Currency):
    r"""Proxy of C++ QuantLib::CNYCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CNYCurrency self) -> CNYCurrency"""
        _mxdevtool.CNYCurrency_swiginit(self, _mxdevtool.new_CNYCurrency())
    __swig_destroy__ = _mxdevtool.delete_CNYCurrency

# Register CNYCurrency in _mxdevtool:
_mxdevtool.CNYCurrency_swigregister(CNYCurrency)

class EURCurrency(Currency):
    r"""Proxy of C++ QuantLib::EURCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EURCurrency self) -> EURCurrency"""
        _mxdevtool.EURCurrency_swiginit(self, _mxdevtool.new_EURCurrency())
    __swig_destroy__ = _mxdevtool.delete_EURCurrency

# Register EURCurrency in _mxdevtool:
_mxdevtool.EURCurrency_swigregister(EURCurrency)

class GBPCurrency(Currency):
    r"""Proxy of C++ QuantLib::GBPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GBPCurrency self) -> GBPCurrency"""
        _mxdevtool.GBPCurrency_swiginit(self, _mxdevtool.new_GBPCurrency())
    __swig_destroy__ = _mxdevtool.delete_GBPCurrency

# Register GBPCurrency in _mxdevtool:
_mxdevtool.GBPCurrency_swigregister(GBPCurrency)

class HKDCurrency(Currency):
    r"""Proxy of C++ QuantLib::HKDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HKDCurrency self) -> HKDCurrency"""
        _mxdevtool.HKDCurrency_swiginit(self, _mxdevtool.new_HKDCurrency())
    __swig_destroy__ = _mxdevtool.delete_HKDCurrency

# Register HKDCurrency in _mxdevtool:
_mxdevtool.HKDCurrency_swigregister(HKDCurrency)

class JPYCurrency(Currency):
    r"""Proxy of C++ QuantLib::JPYCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(JPYCurrency self) -> JPYCurrency"""
        _mxdevtool.JPYCurrency_swiginit(self, _mxdevtool.new_JPYCurrency())
    __swig_destroy__ = _mxdevtool.delete_JPYCurrency

# Register JPYCurrency in _mxdevtool:
_mxdevtool.JPYCurrency_swigregister(JPYCurrency)

class KRWCurrency(Currency):
    r"""Proxy of C++ QuantLib::KRWCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KRWCurrency self) -> KRWCurrency"""
        _mxdevtool.KRWCurrency_swiginit(self, _mxdevtool.new_KRWCurrency())
    __swig_destroy__ = _mxdevtool.delete_KRWCurrency

# Register KRWCurrency in _mxdevtool:
_mxdevtool.KRWCurrency_swigregister(KRWCurrency)

class USDCurrency(Currency):
    r"""Proxy of C++ QuantLib::USDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(USDCurrency self) -> USDCurrency"""
        _mxdevtool.USDCurrency_swiginit(self, _mxdevtool.new_USDCurrency())
    __swig_destroy__ = _mxdevtool.delete_USDCurrency

# Register USDCurrency in _mxdevtool:
_mxdevtool.USDCurrency_swigregister(USDCurrency)

Simple = _mxdevtool.Simple

Compounded = _mxdevtool.Compounded

Continuous = _mxdevtool.Continuous

SimpleThenCompounded = _mxdevtool.SimpleThenCompounded

class InterestRate(object):
    r"""Proxy of C++ InterestRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterestRate self) -> InterestRate
        __init__(InterestRate self, Rate r, DayCounter dc, Compounding comp, Frequency freq) -> InterestRate
        """
        _mxdevtool.InterestRate_swiginit(self, _mxdevtool.new_InterestRate(*args))

    def rate(self) -> "Rate":
        r"""rate(InterestRate self) -> Rate"""
        return _mxdevtool.InterestRate_rate(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(InterestRate self) -> DayCounter"""
        return _mxdevtool.InterestRate_dayCounter(self)

    def compounding(self) -> "Compounding":
        r"""compounding(InterestRate self) -> Compounding"""
        return _mxdevtool.InterestRate_compounding(self)

    def frequency(self) -> "Frequency":
        r"""frequency(InterestRate self) -> Frequency"""
        return _mxdevtool.InterestRate_frequency(self)

    def discountFactor(self, *args) -> "DiscountFactor":
        r"""
        discountFactor(InterestRate self, Time t) -> DiscountFactor
        discountFactor(InterestRate self, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> DiscountFactor
        """
        return _mxdevtool.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args) -> "Real":
        r"""
        compoundFactor(InterestRate self, Time t) -> Real
        compoundFactor(InterestRate self, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> Real
        """
        return _mxdevtool.InterestRate_compoundFactor(self, *args)

    @staticmethod
    def impliedRate(*args) -> "InterestRate":
        r"""
        impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Time t) -> InterestRate
        impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> InterestRate
        """
        return _mxdevtool.InterestRate_impliedRate(*args)

    def equivalentRate(self, *args) -> "InterestRate":
        r"""
        equivalentRate(InterestRate self, Compounding comp, Frequency freq, Time t) -> InterestRate
        equivalentRate(InterestRate self, DayCounter resultDayCounter, Compounding comp, Frequency freq, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> InterestRate
        """
        return _mxdevtool.InterestRate_equivalentRate(self, *args)

    def __str__(self) -> "std::string":
        r"""__str__(InterestRate self) -> std::string"""
        return _mxdevtool.InterestRate___str__(self)
    __swig_destroy__ = _mxdevtool.delete_InterestRate

# Register InterestRate in _mxdevtool:
_mxdevtool.InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args) -> "InterestRate":
    r"""
    InterestRate_impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Time t) -> InterestRate
    InterestRate_impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> InterestRate
    """
    return _mxdevtool.InterestRate_impliedRate(*args)

class Interpolation1D(object):
    r"""Proxy of C++ Interpolation1DWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, interpolator1DType: "Interpolator1D::Type", x: "DoubleVector", y: "DoubleVector"):
        r"""__init__(Interpolation1D self, Interpolator1D::Type interpolator1DType, DoubleVector x, DoubleVector y) -> Interpolation1D"""
        _mxdevtool.Interpolation1D_swiginit(self, _mxdevtool.new_Interpolation1D(interpolator1DType, x, y))

    def interpolate(self, *args) -> "std::vector< Real,std::allocator< Real > >":
        r"""
        interpolate(Interpolation1D self, Real v) -> Real
        interpolate(Interpolation1D self, DoubleVector arr) -> DoubleVector
        """
        return _mxdevtool.Interpolation1D_interpolate(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Interpolation1D

# Register Interpolation1D in _mxdevtool:
_mxdevtool.Interpolation1D_swigregister(Interpolation1D)

class Interpolation2D(object):
    r"""Proxy of C++ Interpolation2DWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, interpolator2DType: "Interpolator2D::Type", x1: "DoubleVector", x2: "DoubleVector", z: "Matrix"):
        r"""__init__(Interpolation2D self, Interpolator2D::Type interpolator2DType, DoubleVector x1, DoubleVector x2, Matrix z) -> Interpolation2D"""
        _mxdevtool.Interpolation2D_swiginit(self, _mxdevtool.new_Interpolation2D(interpolator2DType, x1, x2, z))

    def interpolate(self, *args) -> "std::vector< Real,std::allocator< Real > >":
        r"""
        interpolate(Interpolation2D self, Real v1, Real v2) -> Real
        interpolate(Interpolation2D self, DoubleVector arr1, DoubleVector arr2) -> DoubleVector
        """
        return _mxdevtool.Interpolation2D_interpolate(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Interpolation2D

# Register Interpolation2D in _mxdevtool:
_mxdevtool.Interpolation2D_swigregister(Interpolation2D)

class YieldTermStructure(object):
    r"""Proxy of C++ boost::shared_ptr< YieldTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "YieldTermStructure *":
        r"""__deref__(YieldTermStructure self) -> YieldTermStructure *"""
        return _mxdevtool.YieldTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(YieldTermStructure self) -> bool"""
        return _mxdevtool.YieldTermStructure___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(YieldTermStructure self) -> Observable"""
        return _mxdevtool.YieldTermStructure_asObservable(self)

    def __init__(self):
        r"""__init__(YieldTermStructure self) -> YieldTermStructure"""
        _mxdevtool.YieldTermStructure_swiginit(self, _mxdevtool.new_YieldTermStructure())
    __swig_destroy__ = _mxdevtool.delete_YieldTermStructure

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(YieldTermStructure self) -> DayCounter"""
        return _mxdevtool.YieldTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        r"""calendar(YieldTermStructure self) -> Calendar"""
        return _mxdevtool.YieldTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        r"""referenceDate(YieldTermStructure self) -> Date"""
        return _mxdevtool.YieldTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        r"""maxDate(YieldTermStructure self) -> Date"""
        return _mxdevtool.YieldTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        r"""maxTime(YieldTermStructure self) -> Time"""
        return _mxdevtool.YieldTermStructure_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        r"""
        discount(YieldTermStructure self, Date arg2, bool extrapolate=False) -> DiscountFactor
        discount(YieldTermStructure self, Time arg2, bool extrapolate=False) -> DiscountFactor
        """
        return _mxdevtool.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        r"""
        zeroRate(YieldTermStructure self, Date d, DayCounter arg3, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        zeroRate(YieldTermStructure self, Time t, Compounding arg3, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _mxdevtool.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        r"""
        forwardRate(YieldTermStructure self, Date d1, Date d2, DayCounter arg4, Compounding arg5, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        forwardRate(YieldTermStructure self, Time t1, Time t2, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _mxdevtool.YieldTermStructure_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        r"""enableExtrapolation(YieldTermStructure self)"""
        return _mxdevtool.YieldTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        r"""disableExtrapolation(YieldTermStructure self)"""
        return _mxdevtool.YieldTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        r"""allowsExtrapolation(YieldTermStructure self) -> bool"""
        return _mxdevtool.YieldTermStructure_allowsExtrapolation(self)

# Register YieldTermStructure in _mxdevtool:
_mxdevtool.YieldTermStructure_swigregister(YieldTermStructure)

class YieldTermStructureHandle(object):
    r"""Proxy of C++ Handle< YieldTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YieldTermStructureHandle self, YieldTermStructure arg2=boost::shared_ptr()) -> YieldTermStructureHandle"""
        _mxdevtool.YieldTermStructureHandle_swiginit(self, _mxdevtool.new_YieldTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< YieldTermStructure >":
        r"""__deref__(YieldTermStructureHandle self) -> YieldTermStructure"""
        return _mxdevtool.YieldTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(YieldTermStructureHandle self) -> bool"""
        return _mxdevtool.YieldTermStructureHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(YieldTermStructureHandle self) -> Observable"""
        return _mxdevtool.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_YieldTermStructureHandle

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(YieldTermStructureHandle self) -> DayCounter"""
        return _mxdevtool.YieldTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        r"""calendar(YieldTermStructureHandle self) -> Calendar"""
        return _mxdevtool.YieldTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        r"""referenceDate(YieldTermStructureHandle self) -> Date"""
        return _mxdevtool.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        r"""maxDate(YieldTermStructureHandle self) -> Date"""
        return _mxdevtool.YieldTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        r"""maxTime(YieldTermStructureHandle self) -> Time"""
        return _mxdevtool.YieldTermStructureHandle_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        r"""
        discount(YieldTermStructureHandle self, Date arg2, bool extrapolate=False) -> DiscountFactor
        discount(YieldTermStructureHandle self, Time arg2, bool extrapolate=False) -> DiscountFactor
        """
        return _mxdevtool.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        r"""
        zeroRate(YieldTermStructureHandle self, Date d, DayCounter arg3, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        zeroRate(YieldTermStructureHandle self, Time t, Compounding arg3, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _mxdevtool.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        r"""
        forwardRate(YieldTermStructureHandle self, Date d1, Date d2, DayCounter arg4, Compounding arg5, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        forwardRate(YieldTermStructureHandle self, Time t1, Time t2, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _mxdevtool.YieldTermStructureHandle_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        r"""enableExtrapolation(YieldTermStructureHandle self)"""
        return _mxdevtool.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        r"""disableExtrapolation(YieldTermStructureHandle self)"""
        return _mxdevtool.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        r"""allowsExtrapolation(YieldTermStructureHandle self) -> bool"""
        return _mxdevtool.YieldTermStructureHandle_allowsExtrapolation(self)

# Register YieldTermStructureHandle in _mxdevtool:
_mxdevtool.YieldTermStructureHandle_swigregister(YieldTermStructureHandle)

class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< YieldTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableYieldTermStructureHandle self, YieldTermStructure arg2=boost::shared_ptr()) -> RelinkableYieldTermStructureHandle"""
        _mxdevtool.RelinkableYieldTermStructureHandle_swiginit(self, _mxdevtool.new_RelinkableYieldTermStructureHandle(*args))

    def linkTo(self, arg2: "YieldTermStructure") -> "void":
        r"""linkTo(RelinkableYieldTermStructureHandle self, YieldTermStructure arg2)"""
        return _mxdevtool.RelinkableYieldTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableYieldTermStructureHandle

# Register RelinkableYieldTermStructureHandle in _mxdevtool:
_mxdevtool.RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)

class ZeroSpreadedTermStructure(YieldTermStructure):
    r"""Proxy of C++ ZeroSpreadedTermStructurePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", spreadHandle: "QuoteHandle"):
        r"""__init__(ZeroSpreadedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandle spreadHandle) -> ZeroSpreadedTermStructure"""
        _mxdevtool.ZeroSpreadedTermStructure_swiginit(self, _mxdevtool.new_ZeroSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _mxdevtool.delete_ZeroSpreadedTermStructure

# Register ZeroSpreadedTermStructure in _mxdevtool:
_mxdevtool.ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)

class ForwardSpreadedTermStructure(YieldTermStructure):
    r"""Proxy of C++ ForwardSpreadedTermStructurePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", spreadHandle: "QuoteHandle"):
        r"""__init__(ForwardSpreadedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandle spreadHandle) -> ForwardSpreadedTermStructure"""
        _mxdevtool.ForwardSpreadedTermStructure_swiginit(self, _mxdevtool.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _mxdevtool.delete_ForwardSpreadedTermStructure

# Register ForwardSpreadedTermStructure in _mxdevtool:
_mxdevtool.ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)

class FlatForward(YieldTermStructure):
    r"""Proxy of C++ FlatForwardPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FlatForward self, Date referenceDate, QuoteHandle forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Date referenceDate, Rate forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Integer settlementDays, Calendar calendar, QuoteHandle forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Integer settlementDays, Calendar calendar, Rate forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        """
        _mxdevtool.FlatForward_swiginit(self, _mxdevtool.new_FlatForward(*args))
    __swig_destroy__ = _mxdevtool.delete_FlatForward

# Register FlatForward in _mxdevtool:
_mxdevtool.FlatForward_swigregister(FlatForward)

class Interpolator1D(object):
    r"""Proxy of C++ Interpolator1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BackwardFlat = _mxdevtool.Interpolator1D_BackwardFlat
    
    ForwardFlat = _mxdevtool.Interpolator1D_ForwardFlat
    
    Linear = _mxdevtool.Interpolator1D_Linear
    
    LogLinear = _mxdevtool.Interpolator1D_LogLinear
    
    CubicNaturalSpline = _mxdevtool.Interpolator1D_CubicNaturalSpline
    
    LogcubicNaturalSpline = _mxdevtool.Interpolator1D_LogcubicNaturalSpline
    
    MonotonicCubicNaturalSpline = _mxdevtool.Interpolator1D_MonotonicCubicNaturalSpline
    
    MonotonicLogCubicNaturalSpline = _mxdevtool.Interpolator1D_MonotonicLogCubicNaturalSpline
    
    KrugerCubic = _mxdevtool.Interpolator1D_KrugerCubic
    
    KrugerlogCubic = _mxdevtool.Interpolator1D_KrugerlogCubic
    
    FritschButlandCubic = _mxdevtool.Interpolator1D_FritschButlandCubic
    
    FritschButlandlogCubic = _mxdevtool.Interpolator1D_FritschButlandlogCubic
    
    Parabolic = _mxdevtool.Interpolator1D_Parabolic
    
    LogParabolic = _mxdevtool.Interpolator1D_LogParabolic
    
    MonotonicParabolic = _mxdevtool.Interpolator1D_MonotonicParabolic
    
    MonotonicLogParabolic = _mxdevtool.Interpolator1D_MonotonicLogParabolic
    

    def __init__(self):
        r"""__init__(Interpolator1D self) -> Interpolator1D"""
        _mxdevtool.Interpolator1D_swiginit(self, _mxdevtool.new_Interpolator1D())
    __swig_destroy__ = _mxdevtool.delete_Interpolator1D

# Register Interpolator1D in _mxdevtool:
_mxdevtool.Interpolator1D_swigregister(Interpolator1D)

class Interpolator2D(object):
    r"""Proxy of C++ Interpolator2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BackwardflatLinear = _mxdevtool.Interpolator2D_BackwardflatLinear
    
    Bilinear = _mxdevtool.Interpolator2D_Bilinear
    
    Bicubic = _mxdevtool.Interpolator2D_Bicubic
    

    def __init__(self):
        r"""__init__(Interpolator2D self) -> Interpolator2D"""
        _mxdevtool.Interpolator2D_swiginit(self, _mxdevtool.new_Interpolator2D())
    __swig_destroy__ = _mxdevtool.delete_Interpolator2D

# Register Interpolator2D in _mxdevtool:
_mxdevtool.Interpolator2D_swigregister(Interpolator2D)

class Extrapolator1D(object):
    r"""Proxy of C++ Extrapolator1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FlatForward = _mxdevtool.Extrapolator1D_FlatForward
    
    FlatSpot = _mxdevtool.Extrapolator1D_FlatSpot
    
    SmithWilson = _mxdevtool.Extrapolator1D_SmithWilson
    

    def __init__(self):
        r"""__init__(Extrapolator1D self) -> Extrapolator1D"""
        _mxdevtool.Extrapolator1D_swiginit(self, _mxdevtool.new_Extrapolator1D())
    __swig_destroy__ = _mxdevtool.delete_Extrapolator1D

# Register Extrapolator1D in _mxdevtool:
_mxdevtool.Extrapolator1D_swigregister(Extrapolator1D)

class Extrapolation(object):
    r"""Proxy of C++ boost::shared_ptr< Extrapolation > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Extrapolation *":
        r"""__deref__(Extrapolation self) -> Extrapolation *"""
        return _mxdevtool.Extrapolation___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Extrapolation self) -> bool"""
        return _mxdevtool.Extrapolation___nonzero__(self)

    def __init__(self):
        r"""__init__(Extrapolation self) -> Extrapolation"""
        _mxdevtool.Extrapolation_swiginit(self, _mxdevtool.new_Extrapolation())
    __swig_destroy__ = _mxdevtool.delete_Extrapolation

# Register Extrapolation in _mxdevtool:
_mxdevtool.Extrapolation_swigregister(Extrapolation)

class SmithWilsonExtrapolation(Extrapolation):
    r"""Proxy of C++ SmithWilsonExtrapolationPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha: "QuantLib::Real", ufr: "QuantLib::Real"):
        r"""__init__(SmithWilsonExtrapolation self, QuantLib::Real alpha, QuantLib::Real ufr) -> SmithWilsonExtrapolation"""
        _mxdevtool.SmithWilsonExtrapolation_swiginit(self, _mxdevtool.new_SmithWilsonExtrapolation(alpha, ufr))
    __swig_destroy__ = _mxdevtool.delete_SmithWilsonExtrapolation

# Register SmithWilsonExtrapolation in _mxdevtool:
_mxdevtool.SmithWilsonExtrapolation_swigregister(SmithWilsonExtrapolation)

class FlatExtrapolation(Extrapolation):
    r"""Proxy of C++ FlatExtrapolationPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rateType: "std::string"):
        r"""__init__(FlatExtrapolation self, std::string rateType) -> FlatExtrapolation"""
        _mxdevtool.FlatExtrapolation_swiginit(self, _mxdevtool.new_FlatExtrapolation(rateType))
    __swig_destroy__ = _mxdevtool.delete_FlatExtrapolation

# Register FlatExtrapolation in _mxdevtool:
_mxdevtool.FlatExtrapolation_swigregister(FlatExtrapolation)

class MarketCurveRate(object):
    r"""Proxy of C++ MarketCurveRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Cash = _mxdevtool.MarketCurveRate_Cash
    
    Swap = _mxdevtool.MarketCurveRate_Swap
    
    Bond = _mxdevtool.MarketCurveRate_Bond
    

    def __init__(self, tenor: "std::string const &", rate: "Real", rateType: "MarketCurveRate::Type"):
        r"""__init__(MarketCurveRate self, std::string const & tenor, Real rate, MarketCurveRate::Type rateType) -> MarketCurveRate"""
        _mxdevtool.MarketCurveRate_swiginit(self, _mxdevtool.new_MarketCurveRate(tenor, rate, rateType))
    tenor = property(_mxdevtool.MarketCurveRate_tenor_get, _mxdevtool.MarketCurveRate_tenor_set, doc=r"""tenor : std::string""")
    rate = property(_mxdevtool.MarketCurveRate_rate_get, _mxdevtool.MarketCurveRate_rate_set, doc=r"""rate : Real""")
    rateType = property(_mxdevtool.MarketCurveRate_rateType_get, _mxdevtool.MarketCurveRate_rateType_set, doc=r"""rateType : MarketCurveRate::Type""")
    __swig_destroy__ = _mxdevtool.delete_MarketCurveRate

# Register MarketCurveRate in _mxdevtool:
_mxdevtool.MarketCurveRate_swigregister(MarketCurveRate)

class MarketCurveRateVector(object):
    r"""Proxy of C++ std::vector< MarketCurveRate > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(MarketCurveRateVector self) -> SwigPyIterator"""
        return _mxdevtool.MarketCurveRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(MarketCurveRateVector self) -> bool"""
        return _mxdevtool.MarketCurveRateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(MarketCurveRateVector self) -> bool"""
        return _mxdevtool.MarketCurveRateVector___bool__(self)

    def __len__(self) -> "std::vector< MarketCurveRate >::size_type":
        r"""__len__(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::size_type"""
        return _mxdevtool.MarketCurveRateVector___len__(self)

    def __getslice__(self, i: "std::vector< MarketCurveRate >::difference_type", j: "std::vector< MarketCurveRate >::difference_type") -> "std::vector< MarketCurveRate,std::allocator< MarketCurveRate > > *":
        r"""__getslice__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i, std::vector< MarketCurveRate >::difference_type j) -> MarketCurveRateVector"""
        return _mxdevtool.MarketCurveRateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i, std::vector< MarketCurveRate >::difference_type j)
        __setslice__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i, std::vector< MarketCurveRate >::difference_type j, MarketCurveRateVector v)
        """
        return _mxdevtool.MarketCurveRateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< MarketCurveRate >::difference_type", j: "std::vector< MarketCurveRate >::difference_type") -> "void":
        r"""__delslice__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i, std::vector< MarketCurveRate >::difference_type j)"""
        return _mxdevtool.MarketCurveRateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i)
        __delitem__(MarketCurveRateVector self, PySliceObject * slice)
        """
        return _mxdevtool.MarketCurveRateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< MarketCurveRate >::value_type const &":
        r"""
        __getitem__(MarketCurveRateVector self, PySliceObject * slice) -> MarketCurveRateVector
        __getitem__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i) -> MarketCurveRate
        """
        return _mxdevtool.MarketCurveRateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(MarketCurveRateVector self, PySliceObject * slice, MarketCurveRateVector v)
        __setitem__(MarketCurveRateVector self, PySliceObject * slice)
        __setitem__(MarketCurveRateVector self, std::vector< MarketCurveRate >::difference_type i, MarketCurveRate x)
        """
        return _mxdevtool.MarketCurveRateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< MarketCurveRate >::value_type":
        r"""pop(MarketCurveRateVector self) -> MarketCurveRate"""
        return _mxdevtool.MarketCurveRateVector_pop(self)

    def append(self, x: "MarketCurveRate") -> "void":
        r"""append(MarketCurveRateVector self, MarketCurveRate x)"""
        return _mxdevtool.MarketCurveRateVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(MarketCurveRateVector self) -> bool"""
        return _mxdevtool.MarketCurveRateVector_empty(self)

    def size(self) -> "std::vector< MarketCurveRate >::size_type":
        r"""size(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::size_type"""
        return _mxdevtool.MarketCurveRateVector_size(self)

    def swap(self, v: "MarketCurveRateVector") -> "void":
        r"""swap(MarketCurveRateVector self, MarketCurveRateVector v)"""
        return _mxdevtool.MarketCurveRateVector_swap(self, v)

    def begin(self) -> "std::vector< MarketCurveRate >::iterator":
        r"""begin(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::iterator"""
        return _mxdevtool.MarketCurveRateVector_begin(self)

    def end(self) -> "std::vector< MarketCurveRate >::iterator":
        r"""end(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::iterator"""
        return _mxdevtool.MarketCurveRateVector_end(self)

    def rbegin(self) -> "std::vector< MarketCurveRate >::reverse_iterator":
        r"""rbegin(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::reverse_iterator"""
        return _mxdevtool.MarketCurveRateVector_rbegin(self)

    def rend(self) -> "std::vector< MarketCurveRate >::reverse_iterator":
        r"""rend(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::reverse_iterator"""
        return _mxdevtool.MarketCurveRateVector_rend(self)

    def clear(self) -> "void":
        r"""clear(MarketCurveRateVector self)"""
        return _mxdevtool.MarketCurveRateVector_clear(self)

    def get_allocator(self) -> "std::vector< MarketCurveRate >::allocator_type":
        r"""get_allocator(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::allocator_type"""
        return _mxdevtool.MarketCurveRateVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(MarketCurveRateVector self)"""
        return _mxdevtool.MarketCurveRateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< MarketCurveRate >::iterator":
        r"""
        erase(MarketCurveRateVector self, std::vector< MarketCurveRate >::iterator pos) -> std::vector< MarketCurveRate >::iterator
        erase(MarketCurveRateVector self, std::vector< MarketCurveRate >::iterator first, std::vector< MarketCurveRate >::iterator last) -> std::vector< MarketCurveRate >::iterator
        """
        return _mxdevtool.MarketCurveRateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MarketCurveRateVector self) -> MarketCurveRateVector
        __init__(MarketCurveRateVector self, MarketCurveRateVector other) -> MarketCurveRateVector
        __init__(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type size) -> MarketCurveRateVector
        __init__(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type size, MarketCurveRate value) -> MarketCurveRateVector
        """
        _mxdevtool.MarketCurveRateVector_swiginit(self, _mxdevtool.new_MarketCurveRateVector(*args))

    def push_back(self, x: "MarketCurveRate") -> "void":
        r"""push_back(MarketCurveRateVector self, MarketCurveRate x)"""
        return _mxdevtool.MarketCurveRateVector_push_back(self, x)

    def front(self) -> "std::vector< MarketCurveRate >::value_type const &":
        r"""front(MarketCurveRateVector self) -> MarketCurveRate"""
        return _mxdevtool.MarketCurveRateVector_front(self)

    def back(self) -> "std::vector< MarketCurveRate >::value_type const &":
        r"""back(MarketCurveRateVector self) -> MarketCurveRate"""
        return _mxdevtool.MarketCurveRateVector_back(self)

    def assign(self, n: "std::vector< MarketCurveRate >::size_type", x: "MarketCurveRate") -> "void":
        r"""assign(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type n, MarketCurveRate x)"""
        return _mxdevtool.MarketCurveRateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type new_size)
        resize(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type new_size, MarketCurveRate x)
        """
        return _mxdevtool.MarketCurveRateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(MarketCurveRateVector self, std::vector< MarketCurveRate >::iterator pos, MarketCurveRate x) -> std::vector< MarketCurveRate >::iterator
        insert(MarketCurveRateVector self, std::vector< MarketCurveRate >::iterator pos, std::vector< MarketCurveRate >::size_type n, MarketCurveRate x)
        """
        return _mxdevtool.MarketCurveRateVector_insert(self, *args)

    def reserve(self, n: "std::vector< MarketCurveRate >::size_type") -> "void":
        r"""reserve(MarketCurveRateVector self, std::vector< MarketCurveRate >::size_type n)"""
        return _mxdevtool.MarketCurveRateVector_reserve(self, n)

    def capacity(self) -> "std::vector< MarketCurveRate >::size_type":
        r"""capacity(MarketCurveRateVector self) -> std::vector< MarketCurveRate >::size_type"""
        return _mxdevtool.MarketCurveRateVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_MarketCurveRateVector

# Register MarketCurveRateVector in _mxdevtool:
_mxdevtool.MarketCurveRateVector_swigregister(MarketCurveRateVector)

class YieldCurveExt(YieldTermStructure):
    r"""Proxy of C++ YieldCurveExtPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setSmithwilsonParameter(self, alpha: "Real", ufr: "Real") -> "void":
        r"""setSmithwilsonParameter(YieldCurveExt self, Real alpha, Real ufr)"""
        return _mxdevtool.YieldCurveExt_setSmithwilsonParameter(self, alpha, ufr)

    def smithwilsonAlpha(self) -> "Real":
        r"""smithwilsonAlpha(YieldCurveExt self) -> Real"""
        return _mxdevtool.YieldCurveExt_smithwilsonAlpha(self)

    def smithwilsonUFR(self) -> "Real":
        r"""smithwilsonUFR(YieldCurveExt self) -> Real"""
        return _mxdevtool.YieldCurveExt_smithwilsonUFR(self)

    def __init__(self):
        r"""__init__(YieldCurveExt self) -> YieldCurveExt"""
        _mxdevtool.YieldCurveExt_swiginit(self, _mxdevtool.new_YieldCurveExt())
    __swig_destroy__ = _mxdevtool.delete_YieldCurveExt

# Register YieldCurveExt in _mxdevtool:
_mxdevtool.YieldCurveExt_swigregister(YieldCurveExt)

class ZeroYieldCurveExt(YieldCurveExt):
    r"""Proxy of C++ ZeroYieldCurveExtPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ref_date: "Date", periods_str: "StrVector", zero_rates: "DoubleVector", interpolator1DType: "Interpolator1D::Type", extrapolator1DType: "Extrapolator1D::Type", family_name: "std::string const &"):
        r"""__init__(ZeroYieldCurveExt self, Date ref_date, StrVector periods_str, DoubleVector zero_rates, Interpolator1D::Type interpolator1DType, Extrapolator1D::Type extrapolator1DType, std::string const & family_name) -> ZeroYieldCurveExt"""
        _mxdevtool.ZeroYieldCurveExt_swiginit(self, _mxdevtool.new_ZeroYieldCurveExt(ref_date, periods_str, zero_rates, interpolator1DType, extrapolator1DType, family_name))
    __swig_destroy__ = _mxdevtool.delete_ZeroYieldCurveExt

# Register ZeroYieldCurveExt in _mxdevtool:
_mxdevtool.ZeroYieldCurveExt_swigregister(ZeroYieldCurveExt)

class DiscountFactorCurveExt(YieldCurveExt):
    r"""Proxy of C++ DiscountFactorCurveExtPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ref_date: "Date", periods_str: "StrVector", discountFactors: "DoubleVector", interpolator1DType: "Interpolator1D::Type", extrapolator1DType: "Extrapolator1D::Type", family_name: "std::string const &"):
        r"""__init__(DiscountFactorCurveExt self, Date ref_date, StrVector periods_str, DoubleVector discountFactors, Interpolator1D::Type interpolator1DType, Extrapolator1D::Type extrapolator1DType, std::string const & family_name) -> DiscountFactorCurveExt"""
        _mxdevtool.DiscountFactorCurveExt_swiginit(self, _mxdevtool.new_DiscountFactorCurveExt(ref_date, periods_str, discountFactors, interpolator1DType, extrapolator1DType, family_name))
    __swig_destroy__ = _mxdevtool.delete_DiscountFactorCurveExt

# Register DiscountFactorCurveExt in _mxdevtool:
_mxdevtool.DiscountFactorCurveExt_swigregister(DiscountFactorCurveExt)

class BootstapSwapCurveCCP(YieldCurveExt):
    r"""Proxy of C++ BootstapSwapCurveCCPPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate: "Date", tenors_str: "StrVector", rateTypes: "StrVector", quotes: "DoubleVector", interpolatorID: "Interpolator1D::Type", extrapolation: "Extrapolation", familyname: "std::string const &", forSettlement: "bool"):
        r"""__init__(BootstapSwapCurveCCP self, Date refDate, StrVector tenors_str, StrVector rateTypes, DoubleVector quotes, Interpolator1D::Type interpolatorID, Extrapolation extrapolation, std::string const & familyname, bool forSettlement) -> BootstapSwapCurveCCP"""
        _mxdevtool.BootstapSwapCurveCCP_swiginit(self, _mxdevtool.new_BootstapSwapCurveCCP(refDate, tenors_str, rateTypes, quotes, interpolatorID, extrapolation, familyname, forSettlement))
    __swig_destroy__ = _mxdevtool.delete_BootstapSwapCurveCCP

# Register BootstapSwapCurveCCP in _mxdevtool:
_mxdevtool.BootstapSwapCurveCCP_swigregister(BootstapSwapCurveCCP)

class IndexManager(object):
    r"""Proxy of C++ IndexManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "IndexManager &":
        r"""instance() -> IndexManager"""
        return _mxdevtool.IndexManager_instance()

    def setHistory(self, name: "std::string const &", fixings: "TimeSeries< Real > const &") -> "void":
        r"""setHistory(IndexManager self, std::string const & name, TimeSeries< Real > const & fixings)"""
        return _mxdevtool.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name: "std::string const &") -> "TimeSeries< Real > const &":
        r"""getHistory(IndexManager self, std::string const & name) -> TimeSeries< Real > const &"""
        return _mxdevtool.IndexManager_getHistory(self, name)

    def hasHistory(self, name: "std::string const &") -> "bool":
        r"""hasHistory(IndexManager self, std::string const & name) -> bool"""
        return _mxdevtool.IndexManager_hasHistory(self, name)

    def histories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        r"""histories(IndexManager self) -> StrVector"""
        return _mxdevtool.IndexManager_histories(self)

    def clearHistory(self, name: "std::string const &") -> "void":
        r"""clearHistory(IndexManager self, std::string const & name)"""
        return _mxdevtool.IndexManager_clearHistory(self, name)

    def clearHistories(self) -> "void":
        r"""clearHistories(IndexManager self)"""
        return _mxdevtool.IndexManager_clearHistories(self)
    __swig_destroy__ = _mxdevtool.delete_IndexManager

# Register IndexManager in _mxdevtool:
_mxdevtool.IndexManager_swigregister(IndexManager)

def IndexManager_instance() -> "IndexManager &":
    r"""IndexManager_instance() -> IndexManager"""
    return _mxdevtool.IndexManager_instance()

class Index(object):
    r"""Proxy of C++ boost::shared_ptr< Index > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Index *":
        r"""__deref__(Index self) -> Index *"""
        return _mxdevtool.Index___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Index self) -> bool"""
        return _mxdevtool.Index___nonzero__(self)

    def addFixings(self, fixingDates: "DateVector", fixings: "DoubleVector") -> "void":
        r"""addFixings(Index self, DateVector fixingDates, DoubleVector fixings)"""
        return _mxdevtool.Index_addFixings(self, fixingDates, fixings)

    def __str__(self) -> "std::string":
        r"""__str__(Index self) -> std::string"""
        return _mxdevtool.Index___str__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(Index self) -> Observable"""
        return _mxdevtool.Index_asObservable(self)

    def __init__(self):
        r"""__init__(Index self) -> Index"""
        _mxdevtool.Index_swiginit(self, _mxdevtool.new_Index())
    __swig_destroy__ = _mxdevtool.delete_Index

    def name(self) -> "std::string":
        r"""name(Index self) -> std::string"""
        return _mxdevtool.Index_name(self)

    def fixingCalendar(self) -> "Calendar":
        r"""fixingCalendar(Index self) -> Calendar"""
        return _mxdevtool.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate: "Date") -> "bool":
        r"""isValidFixingDate(Index self, Date fixingDate) -> bool"""
        return _mxdevtool.Index_isValidFixingDate(self, fixingDate)

    def fixing(self, fixingDate: "Date", forecastTodaysFixing: "bool"=False) -> "Real":
        r"""fixing(Index self, Date fixingDate, bool forecastTodaysFixing=False) -> Real"""
        return _mxdevtool.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def addFixing(self, fixingDate: "Date", fixing: "Rate") -> "void":
        r"""addFixing(Index self, Date fixingDate, Rate fixing)"""
        return _mxdevtool.Index_addFixing(self, fixingDate, fixing)

# Register Index in _mxdevtool:
_mxdevtool.Index_swigregister(Index)

class InterestRateIndex(Index):
    r"""Proxy of C++ InterestRateIndexPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self) -> "std::string":
        r"""familyName(InterestRateIndex self) -> std::string"""
        return _mxdevtool.InterestRateIndex_familyName(self)

    def tenor(self) -> "Period":
        r"""tenor(InterestRateIndex self) -> Period"""
        return _mxdevtool.InterestRateIndex_tenor(self)

    def fixingDays(self) -> "Natural":
        r"""fixingDays(InterestRateIndex self) -> Natural"""
        return _mxdevtool.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate: "Date") -> "Date":
        r"""fixingDate(InterestRateIndex self, Date valueDate) -> Date"""
        return _mxdevtool.InterestRateIndex_fixingDate(self, valueDate)

    def currency(self) -> "Currency":
        r"""currency(InterestRateIndex self) -> Currency"""
        return _mxdevtool.InterestRateIndex_currency(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(InterestRateIndex self) -> DayCounter"""
        return _mxdevtool.InterestRateIndex_dayCounter(self)

    def maturityDate(self, valueDate: "Date") -> "Date":
        r"""maturityDate(InterestRateIndex self, Date valueDate) -> Date"""
        return _mxdevtool.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate: "Date") -> "Date":
        r"""valueDate(InterestRateIndex self, Date fixingDate) -> Date"""
        return _mxdevtool.InterestRateIndex_valueDate(self, fixingDate)
    __swig_destroy__ = _mxdevtool.delete_InterestRateIndex

# Register InterestRateIndex in _mxdevtool:
_mxdevtool.InterestRateIndex_swigregister(InterestRateIndex)

class IborIndex(InterestRateIndex):
    r"""Proxy of C++ IborIndexPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(IborIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> IborIndex"""
        _mxdevtool.IborIndex_swiginit(self, _mxdevtool.new_IborIndex(*args))

    def businessDayConvention(self) -> "BusinessDayConvention":
        r"""businessDayConvention(IborIndex self) -> BusinessDayConvention"""
        return _mxdevtool.IborIndex_businessDayConvention(self)

    def endOfMonth(self) -> "bool":
        r"""endOfMonth(IborIndex self) -> bool"""
        return _mxdevtool.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        r"""forwardingTermStructure(IborIndex self) -> YieldTermStructureHandle"""
        return _mxdevtool.IborIndex_forwardingTermStructure(self)

    def clone(self, h: "YieldTermStructureHandle") -> "IborIndexPtr":
        r"""clone(IborIndex self, YieldTermStructureHandle h) -> IborIndex"""
        return _mxdevtool.IborIndex_clone(self, h)
    __swig_destroy__ = _mxdevtool.delete_IborIndex

# Register IborIndex in _mxdevtool:
_mxdevtool.IborIndex_swigregister(IborIndex)


def as_iborindex(index: "InterestRateIndex") -> "IborIndexPtr":
    r"""as_iborindex(InterestRateIndex index) -> IborIndex"""
    return _mxdevtool.as_iborindex(index)
class IborIndexExt(IborIndex):
    r"""Proxy of C++ IborIndexExtPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, familyName: "std::string const &", tenor_str: "std::string const &"):
        r"""__init__(IborIndexExt self, std::string const & familyName, std::string const & tenor_str) -> IborIndexExt"""
        _mxdevtool.IborIndexExt_swiginit(self, _mxdevtool.new_IborIndexExt(familyName, tenor_str))
    __swig_destroy__ = _mxdevtool.delete_IborIndexExt

# Register IborIndexExt in _mxdevtool:
_mxdevtool.IborIndexExt_swigregister(IborIndexExt)

class OvernightIndex(IborIndex):
    r"""Proxy of C++ OvernightIndexPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndex self, std::string const & familyName, Integer settlementDays, Currency currency, Calendar calendar, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> OvernightIndex"""
        _mxdevtool.OvernightIndex_swiginit(self, _mxdevtool.new_OvernightIndex(*args))
    __swig_destroy__ = _mxdevtool.delete_OvernightIndex

# Register OvernightIndex in _mxdevtool:
_mxdevtool.OvernightIndex_swigregister(OvernightIndex)

class SwapIndex(InterestRateIndex):
    r"""Proxy of C++ SwapIndexPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SwapIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, Period fixedLegTenor, BusinessDayConvention fixedLegConvention, DayCounter fixedLegDayCounter, IborIndex iborIndex) -> SwapIndex
        __init__(SwapIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, Period fixedLegTenor, BusinessDayConvention fixedLegConvention, DayCounter fixedLegDayCounter, IborIndex iborIndex, YieldTermStructureHandle discountCurve) -> SwapIndex
        """
        _mxdevtool.SwapIndex_swiginit(self, _mxdevtool.new_SwapIndex(*args))

    def fixedLegTenor(self) -> "Period":
        r"""fixedLegTenor(SwapIndex self) -> Period"""
        return _mxdevtool.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self) -> "BusinessDayConvention":
        r"""fixedLegConvention(SwapIndex self) -> BusinessDayConvention"""
        return _mxdevtool.SwapIndex_fixedLegConvention(self)

    def iborIndex(self) -> "IborIndexPtr":
        r"""iborIndex(SwapIndex self) -> IborIndex"""
        return _mxdevtool.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        r"""forwardingTermStructure(SwapIndex self) -> YieldTermStructureHandle"""
        return _mxdevtool.SwapIndex_forwardingTermStructure(self)
    __swig_destroy__ = _mxdevtool.delete_SwapIndex

# Register SwapIndex in _mxdevtool:
_mxdevtool.SwapIndex_swigregister(SwapIndex)

class DateGeneration(object):
    r"""Proxy of C++ DateGeneration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Backward = _mxdevtool.DateGeneration_Backward
    
    Forward = _mxdevtool.DateGeneration_Forward
    
    Zero = _mxdevtool.DateGeneration_Zero
    
    ThirdWednesday = _mxdevtool.DateGeneration_ThirdWednesday
    
    Twentieth = _mxdevtool.DateGeneration_Twentieth
    
    TwentiethIMM = _mxdevtool.DateGeneration_TwentiethIMM
    
    OldCDS = _mxdevtool.DateGeneration_OldCDS
    
    CDS = _mxdevtool.DateGeneration_CDS
    

    def __init__(self):
        r"""__init__(DateGeneration self) -> DateGeneration"""
        _mxdevtool.DateGeneration_swiginit(self, _mxdevtool.new_DateGeneration())
    __swig_destroy__ = _mxdevtool.delete_DateGeneration

# Register DateGeneration in _mxdevtool:
_mxdevtool.DateGeneration_swigregister(DateGeneration)

class Schedule(object):
    r"""Proxy of C++ Schedule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Schedule self, DateVector arg2, Calendar calendar, BusinessDayConvention rollingConvention) -> Schedule
        __init__(Schedule self, Date effectiveDate, Date terminationDate, Period tenor, Calendar calendar, BusinessDayConvention convention, BusinessDayConvention terminationDateConvention, DateGeneration::Rule rule, bool endOfMonth, Date firstDate=Date(), Date nextToLastDate=Date()) -> Schedule
        __init__(Schedule self) -> Schedule
        """
        _mxdevtool.Schedule_swiginit(self, _mxdevtool.new_Schedule(*args))

    def __len__(self) -> "Size":
        r"""__len__(Schedule self) -> Size"""
        return _mxdevtool.Schedule___len__(self)

    def isRegular(self, i: "Size") -> "bool":
        r"""isRegular(Schedule self, Size i) -> bool"""
        return _mxdevtool.Schedule_isRegular(self, i)

    def __getitem__(self, i: "Integer") -> "Date":
        r"""__getitem__(Schedule self, Integer i) -> Date"""
        return _mxdevtool.Schedule___getitem__(self, i)
    __swig_destroy__ = _mxdevtool.delete_Schedule

# Register Schedule in _mxdevtool:
_mxdevtool.Schedule_swigregister(Schedule)

class CashFlow(object):
    r"""Proxy of C++ boost::shared_ptr< CashFlow > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CashFlow *":
        r"""__deref__(CashFlow self) -> CashFlow *"""
        return _mxdevtool.CashFlow___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(CashFlow self) -> bool"""
        return _mxdevtool.CashFlow___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(CashFlow self) -> Observable"""
        return _mxdevtool.CashFlow_asObservable(self)

    def __init__(self):
        r"""__init__(CashFlow self) -> CashFlow"""
        _mxdevtool.CashFlow_swiginit(self, _mxdevtool.new_CashFlow())
    __swig_destroy__ = _mxdevtool.delete_CashFlow

    def amount(self) -> "Real":
        r"""amount(CashFlow self) -> Real"""
        return _mxdevtool.CashFlow_amount(self)

    def date(self) -> "Date":
        r"""date(CashFlow self) -> Date"""
        return _mxdevtool.CashFlow_date(self)

# Register CashFlow in _mxdevtool:
_mxdevtool.CashFlow_swigregister(CashFlow)

class Leg(object):
    r"""Proxy of C++ std::vector< boost::shared_ptr< CashFlow > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(Leg self) -> SwigPyIterator"""
        return _mxdevtool.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Leg self) -> bool"""
        return _mxdevtool.Leg___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(Leg self) -> bool"""
        return _mxdevtool.Leg___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        r"""__len__(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::size_type"""
        return _mxdevtool.Leg___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > > *":
        r"""__getslice__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i, std::vector< boost::shared_ptr< CashFlow > >::difference_type j) -> Leg"""
        return _mxdevtool.Leg___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i, std::vector< boost::shared_ptr< CashFlow > >::difference_type j)
        __setslice__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i, std::vector< boost::shared_ptr< CashFlow > >::difference_type j, Leg v)
        """
        return _mxdevtool.Leg___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "void":
        r"""__delslice__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i, std::vector< boost::shared_ptr< CashFlow > >::difference_type j)"""
        return _mxdevtool.Leg___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i)
        __delitem__(Leg self, PySliceObject * slice)
        """
        return _mxdevtool.Leg___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        r"""
        __getitem__(Leg self, PySliceObject * slice) -> Leg
        __getitem__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i) -> CashFlow
        """
        return _mxdevtool.Leg___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(Leg self, PySliceObject * slice, Leg v)
        __setitem__(Leg self, PySliceObject * slice)
        __setitem__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::difference_type i, CashFlow x)
        """
        return _mxdevtool.Leg___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type":
        r"""pop(Leg self) -> CashFlow"""
        return _mxdevtool.Leg_pop(self)

    def append(self, x: "CashFlow") -> "void":
        r"""append(Leg self, CashFlow x)"""
        return _mxdevtool.Leg_append(self, x)

    def empty(self) -> "bool":
        r"""empty(Leg self) -> bool"""
        return _mxdevtool.Leg_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        r"""size(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::size_type"""
        return _mxdevtool.Leg_size(self)

    def swap(self, v: "Leg") -> "void":
        r"""swap(Leg self, Leg v)"""
        return _mxdevtool.Leg_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        r"""begin(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::iterator"""
        return _mxdevtool.Leg_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        r"""end(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::iterator"""
        return _mxdevtool.Leg_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        r"""rbegin(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator"""
        return _mxdevtool.Leg_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        r"""rend(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator"""
        return _mxdevtool.Leg_rend(self)

    def clear(self) -> "void":
        r"""clear(Leg self)"""
        return _mxdevtool.Leg_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< CashFlow > >::allocator_type":
        r"""get_allocator(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::allocator_type"""
        return _mxdevtool.Leg_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(Leg self)"""
        return _mxdevtool.Leg_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        r"""
        erase(Leg self, std::vector< boost::shared_ptr< CashFlow > >::iterator pos) -> std::vector< boost::shared_ptr< CashFlow > >::iterator
        erase(Leg self, std::vector< boost::shared_ptr< CashFlow > >::iterator first, std::vector< boost::shared_ptr< CashFlow > >::iterator last) -> std::vector< boost::shared_ptr< CashFlow > >::iterator
        """
        return _mxdevtool.Leg_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Leg self) -> Leg
        __init__(Leg self, Leg other) -> Leg
        __init__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type size) -> Leg
        __init__(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type size, CashFlow value) -> Leg
        """
        _mxdevtool.Leg_swiginit(self, _mxdevtool.new_Leg(*args))

    def push_back(self, x: "CashFlow") -> "void":
        r"""push_back(Leg self, CashFlow x)"""
        return _mxdevtool.Leg_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        r"""front(Leg self) -> CashFlow"""
        return _mxdevtool.Leg_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        r"""back(Leg self) -> CashFlow"""
        return _mxdevtool.Leg_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type", x: "CashFlow") -> "void":
        r"""assign(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type n, CashFlow x)"""
        return _mxdevtool.Leg_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type new_size)
        resize(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type new_size, CashFlow x)
        """
        return _mxdevtool.Leg_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(Leg self, std::vector< boost::shared_ptr< CashFlow > >::iterator pos, CashFlow x) -> std::vector< boost::shared_ptr< CashFlow > >::iterator
        insert(Leg self, std::vector< boost::shared_ptr< CashFlow > >::iterator pos, std::vector< boost::shared_ptr< CashFlow > >::size_type n, CashFlow x)
        """
        return _mxdevtool.Leg_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type") -> "void":
        r"""reserve(Leg self, std::vector< boost::shared_ptr< CashFlow > >::size_type n)"""
        return _mxdevtool.Leg_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        r"""capacity(Leg self) -> std::vector< boost::shared_ptr< CashFlow > >::size_type"""
        return _mxdevtool.Leg_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_Leg

# Register Leg in _mxdevtool:
_mxdevtool.Leg_swigregister(Leg)

class SimpleCashFlow(CashFlow):
    r"""Proxy of C++ SimpleCashFlowPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        r"""__init__(SimpleCashFlow self, Real amount, Date date) -> SimpleCashFlow"""
        _mxdevtool.SimpleCashFlow_swiginit(self, _mxdevtool.new_SimpleCashFlow(amount, date))
    __swig_destroy__ = _mxdevtool.delete_SimpleCashFlow

# Register SimpleCashFlow in _mxdevtool:
_mxdevtool.SimpleCashFlow_swigregister(SimpleCashFlow)

class Coupon(CashFlow):
    r"""Proxy of C++ CouponPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self) -> "Real":
        r"""nominal(Coupon self) -> Real"""
        return _mxdevtool.Coupon_nominal(self)

    def accrualStartDate(self) -> "Date":
        r"""accrualStartDate(Coupon self) -> Date"""
        return _mxdevtool.Coupon_accrualStartDate(self)

    def accrualEndDate(self) -> "Date":
        r"""accrualEndDate(Coupon self) -> Date"""
        return _mxdevtool.Coupon_accrualEndDate(self)

    def referencePeriodStart(self) -> "Date":
        r"""referencePeriodStart(Coupon self) -> Date"""
        return _mxdevtool.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self) -> "Date":
        r"""referencePeriodEnd(Coupon self) -> Date"""
        return _mxdevtool.Coupon_referencePeriodEnd(self)

    def exCouponDate(self) -> "Date":
        r"""exCouponDate(Coupon self) -> Date"""
        return _mxdevtool.Coupon_exCouponDate(self)

    def rate(self) -> "Real":
        r"""rate(Coupon self) -> Real"""
        return _mxdevtool.Coupon_rate(self)

    def accrualPeriod(self) -> "Time":
        r"""accrualPeriod(Coupon self) -> Time"""
        return _mxdevtool.Coupon_accrualPeriod(self)

    def accrualDays(self) -> "BigInteger":
        r"""accrualDays(Coupon self) -> BigInteger"""
        return _mxdevtool.Coupon_accrualDays(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(Coupon self) -> DayCounter"""
        return _mxdevtool.Coupon_dayCounter(self)

    def accruedAmount(self, date: "Date") -> "Real":
        r"""accruedAmount(Coupon self, Date date) -> Real"""
        return _mxdevtool.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _mxdevtool.delete_Coupon

# Register Coupon in _mxdevtool:
_mxdevtool.Coupon_swigregister(Coupon)


def as_coupon(cf: "CashFlow") -> "CouponPtr":
    r"""as_coupon(CashFlow cf) -> Coupon"""
    return _mxdevtool.as_coupon(cf)
class FixedRateCoupon(Coupon):
    r"""Proxy of C++ FixedRateCouponPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FixedRateCoupon self, Date paymentDate, Real nominal, Rate rate, DayCounter dayCounter, Date startDate, Date endDate, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> FixedRateCoupon"""
        _mxdevtool.FixedRateCoupon_swiginit(self, _mxdevtool.new_FixedRateCoupon(*args, **kwargs))

    def interestRate(self) -> "InterestRate":
        r"""interestRate(FixedRateCoupon self) -> InterestRate"""
        return _mxdevtool.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _mxdevtool.delete_FixedRateCoupon

# Register FixedRateCoupon in _mxdevtool:
_mxdevtool.FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf: "CashFlow") -> "FixedRateCouponPtr":
    r"""as_fixed_rate_coupon(CashFlow cf) -> FixedRateCoupon"""
    return _mxdevtool.as_fixed_rate_coupon(cf)
class FloatingRateCouponPricer(object):
    r"""Proxy of C++ boost::shared_ptr< FloatingRateCouponPricer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "FloatingRateCouponPricer *":
        r"""__deref__(FloatingRateCouponPricer self) -> FloatingRateCouponPricer *"""
        return _mxdevtool.FloatingRateCouponPricer___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(FloatingRateCouponPricer self) -> bool"""
        return _mxdevtool.FloatingRateCouponPricer___nonzero__(self)

    def __init__(self):
        r"""__init__(FloatingRateCouponPricer self) -> FloatingRateCouponPricer"""
        _mxdevtool.FloatingRateCouponPricer_swiginit(self, _mxdevtool.new_FloatingRateCouponPricer())
    __swig_destroy__ = _mxdevtool.delete_FloatingRateCouponPricer

# Register FloatingRateCouponPricer in _mxdevtool:
_mxdevtool.FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)


def setCouponPricer(arg1: "Leg", arg2: "FloatingRateCouponPricer") -> "void":
    r"""setCouponPricer(Leg arg1, FloatingRateCouponPricer arg2)"""
    return _mxdevtool.setCouponPricer(arg1, arg2)
class FloatingRateCoupon(Coupon):
    r"""Proxy of C++ FloatingRateCouponPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self) -> "Date":
        r"""fixingDate(FloatingRateCoupon self) -> Date"""
        return _mxdevtool.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self) -> "Integer":
        r"""fixingDays(FloatingRateCoupon self) -> Integer"""
        return _mxdevtool.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self) -> "bool":
        r"""isInArrears(FloatingRateCoupon self) -> bool"""
        return _mxdevtool.FloatingRateCoupon_isInArrears(self)

    def gearing(self) -> "Real":
        r"""gearing(FloatingRateCoupon self) -> Real"""
        return _mxdevtool.FloatingRateCoupon_gearing(self)

    def spread(self) -> "Rate":
        r"""spread(FloatingRateCoupon self) -> Rate"""
        return _mxdevtool.FloatingRateCoupon_spread(self)

    def indexFixing(self) -> "Rate":
        r"""indexFixing(FloatingRateCoupon self) -> Rate"""
        return _mxdevtool.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self) -> "Rate":
        r"""adjustedFixing(FloatingRateCoupon self) -> Rate"""
        return _mxdevtool.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self) -> "Rate":
        r"""convexityAdjustment(FloatingRateCoupon self) -> Rate"""
        return _mxdevtool.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve: "YieldTermStructureHandle") -> "Real":
        r"""price(FloatingRateCoupon self, YieldTermStructureHandle discountCurve) -> Real"""
        return _mxdevtool.FloatingRateCoupon_price(self, discountCurve)

    def index(self) -> "InterestRateIndexPtr":
        r"""index(FloatingRateCoupon self) -> InterestRateIndex"""
        return _mxdevtool.FloatingRateCoupon_index(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        r"""setPricer(FloatingRateCoupon self, FloatingRateCouponPricer p)"""
        return _mxdevtool.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _mxdevtool.delete_FloatingRateCoupon

# Register FloatingRateCoupon in _mxdevtool:
_mxdevtool.FloatingRateCoupon_swigregister(FloatingRateCoupon)


def as_floating_rate_coupon(cf: "CashFlow") -> "FloatingRateCouponPtr":
    r"""as_floating_rate_coupon(CashFlow cf) -> FloatingRateCoupon"""
    return _mxdevtool.as_floating_rate_coupon(cf)
class CappedFlooredCoupon(FloatingRateCoupon):
    r"""Proxy of C++ CappedFlooredCouponPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CappedFlooredCoupon self, FloatingRateCoupon underlying, Rate cap=Null< Rate >(), Rate floor=Null< Rate >()) -> CappedFlooredCoupon"""
        _mxdevtool.CappedFlooredCoupon_swiginit(self, _mxdevtool.new_CappedFlooredCoupon(*args, **kwargs))

    def cap(self) -> "Rate":
        r"""cap(CappedFlooredCoupon self) -> Rate"""
        return _mxdevtool.CappedFlooredCoupon_cap(self)

    def floor(self) -> "Rate":
        r"""floor(CappedFlooredCoupon self) -> Rate"""
        return _mxdevtool.CappedFlooredCoupon_floor(self)

    def effectiveCap(self) -> "Rate":
        r"""effectiveCap(CappedFlooredCoupon self) -> Rate"""
        return _mxdevtool.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self) -> "Rate":
        r"""effectiveFloor(CappedFlooredCoupon self) -> Rate"""
        return _mxdevtool.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self) -> "bool":
        r"""isCapped(CappedFlooredCoupon self) -> bool"""
        return _mxdevtool.CappedFlooredCoupon_isCapped(self)

    def isFloored(self) -> "bool":
        r"""isFloored(CappedFlooredCoupon self) -> bool"""
        return _mxdevtool.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        r"""setPricer(CappedFlooredCoupon self, FloatingRateCouponPricer p)"""
        return _mxdevtool.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _mxdevtool.delete_CappedFlooredCoupon

# Register CappedFlooredCoupon in _mxdevtool:
_mxdevtool.CappedFlooredCoupon_swigregister(CappedFlooredCoupon)

class IborCoupon(FloatingRateCoupon):
    r"""Proxy of C++ IborCouponPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(IborCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Integer fixingDays, InterestRateIndex index, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter()) -> IborCoupon"""
        _mxdevtool.IborCoupon_swiginit(self, _mxdevtool.new_IborCoupon(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_IborCoupon

# Register IborCoupon in _mxdevtool:
_mxdevtool.IborCoupon_swigregister(IborCoupon)


def FixedRateLeg(*args, **kwargs) -> "Leg":
    r"""FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment=Following, DayCounter firstPeriodDayCount=DayCounter()) -> Leg"""
    return _mxdevtool.FixedRateLeg(*args, **kwargs)

def IborLeg(*args, **kwargs) -> "Leg":
    r"""IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), DoubleVector gearings=std::vector< Real >(), DoubleVector spreads=std::vector< Spread >(), DoubleVector caps=std::vector< Rate >(), DoubleVector floors=std::vector< Rate >(), bool isInArrears=False) -> Leg"""
    return _mxdevtool.IborLeg(*args, **kwargs)

def CmsLeg(*args, **kwargs) -> "Leg":
    r"""CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), DoubleVector gearings=std::vector< Real >(), DoubleVector spreads=std::vector< Spread >(), DoubleVector caps=std::vector< Rate >(), DoubleVector floors=std::vector< Rate >(), bool isInArrears=False) -> Leg"""
    return _mxdevtool.CmsLeg(*args, **kwargs)

def CmsZeroLeg(*args, **kwargs) -> "Leg":
    r"""CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), DoubleVector gearings=std::vector< Real >(), DoubleVector spreads=std::vector< Spread >(), DoubleVector caps=std::vector< Rate >(), DoubleVector floors=std::vector< Rate >()) -> Leg"""
    return _mxdevtool.CmsZeroLeg(*args, **kwargs)
class Duration(object):
    r"""Proxy of C++ Duration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _mxdevtool.Duration_Simple
    
    Macaulay = _mxdevtool.Duration_Macaulay
    
    Modified = _mxdevtool.Duration_Modified
    

    def __init__(self):
        r"""__init__(Duration self) -> Duration"""
        _mxdevtool.Duration_swiginit(self, _mxdevtool.new_Duration())
    __swig_destroy__ = _mxdevtool.delete_Duration

# Register Duration in _mxdevtool:
_mxdevtool.Duration_swigregister(Duration)

class CashFlows(object):
    r"""Proxy of C++ CashFlows class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(arg1: "Leg") -> "Date":
        r"""startDate(Leg arg1) -> Date"""
        return _mxdevtool.CashFlows_startDate(arg1)

    @staticmethod
    def maturityDate(arg1: "Leg") -> "Date":
        r"""maturityDate(Leg arg1) -> Date"""
        return _mxdevtool.CashFlows_maturityDate(arg1)

    @staticmethod
    def npv(*args) -> "Real":
        r"""
        npv(Leg leg, YieldTermStructure discountCurve, Spread zSpread, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _mxdevtool.CashFlows_npv(*args)

    @staticmethod
    def bps(*args) -> "Real":
        r"""
        bps(Leg leg, YieldTermStructure discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _mxdevtool.CashFlows_bps(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        r"""atmRate(Leg leg, YieldTermStructure discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real npv=Null< Real >()) -> Rate"""
        return _mxdevtool.CashFlows_atmRate(*args)

    @staticmethod
    def yieldRate(*args) -> "Rate":
        r"""yieldRate(Leg arg1, Real npv, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=10000, Rate guess=0.05) -> Rate"""
        return _mxdevtool.CashFlows_yieldRate(*args)

    @staticmethod
    def duration(*args) -> "Time":
        r"""
        duration(Leg arg1, InterestRate arg2, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Time
        duration(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Time
        """
        return _mxdevtool.CashFlows_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        r"""
        convexity(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        convexity(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _mxdevtool.CashFlows_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        r"""
        basisPointValue(Leg leg, InterestRate _yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        basisPointValue(Leg leg, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _mxdevtool.CashFlows_basisPointValue(*args)

    @staticmethod
    def zSpread(*args) -> "Spread":
        r"""zSpread(Leg leg, Real npv, YieldTermStructure arg3, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0) -> Spread"""
        return _mxdevtool.CashFlows_zSpread(*args)
    __swig_destroy__ = _mxdevtool.delete_CashFlows

# Register CashFlows in _mxdevtool:
_mxdevtool.CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg1: "Leg") -> "Date":
    r"""CashFlows_startDate(Leg arg1) -> Date"""
    return _mxdevtool.CashFlows_startDate(arg1)

def CashFlows_maturityDate(arg1: "Leg") -> "Date":
    r"""CashFlows_maturityDate(Leg arg1) -> Date"""
    return _mxdevtool.CashFlows_maturityDate(arg1)

def CashFlows_npv(*args) -> "Real":
    r"""
    CashFlows_npv(Leg leg, YieldTermStructure discountCurve, Spread zSpread, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_npv(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_npv(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_npv(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    """
    return _mxdevtool.CashFlows_npv(*args)

def CashFlows_bps(*args) -> "Real":
    r"""
    CashFlows_bps(Leg leg, YieldTermStructure discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_bps(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_bps(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_bps(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    """
    return _mxdevtool.CashFlows_bps(*args)

def CashFlows_atmRate(*args) -> "Rate":
    r"""CashFlows_atmRate(Leg leg, YieldTermStructure discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real npv=Null< Real >()) -> Rate"""
    return _mxdevtool.CashFlows_atmRate(*args)

def CashFlows_yieldRate(*args) -> "Rate":
    r"""CashFlows_yieldRate(Leg arg1, Real npv, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=10000, Rate guess=0.05) -> Rate"""
    return _mxdevtool.CashFlows_yieldRate(*args)

def CashFlows_duration(*args) -> "Time":
    r"""
    CashFlows_duration(Leg arg1, InterestRate arg2, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Time
    CashFlows_duration(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Time
    """
    return _mxdevtool.CashFlows_duration(*args)

def CashFlows_convexity(*args) -> "Real":
    r"""
    CashFlows_convexity(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_convexity(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    """
    return _mxdevtool.CashFlows_convexity(*args)

def CashFlows_basisPointValue(*args) -> "Real":
    r"""
    CashFlows_basisPointValue(Leg leg, InterestRate _yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    CashFlows_basisPointValue(Leg leg, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
    """
    return _mxdevtool.CashFlows_basisPointValue(*args)

def CashFlows_zSpread(*args) -> "Spread":
    r"""CashFlows_zSpread(Leg leg, Real npv, YieldTermStructure arg3, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0) -> Spread"""
    return _mxdevtool.CashFlows_zSpread(*args)

class Bond(Instrument):
    r"""Proxy of C++ BondPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bond self, Natural settlementDays, Calendar calendar, Real faceAmount, Date maturityDate, Date issueDate=Date(), Leg cashflows=Leg()) -> Bond"""
        _mxdevtool.Bond_swiginit(self, _mxdevtool.new_Bond(*args))

    def nextCouponRate(self, *args) -> "Rate":
        r"""nextCouponRate(Bond self, Date d=Date()) -> Rate"""
        return _mxdevtool.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args) -> "Rate":
        r"""previousCouponRate(Bond self, Date d=Date()) -> Rate"""
        return _mxdevtool.Bond_previousCouponRate(self, *args)

    def settlementDays(self) -> "Natural":
        r"""settlementDays(Bond self) -> Natural"""
        return _mxdevtool.Bond_settlementDays(self)

    def settlementDate(self, *args) -> "Date":
        r"""settlementDate(Bond self, Date d=Date()) -> Date"""
        return _mxdevtool.Bond_settlementDate(self, *args)

    def startDate(self) -> "Date":
        r"""startDate(Bond self) -> Date"""
        return _mxdevtool.Bond_startDate(self)

    def maturityDate(self) -> "Date":
        r"""maturityDate(Bond self) -> Date"""
        return _mxdevtool.Bond_maturityDate(self)

    def issueDate(self) -> "Date":
        r"""issueDate(Bond self) -> Date"""
        return _mxdevtool.Bond_issueDate(self)

    def cashflows(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        r"""cashflows(Bond self) -> Leg"""
        return _mxdevtool.Bond_cashflows(self)

    def redemptions(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        r"""redemptions(Bond self) -> Leg"""
        return _mxdevtool.Bond_redemptions(self)

    def redemption(self) -> "boost::shared_ptr< CashFlow >":
        r"""redemption(Bond self) -> CashFlow"""
        return _mxdevtool.Bond_redemption(self)

    def calendar(self) -> "Calendar":
        r"""calendar(Bond self) -> Calendar"""
        return _mxdevtool.Bond_calendar(self)

    def notionals(self) -> "std::vector< Real,std::allocator< Real > >":
        r"""notionals(Bond self) -> DoubleVector"""
        return _mxdevtool.Bond_notionals(self)

    def notional(self, *args) -> "Real":
        r"""notional(Bond self, Date d=Date()) -> Real"""
        return _mxdevtool.Bond_notional(self, *args)

    def cleanPrice(self, *args) -> "Real":
        r"""
        cleanPrice(Bond self) -> Real
        cleanPrice(Bond self, Rate _yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement=Date()) -> Real
        """
        return _mxdevtool.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args) -> "Real":
        r"""
        dirtyPrice(Bond self) -> Real
        dirtyPrice(Bond self, Rate _yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement=Date()) -> Real
        """
        return _mxdevtool.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args) -> "Real":
        r"""
        bondYield(Bond self, DayCounter dc, Compounding compounding, Frequency freq, Real accuracy=1.0e-8, Size maxEvaluations=100) -> Real
        bondYield(Bond self, Real cleanPrice, DayCounter dc, Compounding compounding, Frequency freq, Date settlement=Date(), Real accuracy=1.0e-8, Size maxEvaluations=100) -> Real
        """
        return _mxdevtool.Bond_bondYield(self, *args)

    def accruedAmount(self, *args) -> "Real":
        r"""accruedAmount(Bond self, Date settlement=Date()) -> Real"""
        return _mxdevtool.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args) -> "Real":
        r"""
        settlementValue(Bond self) -> Real
        settlementValue(Bond self, Real cleanPrice) -> Real
        """
        return _mxdevtool.Bond_settlementValue(self, *args)
    __swig_destroy__ = _mxdevtool.delete_Bond

# Register Bond in _mxdevtool:
_mxdevtool.Bond_swigregister(Bond)


def cleanPriceFromZSpread(*args) -> "Real":
    r"""cleanPriceFromZSpread(Bond bond, YieldTermStructure discountCurve, Spread zSpread, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate=Date()) -> Real"""
    return _mxdevtool.cleanPriceFromZSpread(*args)
class ZeroCouponBond(Bond):
    r"""Proxy of C++ ZeroCouponBondPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ZeroCouponBond self, Natural settlementDays, Calendar calendar, Real faceAmount, Date maturityDate, BusinessDayConvention paymentConvention=QuantLib::Following, Real redemption=100.0, Date issueDate=Date()) -> ZeroCouponBond"""
        _mxdevtool.ZeroCouponBond_swiginit(self, _mxdevtool.new_ZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_ZeroCouponBond

# Register ZeroCouponBond in _mxdevtool:
_mxdevtool.ZeroCouponBond_swigregister(ZeroCouponBond)

class FixedRateBond(Bond):
    r"""Proxy of C++ FixedRateBondPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FixedRateBond self, Integer settlementDays, Real faceAmount, Schedule schedule, DoubleVector coupons, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=QuantLib::Following, Real redemption=100.0, Date issueDate=Date(), Calendar paymentCalendar=Calendar(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> FixedRateBond"""
        _mxdevtool.FixedRateBond_swiginit(self, _mxdevtool.new_FixedRateBond(*args, **kwargs))

    def frequency(self) -> "Frequency":
        r"""frequency(FixedRateBond self) -> Frequency"""
        return _mxdevtool.FixedRateBond_frequency(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(FixedRateBond self) -> DayCounter"""
        return _mxdevtool.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _mxdevtool.delete_FixedRateBond

# Register FixedRateBond in _mxdevtool:
_mxdevtool.FixedRateBond_swigregister(FixedRateBond)

class FloatingRateBond(Bond):
    r"""Proxy of C++ FloatingRateBondPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FloatingRateBond self, Size settlementDays, Real faceAmount, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=Following, Size fixingDays=Null< Size >(), DoubleVector gearings=std::vector< Real >(), DoubleVector spreads=std::vector< Spread >(), DoubleVector caps=std::vector< Rate >(), DoubleVector floors=std::vector< Rate >(), bool inArrears=False, Real redemption=100.0, Date issueDate=Date()) -> FloatingRateBond"""
        _mxdevtool.FloatingRateBond_swiginit(self, _mxdevtool.new_FloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_FloatingRateBond

# Register FloatingRateBond in _mxdevtool:
_mxdevtool.FloatingRateBond_swigregister(FloatingRateBond)

class CmsRateBond(Bond):
    r"""Proxy of C++ CmsRateBondPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CmsRateBond self, Size settlementDays, Real faceAmount, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Natural fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool inArrears=False, Real redemption=100.0, Date issueDate=Date()) -> CmsRateBond"""
        _mxdevtool.CmsRateBond_swiginit(self, _mxdevtool.new_CmsRateBond(*args, **kwargs))
    __swig_destroy__ = _mxdevtool.delete_CmsRateBond

# Register CmsRateBond in _mxdevtool:
_mxdevtool.CmsRateBond_swigregister(CmsRateBond)

class DiscountingBondEngine(PricingEngine):
    r"""Proxy of C++ DiscountingBondEnginePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, discountCurve: "YieldTermStructureHandle"):
        r"""__init__(DiscountingBondEngine self, YieldTermStructureHandle discountCurve) -> DiscountingBondEngine"""
        _mxdevtool.DiscountingBondEngine_swiginit(self, _mxdevtool.new_DiscountingBondEngine(discountCurve))
    __swig_destroy__ = _mxdevtool.delete_DiscountingBondEngine

# Register DiscountingBondEngine in _mxdevtool:
_mxdevtool.DiscountingBondEngine_swigregister(DiscountingBondEngine)

class BondFunctions(object):
    r"""Proxy of C++ BondFunctions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(bond: "Bond") -> "Date":
        r"""startDate(Bond bond) -> Date"""
        return _mxdevtool.BondFunctions_startDate(bond)

    @staticmethod
    def maturityDate(bond: "Bond") -> "Date":
        r"""maturityDate(Bond bond) -> Date"""
        return _mxdevtool.BondFunctions_maturityDate(bond)

    @staticmethod
    def isTradable(*args) -> "bool":
        r"""isTradable(Bond bond, Date settlementDate=Date()) -> bool"""
        return _mxdevtool.BondFunctions_isTradable(*args)

    @staticmethod
    def previousCashFlowDate(*args) -> "Date":
        r"""previousCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
        return _mxdevtool.BondFunctions_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args) -> "Date":
        r"""nextCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
        return _mxdevtool.BondFunctions_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args) -> "Real":
        r"""previousCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
        return _mxdevtool.BondFunctions_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args) -> "Real":
        r"""nextCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
        return _mxdevtool.BondFunctions_nextCashFlowAmount(*args)

    @staticmethod
    def previousCouponRate(*args) -> "Rate":
        r"""previousCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
        return _mxdevtool.BondFunctions_previousCouponRate(*args)

    @staticmethod
    def nextCouponRate(*args) -> "Rate":
        r"""nextCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
        return _mxdevtool.BondFunctions_nextCouponRate(*args)

    @staticmethod
    def accrualStartDate(*args) -> "Date":
        r"""accrualStartDate(Bond bond, Date settlementDate=Date()) -> Date"""
        return _mxdevtool.BondFunctions_accrualStartDate(*args)

    @staticmethod
    def accrualEndDate(*args) -> "Date":
        r"""accrualEndDate(Bond bond, Date settlementDate=Date()) -> Date"""
        return _mxdevtool.BondFunctions_accrualEndDate(*args)

    @staticmethod
    def accrualPeriod(*args) -> "Time":
        r"""accrualPeriod(Bond bond, Date settlementDate=Date()) -> Time"""
        return _mxdevtool.BondFunctions_accrualPeriod(*args)

    @staticmethod
    def accrualDays(*args) -> "BigInteger":
        r"""accrualDays(Bond bond, Date settlementDate=Date()) -> BigInteger"""
        return _mxdevtool.BondFunctions_accrualDays(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        r"""atmRate(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date(), Real cleanPrice=Null< Real >()) -> Rate"""
        return _mxdevtool.BondFunctions_atmRate(*args)

    @staticmethod
    def cleanPrice(*args) -> "Real":
        r"""
        cleanPrice(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
        cleanPrice(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        cleanPrice(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _mxdevtool.BondFunctions_cleanPrice(*args)

    @staticmethod
    def bps(*args) -> "Real":
        r"""
        bps(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
        bps(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        bps(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _mxdevtool.BondFunctions_bps(*args)

    @staticmethod
    def _yield(*args) -> "Rate":
        r"""_yield(Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05) -> Rate"""
        return _mxdevtool.BondFunctions__yield(*args)

    @staticmethod
    def duration(*args) -> "Time":
        r"""
        duration(Bond bond, InterestRate _yield, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
        duration(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
        """
        return _mxdevtool.BondFunctions_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        r"""
        convexity(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        convexity(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _mxdevtool.BondFunctions_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        r"""
        basisPointValue(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        basisPointValue(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _mxdevtool.BondFunctions_basisPointValue(*args)

    @staticmethod
    def yieldValueBasisPoint(*args) -> "Real":
        r"""
        yieldValueBasisPoint(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        yieldValueBasisPoint(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _mxdevtool.BondFunctions_yieldValueBasisPoint(*args)

    def __init__(self):
        r"""__init__(BondFunctions self) -> BondFunctions"""
        _mxdevtool.BondFunctions_swiginit(self, _mxdevtool.new_BondFunctions())
    __swig_destroy__ = _mxdevtool.delete_BondFunctions

# Register BondFunctions in _mxdevtool:
_mxdevtool.BondFunctions_swigregister(BondFunctions)

def BondFunctions_startDate(bond: "Bond") -> "Date":
    r"""BondFunctions_startDate(Bond bond) -> Date"""
    return _mxdevtool.BondFunctions_startDate(bond)

def BondFunctions_maturityDate(bond: "Bond") -> "Date":
    r"""BondFunctions_maturityDate(Bond bond) -> Date"""
    return _mxdevtool.BondFunctions_maturityDate(bond)

def BondFunctions_isTradable(*args) -> "bool":
    r"""BondFunctions_isTradable(Bond bond, Date settlementDate=Date()) -> bool"""
    return _mxdevtool.BondFunctions_isTradable(*args)

def BondFunctions_previousCashFlowDate(*args) -> "Date":
    r"""BondFunctions_previousCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
    return _mxdevtool.BondFunctions_previousCashFlowDate(*args)

def BondFunctions_nextCashFlowDate(*args) -> "Date":
    r"""BondFunctions_nextCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
    return _mxdevtool.BondFunctions_nextCashFlowDate(*args)

def BondFunctions_previousCashFlowAmount(*args) -> "Real":
    r"""BondFunctions_previousCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
    return _mxdevtool.BondFunctions_previousCashFlowAmount(*args)

def BondFunctions_nextCashFlowAmount(*args) -> "Real":
    r"""BondFunctions_nextCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
    return _mxdevtool.BondFunctions_nextCashFlowAmount(*args)

def BondFunctions_previousCouponRate(*args) -> "Rate":
    r"""BondFunctions_previousCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
    return _mxdevtool.BondFunctions_previousCouponRate(*args)

def BondFunctions_nextCouponRate(*args) -> "Rate":
    r"""BondFunctions_nextCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
    return _mxdevtool.BondFunctions_nextCouponRate(*args)

def BondFunctions_accrualStartDate(*args) -> "Date":
    r"""BondFunctions_accrualStartDate(Bond bond, Date settlementDate=Date()) -> Date"""
    return _mxdevtool.BondFunctions_accrualStartDate(*args)

def BondFunctions_accrualEndDate(*args) -> "Date":
    r"""BondFunctions_accrualEndDate(Bond bond, Date settlementDate=Date()) -> Date"""
    return _mxdevtool.BondFunctions_accrualEndDate(*args)

def BondFunctions_accrualPeriod(*args) -> "Time":
    r"""BondFunctions_accrualPeriod(Bond bond, Date settlementDate=Date()) -> Time"""
    return _mxdevtool.BondFunctions_accrualPeriod(*args)

def BondFunctions_accrualDays(*args) -> "BigInteger":
    r"""BondFunctions_accrualDays(Bond bond, Date settlementDate=Date()) -> BigInteger"""
    return _mxdevtool.BondFunctions_accrualDays(*args)

def BondFunctions_atmRate(*args) -> "Rate":
    r"""BondFunctions_atmRate(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date(), Real cleanPrice=Null< Real >()) -> Rate"""
    return _mxdevtool.BondFunctions_atmRate(*args)

def BondFunctions_cleanPrice(*args) -> "Real":
    r"""
    BondFunctions_cleanPrice(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
    BondFunctions_cleanPrice(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
    BondFunctions_cleanPrice(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
    """
    return _mxdevtool.BondFunctions_cleanPrice(*args)

def BondFunctions_bps(*args) -> "Real":
    r"""
    BondFunctions_bps(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
    BondFunctions_bps(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
    BondFunctions_bps(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
    """
    return _mxdevtool.BondFunctions_bps(*args)

def BondFunctions__yield(*args) -> "Rate":
    r"""BondFunctions__yield(Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05) -> Rate"""
    return _mxdevtool.BondFunctions__yield(*args)

def BondFunctions_duration(*args) -> "Time":
    r"""
    BondFunctions_duration(Bond bond, InterestRate _yield, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
    BondFunctions_duration(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
    """
    return _mxdevtool.BondFunctions_duration(*args)

def BondFunctions_convexity(*args) -> "Real":
    r"""
    BondFunctions_convexity(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
    BondFunctions_convexity(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
    """
    return _mxdevtool.BondFunctions_convexity(*args)

def BondFunctions_basisPointValue(*args) -> "Real":
    r"""
    BondFunctions_basisPointValue(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
    BondFunctions_basisPointValue(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
    """
    return _mxdevtool.BondFunctions_basisPointValue(*args)

def BondFunctions_yieldValueBasisPoint(*args) -> "Real":
    r"""
    BondFunctions_yieldValueBasisPoint(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
    BondFunctions_yieldValueBasisPoint(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
    """
    return _mxdevtool.BondFunctions_yieldValueBasisPoint(*args)

class TimeGrid(object):
    r"""Proxy of C++ TimeGrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TimeGrid self) -> TimeGrid
        __init__(TimeGrid self, Date refDate, DoubleVector times) -> TimeGrid
        __init__(TimeGrid self, Date refDate, QuantLib::Size maxYear, std::string const & frequency, QuantLib::Size frequency_month, QuantLib::Size frequency_day) -> TimeGrid
        """
        _mxdevtool.TimeGrid_swiginit(self, _mxdevtool.new_TimeGrid(*args))

    def __len__(self) -> "Size":
        r"""__len__(TimeGrid self) -> Size"""
        return _mxdevtool.TimeGrid___len__(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        r"""times(TimeGrid self) -> DoubleVector"""
        return _mxdevtool.TimeGrid_times(self)

    def dts(self) -> "std::vector< Time,std::allocator< Time > > const &":
        r"""dts(TimeGrid self) -> DoubleVector"""
        return _mxdevtool.TimeGrid_dts(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        r"""dates(TimeGrid self) -> DateVector"""
        return _mxdevtool.TimeGrid_dates(self)

    def date_at(self, i: "Size") -> "Date":
        r"""date_at(TimeGrid self, Size i) -> Date"""
        return _mxdevtool.TimeGrid_date_at(self, i)

    def index(self, t: "Time") -> "Size":
        r"""index(TimeGrid self, Time t) -> Size"""
        return _mxdevtool.TimeGrid_index(self, t)

    def closestIndex(self, t: "Time") -> "Size":
        r"""closestIndex(TimeGrid self, Time t) -> Size"""
        return _mxdevtool.TimeGrid_closestIndex(self, t)

    def closestIndex_Date(self, d: "Date") -> "Size":
        r"""closestIndex_Date(TimeGrid self, Date d) -> Size"""
        return _mxdevtool.TimeGrid_closestIndex_Date(self, d)

    def closestTime(self, t: "Time") -> "Time":
        r"""closestTime(TimeGrid self, Time t) -> Time"""
        return _mxdevtool.TimeGrid_closestTime(self, t)

    def __getitem__(self, i: "Integer") -> "Time":
        r"""__getitem__(TimeGrid self, Integer i) -> Time"""
        return _mxdevtool.TimeGrid___getitem__(self, i)

    def dt(self, i: "Integer") -> "Time":
        r"""dt(TimeGrid self, Integer i) -> Time"""
        return _mxdevtool.TimeGrid_dt(self, i)
    __swig_destroy__ = _mxdevtool.delete_TimeGrid

# Register TimeGrid in _mxdevtool:
_mxdevtool.TimeGrid_swigregister(TimeGrid)

class TimeEqualGrid(TimeGrid):
    r"""Proxy of C++ TimeEqualGrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate: "Date", maxYear: "QuantLib::Size", nPerYear: "QuantLib::Size"):
        r"""__init__(TimeEqualGrid self, Date refDate, QuantLib::Size maxYear, QuantLib::Size nPerYear) -> TimeEqualGrid"""
        _mxdevtool.TimeEqualGrid_swiginit(self, _mxdevtool.new_TimeEqualGrid(refDate, maxYear, nPerYear))
    __swig_destroy__ = _mxdevtool.delete_TimeEqualGrid

# Register TimeEqualGrid in _mxdevtool:
_mxdevtool.TimeEqualGrid_swigregister(TimeEqualGrid)

class Money(object):
    r"""Proxy of C++ Money class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Money self, Currency currency, Decimal value) -> Money
        __init__(Money self, Decimal value, Currency currency) -> Money
        """
        _mxdevtool.Money_swiginit(self, _mxdevtool.new_Money(*args))

    def currency(self) -> "Currency const &":
        r"""currency(Money self) -> Currency"""
        return _mxdevtool.Money_currency(self)

    def value(self) -> "Decimal":
        r"""value(Money self) -> Decimal"""
        return _mxdevtool.Money_value(self)

    def rounded(self) -> "Money":
        r"""rounded(Money self) -> Money"""
        return _mxdevtool.Money_rounded(self)

    def __pos__(self) -> "Money":
        r"""__pos__(Money self) -> Money"""
        return _mxdevtool.Money___pos__(self)

    def __neg__(self) -> "Money":
        r"""__neg__(Money self) -> Money"""
        return _mxdevtool.Money___neg__(self)

    def __add__(self, m: "Money") -> "Money":
        r"""__add__(Money self, Money m) -> Money"""
        return _mxdevtool.Money___add__(self, m)

    def __sub__(self, m: "Money") -> "Money":
        r"""__sub__(Money self, Money m) -> Money"""
        return _mxdevtool.Money___sub__(self, m)

    def __mul__(self, x: "Decimal") -> "Money":
        r"""__mul__(Money self, Decimal x) -> Money"""
        return _mxdevtool.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _mxdevtool.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x: "Decimal") -> "Money":
        r"""__rmul__(Money self, Decimal x) -> Money"""
        return _mxdevtool.Money___rmul__(self, x)

    def __lt__(self, other: "Money") -> "bool":
        r"""__lt__(Money self, Money other) -> bool"""
        return _mxdevtool.Money___lt__(self, other)

    def __cmp__(self, other: "Money") -> "int":
        r"""__cmp__(Money self, Money other) -> int"""
        return _mxdevtool.Money___cmp__(self, other)

    def __str__(self) -> "std::string":
        r"""__str__(Money self) -> std::string"""
        return _mxdevtool.Money___str__(self)
    NoConversion = _mxdevtool.Money_NoConversion
    
    BaseCurrencyConversion = _mxdevtool.Money_BaseCurrencyConversion
    
    AutomatedConversion = _mxdevtool.Money_AutomatedConversion
    

    @staticmethod
    def setConversionType(type: "Money::ConversionType") -> "void":
        r"""setConversionType(Money::ConversionType type)"""
        return _mxdevtool.Money_setConversionType(type)

    @staticmethod
    def setBaseCurrency(c: "Currency") -> "void":
        r"""setBaseCurrency(Currency c)"""
        return _mxdevtool.Money_setBaseCurrency(c)
    __swig_destroy__ = _mxdevtool.delete_Money

# Register Money in _mxdevtool:
_mxdevtool.Money_swigregister(Money)

def Money_setConversionType(type: "Money::ConversionType") -> "void":
    r"""Money_setConversionType(Money::ConversionType type)"""
    return _mxdevtool.Money_setConversionType(type)

def Money_setBaseCurrency(c: "Currency") -> "void":
    r"""Money_setBaseCurrency(Currency c)"""
    return _mxdevtool.Money_setBaseCurrency(c)

class Option(object):
    r"""Proxy of C++ Option class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _mxdevtool.Option_Put
    
    Call = _mxdevtool.Option_Call
    
    __swig_destroy__ = _mxdevtool.delete_Option

# Register Option in _mxdevtool:
_mxdevtool.Option_swigregister(Option)

class Barrier(object):
    r"""Proxy of C++ Barrier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DownIn = _mxdevtool.Barrier_DownIn
    
    UpIn = _mxdevtool.Barrier_UpIn
    
    DownOut = _mxdevtool.Barrier_DownOut
    
    UpOut = _mxdevtool.Barrier_UpOut
    

    def __init__(self):
        r"""__init__(Barrier self) -> Barrier"""
        _mxdevtool.Barrier_swiginit(self, _mxdevtool.new_Barrier())
    __swig_destroy__ = _mxdevtool.delete_Barrier

# Register Barrier in _mxdevtool:
_mxdevtool.Barrier_swigregister(Barrier)

class EuropeanOption(Instrument):
    r"""Proxy of C++ EuropeanOptionPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", s0: "Real", strike: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        r"""__init__(EuropeanOption self, Option::Type optionType, Real s0, Real strike, Real r, Real div, Real vol, Date maturityDate) -> EuropeanOption"""
        _mxdevtool.EuropeanOption_swiginit(self, _mxdevtool.new_EuropeanOption(optionType, s0, strike, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        r"""impliedVolatility(EuropeanOption self, Real targetValue) -> Volatility"""
        return _mxdevtool.EuropeanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        r"""delta(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_delta(self)

    def gamma(self) -> "Real":
        r"""gamma(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_gamma(self)

    def theta(self) -> "Real":
        r"""theta(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        r"""thetaPerDay(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        r"""vega(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_vega(self)

    def rho(self) -> "Real":
        r"""rho(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_rho(self)

    def dividendRho(self) -> "Real":
        r"""dividendRho(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        r"""strikeSensitivity(EuropeanOption self) -> Real"""
        return _mxdevtool.EuropeanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_EuropeanOption

# Register EuropeanOption in _mxdevtool:
_mxdevtool.EuropeanOption_swigregister(EuropeanOption)

class AmericanOption(Instrument):
    r"""Proxy of C++ AmericanOptionPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", s0: "Real", strike: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        r"""__init__(AmericanOption self, Option::Type optionType, Real s0, Real strike, Real r, Real div, Real vol, Date maturityDate) -> AmericanOption"""
        _mxdevtool.AmericanOption_swiginit(self, _mxdevtool.new_AmericanOption(optionType, s0, strike, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        r"""impliedVolatility(AmericanOption self, Real targetValue) -> Volatility"""
        return _mxdevtool.AmericanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        r"""delta(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_delta(self)

    def gamma(self) -> "Real":
        r"""gamma(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_gamma(self)

    def theta(self) -> "Real":
        r"""theta(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        r"""thetaPerDay(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        r"""vega(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_vega(self)

    def rho(self) -> "Real":
        r"""rho(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_rho(self)

    def dividendRho(self) -> "Real":
        r"""dividendRho(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        r"""strikeSensitivity(AmericanOption self) -> Real"""
        return _mxdevtool.AmericanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_AmericanOption

# Register AmericanOption in _mxdevtool:
_mxdevtool.AmericanOption_swigregister(AmericanOption)

class BermudanOption(Instrument):
    r"""Proxy of C++ BermudanOptionPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", s0: "Real", strike: "Real", r: "Real", div: "Real", vol: "Real", exDates: "DateVector"):
        r"""__init__(BermudanOption self, Option::Type optionType, Real s0, Real strike, Real r, Real div, Real vol, DateVector exDates) -> BermudanOption"""
        _mxdevtool.BermudanOption_swiginit(self, _mxdevtool.new_BermudanOption(optionType, s0, strike, r, div, vol, exDates))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        r"""impliedVolatility(BermudanOption self, Real targetValue) -> Volatility"""
        return _mxdevtool.BermudanOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        r"""delta(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_delta(self)

    def gamma(self) -> "Real":
        r"""gamma(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_gamma(self)

    def theta(self) -> "Real":
        r"""theta(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_theta(self)

    def thetaPerDay(self) -> "Real":
        r"""thetaPerDay(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_thetaPerDay(self)

    def vega(self) -> "Real":
        r"""vega(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_vega(self)

    def rho(self) -> "Real":
        r"""rho(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_rho(self)

    def dividendRho(self) -> "Real":
        r"""dividendRho(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        r"""strikeSensitivity(BermudanOption self) -> Real"""
        return _mxdevtool.BermudanOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_BermudanOption

# Register BermudanOption in _mxdevtool:
_mxdevtool.BermudanOption_swigregister(BermudanOption)

class BarrierOption(Instrument):
    r"""Proxy of C++ BarrierOptionPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, optionType: "Option::Type", barrierType: "Barrier::Type", barrier: "Real", rebate: "Real", s0: "Real", strike: "Real", r: "Real", div: "Real", vol: "Real", maturityDate: "Date"):
        r"""__init__(BarrierOption self, Option::Type optionType, Barrier::Type barrierType, Real barrier, Real rebate, Real s0, Real strike, Real r, Real div, Real vol, Date maturityDate) -> BarrierOption"""
        _mxdevtool.BarrierOption_swiginit(self, _mxdevtool.new_BarrierOption(optionType, barrierType, barrier, rebate, s0, strike, r, div, vol, maturityDate))

    def impliedVolatility(self, targetValue: "Real") -> "Volatility":
        r"""impliedVolatility(BarrierOption self, Real targetValue) -> Volatility"""
        return _mxdevtool.BarrierOption_impliedVolatility(self, targetValue)

    def delta(self) -> "Real":
        r"""delta(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_delta(self)

    def gamma(self) -> "Real":
        r"""gamma(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_gamma(self)

    def theta(self) -> "Real":
        r"""theta(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_theta(self)

    def thetaPerDay(self) -> "Real":
        r"""thetaPerDay(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_thetaPerDay(self)

    def vega(self) -> "Real":
        r"""vega(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_vega(self)

    def rho(self) -> "Real":
        r"""rho(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_rho(self)

    def dividendRho(self) -> "Real":
        r"""dividendRho(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        r"""strikeSensitivity(BarrierOption self) -> Real"""
        return _mxdevtool.BarrierOption_strikeSensitivity(self)
    __swig_destroy__ = _mxdevtool.delete_BarrierOption

# Register BarrierOption in _mxdevtool:
_mxdevtool.BarrierOption_swigregister(BarrierOption)


def setEvaluationDate(d: "Date") -> "void":
    r"""setEvaluationDate(Date d)"""
    return _mxdevtool.setEvaluationDate(d)

def evaluationDate() -> "Date":
    r"""evaluationDate() -> Date"""
    return _mxdevtool.evaluationDate()
class Settings(object):
    r"""Proxy of C++ Settings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "Settings &":
        r"""instance() -> Settings"""
        return _mxdevtool.Settings_instance()

    def getEvaluationDate(self) -> "Date":
        r"""getEvaluationDate(Settings self) -> Date"""
        return _mxdevtool.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d: "Date") -> "void":
        r"""setEvaluationDate(Settings self, Date d)"""
        return _mxdevtool.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b: "bool") -> "void":
        r"""includeReferenceDateEvents(Settings self, bool b)"""
        return _mxdevtool.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b: "bool") -> "void":
        r"""includeTodaysCashFlows(Settings self, bool b)"""
        return _mxdevtool.Settings_includeTodaysCashFlows(self, b)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)

    __swig_destroy__ = _mxdevtool.delete_Settings

# Register Settings in _mxdevtool:
_mxdevtool.Settings_swigregister(Settings)

def Settings_instance() -> "Settings &":
    r"""Settings_instance() -> Settings"""
    return _mxdevtool.Settings_instance()

class Swap(Instrument):
    r"""Proxy of C++ SwapPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, firstLeg: "Leg", secondLeg: "Leg"):
        r"""__init__(Swap self, Leg firstLeg, Leg secondLeg) -> Swap"""
        _mxdevtool.Swap_swiginit(self, _mxdevtool.new_Swap(firstLeg, secondLeg))

    def startDate(self) -> "Date":
        r"""startDate(Swap self) -> Date"""
        return _mxdevtool.Swap_startDate(self)

    def maturityDate(self) -> "Date":
        r"""maturityDate(Swap self) -> Date"""
        return _mxdevtool.Swap_maturityDate(self)

    def leg(self, i: "Size") -> "Leg const &":
        r"""leg(Swap self, Size i) -> Leg"""
        return _mxdevtool.Swap_leg(self, i)
    __swig_destroy__ = _mxdevtool.delete_Swap

# Register Swap in _mxdevtool:
_mxdevtool.Swap_swigregister(Swap)

class LegResultType(object):
    r"""Proxy of C++ LegResultType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Net = _mxdevtool.LegResultType_Net
    
    Pay = _mxdevtool.LegResultType_Pay
    
    Receive = _mxdevtool.LegResultType_Receive
    
    Fixed = _mxdevtool.LegResultType_Fixed
    
    Floating = _mxdevtool.LegResultType_Floating
    

    def __init__(self):
        r"""__init__(LegResultType self) -> LegResultType"""
        _mxdevtool.LegResultType_swiginit(self, _mxdevtool.new_LegResultType())
    __swig_destroy__ = _mxdevtool.delete_LegResultType

# Register LegResultType in _mxdevtool:
_mxdevtool.LegResultType_swigregister(LegResultType)

class VanillaSwap(Swap):
    r"""Proxy of C++ VanillaSwapPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _mxdevtool.VanillaSwap_Receiver
    
    Payer = _mxdevtool.VanillaSwap_Payer
    

    def __init__(self, type: "VanillaSwap::Type", nominal: "Real", fixedSchedule: "Schedule", fixedRate: "Rate", fixedDayCount: "DayCounter", floatSchedule: "Schedule", index: "IborIndex", spread: "Spread", floatingDayCount: "DayCounter"):
        r"""__init__(VanillaSwap self, VanillaSwap::Type type, Real nominal, Schedule fixedSchedule, Rate fixedRate, DayCounter fixedDayCount, Schedule floatSchedule, IborIndex index, Spread spread, DayCounter floatingDayCount) -> VanillaSwap"""
        _mxdevtool.VanillaSwap_swiginit(self, _mxdevtool.new_VanillaSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, spread, floatingDayCount))

    def fairRate(self) -> "Rate":
        r"""fairRate(VanillaSwap self) -> Rate"""
        return _mxdevtool.VanillaSwap_fairRate(self)

    def fairSpread(self) -> "Spread":
        r"""fairSpread(VanillaSwap self) -> Spread"""
        return _mxdevtool.VanillaSwap_fairSpread(self)

    def fixedLegBPS(self) -> "Real":
        r"""fixedLegBPS(VanillaSwap self) -> Real"""
        return _mxdevtool.VanillaSwap_fixedLegBPS(self)

    def floatingLegBPS(self) -> "Real":
        r"""floatingLegBPS(VanillaSwap self) -> Real"""
        return _mxdevtool.VanillaSwap_floatingLegBPS(self)

    def fixedLegNPV(self) -> "Real":
        r"""fixedLegNPV(VanillaSwap self) -> Real"""
        return _mxdevtool.VanillaSwap_fixedLegNPV(self)

    def floatingLegNPV(self) -> "Real":
        r"""floatingLegNPV(VanillaSwap self) -> Real"""
        return _mxdevtool.VanillaSwap_floatingLegNPV(self)

    def fixedLeg(self) -> "Leg const &":
        r"""fixedLeg(VanillaSwap self) -> Leg"""
        return _mxdevtool.VanillaSwap_fixedLeg(self)

    def floatingLeg(self) -> "Leg const &":
        r"""floatingLeg(VanillaSwap self) -> Leg"""
        return _mxdevtool.VanillaSwap_floatingLeg(self)

    def nominal(self) -> "Real":
        r"""nominal(VanillaSwap self) -> Real"""
        return _mxdevtool.VanillaSwap_nominal(self)

    def fixedSchedule(self) -> "Schedule const &":
        r"""fixedSchedule(VanillaSwap self) -> Schedule"""
        return _mxdevtool.VanillaSwap_fixedSchedule(self)

    def floatingSchedule(self) -> "Schedule const &":
        r"""floatingSchedule(VanillaSwap self) -> Schedule"""
        return _mxdevtool.VanillaSwap_floatingSchedule(self)

    def fixedRate(self) -> "Rate":
        r"""fixedRate(VanillaSwap self) -> Rate"""
        return _mxdevtool.VanillaSwap_fixedRate(self)

    def spread(self) -> "Spread":
        r"""spread(VanillaSwap self) -> Spread"""
        return _mxdevtool.VanillaSwap_spread(self)

    def floatingDayCount(self) -> "DayCounter const &":
        r"""floatingDayCount(VanillaSwap self) -> DayCounter"""
        return _mxdevtool.VanillaSwap_floatingDayCount(self)

    def fixedDayCount(self) -> "DayCounter const &":
        r"""fixedDayCount(VanillaSwap self) -> DayCounter"""
        return _mxdevtool.VanillaSwap_fixedDayCount(self)
    __swig_destroy__ = _mxdevtool.delete_VanillaSwap

# Register VanillaSwap in _mxdevtool:
_mxdevtool.VanillaSwap_swigregister(VanillaSwap)

class DiscountingSwapEngine(PricingEngine):
    r"""Proxy of C++ DiscountingSwapEnginePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DiscountingSwapEngine self, YieldTermStructureHandle discountCurve, Date settlementDate=Date(), Date npvDate=Date()) -> DiscountingSwapEngine
        __init__(DiscountingSwapEngine self, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> DiscountingSwapEngine
        """
        _mxdevtool.DiscountingSwapEngine_swiginit(self, _mxdevtool.new_DiscountingSwapEngine(*args))
    __swig_destroy__ = _mxdevtool.delete_DiscountingSwapEngine

# Register DiscountingSwapEngine in _mxdevtool:
_mxdevtool.DiscountingSwapEngine_swigregister(DiscountingSwapEngine)

class VanillaSwapExt(VanillaSwap):
    r"""Proxy of C++ VanillaSwapExtPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "VanillaSwap::Type", nominal: "Real", settlementDate: "Date", maturityTenor: "Period", fixedRate: "Real", iborIndexExt: "IborIndexExt", spread: "Real", familyName: "std::string", pricingEngine: "PricingEngine"):
        r"""__init__(VanillaSwapExt self, VanillaSwap::Type type, Real nominal, Date settlementDate, Period maturityTenor, Real fixedRate, IborIndexExt iborIndexExt, Real spread, std::string familyName, PricingEngine pricingEngine) -> VanillaSwapExt"""
        _mxdevtool.VanillaSwapExt_swiginit(self, _mxdevtool.new_VanillaSwapExt(type, nominal, settlementDate, maturityTenor, fixedRate, iborIndexExt, spread, familyName, pricingEngine))

    def rho(self, resultType: "QuantLib::LegResultType::Type") -> "Real":
        r"""rho(VanillaSwapExt self, QuantLib::LegResultType::Type resultType) -> Real"""
        return _mxdevtool.VanillaSwapExt_rho(self, resultType)

    def convexity(self, resultType: "QuantLib::LegResultType::Type") -> "Real":
        r"""convexity(VanillaSwapExt self, QuantLib::LegResultType::Type resultType) -> Real"""
        return _mxdevtool.VanillaSwapExt_convexity(self, resultType)

    def partialRho(self, resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        r"""partialRho(VanillaSwapExt self, QuantLib::LegResultType::Type resultType) -> DoubleVector"""
        return _mxdevtool.VanillaSwapExt_partialRho(self, resultType)

    def partialConvexity(self, resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        r"""partialConvexity(VanillaSwapExt self, QuantLib::LegResultType::Type resultType) -> DoubleVector"""
        return _mxdevtool.VanillaSwapExt_partialConvexity(self, resultType)

    def rhoDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "Real":
        r"""rhoDecay(VanillaSwapExt self, Date targetDate, QuantLib::LegResultType::Type resultType) -> Real"""
        return _mxdevtool.VanillaSwapExt_rhoDecay(self, targetDate, resultType)

    def convexityDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "Real":
        r"""convexityDecay(VanillaSwapExt self, Date targetDate, QuantLib::LegResultType::Type resultType) -> Real"""
        return _mxdevtool.VanillaSwapExt_convexityDecay(self, targetDate, resultType)

    def partialRhoDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        r"""partialRhoDecay(VanillaSwapExt self, Date targetDate, QuantLib::LegResultType::Type resultType) -> DoubleVector"""
        return _mxdevtool.VanillaSwapExt_partialRhoDecay(self, targetDate, resultType)

    def partialConvexityDecay(self, targetDate: "Date", resultType: "QuantLib::LegResultType::Type") -> "std::vector< Real,std::allocator< Real > >":
        r"""partialConvexityDecay(VanillaSwapExt self, Date targetDate, QuantLib::LegResultType::Type resultType) -> DoubleVector"""
        return _mxdevtool.VanillaSwapExt_partialConvexityDecay(self, targetDate, resultType)

    def previousFloatFixingDate(self) -> "Date":
        r"""previousFloatFixingDate(VanillaSwapExt self) -> Date"""
        return _mxdevtool.VanillaSwapExt_previousFloatFixingDate(self)
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExt

# Register VanillaSwapExt in _mxdevtool:
_mxdevtool.VanillaSwapExt_swigregister(VanillaSwapExt)

class VanillaSwapExtEngine(PricingEngine):
    r"""Proxy of C++ VanillaSwapExtEnginePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yieldcurve: "YieldTermStructure"):
        r"""__init__(VanillaSwapExtEngine self, YieldTermStructure yieldcurve) -> VanillaSwapExtEngine"""
        _mxdevtool.VanillaSwapExtEngine_swiginit(self, _mxdevtool.new_VanillaSwapExtEngine(yieldcurve))
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExtEngine

# Register VanillaSwapExtEngine in _mxdevtool:
_mxdevtool.VanillaSwapExtEngine_swigregister(VanillaSwapExtEngine)

class VanillaSwapExtPartialGreekEngine(PricingEngine):
    r"""Proxy of C++ VanillaSwapExtPartialGreekEnginePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yieldcurve: "YieldTermStructure", partialGreekInterval: "PeriodIntervalVector"):
        r"""__init__(VanillaSwapExtPartialGreekEngine self, YieldTermStructure yieldcurve, PeriodIntervalVector partialGreekInterval) -> VanillaSwapExtPartialGreekEngine"""
        _mxdevtool.VanillaSwapExtPartialGreekEngine_swiginit(self, _mxdevtool.new_VanillaSwapExtPartialGreekEngine(yieldcurve, partialGreekInterval))
    __swig_destroy__ = _mxdevtool.delete_VanillaSwapExtPartialGreekEngine

# Register VanillaSwapExtPartialGreekEngine in _mxdevtool:
_mxdevtool.VanillaSwapExtPartialGreekEngine_swigregister(VanillaSwapExtPartialGreekEngine)

class BlackVolTermStructure(object):
    r"""Proxy of C++ boost::shared_ptr< BlackVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "BlackVolTermStructure *":
        r"""__deref__(BlackVolTermStructure self) -> BlackVolTermStructure *"""
        return _mxdevtool.BlackVolTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(BlackVolTermStructure self) -> bool"""
        return _mxdevtool.BlackVolTermStructure___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(BlackVolTermStructure self) -> Observable"""
        return _mxdevtool.BlackVolTermStructure_asObservable(self)

    def __init__(self):
        r"""__init__(BlackVolTermStructure self) -> BlackVolTermStructure"""
        _mxdevtool.BlackVolTermStructure_swiginit(self, _mxdevtool.new_BlackVolTermStructure())
    __swig_destroy__ = _mxdevtool.delete_BlackVolTermStructure

    def referenceDate(self) -> "Date":
        r"""referenceDate(BlackVolTermStructure self) -> Date"""
        return _mxdevtool.BlackVolTermStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(BlackVolTermStructure self) -> DayCounter"""
        return _mxdevtool.BlackVolTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        r"""calendar(BlackVolTermStructure self) -> Calendar"""
        return _mxdevtool.BlackVolTermStructure_calendar(self)

    def maxDate(self) -> "Date":
        r"""maxDate(BlackVolTermStructure self) -> Date"""
        return _mxdevtool.BlackVolTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        r"""maxTime(BlackVolTermStructure self) -> Time"""
        return _mxdevtool.BlackVolTermStructure_maxTime(self)

    def minStrike(self) -> "Real":
        r"""minStrike(BlackVolTermStructure self) -> Real"""
        return _mxdevtool.BlackVolTermStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        r"""maxStrike(BlackVolTermStructure self) -> Real"""
        return _mxdevtool.BlackVolTermStructure_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        r"""
        blackVol(BlackVolTermStructure self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        blackVol(BlackVolTermStructure self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _mxdevtool.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        r"""
        blackVariance(BlackVolTermStructure self, Date arg2, Real strike, bool extrapolate=False) -> Real
        blackVariance(BlackVolTermStructure self, Time arg2, Real strike, bool extrapolate=False) -> Real
        """
        return _mxdevtool.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        r"""
        blackForwardVol(BlackVolTermStructure self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Volatility
        blackForwardVol(BlackVolTermStructure self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Volatility
        """
        return _mxdevtool.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        r"""
        blackForwardVariance(BlackVolTermStructure self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Real
        blackForwardVariance(BlackVolTermStructure self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Real
        """
        return _mxdevtool.BlackVolTermStructure_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        r"""enableExtrapolation(BlackVolTermStructure self)"""
        return _mxdevtool.BlackVolTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        r"""disableExtrapolation(BlackVolTermStructure self)"""
        return _mxdevtool.BlackVolTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        r"""allowsExtrapolation(BlackVolTermStructure self) -> bool"""
        return _mxdevtool.BlackVolTermStructure_allowsExtrapolation(self)

# Register BlackVolTermStructure in _mxdevtool:
_mxdevtool.BlackVolTermStructure_swigregister(BlackVolTermStructure)

class BlackVolTermStructureHandle(object):
    r"""Proxy of C++ Handle< BlackVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BlackVolTermStructureHandle self, BlackVolTermStructure arg2=boost::shared_ptr()) -> BlackVolTermStructureHandle"""
        _mxdevtool.BlackVolTermStructureHandle_swiginit(self, _mxdevtool.new_BlackVolTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< BlackVolTermStructure >":
        r"""__deref__(BlackVolTermStructureHandle self) -> BlackVolTermStructure"""
        return _mxdevtool.BlackVolTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(BlackVolTermStructureHandle self) -> bool"""
        return _mxdevtool.BlackVolTermStructureHandle___nonzero__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        r"""asObservable(BlackVolTermStructureHandle self) -> Observable"""
        return _mxdevtool.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _mxdevtool.delete_BlackVolTermStructureHandle

    def referenceDate(self) -> "Date":
        r"""referenceDate(BlackVolTermStructureHandle self) -> Date"""
        return _mxdevtool.BlackVolTermStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        r"""dayCounter(BlackVolTermStructureHandle self) -> DayCounter"""
        return _mxdevtool.BlackVolTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        r"""calendar(BlackVolTermStructureHandle self) -> Calendar"""
        return _mxdevtool.BlackVolTermStructureHandle_calendar(self)

    def maxDate(self) -> "Date":
        r"""maxDate(BlackVolTermStructureHandle self) -> Date"""
        return _mxdevtool.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        r"""maxTime(BlackVolTermStructureHandle self) -> Time"""
        return _mxdevtool.BlackVolTermStructureHandle_maxTime(self)

    def minStrike(self) -> "Real":
        r"""minStrike(BlackVolTermStructureHandle self) -> Real"""
        return _mxdevtool.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        r"""maxStrike(BlackVolTermStructureHandle self) -> Real"""
        return _mxdevtool.BlackVolTermStructureHandle_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        r"""
        blackVol(BlackVolTermStructureHandle self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        blackVol(BlackVolTermStructureHandle self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _mxdevtool.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        r"""
        blackVariance(BlackVolTermStructureHandle self, Date arg2, Real strike, bool extrapolate=False) -> Real
        blackVariance(BlackVolTermStructureHandle self, Time arg2, Real strike, bool extrapolate=False) -> Real
        """
        return _mxdevtool.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        r"""
        blackForwardVol(BlackVolTermStructureHandle self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Volatility
        blackForwardVol(BlackVolTermStructureHandle self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Volatility
        """
        return _mxdevtool.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        r"""
        blackForwardVariance(BlackVolTermStructureHandle self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Real
        blackForwardVariance(BlackVolTermStructureHandle self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Real
        """
        return _mxdevtool.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        r"""enableExtrapolation(BlackVolTermStructureHandle self)"""
        return _mxdevtool.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        r"""disableExtrapolation(BlackVolTermStructureHandle self)"""
        return _mxdevtool.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        r"""allowsExtrapolation(BlackVolTermStructureHandle self) -> bool"""
        return _mxdevtool.BlackVolTermStructureHandle_allowsExtrapolation(self)

# Register BlackVolTermStructureHandle in _mxdevtool:
_mxdevtool.BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)

class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< BlackVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableBlackVolTermStructureHandle self, BlackVolTermStructure arg2=boost::shared_ptr()) -> RelinkableBlackVolTermStructureHandle"""
        _mxdevtool.RelinkableBlackVolTermStructureHandle_swiginit(self, _mxdevtool.new_RelinkableBlackVolTermStructureHandle(*args))

    def linkTo(self, arg2: "BlackVolTermStructure") -> "void":
        r"""linkTo(RelinkableBlackVolTermStructureHandle self, BlackVolTermStructure arg2)"""
        return _mxdevtool.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _mxdevtool.delete_RelinkableBlackVolTermStructureHandle

# Register RelinkableBlackVolTermStructureHandle in _mxdevtool:
_mxdevtool.RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)

class BlackConstantVol(BlackVolTermStructure):
    r"""Proxy of C++ BlackConstantVolPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", volatility: "Volatility", family_name: "std::string const &"):
        r"""__init__(BlackConstantVol self, Date referenceDate, Volatility volatility, std::string const & family_name) -> BlackConstantVol"""
        _mxdevtool.BlackConstantVol_swiginit(self, _mxdevtool.new_BlackConstantVol(referenceDate, volatility, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackConstantVol

# Register BlackConstantVol in _mxdevtool:
_mxdevtool.BlackConstantVol_swigregister(BlackConstantVol)

class BlackVarianceCurve(BlackVolTermStructure):
    r"""Proxy of C++ BlackVarianceCurvePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", tenors_str: "StrVector", volatilities: "DoubleVector", interpolatorID: "Interpolator1D::Type", family_name: "std::string const &"):
        r"""__init__(BlackVarianceCurve self, Date referenceDate, StrVector tenors_str, DoubleVector volatilities, Interpolator1D::Type interpolatorID, std::string const & family_name) -> BlackVarianceCurve"""
        _mxdevtool.BlackVarianceCurve_swiginit(self, _mxdevtool.new_BlackVarianceCurve(referenceDate, tenors_str, volatilities, interpolatorID, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackVarianceCurve

# Register BlackVarianceCurve in _mxdevtool:
_mxdevtool.BlackVarianceCurve_swigregister(BlackVarianceCurve)

class BlackVarianceSurface(BlackVolTermStructure):
    r"""Proxy of C++ BlackVarianceSurfacePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", tenors_str: "StrVector", strikes: "DoubleVector", blackVols: "Matrix", family_name: "std::string const &"):
        r"""__init__(BlackVarianceSurface self, Date referenceDate, StrVector tenors_str, DoubleVector strikes, Matrix blackVols, std::string const & family_name) -> BlackVarianceSurface"""
        _mxdevtool.BlackVarianceSurface_swiginit(self, _mxdevtool.new_BlackVarianceSurface(referenceDate, tenors_str, strikes, blackVols, family_name))
    __swig_destroy__ = _mxdevtool.delete_BlackVarianceSurface

# Register BlackVarianceSurface in _mxdevtool:
_mxdevtool.BlackVarianceSurface_swigregister(BlackVarianceSurface)

class Parameter(object):
    r"""Proxy of C++ boost::shared_ptr< Parameter > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Parameter *":
        r"""__deref__(Parameter self) -> Parameter *"""
        return _mxdevtool.Parameter___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Parameter self) -> bool"""
        return _mxdevtool.Parameter___nonzero__(self)

    def __init__(self):
        r"""__init__(Parameter self) -> Parameter"""
        _mxdevtool.Parameter_swiginit(self, _mxdevtool.new_Parameter())
    __swig_destroy__ = _mxdevtool.delete_Parameter

# Register Parameter in _mxdevtool:
_mxdevtool.Parameter_swigregister(Parameter)

class DeterministicParameter(Parameter):
    r"""Proxy of C++ DeterministicParameterPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DeterministicParameter self, DoubleVector times, DoubleVector values, BoolVector fixParameters=std::vector< bool >()) -> DeterministicParameter"""
        _mxdevtool.DeterministicParameter_swiginit(self, _mxdevtool.new_DeterministicParameter(*args))
    __swig_destroy__ = _mxdevtool.delete_DeterministicParameter

# Register DeterministicParameter in _mxdevtool:
_mxdevtool.DeterministicParameter_swigregister(DeterministicParameter)

class ProcessValue(object):
    r"""Proxy of C++ boost::shared_ptr< ProcessValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "ProcessValue *":
        r"""__deref__(ProcessValue self) -> ProcessValue *"""
        return _mxdevtool.ProcessValue___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProcessValue self) -> bool"""
        return _mxdevtool.ProcessValue___nonzero__(self)

    def __init__(self):
        r"""__init__(ProcessValue self) -> ProcessValue"""
        _mxdevtool.ProcessValue_swiginit(self, _mxdevtool.new_ProcessValue())
    __swig_destroy__ = _mxdevtool.delete_ProcessValue

# Register ProcessValue in _mxdevtool:
_mxdevtool.ProcessValue_swigregister(ProcessValue)

class ProcessValuePtr(ProcessValue):
    r"""Proxy of C++ ProcessValuePtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __pos__(self) -> "ProcessValuePtr":
        r"""__pos__(ProcessValuePtr self) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___pos__(self)

    def __neg__(self) -> "ProcessValuePtr":
        r"""__neg__(ProcessValuePtr self) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___neg__(self)

    def __add__(self, *args) -> "ProcessValuePtr":
        r"""
        __add__(ProcessValuePtr self, ProcessValuePtr pv) -> ProcessValuePtr
        __add__(ProcessValuePtr self, Real v) -> ProcessValuePtr
        """
        return _mxdevtool.ProcessValuePtr___add__(self, *args)

    def __sub__(self, *args) -> "ProcessValuePtr":
        r"""
        __sub__(ProcessValuePtr self, ProcessValuePtr pv) -> ProcessValuePtr
        __sub__(ProcessValuePtr self, Real v) -> ProcessValuePtr
        """
        return _mxdevtool.ProcessValuePtr___sub__(self, *args)

    def __mul__(self, *args) -> "ProcessValuePtr":
        r"""
        __mul__(ProcessValuePtr self, ProcessValuePtr pv) -> ProcessValuePtr
        __mul__(ProcessValuePtr self, Real v) -> ProcessValuePtr
        """
        return _mxdevtool.ProcessValuePtr___mul__(self, *args)

    def __truediv__(self, *args) -> "ProcessValuePtr":
        r"""
        __truediv__(ProcessValuePtr self, ProcessValuePtr pv) -> ProcessValuePtr
        __truediv__(ProcessValuePtr self, Real v) -> ProcessValuePtr
        """
        return _mxdevtool.ProcessValuePtr___truediv__(self, *args)

    def __radd__(self, v: "Real") -> "ProcessValuePtr":
        r"""__radd__(ProcessValuePtr self, Real v) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___radd__(self, v)

    def __rsub__(self, v: "Real") -> "ProcessValuePtr":
        r"""__rsub__(ProcessValuePtr self, Real v) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___rsub__(self, v)

    def __rmul__(self, v: "Real") -> "ProcessValuePtr":
        r"""__rmul__(ProcessValuePtr self, Real v) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___rmul__(self, v)

    def __rtruediv__(self, v: "Real") -> "ProcessValuePtr":
        r"""__rtruediv__(ProcessValuePtr self, Real v) -> ProcessValuePtr"""
        return _mxdevtool.ProcessValuePtr___rtruediv__(self, v)

    def get_name(self) -> "std::string":
        r"""get_name(ProcessValuePtr self) -> std::string"""
        return _mxdevtool.ProcessValuePtr_get_name(self)

    def set_name(self, name: "std::string") -> "void":
        r"""set_name(ProcessValuePtr self, std::string name)"""
        return _mxdevtool.ProcessValuePtr_set_name(self, name)

    def get_model_type(self) -> "std::string":
        r"""get_model_type(ProcessValuePtr self) -> std::string"""
        return _mxdevtool.ProcessValuePtr_get_model_type(self)

    def get_output_type(self) -> "std::string":
        r"""get_output_type(ProcessValuePtr self) -> std::string"""
        return _mxdevtool.ProcessValuePtr_get_output_type(self)

    def get_source(self) -> "std::string":
        r"""get_source(ProcessValuePtr self) -> std::string"""
        return _mxdevtool.ProcessValuePtr_get_source(self)

    name = property(get_name,set_name)
    model_type = property(get_model_type)
    output_type = property(get_output_type)
    source = property(get_source)


    def __init__(self):
        r"""__init__(ProcessValuePtr self) -> ProcessValuePtr"""
        _mxdevtool.ProcessValuePtr_swiginit(self, _mxdevtool.new_ProcessValuePtr())
    __swig_destroy__ = _mxdevtool.delete_ProcessValuePtr

# Register ProcessValuePtr in _mxdevtool:
_mxdevtool.ProcessValuePtr_swigregister(ProcessValuePtr)

class ProcessModel(ProcessValuePtr):
    r"""Proxy of C++ ProcessModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ProcessModel self) -> ProcessModel"""
        _mxdevtool.ProcessModel_swiginit(self, _mxdevtool.new_ProcessModel())
    __swig_destroy__ = _mxdevtool.delete_ProcessModel

# Register ProcessModel in _mxdevtool:
_mxdevtool.ProcessModel_swigregister(ProcessModel)

class ProcessValueVector(object):
    r"""Proxy of C++ std::vector< boost::shared_ptr< ProcessValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(ProcessValueVector self) -> SwigPyIterator"""
        return _mxdevtool.ProcessValueVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProcessValueVector self) -> bool"""
        return _mxdevtool.ProcessValueVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(ProcessValueVector self) -> bool"""
        return _mxdevtool.ProcessValueVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        r"""__len__(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::size_type"""
        return _mxdevtool.ProcessValueVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type", j: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type") -> "std::vector< boost::shared_ptr< ProcessValue >,std::allocator< boost::shared_ptr< ProcessValue > > > *":
        r"""__getslice__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i, std::vector< boost::shared_ptr< ProcessValue > >::difference_type j) -> ProcessValueVector"""
        return _mxdevtool.ProcessValueVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i, std::vector< boost::shared_ptr< ProcessValue > >::difference_type j)
        __setslice__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i, std::vector< boost::shared_ptr< ProcessValue > >::difference_type j, ProcessValueVector v)
        """
        return _mxdevtool.ProcessValueVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type", j: "std::vector< boost::shared_ptr< ProcessValue > >::difference_type") -> "void":
        r"""__delslice__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i, std::vector< boost::shared_ptr< ProcessValue > >::difference_type j)"""
        return _mxdevtool.ProcessValueVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i)
        __delitem__(ProcessValueVector self, PySliceObject * slice)
        """
        return _mxdevtool.ProcessValueVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        r"""
        __getitem__(ProcessValueVector self, PySliceObject * slice) -> ProcessValueVector
        __getitem__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i) -> ProcessValue
        """
        return _mxdevtool.ProcessValueVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(ProcessValueVector self, PySliceObject * slice, ProcessValueVector v)
        __setitem__(ProcessValueVector self, PySliceObject * slice)
        __setitem__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::difference_type i, ProcessValue x)
        """
        return _mxdevtool.ProcessValueVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type":
        r"""pop(ProcessValueVector self) -> ProcessValue"""
        return _mxdevtool.ProcessValueVector_pop(self)

    def append(self, x: "ProcessValue") -> "void":
        r"""append(ProcessValueVector self, ProcessValue x)"""
        return _mxdevtool.ProcessValueVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(ProcessValueVector self) -> bool"""
        return _mxdevtool.ProcessValueVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        r"""size(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::size_type"""
        return _mxdevtool.ProcessValueVector_size(self)

    def swap(self, v: "ProcessValueVector") -> "void":
        r"""swap(ProcessValueVector self, ProcessValueVector v)"""
        return _mxdevtool.ProcessValueVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        r"""begin(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::iterator"""
        return _mxdevtool.ProcessValueVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        r"""end(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::iterator"""
        return _mxdevtool.ProcessValueVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator":
        r"""rbegin(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator"""
        return _mxdevtool.ProcessValueVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator":
        r"""rend(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::reverse_iterator"""
        return _mxdevtool.ProcessValueVector_rend(self)

    def clear(self) -> "void":
        r"""clear(ProcessValueVector self)"""
        return _mxdevtool.ProcessValueVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::allocator_type":
        r"""get_allocator(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::allocator_type"""
        return _mxdevtool.ProcessValueVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(ProcessValueVector self)"""
        return _mxdevtool.ProcessValueVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< ProcessValue > >::iterator":
        r"""
        erase(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::iterator pos) -> std::vector< boost::shared_ptr< ProcessValue > >::iterator
        erase(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::iterator first, std::vector< boost::shared_ptr< ProcessValue > >::iterator last) -> std::vector< boost::shared_ptr< ProcessValue > >::iterator
        """
        return _mxdevtool.ProcessValueVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ProcessValueVector self) -> ProcessValueVector
        __init__(ProcessValueVector self, ProcessValueVector other) -> ProcessValueVector
        __init__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type size) -> ProcessValueVector
        __init__(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type size, ProcessValue value) -> ProcessValueVector
        """
        _mxdevtool.ProcessValueVector_swiginit(self, _mxdevtool.new_ProcessValueVector(*args))

    def push_back(self, x: "ProcessValue") -> "void":
        r"""push_back(ProcessValueVector self, ProcessValue x)"""
        return _mxdevtool.ProcessValueVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        r"""front(ProcessValueVector self) -> ProcessValue"""
        return _mxdevtool.ProcessValueVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::value_type const &":
        r"""back(ProcessValueVector self) -> ProcessValue"""
        return _mxdevtool.ProcessValueVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< ProcessValue > >::size_type", x: "ProcessValue") -> "void":
        r"""assign(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type n, ProcessValue x)"""
        return _mxdevtool.ProcessValueVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type new_size)
        resize(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type new_size, ProcessValue x)
        """
        return _mxdevtool.ProcessValueVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::iterator pos, ProcessValue x) -> std::vector< boost::shared_ptr< ProcessValue > >::iterator
        insert(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::iterator pos, std::vector< boost::shared_ptr< ProcessValue > >::size_type n, ProcessValue x)
        """
        return _mxdevtool.ProcessValueVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< ProcessValue > >::size_type") -> "void":
        r"""reserve(ProcessValueVector self, std::vector< boost::shared_ptr< ProcessValue > >::size_type n)"""
        return _mxdevtool.ProcessValueVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< ProcessValue > >::size_type":
        r"""capacity(ProcessValueVector self) -> std::vector< boost::shared_ptr< ProcessValue > >::size_type"""
        return _mxdevtool.ProcessValueVector_capacity(self)
    __swig_destroy__ = _mxdevtool.delete_ProcessValueVector

# Register ProcessValueVector in _mxdevtool:
_mxdevtool.ProcessValueVector_swigregister(ProcessValueVector)

class GBMConstModel(ProcessModel):
    r"""Proxy of C++ GBMConstModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", riskFreeRate: "QuantLib::Real", dividendYield: "QuantLib::Spread", volatility: "QuantLib::Real"):
        r"""__init__(GBMConstModel self, std::string const & name, QuantLib::Real initialValue, QuantLib::Real riskFreeRate, QuantLib::Spread dividendYield, QuantLib::Real volatility) -> GBMConstModel"""
        _mxdevtool.GBMConstModel_swiginit(self, _mxdevtool.new_GBMConstModel(name, initialValue, riskFreeRate, dividendYield, volatility))
    __swig_destroy__ = _mxdevtool.delete_GBMConstModel

# Register GBMConstModel in _mxdevtool:
_mxdevtool.GBMConstModel_swigregister(GBMConstModel)

class GBMModel(ProcessModel):
    r"""Proxy of C++ GBMModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", rfCurve: "YieldTermStructure", divCurve: "YieldTermStructure", volTs: "BlackVolTermStructure"):
        r"""__init__(GBMModel self, std::string const & name, QuantLib::Real initialValue, YieldTermStructure rfCurve, YieldTermStructure divCurve, BlackVolTermStructure volTs) -> GBMModel"""
        _mxdevtool.GBMModel_swiginit(self, _mxdevtool.new_GBMModel(name, initialValue, rfCurve, divCurve, volTs))
    __swig_destroy__ = _mxdevtool.delete_GBMModel

# Register GBMModel in _mxdevtool:
_mxdevtool.GBMModel_swigregister(GBMModel)

class HestonModel(ProcessModel):
    r"""Proxy of C++ HestonModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", initialValue: "QuantLib::Real", rfCurve: "YieldTermStructure", divCurve: "YieldTermStructure", initialVolatility: "QuantLib::Real", volRevertingSpeed: "QuantLib::Real", longTermVolatility: "QuantLib::Real", volOfVol: "QuantLib::Real", rho: "QuantLib::Real"):
        r"""__init__(HestonModel self, std::string name, QuantLib::Real initialValue, YieldTermStructure rfCurve, YieldTermStructure divCurve, QuantLib::Real initialVolatility, QuantLib::Real volRevertingSpeed, QuantLib::Real longTermVolatility, QuantLib::Real volOfVol, QuantLib::Real rho) -> HestonModel"""
        _mxdevtool.HestonModel_swiginit(self, _mxdevtool.new_HestonModel(name, initialValue, rfCurve, divCurve, initialVolatility, volRevertingSpeed, longTermVolatility, volOfVol, rho))
    __swig_destroy__ = _mxdevtool.delete_HestonModel

# Register HestonModel in _mxdevtool:
_mxdevtool.HestonModel_swigregister(HestonModel)

class HullWhite1FModel(ProcessModel):
    r"""Proxy of C++ HullWhite1FModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alphaCurve: "Parameter", sigmaCurve: "Parameter"):
        r"""__init__(HullWhite1FModel self, std::string const & name, YieldTermStructure fittingCurve, Parameter alphaCurve, Parameter sigmaCurve) -> HullWhite1FModel"""
        _mxdevtool.HullWhite1FModel_swiginit(self, _mxdevtool.new_HullWhite1FModel(name, fittingCurve, alphaCurve, sigmaCurve))
    __swig_destroy__ = _mxdevtool.delete_HullWhite1FModel

# Register HullWhite1FModel in _mxdevtool:
_mxdevtool.HullWhite1FModel_swigregister(HullWhite1FModel)

class BK1FModel(ProcessModel):
    r"""Proxy of C++ BK1FModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alphaCurve: "Parameter", sigmaCurve: "Parameter"):
        r"""__init__(BK1FModel self, std::string const & name, YieldTermStructure fittingCurve, Parameter alphaCurve, Parameter sigmaCurve) -> BK1FModel"""
        _mxdevtool.BK1FModel_swiginit(self, _mxdevtool.new_BK1FModel(name, fittingCurve, alphaCurve, sigmaCurve))
    __swig_destroy__ = _mxdevtool.delete_BK1FModel

# Register BK1FModel in _mxdevtool:
_mxdevtool.BK1FModel_swigregister(BK1FModel)

class Vasicek1FModel(ProcessModel):
    r"""Proxy of C++ Vasicek1FModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", meanRevertingSpeed: "QuantLib::Real", longTermRate: "QuantLib::Real", sigma: "QuantLib::Real"):
        r"""__init__(Vasicek1FModel self, std::string const & name, QuantLib::Real initialValue, QuantLib::Real meanRevertingSpeed, QuantLib::Real longTermRate, QuantLib::Real sigma) -> Vasicek1FModel"""
        _mxdevtool.Vasicek1FModel_swiginit(self, _mxdevtool.new_Vasicek1FModel(name, initialValue, meanRevertingSpeed, longTermRate, sigma))
    __swig_destroy__ = _mxdevtool.delete_Vasicek1FModel

# Register Vasicek1FModel in _mxdevtool:
_mxdevtool.Vasicek1FModel_swigregister(Vasicek1FModel)

class GTwoExtModel(ProcessModel):
    r"""Proxy of C++ GTwoExtModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", fittingCurve: "YieldTermStructure", alpha1: "Real", sigma1: "Real", alpha2: "Real", sigma2: "Real", correlation: "Real"):
        r"""__init__(GTwoExtModel self, std::string const & name, YieldTermStructure fittingCurve, Real alpha1, Real sigma1, Real alpha2, Real sigma2, Real correlation) -> GTwoExtModel"""
        _mxdevtool.GTwoExtModel_swiginit(self, _mxdevtool.new_GTwoExtModel(name, fittingCurve, alpha1, sigma1, alpha2, sigma2, correlation))
    __swig_destroy__ = _mxdevtool.delete_GTwoExtModel

# Register GTwoExtModel in _mxdevtool:
_mxdevtool.GTwoExtModel_swigregister(GTwoExtModel)

class CIR1FModel(ProcessModel):
    r"""Proxy of C++ CIR1FModelPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", initialValue: "QuantLib::Real", meanRevertingSpeed: "QuantLib::Real", longTermRate: "QuantLib::Real", sigma: "QuantLib::Real"):
        r"""__init__(CIR1FModel self, std::string const & name, QuantLib::Real initialValue, QuantLib::Real meanRevertingSpeed, QuantLib::Real longTermRate, QuantLib::Real sigma) -> CIR1FModel"""
        _mxdevtool.CIR1FModel_swiginit(self, _mxdevtool.new_CIR1FModel(name, initialValue, meanRevertingSpeed, longTermRate, sigma))
    __swig_destroy__ = _mxdevtool.delete_CIR1FModel

# Register CIR1FModel in _mxdevtool:
_mxdevtool.CIR1FModel_swigregister(CIR1FModel)

class IRsgWrapper(object):
    r"""Proxy of C++ boost::shared_ptr< IRsgWrapper > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "IRsgWrapper *":
        r"""__deref__(IRsgWrapper self) -> IRsgWrapper *"""
        return _mxdevtool.IRsgWrapper___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IRsgWrapper self) -> bool"""
        return _mxdevtool.IRsgWrapper___nonzero__(self)

    def __init__(self):
        r"""__init__(IRsgWrapper self) -> IRsgWrapper"""
        _mxdevtool.IRsgWrapper_swiginit(self, _mxdevtool.new_IRsgWrapper())
    __swig_destroy__ = _mxdevtool.delete_IRsgWrapper

# Register IRsgWrapper in _mxdevtool:
_mxdevtool.IRsgWrapper_swigregister(IRsgWrapper)

class Rsg(IRsgWrapper):
    r"""Proxy of C++ RsgPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleNum: "long", dimension: "long", seed: "long", skip: "long", isMomentMatching: "bool", randomType: "std::string const &", subType: "std::string const &", randomTransformType: "std::string const &"):
        r"""
        __init__(Rsg self, long sampleNum, long dimension, long seed, long skip, bool isMomentMatching, std::string const & randomType, std::string const & subType, std::string const & randomTransformType) -> Rsg

                Parameters
                ----------
                sampleNum - long
                dimension - long, timegrid
                seed - long
                skip - long
                isMomentMatching : bool
                randomType : string ( pseudo, sobol, halton, faure )
                subType : string 
                        ( pseudo - mersenneTwister, knuth, ranlux3, ranlux4, lecuyer )
                        ( sobol - unit, jaeckel, sobollevitan, sobollevitanlemieux, joekuod5, joekuod6, joekuod7, kuo, kuo2, kuo3 )
                randomTransformType : string ( uniform, uoxMullerNormal, centralLimitNormal, InvNormal, Possion, StudentT )

        """
        _mxdevtool.Rsg_swiginit(self, _mxdevtool.new_Rsg(sampleNum, dimension, seed, skip, isMomentMatching, randomType, subType, randomTransformType))

    def nextSequence(self) -> "std::vector< Real,std::allocator< Real > >":
        r"""nextSequence(Rsg self) -> DoubleVector"""
        return _mxdevtool.Rsg_nextSequence(self)
    __swig_destroy__ = _mxdevtool.delete_Rsg

# Register Rsg in _mxdevtool:
_mxdevtool.Rsg_swigregister(Rsg)

class IEvolverBase(object):
    r"""Proxy of C++ boost::shared_ptr< IEvolverBase > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "IEvolverBase *":
        r"""__deref__(IEvolverBase self) -> IEvolverBase *"""
        return _mxdevtool.IEvolverBase___deref__(self)

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IEvolverBase self) -> bool"""
        return _mxdevtool.IEvolverBase___nonzero__(self)

    def __init__(self):
        r"""__init__(IEvolverBase self) -> IEvolverBase"""
        _mxdevtool.IEvolverBase_swiginit(self, _mxdevtool.new_IEvolverBase())
    __swig_destroy__ = _mxdevtool.delete_IEvolverBase

    def generate(self) -> "void":
        r"""generate(IEvolverBase self)"""
        return _mxdevtool.IEvolverBase_generate(self)

# Register IEvolverBase in _mxdevtool:
_mxdevtool.IEvolverBase_swigregister(IEvolverBase)

class ScenarioGenerator(IEvolverBase):
    r"""Proxy of C++ ScenarioGeneratorPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, models: "ProcessValueVector", corr: "Matrix", timeGrid: "TimeGrid", rsg: "IRsgWrapper", autoGenerate: "bool", filename: "std::string const &", processMomentMatch: "bool"):
        r"""__init__(ScenarioGenerator self, ProcessValueVector models, Matrix corr, TimeGrid timeGrid, IRsgWrapper rsg, bool autoGenerate, std::string const & filename, bool processMomentMatch) -> ScenarioGenerator"""
        _mxdevtool.ScenarioGenerator_swiginit(self, _mxdevtool.new_ScenarioGenerator(models, corr, timeGrid, rsg, autoGenerate, filename, processMomentMatch))
    __swig_destroy__ = _mxdevtool.delete_ScenarioGenerator

# Register ScenarioGenerator in _mxdevtool:
_mxdevtool.ScenarioGenerator_swigregister(ScenarioGenerator)

class ScenarioGenerator2(IEvolverBase):
    r"""Proxy of C++ ScenarioGenerator2Ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScenarioGenerator2 self, ProcessValueVector models, ProcessValueVector calcs, Matrix corr, TimeGrid timeGrid, IRsgWrapper rsg, std::string const & filename, bool processMomentMatch) -> ScenarioGenerator2
        __init__(ScenarioGenerator2 self, ProcessValueVector models, ProcessValueVector calcs, Matrix corr, TimeGrid timeGrid, QuantLib::Size sampleNum, std::string const & filename, bool processMomentMatch) -> ScenarioGenerator2
        """
        _mxdevtool.ScenarioGenerator2_swiginit(self, _mxdevtool.new_ScenarioGenerator2(*args))
    __swig_destroy__ = _mxdevtool.delete_ScenarioGenerator2

# Register ScenarioGenerator2 in _mxdevtool:
_mxdevtool.ScenarioGenerator2_swigregister(ScenarioGenerator2)

class ScenarioResult(object):
    r"""Proxy of C++ ScenarioResultReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileName: "std::string"):
        r"""__init__(ScenarioResult self, std::string fileName) -> ScenarioResult"""
        _mxdevtool.ScenarioResult_swiginit(self, _mxdevtool.new_ScenarioResult(fileName))

    def path(self, assetCount: "QuantLib::Size", scenCount: "QuantLib::Size") -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > >":
        r"""path(ScenarioResult self, QuantLib::Size assetCount, QuantLib::Size scenCount) -> DoubleVector"""
        return _mxdevtool.ScenarioResult_path(self, assetCount, scenCount)

    def multiPath(self, scenCount: "QuantLib::Size") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""multiPath(ScenarioResult self, QuantLib::Size scenCount) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_multiPath(self, scenCount)

    def multiPathTPos(self, scenCount: "QuantLib::Size", t_pos: "QuantLib::Size") -> "std::vector< Real,std::allocator< Real > >":
        r"""multiPathTPos(ScenarioResult self, QuantLib::Size scenCount, QuantLib::Size t_pos) -> DoubleVector"""
        return _mxdevtool.ScenarioResult_multiPathTPos(self, scenCount, t_pos)

    def multiPathAllTPos(self, t_pos: "QuantLib::Size") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""multiPathAllTPos(ScenarioResult self, QuantLib::Size t_pos) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_multiPathAllTPos(self, t_pos)

    def multiPathAllTPosInterpolateTime(self, t: "QuantLib::Time") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""multiPathAllTPosInterpolateTime(ScenarioResult self, QuantLib::Time t) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_multiPathAllTPosInterpolateTime(self, t)

    def multiPathAllTPosInterpolateDate(self, date: "Date") -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""multiPathAllTPosInterpolateDate(ScenarioResult self, Date date) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_multiPathAllTPosInterpolateDate(self, date)

    def analytic_multiPath(self) -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""analytic_multiPath(ScenarioResult self) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_analytic_multiPath(self)

    def average_multiPath(self) -> "std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > >":
        r"""average_multiPath(ScenarioResult self) -> DoubleVectorVector"""
        return _mxdevtool.ScenarioResult_average_multiPath(self)

    def genInfo(self) -> "std::vector< std::string,std::allocator< std::string > >":
        r"""genInfo(ScenarioResult self) -> StrVector"""
        return _mxdevtool.ScenarioResult_genInfo(self)

    def timeGrid(self) -> "TimeGrid":
        r"""timeGrid(ScenarioResult self) -> TimeGrid"""
        return _mxdevtool.ScenarioResult_timeGrid(self)

    def refDate(self) -> "Date":
        r"""refDate(ScenarioResult self) -> Date"""
        return _mxdevtool.ScenarioResult_refDate(self)

    def maxTime(self) -> "Real":
        r"""maxTime(ScenarioResult self) -> Real"""
        return _mxdevtool.ScenarioResult_maxTime(self)

    def maxDate(self) -> "Date":
        r"""maxDate(ScenarioResult self) -> Date"""
        return _mxdevtool.ScenarioResult_maxDate(self)

    def assetNum(self) -> "int":
        r"""assetNum(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_assetNum(self)

    def calcNum(self) -> "int":
        r"""calcNum(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_calcNum(self)

    def timegridNum(self) -> "int":
        r"""timegridNum(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_timegridNum(self)

    def simulNum(self) -> "int":
        r"""simulNum(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_simulNum(self)

    def randomType(self) -> "std::string":
        r"""randomType(ScenarioResult self) -> std::string"""
        return _mxdevtool.ScenarioResult_randomType(self)

    def randomSubtype(self) -> "std::string":
        r"""randomSubtype(ScenarioResult self) -> std::string"""
        return _mxdevtool.ScenarioResult_randomSubtype(self)

    def randomMomentMatch(self) -> "int":
        r"""randomMomentMatch(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_randomMomentMatch(self)

    def modelMomentMatch(self) -> "int":
        r"""modelMomentMatch(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_modelMomentMatch(self)

    def seed(self) -> "int":
        r"""seed(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_seed(self)

    def skip(self) -> "int":
        r"""skip(ScenarioResult self) -> int"""
        return _mxdevtool.ScenarioResult_skip(self)

    def filename(self) -> "std::string":
        r"""filename(ScenarioResult self) -> std::string"""
        return _mxdevtool.ScenarioResult_filename(self)
    __swig_destroy__ = _mxdevtool.delete_ScenarioResult

# Register ScenarioResult in _mxdevtool:
_mxdevtool.ScenarioResult_swigregister(ScenarioResult)

class AdditionalCalc(ProcessValuePtr):
    r"""Proxy of C++ AdditionalCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AdditionalCalc self) -> AdditionalCalc"""
        _mxdevtool.AdditionalCalc_swiginit(self, _mxdevtool.new_AdditionalCalc())
    __swig_destroy__ = _mxdevtool.delete_AdditionalCalc

# Register AdditionalCalc in _mxdevtool:
_mxdevtool.AdditionalCalc_swigregister(AdditionalCalc)

class SpotRateCalc(ProcessValuePtr):
    r"""Proxy of C++ SpotRateCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", maturity: "Period", compounding: "Compounding"):
        r"""__init__(SpotRateCalc self, std::string name, ProcessValue pv, Period maturity, Compounding compounding) -> SpotRateCalc"""
        _mxdevtool.SpotRateCalc_swiginit(self, _mxdevtool.new_SpotRateCalc(name, pv, maturity, compounding))
    __swig_destroy__ = _mxdevtool.delete_SpotRateCalc

# Register SpotRateCalc in _mxdevtool:
_mxdevtool.SpotRateCalc_swigregister(SpotRateCalc)

class ForwardRateCalc(ProcessValuePtr):
    r"""Proxy of C++ ForwardRateCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", startPeriod: "Period", maturity: "Period", compounding: "Compounding"):
        r"""__init__(ForwardRateCalc self, std::string name, ProcessValue pv, Period startPeriod, Period maturity, Compounding compounding) -> ForwardRateCalc"""
        _mxdevtool.ForwardRateCalc_swiginit(self, _mxdevtool.new_ForwardRateCalc(name, pv, startPeriod, maturity, compounding))
    __swig_destroy__ = _mxdevtool.delete_ForwardRateCalc

# Register ForwardRateCalc in _mxdevtool:
_mxdevtool.ForwardRateCalc_swigregister(ForwardRateCalc)

class DiscountFactorCalc(ProcessValuePtr):
    r"""Proxy of C++ DiscountFactorCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue"):
        r"""__init__(DiscountFactorCalc self, std::string name, ProcessValue pv) -> DiscountFactorCalc"""
        _mxdevtool.DiscountFactorCalc_swiginit(self, _mxdevtool.new_DiscountFactorCalc(name, pv))
    __swig_destroy__ = _mxdevtool.delete_DiscountFactorCalc

# Register DiscountFactorCalc in _mxdevtool:
_mxdevtool.DiscountFactorCalc_swigregister(DiscountFactorCalc)

class LinearOperWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ LinearOperWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", multiple: "Real", spread: "Real"):
        r"""__init__(LinearOperWrapperCalc self, std::string name, ProcessValue pv, Real multiple, Real spread) -> LinearOperWrapperCalc"""
        _mxdevtool.LinearOperWrapperCalc_swiginit(self, _mxdevtool.new_LinearOperWrapperCalc(name, pv, multiple, spread))
    __swig_destroy__ = _mxdevtool.delete_LinearOperWrapperCalc

# Register LinearOperWrapperCalc in _mxdevtool:
_mxdevtool.LinearOperWrapperCalc_swigregister(LinearOperWrapperCalc)

class UnaryFunctionWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ UnaryFunctionWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", func_type: "std::string"):
        r"""__init__(UnaryFunctionWrapperCalc self, std::string name, ProcessValue pv, std::string func_type) -> UnaryFunctionWrapperCalc"""
        _mxdevtool.UnaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_UnaryFunctionWrapperCalc(name, pv, func_type))
    __swig_destroy__ = _mxdevtool.delete_UnaryFunctionWrapperCalc

# Register UnaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.UnaryFunctionWrapperCalc_swigregister(UnaryFunctionWrapperCalc)

class BinaryFunctionWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ BinaryFunctionWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv1: "ProcessValue", pv2: "ProcessValue", func_type: "std::string"):
        r"""__init__(BinaryFunctionWrapperCalc self, std::string name, ProcessValue pv1, ProcessValue pv2, std::string func_type) -> BinaryFunctionWrapperCalc"""
        _mxdevtool.BinaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_BinaryFunctionWrapperCalc(name, pv1, pv2, func_type))
    __swig_destroy__ = _mxdevtool.delete_BinaryFunctionWrapperCalc

# Register BinaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.BinaryFunctionWrapperCalc_swigregister(BinaryFunctionWrapperCalc)

class MultaryFunctionWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ MultaryFunctionWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv_arr: "ProcessValueVector", func_type: "std::string"):
        r"""__init__(MultaryFunctionWrapperCalc self, std::string name, ProcessValueVector pv_arr, std::string func_type) -> MultaryFunctionWrapperCalc"""
        _mxdevtool.MultaryFunctionWrapperCalc_swiginit(self, _mxdevtool.new_MultaryFunctionWrapperCalc(name, pv_arr, func_type))
    __swig_destroy__ = _mxdevtool.delete_MultaryFunctionWrapperCalc

# Register MultaryFunctionWrapperCalc in _mxdevtool:
_mxdevtool.MultaryFunctionWrapperCalc_swigregister(MultaryFunctionWrapperCalc)

class ReturnWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ ReturnWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", return_type: "std::string"):
        r"""__init__(ReturnWrapperCalc self, std::string name, ProcessValue pv, std::string return_type) -> ReturnWrapperCalc"""
        _mxdevtool.ReturnWrapperCalc_swiginit(self, _mxdevtool.new_ReturnWrapperCalc(name, pv, return_type))
    __swig_destroy__ = _mxdevtool.delete_ReturnWrapperCalc

# Register ReturnWrapperCalc in _mxdevtool:
_mxdevtool.ReturnWrapperCalc_swigregister(ReturnWrapperCalc)

class MathExprFunctionWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ MathExprFunctionWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv_arr: "ProcessValueVector", expr: "std::string"):
        r"""__init__(MathExprFunctionWrapperCalc self, std::string name, ProcessValueVector pv_arr, std::string expr) -> MathExprFunctionWrapperCalc"""
        _mxdevtool.MathExprFunctionWrapperCalc_swiginit(self, _mxdevtool.new_MathExprFunctionWrapperCalc(name, pv_arr, expr))
    __swig_destroy__ = _mxdevtool.delete_MathExprFunctionWrapperCalc

# Register MathExprFunctionWrapperCalc in _mxdevtool:
_mxdevtool.MathExprFunctionWrapperCalc_swigregister(MathExprFunctionWrapperCalc)

class ConstantValueCalc(ProcessValuePtr):
    r"""Proxy of C++ ConstantValueCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", v: "Real"):
        r"""__init__(ConstantValueCalc self, std::string name, Real v) -> ConstantValueCalc"""
        _mxdevtool.ConstantValueCalc_swiginit(self, _mxdevtool.new_ConstantValueCalc(name, v))
    __swig_destroy__ = _mxdevtool.delete_ConstantValueCalc

# Register ConstantValueCalc in _mxdevtool:
_mxdevtool.ConstantValueCalc_swigregister(ConstantValueCalc)

class YieldCurveValueCalc(ProcessValuePtr):
    r"""Proxy of C++ YieldCurveValueCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", ts: "YieldTermStructure", output_type: "std::string", compound: "Compounding"):
        r"""__init__(YieldCurveValueCalc self, std::string name, YieldTermStructure ts, std::string output_type, Compounding compound) -> YieldCurveValueCalc"""
        _mxdevtool.YieldCurveValueCalc_swiginit(self, _mxdevtool.new_YieldCurveValueCalc(name, ts, output_type, compound))
    __swig_destroy__ = _mxdevtool.delete_YieldCurveValueCalc

# Register YieldCurveValueCalc in _mxdevtool:
_mxdevtool.YieldCurveValueCalc_swigregister(YieldCurveValueCalc)

class FixedRateCMBondPositionCalc(ProcessValuePtr):
    r"""Proxy of C++ FixedRateCMBondPositionCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", notional: "Real", fixedRate: "Real", couponTenor: "Period", maturity: "Period", discountCurve: "YieldTermStructure"):
        r"""__init__(FixedRateCMBondPositionCalc self, std::string name, ProcessValue pv, Real notional, Real fixedRate, Period couponTenor, Period maturity, YieldTermStructure discountCurve) -> FixedRateCMBondPositionCalc"""
        _mxdevtool.FixedRateCMBondPositionCalc_swiginit(self, _mxdevtool.new_FixedRateCMBondPositionCalc(name, pv, notional, fixedRate, couponTenor, maturity, discountCurve))
    __swig_destroy__ = _mxdevtool.delete_FixedRateCMBondPositionCalc

# Register FixedRateCMBondPositionCalc in _mxdevtool:
_mxdevtool.FixedRateCMBondPositionCalc_swigregister(FixedRateCMBondPositionCalc)

class ShiftWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ ShiftWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", pv: "ProcessValue", shift: "int"):
        r"""__init__(ShiftWrapperCalc self, std::string name, ProcessValue pv, int shift) -> ShiftWrapperCalc"""
        _mxdevtool.ShiftWrapperCalc_swiginit(self, _mxdevtool.new_ShiftWrapperCalc(name, pv, shift))
    __swig_destroy__ = _mxdevtool.delete_ShiftWrapperCalc

# Register ShiftWrapperCalc in _mxdevtool:
_mxdevtool.ShiftWrapperCalc_swigregister(ShiftWrapperCalc)

class FundWrapperCalc(ProcessValuePtr):
    r"""Proxy of C++ FundWrapperCalcPtr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string", weights: "DoubleVector", pv_arr: "ProcessValueVector"):
        r"""__init__(FundWrapperCalc self, std::string name, DoubleVector weights, ProcessValueVector pv_arr) -> FundWrapperCalc"""
        _mxdevtool.FundWrapperCalc_swiginit(self, _mxdevtool.new_FundWrapperCalc(name, weights, pv_arr))
    __swig_destroy__ = _mxdevtool.delete_FundWrapperCalc

# Register FundWrapperCalc in _mxdevtool:
_mxdevtool.FundWrapperCalc_swigregister(FundWrapperCalc)



