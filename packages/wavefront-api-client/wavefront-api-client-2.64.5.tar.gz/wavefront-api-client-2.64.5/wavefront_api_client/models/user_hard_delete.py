# coding: utf-8

"""
    Wavefront REST API

    <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserHardDelete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'existing': 'dict(str, Iterable)',
        'user_id': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'existing': 'existing',
        'user_id': 'userId'
    }

    def __init__(self, customer_id=None, existing=None, user_id=None):  # noqa: E501
        """UserHardDelete - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._existing = None
        self._user_id = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if existing is not None:
            self.existing = existing
        if user_id is not None:
            self.user_id = user_id

    @property
    def customer_id(self):
        """Gets the customer_id of this UserHardDelete.  # noqa: E501


        :return: The customer_id of this UserHardDelete.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this UserHardDelete.


        :param customer_id: The customer_id of this UserHardDelete.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def existing(self):
        """Gets the existing of this UserHardDelete.  # noqa: E501


        :return: The existing of this UserHardDelete.  # noqa: E501
        :rtype: dict(str, Iterable)
        """
        return self._existing

    @existing.setter
    def existing(self, existing):
        """Sets the existing of this UserHardDelete.


        :param existing: The existing of this UserHardDelete.  # noqa: E501
        :type: dict(str, Iterable)
        """

        self._existing = existing

    @property
    def user_id(self):
        """Gets the user_id of this UserHardDelete.  # noqa: E501


        :return: The user_id of this UserHardDelete.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserHardDelete.


        :param user_id: The user_id of this UserHardDelete.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserHardDelete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserHardDelete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
