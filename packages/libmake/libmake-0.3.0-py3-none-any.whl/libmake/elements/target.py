import fnmatch

from .prerequisite import PrerequisiteList
from ..utils.file import File, updated_prerequisite


class Target:
    """Target.

    Note
    ----
    The main goal of this class is to provide an API to be used by MObject, and
    not to be used directly.

    So :meth:`__init__` will be replaced and not used, but it is here as an
    interface to specify the requirements to be fullfilled to be able to use the
    defined API, and on the other side what is available for API development.

    """

    def __init__(self, pattern, prerequisites=None):
        self.pattern = pattern

        prerequisites = [] if prerequisites is None else prerequisites
        self.prerequisites = PrerequisiteList(prerequisites)

    def __repr__(self):
        return self.pattern

    def match(self, target):
        return fnmatch.fnmatch(target, self.pattern)

    def is_up_to_date(self):
        try:
            target_f = File(self.pattern)
            prerequisites_f = []
            try:
                for prerequisite in self.prerequisites:
                    prerequisites_f.append(File(prerequisite.pattern))
                return target_f > max(prerequisites_f)
            except ValueError:
                # if any prerequisite is not a file the target is never
                # up-to-date (on the other hand all the files are already
                # generated by running prerequisite recipes)
                return False
        except updated_prerequisite:
            # if the target it's not a path it's not up-to-date by definition
            return False
