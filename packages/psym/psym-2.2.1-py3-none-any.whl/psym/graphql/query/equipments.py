#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql_client.runtime.datetime_utils import DATETIME_FIELD
from gql_client.runtime.graphql_client import GraphqlClient
from gql_client.runtime.client import OperationException
from gql_client.runtime.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional, Dict
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.equipment import EquipmentFragment, QUERY as EquipmentFragmentQuery
from ..fragment.page_info import PageInfoFragment, QUERY as PageInfoFragmentQuery

QUERY: List[str] = EquipmentFragmentQuery + PageInfoFragmentQuery + ["""
query EquipmentsQuery($after: Cursor, $first: Int) {
  equipments(after: $after, first: $first) {
    edges {
      node {
        ...EquipmentFragment
      }
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}

"""]

@dataclass
class EquipmentsQuery(DataClassJsonMixin):
    @dataclass
    class EquipmentsQueryData(DataClassJsonMixin):
        @dataclass
        class EquipmentConnection(DataClassJsonMixin):
            @dataclass
            class EquipmentEdge(DataClassJsonMixin):
                @dataclass
                class Equipment(EquipmentFragment):
                    pass

                node: Optional[Equipment]

            @dataclass
            class PageInfo(PageInfoFragment):
                pass

            edges: List[EquipmentEdge]
            pageInfo: PageInfo

        equipments: EquipmentConnection

    data: EquipmentsQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, after: Optional[str] = None, first: Optional[int] = None) -> EquipmentsQueryData.EquipmentConnection:
        # fmt: off
        variables: Dict[str, Any] = {"after": after, "first": first}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.from_json(response_text).data
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("EquipmentsQuery", variables, network_time, decode_time)
            return res.equipments
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                "EquipmentsQuery",
                variables,
            )
