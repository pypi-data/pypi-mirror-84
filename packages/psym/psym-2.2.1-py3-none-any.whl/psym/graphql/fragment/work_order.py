#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql_client.runtime.datetime_utils import DATETIME_FIELD
from gql_client.runtime.graphql_client import GraphqlClient
from gql_client.runtime.client import OperationException
from gql_client.runtime.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional, Dict
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from .property import PropertyFragment, QUERY as PropertyFragmentQuery
from gql_client.runtime.enum_utils import enum_field
from ..enum.work_order_priority import WorkOrderPriority
from ..enum.work_order_status import WorkOrderStatus

QUERY: List[str] = PropertyFragmentQuery + ["""
fragment WorkOrderFragment on WorkOrder {
    id
    name
    description
    workOrderType{
        id
        name
    }
    location{
        id
    }
    project{
        id
    }
    properties{
        ...PropertyFragment
    }
    owner{
        id
    }
    assignedTo{
        id
    }
    status
    priority
}
"""]

@dataclass
class WorkOrderFragment(DataClassJsonMixin):
    @dataclass
    class WorkOrderType(DataClassJsonMixin):
        id: str
        name: str

    @dataclass
    class Location(DataClassJsonMixin):
        id: str

    @dataclass
    class Project(DataClassJsonMixin):
        id: str

    @dataclass
    class Property(PropertyFragment):
        pass

    @dataclass
    class User(DataClassJsonMixin):
        id: str

    id: str
    name: str
    description: Optional[str]
    workOrderType: WorkOrderType
    location: Optional[Location]
    project: Optional[Project]
    properties: List[Property]
    owner: User
    assignedTo: Optional[User]
    status: WorkOrderStatus = enum_field(WorkOrderStatus)
    priority: WorkOrderPriority = enum_field(WorkOrderPriority)
