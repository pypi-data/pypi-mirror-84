#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql_client.runtime.datetime_utils import DATETIME_FIELD
from gql_client.runtime.graphql_client import GraphqlClient
from gql_client.runtime.reporter import FailedOperationException
from gql import gql
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional, Dict
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.equipment_port import EquipmentPortFragment, QUERY as EquipmentPortFragmentQuery
from ..fragment.page_info import PageInfoFragment, QUERY as PageInfoFragmentQuery

QUERY: List[str] = EquipmentPortFragmentQuery + PageInfoFragmentQuery + ["""
query PortsQuery($after: Cursor, $first: Int) {
  equipmentPorts(after: $after, first: $first) {
    edges {
      node {
        ...EquipmentPortFragment
      }
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}

"""]

class PortsQuery(DataClassJsonMixin):
    @dataclass
    class PortsQueryData(DataClassJsonMixin):
        @dataclass
        class EquipmentPortConnection(DataClassJsonMixin):
            @dataclass
            class EquipmentPortEdge(DataClassJsonMixin):
                @dataclass
                class EquipmentPort(EquipmentPortFragment):
                    pass

                node: Optional[EquipmentPort]

            @dataclass
            class PageInfo(PageInfoFragment):
                pass

            edges: List[EquipmentPortEdge]
            pageInfo: PageInfo

        equipmentPorts: EquipmentPortConnection

    @classmethod
    def execute(cls, client: GraphqlClient, after: Optional[str] = None, first: Optional[int] = None) -> PortsQueryData.EquipmentPortConnection:
        variables: Dict[str, Any] = {"after": after, "first": first}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.PortsQueryData.from_dict(response_text)
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("PortsQuery", variables, network_time, decode_time)
            return res.equipmentPorts
        except TransportQueryError as e:
            raise FailedOperationException(
                client.reporter,
                str(e.errors),
                "PortsQuery",
                variables,
            )
