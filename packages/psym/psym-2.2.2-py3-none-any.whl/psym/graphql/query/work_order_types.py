#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql_client.runtime.datetime_utils import DATETIME_FIELD
from gql_client.runtime.graphql_client import GraphqlClient
from gql_client.runtime.reporter import FailedOperationException
from gql import gql
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional, Dict
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.work_order_type import WorkOrderTypeFragment, QUERY as WorkOrderTypeFragmentQuery

QUERY: List[str] = WorkOrderTypeFragmentQuery + ["""
query WorkOrderTypesQuery {
  workOrderTypes {
    edges {
      node {
        ...WorkOrderTypeFragment
      }
    }
  }
}

"""]

class WorkOrderTypesQuery(DataClassJsonMixin):
    @dataclass
    class WorkOrderTypesQueryData(DataClassJsonMixin):
        @dataclass
        class WorkOrderTypeConnection(DataClassJsonMixin):
            @dataclass
            class WorkOrderTypeEdge(DataClassJsonMixin):
                @dataclass
                class WorkOrderType(WorkOrderTypeFragment):
                    pass

                node: Optional[WorkOrderType]

            edges: List[WorkOrderTypeEdge]

        workOrderTypes: WorkOrderTypeConnection

    @classmethod
    def execute(cls, client: GraphqlClient) -> WorkOrderTypesQueryData.WorkOrderTypeConnection:
        variables: Dict[str, Any] = {}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.WorkOrderTypesQueryData.from_dict(response_text)
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("WorkOrderTypesQuery", variables, network_time, decode_time)
            return res.workOrderTypes
        except TransportQueryError as e:
            raise FailedOperationException(
                client.reporter,
                str(e.errors),
                "WorkOrderTypesQuery",
                variables,
            )
