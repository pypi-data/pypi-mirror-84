# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cogment.api import data_pb2 as cogment_dot_api_dot_data__pb2


class LogExporterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Log = channel.stream_unary(
        '/cogment.LogExporter/Log',
        request_serializer=cogment_dot_api_dot_data__pb2.DatalogMsg.SerializeToString,
        response_deserializer=cogment_dot_api_dot_data__pb2.LogReply.FromString,
        )


class LogExporterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Log(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LogExporterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Log': grpc.stream_unary_rpc_method_handler(
          servicer.Log,
          request_deserializer=cogment_dot_api_dot_data__pb2.DatalogMsg.FromString,
          response_serializer=cogment_dot_api_dot_data__pb2.LogReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cogment.LogExporter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
