# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_titanlib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_titanlib')
    _titanlib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_titanlib', [dirname(__file__)])
        except ImportError:
            import _titanlib
            return _titanlib
        try:
            _mod = imp.load_module('_titanlib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _titanlib = swig_import_helper()
    del swig_import_helper
else:
    import _titanlib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _titanlib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _titanlib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _titanlib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _titanlib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _titanlib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _titanlib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _titanlib.SwigPyIterator_copy(self)

    def next(self):
        return _titanlib.SwigPyIterator_next(self)

    def __next__(self):
        return _titanlib.SwigPyIterator___next__(self)

    def previous(self):
        return _titanlib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _titanlib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _titanlib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _titanlib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _titanlib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _titanlib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _titanlib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _titanlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _titanlib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.IntVector___nonzero__(self)

    def __bool__(self):
        return _titanlib.IntVector___bool__(self)

    def __len__(self):
        return _titanlib.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.IntVector___setitem__(self, *args)

    def pop(self):
        return _titanlib.IntVector_pop(self)

    def append(self, x):
        return _titanlib.IntVector_append(self, x)

    def empty(self):
        return _titanlib.IntVector_empty(self)

    def size(self):
        return _titanlib.IntVector_size(self)

    def swap(self, v):
        return _titanlib.IntVector_swap(self, v)

    def begin(self):
        return _titanlib.IntVector_begin(self)

    def end(self):
        return _titanlib.IntVector_end(self)

    def rbegin(self):
        return _titanlib.IntVector_rbegin(self)

    def rend(self):
        return _titanlib.IntVector_rend(self)

    def clear(self):
        return _titanlib.IntVector_clear(self)

    def get_allocator(self):
        return _titanlib.IntVector_get_allocator(self)

    def pop_back(self):
        return _titanlib.IntVector_pop_back(self)

    def erase(self, *args):
        return _titanlib.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.IntVector_push_back(self, x)

    def front(self):
        return _titanlib.IntVector_front(self)

    def back(self):
        return _titanlib.IntVector_back(self)

    def assign(self, n, x):
        return _titanlib.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.IntVector_resize(self, *args)

    def insert(self, *args):
        return _titanlib.IntVector_insert(self, *args)

    def reserve(self, n):
        return _titanlib.IntVector_reserve(self, n)

    def capacity(self):
        return _titanlib.IntVector_capacity(self)
    __swig_destroy__ = _titanlib.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _titanlib.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.FloatVector___nonzero__(self)

    def __bool__(self):
        return _titanlib.FloatVector___bool__(self)

    def __len__(self):
        return _titanlib.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.FloatVector___setitem__(self, *args)

    def pop(self):
        return _titanlib.FloatVector_pop(self)

    def append(self, x):
        return _titanlib.FloatVector_append(self, x)

    def empty(self):
        return _titanlib.FloatVector_empty(self)

    def size(self):
        return _titanlib.FloatVector_size(self)

    def swap(self, v):
        return _titanlib.FloatVector_swap(self, v)

    def begin(self):
        return _titanlib.FloatVector_begin(self)

    def end(self):
        return _titanlib.FloatVector_end(self)

    def rbegin(self):
        return _titanlib.FloatVector_rbegin(self)

    def rend(self):
        return _titanlib.FloatVector_rend(self)

    def clear(self):
        return _titanlib.FloatVector_clear(self)

    def get_allocator(self):
        return _titanlib.FloatVector_get_allocator(self)

    def pop_back(self):
        return _titanlib.FloatVector_pop_back(self)

    def erase(self, *args):
        return _titanlib.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.FloatVector_push_back(self, x)

    def front(self):
        return _titanlib.FloatVector_front(self)

    def back(self):
        return _titanlib.FloatVector_back(self)

    def assign(self, n, x):
        return _titanlib.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _titanlib.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _titanlib.FloatVector_reserve(self, n)

    def capacity(self):
        return _titanlib.FloatVector_capacity(self)
    __swig_destroy__ = _titanlib.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _titanlib.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.FloatVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.FloatVector3___nonzero__(self)

    def __bool__(self):
        return _titanlib.FloatVector3___bool__(self)

    def __len__(self):
        return _titanlib.FloatVector3___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.FloatVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.FloatVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.FloatVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.FloatVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.FloatVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.FloatVector3___setitem__(self, *args)

    def pop(self):
        return _titanlib.FloatVector3_pop(self)

    def append(self, x):
        return _titanlib.FloatVector3_append(self, x)

    def empty(self):
        return _titanlib.FloatVector3_empty(self)

    def size(self):
        return _titanlib.FloatVector3_size(self)

    def swap(self, v):
        return _titanlib.FloatVector3_swap(self, v)

    def begin(self):
        return _titanlib.FloatVector3_begin(self)

    def end(self):
        return _titanlib.FloatVector3_end(self)

    def rbegin(self):
        return _titanlib.FloatVector3_rbegin(self)

    def rend(self):
        return _titanlib.FloatVector3_rend(self)

    def clear(self):
        return _titanlib.FloatVector3_clear(self)

    def get_allocator(self):
        return _titanlib.FloatVector3_get_allocator(self)

    def pop_back(self):
        return _titanlib.FloatVector3_pop_back(self)

    def erase(self, *args):
        return _titanlib.FloatVector3_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_FloatVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.FloatVector3_push_back(self, x)

    def front(self):
        return _titanlib.FloatVector3_front(self)

    def back(self):
        return _titanlib.FloatVector3_back(self)

    def assign(self, n, x):
        return _titanlib.FloatVector3_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.FloatVector3_resize(self, *args)

    def insert(self, *args):
        return _titanlib.FloatVector3_insert(self, *args)

    def reserve(self, n):
        return _titanlib.FloatVector3_reserve(self, n)

    def capacity(self):
        return _titanlib.FloatVector3_capacity(self)
    __swig_destroy__ = _titanlib.delete_FloatVector3
    __del__ = lambda self: None
FloatVector3_swigregister = _titanlib.FloatVector3_swigregister
FloatVector3_swigregister(FloatVector3)

class IntVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.IntVector2___nonzero__(self)

    def __bool__(self):
        return _titanlib.IntVector2___bool__(self)

    def __len__(self):
        return _titanlib.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.IntVector2___setitem__(self, *args)

    def pop(self):
        return _titanlib.IntVector2_pop(self)

    def append(self, x):
        return _titanlib.IntVector2_append(self, x)

    def empty(self):
        return _titanlib.IntVector2_empty(self)

    def size(self):
        return _titanlib.IntVector2_size(self)

    def swap(self, v):
        return _titanlib.IntVector2_swap(self, v)

    def begin(self):
        return _titanlib.IntVector2_begin(self)

    def end(self):
        return _titanlib.IntVector2_end(self)

    def rbegin(self):
        return _titanlib.IntVector2_rbegin(self)

    def rend(self):
        return _titanlib.IntVector2_rend(self)

    def clear(self):
        return _titanlib.IntVector2_clear(self)

    def get_allocator(self):
        return _titanlib.IntVector2_get_allocator(self)

    def pop_back(self):
        return _titanlib.IntVector2_pop_back(self)

    def erase(self, *args):
        return _titanlib.IntVector2_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_IntVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.IntVector2_push_back(self, x)

    def front(self):
        return _titanlib.IntVector2_front(self)

    def back(self):
        return _titanlib.IntVector2_back(self)

    def assign(self, n, x):
        return _titanlib.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _titanlib.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _titanlib.IntVector2_reserve(self, n)

    def capacity(self):
        return _titanlib.IntVector2_capacity(self)
    __swig_destroy__ = _titanlib.delete_IntVector2
    __del__ = lambda self: None
IntVector2_swigregister = _titanlib.IntVector2_swigregister
IntVector2_swigregister(IntVector2)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _titanlib.DoubleVector___bool__(self)

    def __len__(self):
        return _titanlib.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _titanlib.DoubleVector_pop(self)

    def append(self, x):
        return _titanlib.DoubleVector_append(self, x)

    def empty(self):
        return _titanlib.DoubleVector_empty(self)

    def size(self):
        return _titanlib.DoubleVector_size(self)

    def swap(self, v):
        return _titanlib.DoubleVector_swap(self, v)

    def begin(self):
        return _titanlib.DoubleVector_begin(self)

    def end(self):
        return _titanlib.DoubleVector_end(self)

    def rbegin(self):
        return _titanlib.DoubleVector_rbegin(self)

    def rend(self):
        return _titanlib.DoubleVector_rend(self)

    def clear(self):
        return _titanlib.DoubleVector_clear(self)

    def get_allocator(self):
        return _titanlib.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _titanlib.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _titanlib.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.DoubleVector_push_back(self, x)

    def front(self):
        return _titanlib.DoubleVector_front(self)

    def back(self):
        return _titanlib.DoubleVector_back(self)

    def assign(self, n, x):
        return _titanlib.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _titanlib.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _titanlib.DoubleVector_reserve(self, n)

    def capacity(self):
        return _titanlib.DoubleVector_capacity(self)
    __swig_destroy__ = _titanlib.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _titanlib.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _titanlib.FloatVector2___bool__(self)

    def __len__(self):
        return _titanlib.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _titanlib.FloatVector2_pop(self)

    def append(self, x):
        return _titanlib.FloatVector2_append(self, x)

    def empty(self):
        return _titanlib.FloatVector2_empty(self)

    def size(self):
        return _titanlib.FloatVector2_size(self)

    def swap(self, v):
        return _titanlib.FloatVector2_swap(self, v)

    def begin(self):
        return _titanlib.FloatVector2_begin(self)

    def end(self):
        return _titanlib.FloatVector2_end(self)

    def rbegin(self):
        return _titanlib.FloatVector2_rbegin(self)

    def rend(self):
        return _titanlib.FloatVector2_rend(self)

    def clear(self):
        return _titanlib.FloatVector2_clear(self)

    def get_allocator(self):
        return _titanlib.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _titanlib.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _titanlib.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_FloatVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.FloatVector2_push_back(self, x)

    def front(self):
        return _titanlib.FloatVector2_front(self)

    def back(self):
        return _titanlib.FloatVector2_back(self)

    def assign(self, n, x):
        return _titanlib.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _titanlib.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _titanlib.FloatVector2_reserve(self, n)

    def capacity(self):
        return _titanlib.FloatVector2_capacity(self)
    __swig_destroy__ = _titanlib.delete_FloatVector2
    __del__ = lambda self: None
FloatVector2_swigregister = _titanlib.FloatVector2_swigregister
FloatVector2_swigregister(FloatVector2)

class DoubleVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _titanlib.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _titanlib.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _titanlib.DoubleVector2___bool__(self)

    def __len__(self):
        return _titanlib.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _titanlib.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _titanlib.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _titanlib.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _titanlib.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _titanlib.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _titanlib.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _titanlib.DoubleVector2_pop(self)

    def append(self, x):
        return _titanlib.DoubleVector2_append(self, x)

    def empty(self):
        return _titanlib.DoubleVector2_empty(self)

    def size(self):
        return _titanlib.DoubleVector2_size(self)

    def swap(self, v):
        return _titanlib.DoubleVector2_swap(self, v)

    def begin(self):
        return _titanlib.DoubleVector2_begin(self)

    def end(self):
        return _titanlib.DoubleVector2_end(self)

    def rbegin(self):
        return _titanlib.DoubleVector2_rbegin(self)

    def rend(self):
        return _titanlib.DoubleVector2_rend(self)

    def clear(self):
        return _titanlib.DoubleVector2_clear(self)

    def get_allocator(self):
        return _titanlib.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _titanlib.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _titanlib.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        this = _titanlib.new_DoubleVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _titanlib.DoubleVector2_push_back(self, x)

    def front(self):
        return _titanlib.DoubleVector2_front(self)

    def back(self):
        return _titanlib.DoubleVector2_back(self)

    def assign(self, n, x):
        return _titanlib.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _titanlib.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _titanlib.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _titanlib.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _titanlib.DoubleVector2_capacity(self)
    __swig_destroy__ = _titanlib.delete_DoubleVector2
    __del__ = lambda self: None
DoubleVector2_swigregister = _titanlib.DoubleVector2_swigregister
DoubleVector2_swigregister(DoubleVector2)

TITANLIB_VERSION = _titanlib.TITANLIB_VERSION
__version__ = _titanlib.__version__

def version():
    return _titanlib.version()
version = _titanlib.version

def sct(lats, lons, elevs, values, num_min, num_max, inner_radius, outer_radius, num_iterations, num_min_prof, min_elev_diff, min_horizontal_scale, vertical_scale, pos, neg, eps2):
    return _titanlib.sct(lats, lons, elevs, values, num_min, num_max, inner_radius, outer_radius, num_iterations, num_min_prof, min_elev_diff, min_horizontal_scale, vertical_scale, pos, neg, eps2)
sct = _titanlib.sct

def range_check(values, min, max):
    return _titanlib.range_check(values, min, max)
range_check = _titanlib.range_check

def range_check_climatology(lats, lons, elevs, values, unixtime, pos, neg):
    return _titanlib.range_check_climatology(lats, lons, elevs, values, unixtime, pos, neg)
range_check_climatology = _titanlib.range_check_climatology

def buddy_check(*args):
    return _titanlib.buddy_check(*args)
buddy_check = _titanlib.buddy_check

def buddy_event_check(*args):
    return _titanlib.buddy_event_check(*args)
buddy_event_check = _titanlib.buddy_event_check

def isolation_check(*args):
    return _titanlib.isolation_check(*args)
isolation_check = _titanlib.isolation_check

def lag_reduction_filter(times, values, a=0.5, b=0.5, k1=0.25, k2=0.25, n=10):
    return _titanlib.lag_reduction_filter(times, values, a, b, k1, k2, n)
lag_reduction_filter = _titanlib.lag_reduction_filter

def set_omp_threads(num):
    return _titanlib.set_omp_threads(num)
set_omp_threads = _titanlib.set_omp_threads

def initialize_omp():
    return _titanlib.initialize_omp()
initialize_omp = _titanlib.initialize_omp

def clock():
    return _titanlib.clock()
clock = _titanlib.clock

def convert_coordinates(*args):
    return _titanlib.convert_coordinates(*args)
convert_coordinates = _titanlib.convert_coordinates

def convert_to_proj(lats, lons, proj4):
    return _titanlib.convert_to_proj(lats, lons, proj4)
convert_to_proj = _titanlib.convert_to_proj

def interpolate_to_points(input_lats, input_lons, input_values, output_lats, output_lons):
    return _titanlib.interpolate_to_points(input_lats, input_lons, input_values, output_lats, output_lons)
interpolate_to_points = _titanlib.interpolate_to_points

def deg2rad(deg):
    return _titanlib.deg2rad(deg)
deg2rad = _titanlib.deg2rad

def calc_distance(*args):
    return _titanlib.calc_distance(*args)
calc_distance = _titanlib.calc_distance

def compute_quantile(quantile, array):
    return _titanlib.compute_quantile(quantile, array)
compute_quantile = _titanlib.compute_quantile

def subset(input, indices):
    return _titanlib.subset(input, indices)
subset = _titanlib.subset

def test_array(v):
    return _titanlib.test_array(v)
test_array = _titanlib.test_array
class Dataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)
    __repr__ = _swig_repr

    def __init__(self, ilats, ilons, ielevs, ivalues):
        this = _titanlib.new_Dataset(ilats, ilons, ielevs, ivalues)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def range_check(self, *args):
        return _titanlib.Dataset_range_check(self, *args)

    def range_check_climatology(self, *args):
        return _titanlib.Dataset_range_check_climatology(self, *args)

    def sct(self, *args):
        return _titanlib.Dataset_sct(self, *args)

    def buddy_check(self, *args):
        return _titanlib.Dataset_buddy_check(self, *args)

    def buddy_event_check(self, *args):
        return _titanlib.Dataset_buddy_event_check(self, *args)

    def isolation_check(self, num_min, radius, vertical_radius):
        return _titanlib.Dataset_isolation_check(self, num_min, radius, vertical_radius)
    __swig_setmethods__["lats"] = _titanlib.Dataset_lats_set
    __swig_getmethods__["lats"] = _titanlib.Dataset_lats_get
    if _newclass:
        lats = _swig_property(_titanlib.Dataset_lats_get, _titanlib.Dataset_lats_set)
    __swig_setmethods__["lons"] = _titanlib.Dataset_lons_set
    __swig_getmethods__["lons"] = _titanlib.Dataset_lons_get
    if _newclass:
        lons = _swig_property(_titanlib.Dataset_lons_get, _titanlib.Dataset_lons_set)
    __swig_setmethods__["elevs"] = _titanlib.Dataset_elevs_set
    __swig_getmethods__["elevs"] = _titanlib.Dataset_elevs_get
    if _newclass:
        elevs = _swig_property(_titanlib.Dataset_elevs_get, _titanlib.Dataset_elevs_set)
    __swig_setmethods__["values"] = _titanlib.Dataset_values_set
    __swig_getmethods__["values"] = _titanlib.Dataset_values_get
    if _newclass:
        values = _swig_property(_titanlib.Dataset_values_get, _titanlib.Dataset_values_set)
    __swig_setmethods__["flags"] = _titanlib.Dataset_flags_set
    __swig_getmethods__["flags"] = _titanlib.Dataset_flags_get
    if _newclass:
        flags = _swig_property(_titanlib.Dataset_flags_get, _titanlib.Dataset_flags_set)
    __swig_destroy__ = _titanlib.delete_Dataset
    __del__ = lambda self: None
Dataset_swigregister = _titanlib.Dataset_swigregister
Dataset_swigregister(Dataset)

class KDTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KDTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KDTree, name)
    __repr__ = _swig_repr

    def __init__(self, lats, lons):
        this = _titanlib.new_KDTree(lats, lons)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nearest_neighbour(self, *args):
        return _titanlib.KDTree_get_nearest_neighbour(self, *args)

    def get_neighbours(self, lat, lon, radius, num_max, include_match):
        return _titanlib.KDTree_get_neighbours(self, lat, lon, radius, num_max, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, num_max, include_match):
        return _titanlib.KDTree_get_neighbours_with_distance(self, lat, lon, radius, num_max, include_match)

    def get_num_neighbours(self, lat, lon, radius, num_max, include_match):
        return _titanlib.KDTree_get_num_neighbours(self, lat, lon, radius, num_max, include_match)
    __swig_destroy__ = _titanlib.delete_KDTree
    __del__ = lambda self: None
KDTree_swigregister = _titanlib.KDTree_swigregister
KDTree_swigregister(KDTree)

# This file is compatible with both classic and new-style classes.


