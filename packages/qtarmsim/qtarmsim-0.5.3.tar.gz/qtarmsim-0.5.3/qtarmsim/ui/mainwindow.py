# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindow.ui'
##
## Created by: Qt User Interface Compiler version 5.15.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import (QCoreApplication, QDate, QDateTime, QMetaObject,
    QObject, QPoint, QRect, QSize, QTime, QUrl, Qt)
from PySide2.QtGui import (QBrush, QColor, QConicalGradient, QCursor, QFont,
    QFontDatabase, QIcon, QKeySequence, QLinearGradient, QPalette, QPainter,
    QPixmap, QRadialGradient)
from PySide2.QtWidgets import *

from ..widget.myqtreeview import MyQTreeView
from ..widget.memorylcdview import MemoryLCDView


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(925, 712)
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setWindowTitle(u"QtARMSim")
        MainWindow.setTabShape(QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(True)
        MainWindow.setDockOptions(QMainWindow.AllowNestedDocks|QMainWindow.AllowTabbedDocks|QMainWindow.AnimatedDocks)
        self.actionWhats_This = QAction(MainWindow)
        self.actionWhats_This.setObjectName(u"actionWhats_This")
        icon = QIcon()
        iconThemeName = u"help-whatsthis"
        if QIcon.hasThemeIcon(iconThemeName):
            icon = QIcon.fromTheme(iconThemeName)
        else:
            icon.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon.addFile(u":themes/breeze/32/help-whatsthis.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionWhats_This.setIcon(icon)
        self.actionAbout_Qt_ARMSim = QAction(MainWindow)
        self.actionAbout_Qt_ARMSim.setObjectName(u"actionAbout_Qt_ARMSim")
        icon1 = QIcon()
        iconThemeName = u"help-about"
        if QIcon.hasThemeIcon(iconThemeName):
            icon1 = QIcon.fromTheme(iconThemeName)
        else:
            icon1.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon1.addFile(u":themes/breeze/32/help-about.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionAbout_Qt_ARMSim.setIcon(icon1)
        self.actionHelp = QAction(MainWindow)
        self.actionHelp.setObjectName(u"actionHelp")
        icon2 = QIcon()
        iconThemeName = u"help-contents"
        if QIcon.hasThemeIcon(iconThemeName):
            icon2 = QIcon.fromTheme(iconThemeName)
        else:
            icon2.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon2.addFile(u":themes/breeze/22/help-contents.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionHelp.setIcon(icon2)
        self.actionAbout_ARMSim = QAction(MainWindow)
        self.actionAbout_ARMSim.setObjectName(u"actionAbout_ARMSim")
        self.actionAbout_ARMSim.setIcon(icon1)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        icon3 = QIcon()
        iconThemeName = u"document-new"
        if QIcon.hasThemeIcon(iconThemeName):
            icon3 = QIcon.fromTheme(iconThemeName)
        else:
            icon3.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon3.addFile(u":themes/breeze/32/document-new.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionNew.setIcon(icon3)
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        icon4 = QIcon()
        iconThemeName = u"document-open"
        if QIcon.hasThemeIcon(iconThemeName):
            icon4 = QIcon.fromTheme(iconThemeName)
        else:
            icon4.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon4.addFile(u":themes/breeze/32/document-open.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionOpen.setIcon(icon4)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon5 = QIcon()
        iconThemeName = u"document-save"
        if QIcon.hasThemeIcon(iconThemeName):
            icon5 = QIcon.fromTheme(iconThemeName)
        else:
            icon5.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon5.addFile(u":themes/breeze/32/document-save.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionSave.setIcon(icon5)
        self.actionSave_As = QAction(MainWindow)
        self.actionSave_As.setObjectName(u"actionSave_As")
        icon6 = QIcon()
        iconThemeName = u"document-save-as"
        if QIcon.hasThemeIcon(iconThemeName):
            icon6 = QIcon.fromTheme(iconThemeName)
        else:
            icon6.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon6.addFile(u":themes/breeze/32/document-save-as.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionSave_As.setIcon(icon6)
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        icon7 = QIcon()
        iconThemeName = u"document-print"
        if QIcon.hasThemeIcon(iconThemeName):
            icon7 = QIcon.fromTheme(iconThemeName)
        else:
            icon7.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon7.addFile(u":themes/breeze/32/document-print.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionPrint.setIcon(icon7)
        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setObjectName(u"actionQuit")
        icon8 = QIcon()
        iconThemeName = u"application-exit"
        if QIcon.hasThemeIcon(iconThemeName):
            icon8 = QIcon.fromTheme(iconThemeName)
        else:
            icon8.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon8.addFile(u":themes/breeze/32/application-exit.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionQuit.setIcon(icon8)
        self.actionRun = QAction(MainWindow)
        self.actionRun.setObjectName(u"actionRun")
        icon9 = QIcon()
        iconThemeName = u"system-run"
        if QIcon.hasThemeIcon(iconThemeName):
            icon9 = QIcon.fromTheme(iconThemeName)
        else:
            icon9.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon9.addFile(u":themes/breeze/24/system-run.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionRun.setIcon(icon9)
        self.actionStepInto = QAction(MainWindow)
        self.actionStepInto.setObjectName(u"actionStepInto")
        icon10 = QIcon()
        iconThemeName = u"debug-step-into"
        if QIcon.hasThemeIcon(iconThemeName):
            icon10 = QIcon.fromTheme(iconThemeName)
        else:
            icon10.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon10.addFile(u":themes/breeze/24/debug-step-into.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionStepInto.setIcon(icon10)
        self.actionShow_Statusbar = QAction(MainWindow)
        self.actionShow_Statusbar.setObjectName(u"actionShow_Statusbar")
        self.actionShow_Statusbar.setCheckable(True)
        self.actionShow_Statusbar.setChecked(True)
        self.actionShow_Toolbar = QAction(MainWindow)
        self.actionShow_Toolbar.setObjectName(u"actionShow_Toolbar")
        self.actionShow_Toolbar.setCheckable(True)
        self.actionShow_Toolbar.setChecked(True)
        self.actionShow_Registers = QAction(MainWindow)
        self.actionShow_Registers.setObjectName(u"actionShow_Registers")
        self.actionShow_Registers.setCheckable(True)
        self.actionShow_Registers.setChecked(True)
        self.actionShow_Memory = QAction(MainWindow)
        self.actionShow_Memory.setObjectName(u"actionShow_Memory")
        self.actionShow_Memory.setCheckable(True)
        self.actionShow_Memory.setChecked(True)
        self.actionDefault_Layout = QAction(MainWindow)
        self.actionDefault_Layout.setObjectName(u"actionDefault_Layout")
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.action_Undo = QAction(MainWindow)
        self.action_Undo.setObjectName(u"action_Undo")
        icon11 = QIcon()
        iconThemeName = u"edit-undo"
        if QIcon.hasThemeIcon(iconThemeName):
            icon11 = QIcon.fromTheme(iconThemeName)
        else:
            icon11.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon11.addFile(u":themes/breeze/32/edit-undo.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.action_Undo.setIcon(icon11)
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        icon12 = QIcon()
        iconThemeName = u"edit-redo"
        if QIcon.hasThemeIcon(iconThemeName):
            icon12 = QIcon.fromTheme(iconThemeName)
        else:
            icon12.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon12.addFile(u":themes/breeze/32/edit-redo.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionRedo.setIcon(icon12)
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        icon13 = QIcon()
        iconThemeName = u"edit-cut"
        if QIcon.hasThemeIcon(iconThemeName):
            icon13 = QIcon.fromTheme(iconThemeName)
        else:
            icon13.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon13.addFile(u":themes/breeze/24/edit-cut.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionCut.setIcon(icon13)
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        icon14 = QIcon()
        iconThemeName = u"edit-copy"
        if QIcon.hasThemeIcon(iconThemeName):
            icon14 = QIcon.fromTheme(iconThemeName)
        else:
            icon14.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon14.addFile(u":themes/breeze/24/edit-copy.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionCopy.setIcon(icon14)
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        icon15 = QIcon()
        iconThemeName = u"edit-paste"
        if QIcon.hasThemeIcon(iconThemeName):
            icon15 = QIcon.fromTheme(iconThemeName)
        else:
            icon15.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon15.addFile(u":themes/breeze/24/edit-paste.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionPaste.setIcon(icon15)
        self.actionSelect_All = QAction(MainWindow)
        self.actionSelect_All.setObjectName(u"actionSelect_All")
        icon16 = QIcon()
        iconThemeName = u"edit-select-all"
        if QIcon.hasThemeIcon(iconThemeName):
            icon16 = QIcon.fromTheme(iconThemeName)
        else:
            icon16.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon16.addFile(u":themes/breeze/24/edit-select-all.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionSelect_All.setIcon(icon16)
        self.actionShow_Messages = QAction(MainWindow)
        self.actionShow_Messages.setObjectName(u"actionShow_Messages")
        self.actionShow_Messages.setCheckable(True)
        self.actionShow_Messages.setChecked(True)
        self.actionStepOver = QAction(MainWindow)
        self.actionStepOver.setObjectName(u"actionStepOver")
        icon17 = QIcon()
        iconThemeName = u"debug-step-over"
        if QIcon.hasThemeIcon(iconThemeName):
            icon17 = QIcon.fromTheme(iconThemeName)
        else:
            icon17.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon17.addFile(u":themes/breeze/24/debug-step-over.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionStepOver.setIcon(icon17)
        self.actionRestart = QAction(MainWindow)
        self.actionRestart.setObjectName(u"actionRestart")
        icon18 = QIcon()
        iconThemeName = u"view-refresh"
        if QIcon.hasThemeIcon(iconThemeName):
            icon18 = QIcon.fromTheme(iconThemeName)
        else:
            icon18.addFile(u"../../../../../../.designer/backup", QSize(), QIcon.Normal, QIcon.Off)
            icon18.addFile(u":themes/breeze/32/view-refresh.svg", QSize(), QIcon.Normal, QIcon.On)
        
        self.actionRestart.setIcon(icon18)
        self.actionShow_Memory_Dump = QAction(MainWindow)
        self.actionShow_Memory_Dump.setObjectName(u"actionShow_Memory_Dump")
        self.actionShow_Memory_Dump.setCheckable(True)
        self.actionShow_Memory_Dump.setChecked(True)
        self.actionShow_LCD = QAction(MainWindow)
        self.actionShow_LCD.setObjectName(u"actionShow_LCD")
        self.actionShow_LCD.setCheckable(True)
        self.actionShow_LCD.setChecked(True)
        self.actionShow_Terminal = QAction(MainWindow)
        self.actionShow_Terminal.setObjectName(u"actionShow_Terminal")
        self.actionShow_Terminal.setCheckable(True)
        self.actionShow_Terminal.setChecked(True)
        self.actionadd = QAction(MainWindow)
        self.actionadd.setObjectName(u"actionadd")
        self.actionadd_2 = QAction(MainWindow)
        self.actionadd_2.setObjectName(u"actionadd_2")
        self.actionFull_Screen_Mode = QAction(MainWindow)
        self.actionFull_Screen_Mode.setObjectName(u"actionFull_Screen_Mode")
        self.actionFull_Screen_Mode.setCheckable(True)
        self.actionCompact_Layout = QAction(MainWindow)
        self.actionCompact_Layout.setObjectName(u"actionCompact_Layout")
        self.actionShow_Simulator_Output = QAction(MainWindow)
        self.actionShow_Simulator_Output.setObjectName(u"actionShow_Simulator_Output")
        self.actionShow_Simulator_Output.setCheckable(True)
        self.actionShow_Simulator_Output.setChecked(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.centralwidget.setEnabled(True)
        sizePolicy1 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(1)
        sizePolicy1.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy1)
        self.centralwidget.setMaximumSize(QSize(16777215, 16777215))
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setSizeConstraint(QLayout.SetMaximumSize)
        self.tabWidgetCode = QTabWidget(self.centralwidget)
        self.tabWidgetCode.setObjectName(u"tabWidgetCode")
        sizePolicy2 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.tabWidgetCode.sizePolicy().hasHeightForWidth())
        self.tabWidgetCode.setSizePolicy(sizePolicy2)
        self.tabWidgetCode.setMinimumSize(QSize(400, 300))
        self.tabWidgetCode.setTabPosition(QTabWidget.South)
        self.tabSource = QWidget()
        self.tabSource.setObjectName(u"tabSource")
        self.verticalLayoutSource = QVBoxLayout(self.tabSource)
        self.verticalLayoutSource.setObjectName(u"verticalLayoutSource")
        self.tabWidgetCode.addTab(self.tabSource, "")
        self.tabARMSim = QWidget()
        self.tabARMSim.setObjectName(u"tabARMSim")
        self.verticalLayoutARMSim = QVBoxLayout(self.tabARMSim)
        self.verticalLayoutARMSim.setObjectName(u"verticalLayoutARMSim")
        self.tabTabARMSim = QTabWidget(self.tabARMSim)
        self.tabTabARMSim.setObjectName(u"tabTabARMSim")
        self.tabTabARMSim.setTabPosition(QTabWidget.South)
        self.tab_3 = QWidget()
        self.tab_3.setObjectName(u"tab_3")
        self.tabTabARMSim.addTab(self.tab_3, "")
        self.tab_4 = QWidget()
        self.tab_4.setObjectName(u"tab_4")
        self.tabTabARMSim.addTab(self.tab_4, "")

        self.verticalLayoutARMSim.addWidget(self.tabTabARMSim)

        self.tabWidgetCode.addTab(self.tabARMSim, "")

        self.verticalLayout.addWidget(self.tabWidgetCode)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 925, 32))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuExamples = QMenu(self.menuFile)
        self.menuExamples.setObjectName(u"menuExamples")
        self.menuRun = QMenu(self.menubar)
        self.menuRun.setObjectName(u"menuRun")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QStatusBar(MainWindow)
        self.statusBar.setObjectName(u"statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        sizePolicy.setHeightForWidth(self.toolBar.sizePolicy().hasHeightForWidth())
        self.toolBar.setSizePolicy(sizePolicy)
        self.toolBar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBar)
        self.dockWidgetRegisters = QDockWidget(MainWindow)
        self.dockWidgetRegisters.setObjectName(u"dockWidgetRegisters")
        sizePolicy.setHeightForWidth(self.dockWidgetRegisters.sizePolicy().hasHeightForWidth())
        self.dockWidgetRegisters.setSizePolicy(sizePolicy)
        self.dockWidgetRegisters.setMinimumSize(QSize(180, 126))
        self.dockWidgetRegisters.setAllowedAreas(Qt.LeftDockWidgetArea|Qt.RightDockWidgetArea)
        self.dockWidgetContentsRegisters = QWidget()
        self.dockWidgetContentsRegisters.setObjectName(u"dockWidgetContentsRegisters")
        sizePolicy.setHeightForWidth(self.dockWidgetContentsRegisters.sizePolicy().hasHeightForWidth())
        self.dockWidgetContentsRegisters.setSizePolicy(sizePolicy)
        self.verticalLayout_6 = QVBoxLayout(self.dockWidgetContentsRegisters)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.treeViewRegisters = MyQTreeView(self.dockWidgetContentsRegisters)
        self.treeViewRegisters.setObjectName(u"treeViewRegisters")
        self.treeViewRegisters.setEnabled(True)
        self.treeViewRegisters.setFrameShape(QFrame.NoFrame)
        self.treeViewRegisters.setFrameShadow(QFrame.Plain)
        self.treeViewRegisters.setLineWidth(0)
        self.treeViewRegisters.setAlternatingRowColors(True)

        self.verticalLayout_6.addWidget(self.treeViewRegisters)

        self.dockWidgetRegisters.setWidget(self.dockWidgetContentsRegisters)
        MainWindow.addDockWidget(Qt.LeftDockWidgetArea, self.dockWidgetRegisters)
        self.dockWidgetMemory = QDockWidget(MainWindow)
        self.dockWidgetMemory.setObjectName(u"dockWidgetMemory")
        self.dockWidgetMemory.setMinimumSize(QSize(180, 126))
        self.dockWidgetMemory.setAllowedAreas(Qt.LeftDockWidgetArea|Qt.RightDockWidgetArea)
        self.dockWidgetContentsMemory = QWidget()
        self.dockWidgetContentsMemory.setObjectName(u"dockWidgetContentsMemory")
        self.dockWidgetMemoryLayout = QVBoxLayout(self.dockWidgetContentsMemory)
        self.dockWidgetMemoryLayout.setObjectName(u"dockWidgetMemoryLayout")
        self.treeViewMemory = MyQTreeView(self.dockWidgetContentsMemory)
        self.treeViewMemory.setObjectName(u"treeViewMemory")
        self.treeViewMemory.setFrameShape(QFrame.NoFrame)
        self.treeViewMemory.setFrameShadow(QFrame.Plain)
        self.treeViewMemory.setLineWidth(0)
        self.treeViewMemory.setAlternatingRowColors(True)

        self.dockWidgetMemoryLayout.addWidget(self.treeViewMemory)

        self.dockWidgetMemory.setWidget(self.dockWidgetContentsMemory)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dockWidgetMemory)
        self.dockWidgetMessages = QDockWidget(MainWindow)
        self.dockWidgetMessages.setObjectName(u"dockWidgetMessages")
        self.dockWidgetMessages.setAllowedAreas(Qt.BottomDockWidgetArea)
        self.dockWidgetMessagesContents = QWidget()
        self.dockWidgetMessagesContents.setObjectName(u"dockWidgetMessagesContents")
        self.verticalLayout_5 = QVBoxLayout(self.dockWidgetMessagesContents)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.textEditMessages = QTextEdit(self.dockWidgetMessagesContents)
        self.textEditMessages.setObjectName(u"textEditMessages")
        self.textEditMessages.setEnabled(True)
        sizePolicy2.setHeightForWidth(self.textEditMessages.sizePolicy().hasHeightForWidth())
        self.textEditMessages.setSizePolicy(sizePolicy2)
        self.textEditMessages.setMaximumSize(QSize(16777215, 16777215))
        self.textEditMessages.setTextInteractionFlags(Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)

        self.verticalLayout_5.addWidget(self.textEditMessages)

        self.dockWidgetMessages.setWidget(self.dockWidgetMessagesContents)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockWidgetMessages)
        self.dockWidgetMemoryDump = QDockWidget(MainWindow)
        self.dockWidgetMemoryDump.setObjectName(u"dockWidgetMemoryDump")
        self.dockWidgetMemoryDumpContents = QWidget()
        self.dockWidgetMemoryDumpContents.setObjectName(u"dockWidgetMemoryDumpContents")
        self.verticalLayout_2 = QVBoxLayout(self.dockWidgetMemoryDumpContents)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.tabWidgetMemoryDump = QTabWidget(self.dockWidgetMemoryDumpContents)
        self.tabWidgetMemoryDump.setObjectName(u"tabWidgetMemoryDump")
        self.tabWidgetMemoryDump.setTabPosition(QTabWidget.West)
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.tabWidgetMemoryDump.addTab(self.tab, "")
        self.tab_2 = QWidget()
        self.tab_2.setObjectName(u"tab_2")
        self.tabWidgetMemoryDump.addTab(self.tab_2, "")

        self.verticalLayout_2.addWidget(self.tabWidgetMemoryDump)

        self.dockWidgetMemoryDump.setWidget(self.dockWidgetMemoryDumpContents)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockWidgetMemoryDump)
        self.dockWidgetLCD = QDockWidget(MainWindow)
        self.dockWidgetLCD.setObjectName(u"dockWidgetLCD")
        sizePolicy.setHeightForWidth(self.dockWidgetLCD.sizePolicy().hasHeightForWidth())
        self.dockWidgetLCD.setSizePolicy(sizePolicy)
        self.dockWidgetLCDContents = QWidget()
        self.dockWidgetLCDContents.setObjectName(u"dockWidgetLCDContents")
        sizePolicy.setHeightForWidth(self.dockWidgetLCDContents.sizePolicy().hasHeightForWidth())
        self.dockWidgetLCDContents.setSizePolicy(sizePolicy)
        self.horizontalLayout = QHBoxLayout(self.dockWidgetLCDContents)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.horizontalLayout.setSizeConstraint(QLayout.SetDefaultConstraint)
        self.scrollArea = QScrollArea(self.dockWidgetLCDContents)
        self.scrollArea.setObjectName(u"scrollArea")
        sizePolicy3 = QSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.MinimumExpanding)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy3)
        self.scrollArea.setFrameShape(QFrame.StyledPanel)
        self.scrollArea.setFrameShadow(QFrame.Plain)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignTop)
        self.scrollAreaWidgetContents = QWidget()
        self.scrollAreaWidgetContents.setObjectName(u"scrollAreaWidgetContents")
        self.scrollAreaWidgetContents.setGeometry(QRect(0, 0, 360, 234))
        self.horizontalLayout_4 = QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.horizontalSpacerLCD1 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_4.addItem(self.horizontalSpacerLCD1)

        self.memoryLCDView = MemoryLCDView(self.scrollAreaWidgetContents)
        self.memoryLCDView.setObjectName(u"memoryLCDView")
        sizePolicy.setHeightForWidth(self.memoryLCDView.sizePolicy().hasHeightForWidth())
        self.memoryLCDView.setSizePolicy(sizePolicy)
        self.memoryLCDView.setSizeAdjustPolicy(QAbstractScrollArea.AdjustIgnored)

        self.horizontalLayout_4.addWidget(self.memoryLCDView)

        self.horizontalSpacerLCD2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_4.addItem(self.horizontalSpacerLCD2)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.horizontalLayout.addWidget(self.scrollArea)

        self.dockWidgetLCD.setWidget(self.dockWidgetLCDContents)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockWidgetLCD)
        self.dockWidgetTerminal = QDockWidget(MainWindow)
        self.dockWidgetTerminal.setObjectName(u"dockWidgetTerminal")
        self.dockWidgetTerminalContents = QWidget()
        self.dockWidgetTerminalContents.setObjectName(u"dockWidgetTerminalContents")
        self.verticalLayout_3 = QVBoxLayout(self.dockWidgetTerminalContents)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.textBrowserTerminal = QTextBrowser(self.dockWidgetTerminalContents)
        self.textBrowserTerminal.setObjectName(u"textBrowserTerminal")

        self.verticalLayout_3.addWidget(self.textBrowserTerminal)

        self.horizontalLayout_2 = QHBoxLayout()
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.lineEditTerminal = QLineEdit(self.dockWidgetTerminalContents)
        self.lineEditTerminal.setObjectName(u"lineEditTerminal")

        self.horizontalLayout_2.addWidget(self.lineEditTerminal)

        self.pushButtonTerminal = QPushButton(self.dockWidgetTerminalContents)
        self.pushButtonTerminal.setObjectName(u"pushButtonTerminal")

        self.horizontalLayout_2.addWidget(self.pushButtonTerminal)


        self.verticalLayout_3.addLayout(self.horizontalLayout_2)

        self.dockWidgetTerminal.setWidget(self.dockWidgetTerminalContents)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockWidgetTerminal)
        self.dockWidgetSimulatorOutput = QDockWidget(MainWindow)
        self.dockWidgetSimulatorOutput.setObjectName(u"dockWidgetSimulatorOutput")
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        sizePolicy.setHeightForWidth(self.dockWidgetContents.sizePolicy().hasHeightForWidth())
        self.dockWidgetContents.setSizePolicy(sizePolicy)
        self.verticalLayout_4 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.textBrowserSimulatorOutput = QTextBrowser(self.dockWidgetContents)
        self.textBrowserSimulatorOutput.setObjectName(u"textBrowserSimulatorOutput")

        self.verticalLayout_4.addWidget(self.textBrowserSimulatorOutput)

        self.dockWidgetSimulatorOutput.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockWidgetSimulatorOutput)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuRun.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.menuExamples.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuRun.addAction(self.actionRun)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionStepInto)
        self.menuRun.addAction(self.actionStepOver)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionRestart)
        self.menuHelp.addAction(self.actionHelp)
        self.menuHelp.addAction(self.actionWhats_This)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_Qt_ARMSim)
        self.menuHelp.addAction(self.actionAbout_ARMSim)
        self.menuView.addAction(self.actionShow_Statusbar)
        self.menuView.addAction(self.actionShow_Toolbar)
        self.menuView.addAction(self.actionShow_Registers)
        self.menuView.addAction(self.actionShow_Memory)
        self.menuView.addAction(self.actionShow_Messages)
        self.menuView.addAction(self.actionShow_Memory_Dump)
        self.menuView.addAction(self.actionShow_LCD)
        self.menuView.addAction(self.actionShow_Terminal)
        self.menuView.addAction(self.actionShow_Simulator_Output)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionDefault_Layout)
        self.menuView.addAction(self.actionCompact_Layout)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFull_Screen_Mode)
        self.menuEdit.addAction(self.action_Undo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSelect_All)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionPreferences)
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addAction(self.actionSave)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_Undo)
        self.toolBar.addAction(self.actionRedo)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRun)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionStepInto)
        self.toolBar.addAction(self.actionStepOver)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRestart)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionWhats_This)

        self.retranslateUi(MainWindow)

        self.tabWidgetCode.setCurrentIndex(0)
        self.tabTabARMSim.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        self.actionWhats_This.setText(QCoreApplication.translate("MainWindow", u"What's &This?", None))
#if QT_CONFIG(statustip)
        self.actionWhats_This.setStatusTip(QCoreApplication.translate("MainWindow", u"\u00bfQu\u00e9 es esto?", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionWhats_This.setWhatsThis(QCoreApplication.translate("MainWindow", u"Activa la ayuda", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(shortcut)
        self.actionWhats_This.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout_Qt_ARMSim.setText(QCoreApplication.translate("MainWindow", u"&About QtARMSim", None))
#if QT_CONFIG(statustip)
        self.actionAbout_Qt_ARMSim.setStatusTip(QCoreApplication.translate("MainWindow", u"Sobre spim", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionAbout_Qt_ARMSim.setWhatsThis(QCoreApplication.translate("MainWindow", u"Imprime en el panel mensajes informaci\u00f3n sobre XSPIM", None))
#endif // QT_CONFIG(whatsthis)
        self.actionHelp.setText(QCoreApplication.translate("MainWindow", u"QtARMSim &Help", None))
#if QT_CONFIG(shortcut)
        self.actionHelp.setShortcut(QCoreApplication.translate("MainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout_ARMSim.setText(QCoreApplication.translate("MainWindow", u"A&bout ARMSim", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"&New...", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"&Open...", None))
#if QT_CONFIG(tooltip)
        self.actionOpen.setToolTip(QCoreApplication.translate("MainWindow", u"Open ARM assembler file", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"&Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_As.setText(QCoreApplication.translate("MainWindow", u"Save &As...", None))
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", u"&Print...", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionQuit.setText(QCoreApplication.translate("MainWindow", u"&Quit", None))
#if QT_CONFIG(shortcut)
        self.actionQuit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionRun.setText(QCoreApplication.translate("MainWindow", u"&Run", None))
#if QT_CONFIG(shortcut)
        self.actionRun.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionStepInto.setText(QCoreApplication.translate("MainWindow", u"Step &Into", None))
#if QT_CONFIG(tooltip)
        self.actionStepInto.setToolTip(QCoreApplication.translate("MainWindow", u"Step Into", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionStepInto.setShortcut(QCoreApplication.translate("MainWindow", u"F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionShow_Statusbar.setText(QCoreApplication.translate("MainWindow", u"Show St&atusbar", None))
        self.actionShow_Toolbar.setText(QCoreApplication.translate("MainWindow", u"Show &Toolbar", None))
        self.actionShow_Registers.setText(QCoreApplication.translate("MainWindow", u"Show &Registers", None))
        self.actionShow_Memory.setText(QCoreApplication.translate("MainWindow", u"Show &Memory", None))
        self.actionDefault_Layout.setText(QCoreApplication.translate("MainWindow", u"De&fault Layout", None))
#if QT_CONFIG(shortcut)
        self.actionDefault_Layout.setShortcut(QCoreApplication.translate("MainWindow", u"F3", None))
#endif // QT_CONFIG(shortcut)
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"P&references...", None))
#if QT_CONFIG(shortcut)
        self.actionPreferences.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+P", None))
#endif // QT_CONFIG(shortcut)
        self.action_Undo.setText(QCoreApplication.translate("MainWindow", u"&Undo", None))
#if QT_CONFIG(shortcut)
        self.action_Undo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Re&do", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cu&t", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"&Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"&Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelect_All.setText(QCoreApplication.translate("MainWindow", u"Select &All", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionShow_Messages.setText(QCoreApplication.translate("MainWindow", u"Show M&essages", None))
        self.actionStepOver.setText(QCoreApplication.translate("MainWindow", u"Step &Over", None))
#if QT_CONFIG(tooltip)
        self.actionStepOver.setToolTip(QCoreApplication.translate("MainWindow", u"Step Over", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionStepOver.setShortcut(QCoreApplication.translate("MainWindow", u"F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionRestart.setText(QCoreApplication.translate("MainWindow", u"Re&start", None))
#if QT_CONFIG(tooltip)
        self.actionRestart.setToolTip(QCoreApplication.translate("MainWindow", u"Restart Simulation", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionRestart.setShortcut(QCoreApplication.translate("MainWindow", u"F4", None))
#endif // QT_CONFIG(shortcut)
        self.actionShow_Memory_Dump.setText(QCoreApplication.translate("MainWindow", u"Show Memory &Dump", None))
        self.actionShow_LCD.setText(QCoreApplication.translate("MainWindow", u"Show &LCD", None))
#if QT_CONFIG(tooltip)
        self.actionShow_LCD.setToolTip(QCoreApplication.translate("MainWindow", u"Show LCD", None))
#endif // QT_CONFIG(tooltip)
        self.actionShow_Terminal.setText(QCoreApplication.translate("MainWindow", u"Show Term&inal", None))
        self.actionadd.setText(QCoreApplication.translate("MainWindow", u"add", None))
        self.actionadd_2.setText(QCoreApplication.translate("MainWindow", u"add", None))
        self.actionFull_Screen_Mode.setText(QCoreApplication.translate("MainWindow", u"Full Screen Mode", None))
#if QT_CONFIG(shortcut)
        self.actionFull_Screen_Mode.setShortcut(QCoreApplication.translate("MainWindow", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionCompact_Layout.setText(QCoreApplication.translate("MainWindow", u"&Compact Layout", None))
#if QT_CONFIG(shortcut)
        self.actionCompact_Layout.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F3", None))
#endif // QT_CONFIG(shortcut)
        self.actionShow_Simulator_Output.setText(QCoreApplication.translate("MainWindow", u"Show Simulator &Output", None))
#if QT_CONFIG(whatsthis)
        self.tabSource.setWhatsThis(QCoreApplication.translate("MainWindow", u"The Editor tab is used to edit the assembler  code that is going to be simmulated", None))
#endif // QT_CONFIG(whatsthis)
        self.tabWidgetCode.setTabText(self.tabWidgetCode.indexOf(self.tabSource), QCoreApplication.translate("MainWindow", u"Editor", None))
#if QT_CONFIG(whatsthis)
        self.tabARMSim.setWhatsThis(QCoreApplication.translate("MainWindow", u"The ArmSim tab is used to inspect and simmulate the ARM machine code generated after assembling the source code", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(accessibility)
        self.tabARMSim.setAccessibleName("")
#endif // QT_CONFIG(accessibility)
        self.tabTabARMSim.setTabText(self.tabTabARMSim.indexOf(self.tab_3), QCoreApplication.translate("MainWindow", u"Tab 1", None))
        self.tabTabARMSim.setTabText(self.tabTabARMSim.indexOf(self.tab_4), QCoreApplication.translate("MainWindow", u"Tab 2", None))
        self.tabWidgetCode.setTabText(self.tabWidgetCode.indexOf(self.tabARMSim), QCoreApplication.translate("MainWindow", u"ARMSim", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"&File", None))
        self.menuExamples.setTitle(QCoreApplication.translate("MainWindow", u"&Examples", None))
        self.menuRun.setTitle(QCoreApplication.translate("MainWindow", u"&Run", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"&Help", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"&View", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"&Edit", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"Barra de herramientas", None))
#if QT_CONFIG(tooltip)
        self.dockWidgetRegisters.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.dockWidgetRegisters.setWhatsThis(QCoreApplication.translate("MainWindow", u"The Registers dock shows the contents of the registers", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetRegisters.setWindowTitle(QCoreApplication.translate("MainWindow", u"Registers", None))
#if QT_CONFIG(tooltip)
        self.dockWidgetMemory.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.dockWidgetMemory.setWhatsThis(QCoreApplication.translate("MainWindow", u"The Memory dock shows the contents of the memory", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetMemory.setWindowTitle(QCoreApplication.translate("MainWindow", u"Memory", None))
#if QT_CONFIG(whatsthis)
        self.dockWidgetMessages.setWhatsThis(QCoreApplication.translate("MainWindow", u"The Messages dock shows QtARMSim and ARMSim messages", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetMessages.setWindowTitle(QCoreApplication.translate("MainWindow", u"Messages", None))
#if QT_CONFIG(whatsthis)
        self.textEditMessages.setWhatsThis("")
#endif // QT_CONFIG(whatsthis)
        self.textEditMessages.setDocumentTitle("")
#if QT_CONFIG(whatsthis)
        self.dockWidgetMemoryDump.setWhatsThis(QCoreApplication.translate("MainWindow", u"The Memory Dump dock shows the memory dump of the simulated system", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetMemoryDump.setWindowTitle(QCoreApplication.translate("MainWindow", u"Memory Dump", None))
        self.tabWidgetMemoryDump.setTabText(self.tabWidgetMemoryDump.indexOf(self.tab), QCoreApplication.translate("MainWindow", u"Tab 1", None))
        self.tabWidgetMemoryDump.setTabText(self.tabWidgetMemoryDump.indexOf(self.tab_2), QCoreApplication.translate("MainWindow", u"Tab 2", None))
#if QT_CONFIG(whatsthis)
        self.dockWidgetLCD.setWhatsThis(QCoreApplication.translate("MainWindow", u"The LCD shows the output of a simulated LCD Device", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetLCD.setWindowTitle(QCoreApplication.translate("MainWindow", u"LCD", None))
#if QT_CONFIG(whatsthis)
        self.dockWidgetTerminal.setWhatsThis(QCoreApplication.translate("MainWindow", u"This terminal can be used to communicate directly with the simulator", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetTerminal.setWindowTitle(QCoreApplication.translate("MainWindow", u"Terminal", None))
        self.pushButtonTerminal.setText(QCoreApplication.translate("MainWindow", u"Send command", None))
#if QT_CONFIG(whatsthis)
        self.dockWidgetSimulatorOutput.setWhatsThis(QCoreApplication.translate("MainWindow", u"This console shows the standard output of the simulator", None))
#endif // QT_CONFIG(whatsthis)
        self.dockWidgetSimulatorOutput.setWindowTitle(QCoreApplication.translate("MainWindow", u"Simulator output", None))
        pass
    # retranslateUi

