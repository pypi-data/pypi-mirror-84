# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelresources
else:
    import _openstudiomodelresources

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelresources.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelresources.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelresources.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelresources.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelresources.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelresources.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelresources.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelresources:
_openstudiomodelresources.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelresources.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation

Model = openstudiomodelcore.Model

class ScheduleTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleTypeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleTypeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleType >::size_type":
        return _openstudiomodelresources.ScheduleTypeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleType >::difference_type", j: "std::vector< openstudio::model::ScheduleType >::difference_type") -> "std::vector< openstudio::model::ScheduleType,std::allocator< openstudio::model::ScheduleType > > *":
        return _openstudiomodelresources.ScheduleTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleType >::difference_type", j: "std::vector< openstudio::model::ScheduleType >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleType >::value_type const &":
        return _openstudiomodelresources.ScheduleTypeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleType >::value_type":
        return _openstudiomodelresources.ScheduleTypeVector_pop(self)

    def append(self, x: "ScheduleType") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleTypeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleType >::size_type":
        return _openstudiomodelresources.ScheduleTypeVector_size(self)

    def swap(self, v: "ScheduleTypeVector") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleType >::iterator":
        return _openstudiomodelresources.ScheduleTypeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleType >::iterator":
        return _openstudiomodelresources.ScheduleTypeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleType >::reverse_iterator":
        return _openstudiomodelresources.ScheduleTypeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleType >::reverse_iterator":
        return _openstudiomodelresources.ScheduleTypeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleType >::allocator_type":
        return _openstudiomodelresources.ScheduleTypeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleType >::iterator":
        return _openstudiomodelresources.ScheduleTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleTypeVector_swiginit(self, _openstudiomodelresources.new_ScheduleTypeVector(*args))

    def push_back(self, x: "ScheduleType") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleType >::value_type const &":
        return _openstudiomodelresources.ScheduleTypeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleType >::value_type const &":
        return _openstudiomodelresources.ScheduleTypeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleType >::size_type", x: "ScheduleType") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleType >::size_type", x: "ScheduleType") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleType >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleTypeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleType >::size_type":
        return _openstudiomodelresources.ScheduleTypeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleTypeVector

# Register ScheduleTypeVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleTypeVector_swigregister(ScheduleTypeVector)

class OptionalScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleType_swiginit(self, _openstudiomodelresources.new_OptionalScheduleType(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleType_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleType":
        return _openstudiomodelresources.OptionalScheduleType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleType_isNull(self)

    def get(self) -> "openstudio::model::ScheduleType":
        return _openstudiomodelresources.OptionalScheduleType_get(self)

    def set(self, t: "ScheduleType") -> "void":
        return _openstudiomodelresources.OptionalScheduleType_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleType

# Register OptionalScheduleType in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleType_swigregister(OptionalScheduleType)

class ScheduleIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleInterval >::difference_type") -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > > *":
        return _openstudiomodelresources.ScheduleIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleInterval >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type":
        return _openstudiomodelresources.ScheduleIntervalVector_pop(self)

    def append(self, x: "ScheduleInterval") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector_size(self)

    def swap(self, v: "ScheduleIntervalVector") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleIntervalVector(*args))

    def push_back(self, x: "ScheduleInterval") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleInterval >::size_type", x: "ScheduleInterval") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleInterval >::size_type", x: "ScheduleInterval") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleInterval >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleIntervalVector

# Register ScheduleIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleIntervalVector_swigregister(ScheduleIntervalVector)

class OptionalScheduleInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleInterval(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleInterval":
        return _openstudiomodelresources.OptionalScheduleInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleInterval":
        return _openstudiomodelresources.OptionalScheduleInterval_get(self)

    def set(self, t: "ScheduleInterval") -> "void":
        return _openstudiomodelresources.OptionalScheduleInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleInterval

# Register OptionalScheduleInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleInterval_swigregister(OptionalScheduleInterval)

class ScheduleFixedIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleFixedInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleFixedInterval >::difference_type") -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > > *":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleFixedInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleFixedInterval >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop(self)

    def append(self, x: "ScheduleFixedInterval") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_size(self)

    def swap(self, v: "ScheduleFixedIntervalVector") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFixedIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleFixedIntervalVector(*args))

    def push_back(self, x: "ScheduleFixedInterval") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleFixedInterval >::size_type", x: "ScheduleFixedInterval") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleFixedInterval >::size_type", x: "ScheduleFixedInterval") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleFixedInterval >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedIntervalVector

# Register ScheduleFixedIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFixedIntervalVector_swigregister(ScheduleFixedIntervalVector)

class OptionalScheduleFixedInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleFixedInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleFixedInterval(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleFixedInterval":
        return _openstudiomodelresources.OptionalScheduleFixedInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleFixedInterval":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_get(self)

    def set(self, t: "ScheduleFixedInterval") -> "void":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFixedInterval

# Register OptionalScheduleFixedInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleFixedInterval_swigregister(OptionalScheduleFixedInterval)

class ExternalFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExternalFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalFile >::difference_type", j: "std::vector< openstudio::model::ExternalFile >::difference_type") -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > > *":
        return _openstudiomodelresources.ExternalFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalFile >::difference_type", j: "std::vector< openstudio::model::ExternalFile >::difference_type") -> "void":
        return _openstudiomodelresources.ExternalFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalFile >::value_type":
        return _openstudiomodelresources.ExternalFileVector_pop(self)

    def append(self, x: "ExternalFile") -> "void":
        return _openstudiomodelresources.ExternalFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector_size(self)

    def swap(self, v: "ExternalFileVector") -> "void":
        return _openstudiomodelresources.ExternalFileVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalFile >::reverse_iterator":
        return _openstudiomodelresources.ExternalFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalFile >::reverse_iterator":
        return _openstudiomodelresources.ExternalFileVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExternalFileVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalFile >::allocator_type":
        return _openstudiomodelresources.ExternalFileVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExternalFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExternalFileVector_swiginit(self, _openstudiomodelresources.new_ExternalFileVector(*args))

    def push_back(self, x: "ExternalFile") -> "void":
        return _openstudiomodelresources.ExternalFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalFile >::size_type", x: "ExternalFile") -> "void":
        return _openstudiomodelresources.ExternalFileVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalFile >::size_type", x: "ExternalFile") -> "void":
        return _openstudiomodelresources.ExternalFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalFile >::size_type") -> "void":
        return _openstudiomodelresources.ExternalFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFileVector

# Register ExternalFileVector in _openstudiomodelresources:
_openstudiomodelresources.ExternalFileVector_swigregister(ExternalFileVector)

class OptionalExternalFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExternalFile_swiginit(self, _openstudiomodelresources.new_OptionalExternalFile(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExternalFile_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.OptionalExternalFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExternalFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExternalFile_isNull(self)

    def get(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.OptionalExternalFile_get(self)

    def set(self, t: "ExternalFile") -> "void":
        return _openstudiomodelresources.OptionalExternalFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExternalFile

# Register OptionalExternalFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalExternalFile_swigregister(OptionalExternalFile)

class ScheduleFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleFile >::difference_type", j: "std::vector< openstudio::model::ScheduleFile >::difference_type") -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > > *":
        return _openstudiomodelresources.ScheduleFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleFile >::difference_type", j: "std::vector< openstudio::model::ScheduleFile >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type":
        return _openstudiomodelresources.ScheduleFileVector_pop(self)

    def append(self, x: "ScheduleFile") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector_size(self)

    def swap(self, v: "ScheduleFileVector") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleFile >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleFile >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFileVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleFile >::allocator_type":
        return _openstudiomodelresources.ScheduleFileVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFileVector_swiginit(self, _openstudiomodelresources.new_ScheduleFileVector(*args))

    def push_back(self, x: "ScheduleFile") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleFile >::size_type", x: "ScheduleFile") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleFile >::size_type", x: "ScheduleFile") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleFile >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFileVector

# Register ScheduleFileVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFileVector_swigregister(ScheduleFileVector)

class OptionalScheduleFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleFile_swiginit(self, _openstudiomodelresources.new_OptionalScheduleFile(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleFile_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleFile":
        return _openstudiomodelresources.OptionalScheduleFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFile_isNull(self)

    def get(self) -> "openstudio::model::ScheduleFile":
        return _openstudiomodelresources.OptionalScheduleFile_get(self)

    def set(self, t: "ScheduleFile") -> "void":
        return _openstudiomodelresources.OptionalScheduleFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFile

# Register OptionalScheduleFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleFile_swigregister(OptionalScheduleFile)

class ScheduleVariableIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleVariableInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleVariableInterval >::difference_type") -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > > *":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleVariableInterval >::difference_type", j: "std::vector< openstudio::model::ScheduleVariableInterval >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop(self)

    def append(self, x: "ScheduleVariableInterval") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_size(self)

    def swap(self, v: "ScheduleVariableIntervalVector") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleVariableIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleVariableIntervalVector(*args))

    def push_back(self, x: "ScheduleVariableInterval") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleVariableInterval >::size_type", x: "ScheduleVariableInterval") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleVariableInterval >::size_type", x: "ScheduleVariableInterval") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleVariableInterval >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableIntervalVector

# Register ScheduleVariableIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleVariableIntervalVector_swigregister(ScheduleVariableIntervalVector)

class OptionalScheduleVariableInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleVariableInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleVariableInterval(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleVariableInterval":
        return _openstudiomodelresources.OptionalScheduleVariableInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleVariableInterval":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_get(self)

    def set(self, t: "ScheduleVariableInterval") -> "void":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleVariableInterval

# Register OptionalScheduleVariableInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleVariableInterval_swigregister(OptionalScheduleVariableInterval)

class ScheduleCompactVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleCompactVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleCompact >::difference_type", j: "std::vector< openstudio::model::ScheduleCompact >::difference_type") -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > > *":
        return _openstudiomodelresources.ScheduleCompactVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleCompact >::difference_type", j: "std::vector< openstudio::model::ScheduleCompact >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type":
        return _openstudiomodelresources.ScheduleCompactVector_pop(self)

    def append(self, x: "ScheduleCompact") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector_size(self)

    def swap(self, v: "ScheduleCompactVector") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleCompact >::reverse_iterator":
        return _openstudiomodelresources.ScheduleCompactVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleCompact >::reverse_iterator":
        return _openstudiomodelresources.ScheduleCompactVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleCompact >::allocator_type":
        return _openstudiomodelresources.ScheduleCompactVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleCompactVector_swiginit(self, _openstudiomodelresources.new_ScheduleCompactVector(*args))

    def push_back(self, x: "ScheduleCompact") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleCompact >::size_type", x: "ScheduleCompact") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleCompact >::size_type", x: "ScheduleCompact") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleCompact >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompactVector

# Register ScheduleCompactVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleCompactVector_swigregister(ScheduleCompactVector)

class OptionalScheduleCompact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleCompact_swiginit(self, _openstudiomodelresources.new_OptionalScheduleCompact(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleCompact_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleCompact":
        return _openstudiomodelresources.OptionalScheduleCompact___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleCompact_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleCompact_isNull(self)

    def get(self) -> "openstudio::model::ScheduleCompact":
        return _openstudiomodelresources.OptionalScheduleCompact_get(self)

    def set(self, t: "ScheduleCompact") -> "void":
        return _openstudiomodelresources.OptionalScheduleCompact_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleCompact

# Register OptionalScheduleCompact in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleCompact_swigregister(OptionalScheduleCompact)

class ScheduleConstantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleConstantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleConstant >::difference_type", j: "std::vector< openstudio::model::ScheduleConstant >::difference_type") -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > > *":
        return _openstudiomodelresources.ScheduleConstantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleConstant >::difference_type", j: "std::vector< openstudio::model::ScheduleConstant >::difference_type") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type":
        return _openstudiomodelresources.ScheduleConstantVector_pop(self)

    def append(self, x: "ScheduleConstant") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector_size(self)

    def swap(self, v: "ScheduleConstantVector") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleConstant >::reverse_iterator":
        return _openstudiomodelresources.ScheduleConstantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleConstant >::reverse_iterator":
        return _openstudiomodelresources.ScheduleConstantVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleConstant >::allocator_type":
        return _openstudiomodelresources.ScheduleConstantVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleConstantVector_swiginit(self, _openstudiomodelresources.new_ScheduleConstantVector(*args))

    def push_back(self, x: "ScheduleConstant") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleConstant >::size_type", x: "ScheduleConstant") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleConstant >::size_type", x: "ScheduleConstant") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleConstant >::size_type") -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstantVector

# Register ScheduleConstantVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleConstantVector_swigregister(ScheduleConstantVector)

class OptionalScheduleConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleConstant_swiginit(self, _openstudiomodelresources.new_OptionalScheduleConstant(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleConstant_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleConstant":
        return _openstudiomodelresources.OptionalScheduleConstant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleConstant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleConstant_isNull(self)

    def get(self) -> "openstudio::model::ScheduleConstant":
        return _openstudiomodelresources.OptionalScheduleConstant_get(self)

    def set(self, t: "ScheduleConstant") -> "void":
        return _openstudiomodelresources.OptionalScheduleConstant_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleConstant

# Register OptionalScheduleConstant in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleConstant_swigregister(OptionalScheduleConstant)

class DefaultScheduleSetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultScheduleSetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DefaultScheduleSet >::difference_type", j: "std::vector< openstudio::model::DefaultScheduleSet >::difference_type") -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > > *":
        return _openstudiomodelresources.DefaultScheduleSetVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DefaultScheduleSet >::difference_type", j: "std::vector< openstudio::model::DefaultScheduleSet >::difference_type") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_pop(self)

    def append(self, x: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_size(self)

    def swap(self, v: "DefaultScheduleSetVector") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::reverse_iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::reverse_iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::allocator_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultScheduleSetVector_swiginit(self, _openstudiomodelresources.new_DefaultScheduleSetVector(*args))

    def push_back(self, x: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DefaultScheduleSet >::size_type", x: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DefaultScheduleSet >::size_type", x: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DefaultScheduleSet >::size_type") -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSetVector

# Register DefaultScheduleSetVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleSetVector_swigregister(DefaultScheduleSetVector)

class OptionalDefaultScheduleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultScheduleSet_swiginit(self, _openstudiomodelresources.new_OptionalDefaultScheduleSet(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultScheduleSet":
        return _openstudiomodelresources.OptionalDefaultScheduleSet___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_isNull(self)

    def get(self) -> "openstudio::model::DefaultScheduleSet":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_get(self)

    def set(self, t: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultScheduleSet

# Register OptionalDefaultScheduleSet in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultScheduleSet_swigregister(OptionalDefaultScheduleSet)

class SpectralDataFieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SpectralDataFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SpectralDataFieldVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SpectralDataFieldVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SpectralDataField >::size_type":
        return _openstudiomodelresources.SpectralDataFieldVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SpectralDataField >::difference_type", j: "std::vector< openstudio::model::SpectralDataField >::difference_type") -> "std::vector< openstudio::model::SpectralDataField,std::allocator< openstudio::model::SpectralDataField > > *":
        return _openstudiomodelresources.SpectralDataFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SpectralDataField >::difference_type", j: "std::vector< openstudio::model::SpectralDataField >::difference_type") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SpectralDataField >::value_type const &":
        return _openstudiomodelresources.SpectralDataFieldVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SpectralDataField >::value_type":
        return _openstudiomodelresources.SpectralDataFieldVector_pop(self)

    def append(self, x: "SpectralDataField") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SpectralDataFieldVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SpectralDataField >::size_type":
        return _openstudiomodelresources.SpectralDataFieldVector_size(self)

    def swap(self, v: "SpectralDataFieldVector") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SpectralDataField >::iterator":
        return _openstudiomodelresources.SpectralDataFieldVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SpectralDataField >::iterator":
        return _openstudiomodelresources.SpectralDataFieldVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SpectralDataField >::reverse_iterator":
        return _openstudiomodelresources.SpectralDataFieldVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SpectralDataField >::reverse_iterator":
        return _openstudiomodelresources.SpectralDataFieldVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SpectralDataField >::allocator_type":
        return _openstudiomodelresources.SpectralDataFieldVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SpectralDataField >::iterator":
        return _openstudiomodelresources.SpectralDataFieldVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SpectralDataFieldVector_swiginit(self, _openstudiomodelresources.new_SpectralDataFieldVector(*args))

    def push_back(self, x: "SpectralDataField") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SpectralDataField >::value_type const &":
        return _openstudiomodelresources.SpectralDataFieldVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SpectralDataField >::value_type const &":
        return _openstudiomodelresources.SpectralDataFieldVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SpectralDataField >::size_type", x: "SpectralDataField") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SpectralDataField >::size_type", x: "SpectralDataField") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SpectralDataField >::size_type") -> "void":
        return _openstudiomodelresources.SpectralDataFieldVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SpectralDataField >::size_type":
        return _openstudiomodelresources.SpectralDataFieldVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpectralDataFieldVector

# Register SpectralDataFieldVector in _openstudiomodelresources:
_openstudiomodelresources.SpectralDataFieldVector_swigregister(SpectralDataFieldVector)

class OptionalSpectralDataField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSpectralDataField_swiginit(self, _openstudiomodelresources.new_OptionalSpectralDataField(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSpectralDataField_reset(self)

    def __ref__(self) -> "openstudio::model::SpectralDataField":
        return _openstudiomodelresources.OptionalSpectralDataField___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSpectralDataField_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSpectralDataField_isNull(self)

    def get(self) -> "openstudio::model::SpectralDataField":
        return _openstudiomodelresources.OptionalSpectralDataField_get(self)

    def set(self, t: "SpectralDataField") -> "void":
        return _openstudiomodelresources.OptionalSpectralDataField_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSpectralDataField

# Register OptionalSpectralDataField in _openstudiomodelresources:
_openstudiomodelresources.OptionalSpectralDataField_swigregister(OptionalSpectralDataField)

class MaterialPropertyGlazingSpectralDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type", j: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type") -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > > *":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type", j: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop(self)

    def append(self, x: "MaterialPropertyGlazingSpectralData") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_size(self)

    def swap(self, v: "MaterialPropertyGlazingSpectralDataVector") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::allocator_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyGlazingSpectralDataVector(*args))

    def push_back(self, x: "MaterialPropertyGlazingSpectralData") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type", x: "MaterialPropertyGlazingSpectralData") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type", x: "MaterialPropertyGlazingSpectralData") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type") -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralDataVector

# Register MaterialPropertyGlazingSpectralDataVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swigregister(MaterialPropertyGlazingSpectralDataVector)

class OptionalMaterialPropertyGlazingSpectralData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyGlazingSpectralData(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_reset(self)

    def __ref__(self) -> "openstudio::model::MaterialPropertyGlazingSpectralData":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_isNull(self)

    def get(self) -> "openstudio::model::MaterialPropertyGlazingSpectralData":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_get(self)

    def set(self, t: "MaterialPropertyGlazingSpectralData") -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyGlazingSpectralData

# Register OptionalMaterialPropertyGlazingSpectralData in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_swigregister(OptionalMaterialPropertyGlazingSpectralData)

class MaterialPropertyMoisturePenetrationDepthSettingsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type", j: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type") -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > > *":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type", j: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop(self)

    def append(self, x: "MaterialPropertyMoisturePenetrationDepthSettings") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_size(self)

    def swap(self, v: "MaterialPropertyMoisturePenetrationDepthSettingsVector") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::allocator_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettingsVector(*args))

    def push_back(self, x: "MaterialPropertyMoisturePenetrationDepthSettings") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type", x: "MaterialPropertyMoisturePenetrationDepthSettings") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type", x: "MaterialPropertyMoisturePenetrationDepthSettings") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type") -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettingsVector

# Register MaterialPropertyMoisturePenetrationDepthSettingsVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swigregister(MaterialPropertyMoisturePenetrationDepthSettingsVector)

class OptionalMaterialPropertyMoisturePenetrationDepthSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyMoisturePenetrationDepthSettings(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_reset(self)

    def __ref__(self) -> "openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_isNull(self)

    def get(self) -> "openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_get(self)

    def set(self, t: "MaterialPropertyMoisturePenetrationDepthSettings") -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyMoisturePenetrationDepthSettings

# Register OptionalMaterialPropertyMoisturePenetrationDepthSettings in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_swigregister(OptionalMaterialPropertyMoisturePenetrationDepthSettings)

class MaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Material >::difference_type", j: "std::vector< openstudio::model::Material >::difference_type") -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > > *":
        return _openstudiomodelresources.MaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Material >::difference_type", j: "std::vector< openstudio::model::Material >::difference_type") -> "void":
        return _openstudiomodelresources.MaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Material >::value_type":
        return _openstudiomodelresources.MaterialVector_pop(self)

    def append(self, x: "Material") -> "void":
        return _openstudiomodelresources.MaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector_size(self)

    def swap(self, v: "MaterialVector") -> "void":
        return _openstudiomodelresources.MaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Material >::reverse_iterator":
        return _openstudiomodelresources.MaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Material >::reverse_iterator":
        return _openstudiomodelresources.MaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Material >::allocator_type":
        return _openstudiomodelresources.MaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialVector_swiginit(self, _openstudiomodelresources.new_MaterialVector(*args))

    def push_back(self, x: "Material") -> "void":
        return _openstudiomodelresources.MaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Material >::size_type", x: "Material") -> "void":
        return _openstudiomodelresources.MaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Material >::size_type", x: "Material") -> "void":
        return _openstudiomodelresources.MaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Material >::size_type") -> "void":
        return _openstudiomodelresources.MaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialVector

# Register MaterialVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialVector_swigregister(MaterialVector)

class OptionalMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterial_swiginit(self, _openstudiomodelresources.new_OptionalMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.OptionalMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterial_isNull(self)

    def get(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.OptionalMaterial_get(self)

    def set(self, t: "Material") -> "void":
        return _openstudiomodelresources.OptionalMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterial

# Register OptionalMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterial_swigregister(OptionalMaterial)

class FenestrationMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.FenestrationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FenestrationMaterial >::difference_type", j: "std::vector< openstudio::model::FenestrationMaterial >::difference_type") -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > > *":
        return _openstudiomodelresources.FenestrationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FenestrationMaterial >::difference_type", j: "std::vector< openstudio::model::FenestrationMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type":
        return _openstudiomodelresources.FenestrationMaterialVector_pop(self)

    def append(self, x: "FenestrationMaterial") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector_size(self)

    def swap(self, v: "FenestrationMaterialVector") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FenestrationMaterial >::reverse_iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FenestrationMaterial >::reverse_iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FenestrationMaterial >::allocator_type":
        return _openstudiomodelresources.FenestrationMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.FenestrationMaterialVector_swiginit(self, _openstudiomodelresources.new_FenestrationMaterialVector(*args))

    def push_back(self, x: "FenestrationMaterial") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FenestrationMaterial >::size_type", x: "FenestrationMaterial") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FenestrationMaterial >::size_type", x: "FenestrationMaterial") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FenestrationMaterial >::size_type") -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterialVector

# Register FenestrationMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.FenestrationMaterialVector_swigregister(FenestrationMaterialVector)

class OptionalFenestrationMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalFenestrationMaterial_swiginit(self, _openstudiomodelresources.new_OptionalFenestrationMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalFenestrationMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::FenestrationMaterial":
        return _openstudiomodelresources.OptionalFenestrationMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalFenestrationMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalFenestrationMaterial_isNull(self)

    def get(self) -> "openstudio::model::FenestrationMaterial":
        return _openstudiomodelresources.OptionalFenestrationMaterial_get(self)

    def set(self, t: "FenestrationMaterial") -> "void":
        return _openstudiomodelresources.OptionalFenestrationMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFenestrationMaterial

# Register OptionalFenestrationMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalFenestrationMaterial_swigregister(OptionalFenestrationMaterial)

class GasLayerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasLayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GasLayer >::difference_type", j: "std::vector< openstudio::model::GasLayer >::difference_type") -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > > *":
        return _openstudiomodelresources.GasLayerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GasLayer >::difference_type", j: "std::vector< openstudio::model::GasLayer >::difference_type") -> "void":
        return _openstudiomodelresources.GasLayerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GasLayer >::value_type":
        return _openstudiomodelresources.GasLayerVector_pop(self)

    def append(self, x: "GasLayer") -> "void":
        return _openstudiomodelresources.GasLayerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector_size(self)

    def swap(self, v: "GasLayerVector") -> "void":
        return _openstudiomodelresources.GasLayerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasLayer >::reverse_iterator":
        return _openstudiomodelresources.GasLayerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasLayer >::reverse_iterator":
        return _openstudiomodelresources.GasLayerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasLayerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GasLayer >::allocator_type":
        return _openstudiomodelresources.GasLayerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasLayerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasLayerVector_swiginit(self, _openstudiomodelresources.new_GasLayerVector(*args))

    def push_back(self, x: "GasLayer") -> "void":
        return _openstudiomodelresources.GasLayerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GasLayer >::size_type", x: "GasLayer") -> "void":
        return _openstudiomodelresources.GasLayerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GasLayer >::size_type", x: "GasLayer") -> "void":
        return _openstudiomodelresources.GasLayerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GasLayer >::size_type") -> "void":
        return _openstudiomodelresources.GasLayerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayerVector

# Register GasLayerVector in _openstudiomodelresources:
_openstudiomodelresources.GasLayerVector_swigregister(GasLayerVector)

class OptionalGasLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasLayer_swiginit(self, _openstudiomodelresources.new_OptionalGasLayer(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasLayer_reset(self)

    def __ref__(self) -> "openstudio::model::GasLayer":
        return _openstudiomodelresources.OptionalGasLayer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasLayer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasLayer_isNull(self)

    def get(self) -> "openstudio::model::GasLayer":
        return _openstudiomodelresources.OptionalGasLayer_get(self)

    def set(self, t: "GasLayer") -> "void":
        return _openstudiomodelresources.OptionalGasLayer_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasLayer

# Register OptionalGasLayer in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasLayer_swigregister(OptionalGasLayer)

class GlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Glazing >::difference_type", j: "std::vector< openstudio::model::Glazing >::difference_type") -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > > *":
        return _openstudiomodelresources.GlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Glazing >::difference_type", j: "std::vector< openstudio::model::Glazing >::difference_type") -> "void":
        return _openstudiomodelresources.GlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Glazing >::value_type":
        return _openstudiomodelresources.GlazingVector_pop(self)

    def append(self, x: "Glazing") -> "void":
        return _openstudiomodelresources.GlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector_size(self)

    def swap(self, v: "GlazingVector") -> "void":
        return _openstudiomodelresources.GlazingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Glazing >::reverse_iterator":
        return _openstudiomodelresources.GlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Glazing >::reverse_iterator":
        return _openstudiomodelresources.GlazingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GlazingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Glazing >::allocator_type":
        return _openstudiomodelresources.GlazingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GlazingVector_swiginit(self, _openstudiomodelresources.new_GlazingVector(*args))

    def push_back(self, x: "Glazing") -> "void":
        return _openstudiomodelresources.GlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Glazing >::size_type", x: "Glazing") -> "void":
        return _openstudiomodelresources.GlazingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Glazing >::size_type", x: "Glazing") -> "void":
        return _openstudiomodelresources.GlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Glazing >::size_type") -> "void":
        return _openstudiomodelresources.GlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GlazingVector

# Register GlazingVector in _openstudiomodelresources:
_openstudiomodelresources.GlazingVector_swigregister(GlazingVector)

class OptionalGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGlazing_swiginit(self, _openstudiomodelresources.new_OptionalGlazing(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::Glazing":
        return _openstudiomodelresources.OptionalGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGlazing_isNull(self)

    def get(self) -> "openstudio::model::Glazing":
        return _openstudiomodelresources.OptionalGlazing_get(self)

    def set(self, t: "Glazing") -> "void":
        return _openstudiomodelresources.OptionalGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGlazing

# Register OptionalGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalGlazing_swigregister(OptionalGlazing)

class ShadingMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadingMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ShadingMaterial >::difference_type", j: "std::vector< openstudio::model::ShadingMaterial >::difference_type") -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > > *":
        return _openstudiomodelresources.ShadingMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ShadingMaterial >::difference_type", j: "std::vector< openstudio::model::ShadingMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type":
        return _openstudiomodelresources.ShadingMaterialVector_pop(self)

    def append(self, x: "ShadingMaterial") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector_size(self)

    def swap(self, v: "ShadingMaterialVector") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ShadingMaterial >::reverse_iterator":
        return _openstudiomodelresources.ShadingMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ShadingMaterial >::reverse_iterator":
        return _openstudiomodelresources.ShadingMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ShadingMaterial >::allocator_type":
        return _openstudiomodelresources.ShadingMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadingMaterialVector_swiginit(self, _openstudiomodelresources.new_ShadingMaterialVector(*args))

    def push_back(self, x: "ShadingMaterial") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ShadingMaterial >::size_type", x: "ShadingMaterial") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ShadingMaterial >::size_type", x: "ShadingMaterial") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ShadingMaterial >::size_type") -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterialVector

# Register ShadingMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.ShadingMaterialVector_swigregister(ShadingMaterialVector)

class OptionalShadingMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShadingMaterial_swiginit(self, _openstudiomodelresources.new_OptionalShadingMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShadingMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::ShadingMaterial":
        return _openstudiomodelresources.OptionalShadingMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingMaterial_isNull(self)

    def get(self) -> "openstudio::model::ShadingMaterial":
        return _openstudiomodelresources.OptionalShadingMaterial_get(self)

    def set(self, t: "ShadingMaterial") -> "void":
        return _openstudiomodelresources.OptionalShadingMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingMaterial

# Register OptionalShadingMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalShadingMaterial_swigregister(OptionalShadingMaterial)

class ModelPartitionMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ModelPartitionMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ModelPartitionMaterial >::difference_type", j: "std::vector< openstudio::model::ModelPartitionMaterial >::difference_type") -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > > *":
        return _openstudiomodelresources.ModelPartitionMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ModelPartitionMaterial >::difference_type", j: "std::vector< openstudio::model::ModelPartitionMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop(self)

    def append(self, x: "ModelPartitionMaterial") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_size(self)

    def swap(self, v: "ModelPartitionMaterialVector") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::reverse_iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::reverse_iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::allocator_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ModelPartitionMaterialVector_swiginit(self, _openstudiomodelresources.new_ModelPartitionMaterialVector(*args))

    def push_back(self, x: "ModelPartitionMaterial") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ModelPartitionMaterial >::size_type", x: "ModelPartitionMaterial") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ModelPartitionMaterial >::size_type", x: "ModelPartitionMaterial") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ModelPartitionMaterial >::size_type") -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterialVector

# Register ModelPartitionMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.ModelPartitionMaterialVector_swigregister(ModelPartitionMaterialVector)

class OptionalModelPartitionMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalModelPartitionMaterial_swiginit(self, _openstudiomodelresources.new_OptionalModelPartitionMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::ModelPartitionMaterial":
        return _openstudiomodelresources.OptionalModelPartitionMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_isNull(self)

    def get(self) -> "openstudio::model::ModelPartitionMaterial":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_get(self)

    def set(self, t: "ModelPartitionMaterial") -> "void":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalModelPartitionMaterial

# Register OptionalModelPartitionMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalModelPartitionMaterial_swigregister(OptionalModelPartitionMaterial)

class OpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.OpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::OpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::OpaqueMaterial >::difference_type") -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > > *":
        return _openstudiomodelresources.OpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::OpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::OpaqueMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type":
        return _openstudiomodelresources.OpaqueMaterialVector_pop(self)

    def append(self, x: "OpaqueMaterial") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector_size(self)

    def swap(self, v: "OpaqueMaterialVector") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::OpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.OpaqueMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.OpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_OpaqueMaterialVector(*args))

    def push_back(self, x: "OpaqueMaterial") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::OpaqueMaterial >::size_type", x: "OpaqueMaterial") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::OpaqueMaterial >::size_type", x: "OpaqueMaterial") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::OpaqueMaterial >::size_type") -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterialVector

# Register OpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.OpaqueMaterialVector_swigregister(OpaqueMaterialVector)

class OptionalOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalOpaqueMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::OpaqueMaterial":
        return _openstudiomodelresources.OptionalOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::OpaqueMaterial":
        return _openstudiomodelresources.OptionalOpaqueMaterial_get(self)

    def set(self, t: "OpaqueMaterial") -> "void":
        return _openstudiomodelresources.OptionalOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOpaqueMaterial

# Register OptionalOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalOpaqueMaterial_swigregister(OptionalOpaqueMaterial)

class AirWallMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.AirWallMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirWallMaterial >::difference_type", j: "std::vector< openstudio::model::AirWallMaterial >::difference_type") -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > > *":
        return _openstudiomodelresources.AirWallMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirWallMaterial >::difference_type", j: "std::vector< openstudio::model::AirWallMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type":
        return _openstudiomodelresources.AirWallMaterialVector_pop(self)

    def append(self, x: "AirWallMaterial") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector_size(self)

    def swap(self, v: "AirWallMaterialVector") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirWallMaterial >::reverse_iterator":
        return _openstudiomodelresources.AirWallMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirWallMaterial >::reverse_iterator":
        return _openstudiomodelresources.AirWallMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirWallMaterial >::allocator_type":
        return _openstudiomodelresources.AirWallMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.AirWallMaterialVector_swiginit(self, _openstudiomodelresources.new_AirWallMaterialVector(*args))

    def push_back(self, x: "AirWallMaterial") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirWallMaterial >::size_type", x: "AirWallMaterial") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirWallMaterial >::size_type", x: "AirWallMaterial") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirWallMaterial >::size_type") -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_AirWallMaterialVector

# Register AirWallMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.AirWallMaterialVector_swigregister(AirWallMaterialVector)

class OptionalAirWallMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalAirWallMaterial_swiginit(self, _openstudiomodelresources.new_OptionalAirWallMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalAirWallMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::AirWallMaterial":
        return _openstudiomodelresources.OptionalAirWallMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalAirWallMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalAirWallMaterial_isNull(self)

    def get(self) -> "openstudio::model::AirWallMaterial":
        return _openstudiomodelresources.OptionalAirWallMaterial_get(self)

    def set(self, t: "AirWallMaterial") -> "void":
        return _openstudiomodelresources.OptionalAirWallMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalAirWallMaterial

# Register OptionalAirWallMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalAirWallMaterial_swigregister(OptionalAirWallMaterial)

class BlindVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.BlindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.BlindVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.BlindVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Blind >::difference_type", j: "std::vector< openstudio::model::Blind >::difference_type") -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > > *":
        return _openstudiomodelresources.BlindVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Blind >::difference_type", j: "std::vector< openstudio::model::Blind >::difference_type") -> "void":
        return _openstudiomodelresources.BlindVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Blind >::value_type":
        return _openstudiomodelresources.BlindVector_pop(self)

    def append(self, x: "Blind") -> "void":
        return _openstudiomodelresources.BlindVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.BlindVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector_size(self)

    def swap(self, v: "BlindVector") -> "void":
        return _openstudiomodelresources.BlindVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Blind >::reverse_iterator":
        return _openstudiomodelresources.BlindVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Blind >::reverse_iterator":
        return _openstudiomodelresources.BlindVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.BlindVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Blind >::allocator_type":
        return _openstudiomodelresources.BlindVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.BlindVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.BlindVector_swiginit(self, _openstudiomodelresources.new_BlindVector(*args))

    def push_back(self, x: "Blind") -> "void":
        return _openstudiomodelresources.BlindVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Blind >::size_type", x: "Blind") -> "void":
        return _openstudiomodelresources.BlindVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Blind >::size_type", x: "Blind") -> "void":
        return _openstudiomodelresources.BlindVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Blind >::size_type") -> "void":
        return _openstudiomodelresources.BlindVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_BlindVector

# Register BlindVector in _openstudiomodelresources:
_openstudiomodelresources.BlindVector_swigregister(BlindVector)

class OptionalBlind(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalBlind_swiginit(self, _openstudiomodelresources.new_OptionalBlind(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalBlind_reset(self)

    def __ref__(self) -> "openstudio::model::Blind":
        return _openstudiomodelresources.OptionalBlind___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalBlind_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalBlind_isNull(self)

    def get(self) -> "openstudio::model::Blind":
        return _openstudiomodelresources.OptionalBlind_get(self)

    def set(self, t: "Blind") -> "void":
        return _openstudiomodelresources.OptionalBlind_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalBlind

# Register OptionalBlind in _openstudiomodelresources:
_openstudiomodelresources.OptionalBlind_swigregister(OptionalBlind)

class DaylightRedirectionDeviceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type", j: "std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type") -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > > *":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type", j: "std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop(self)

    def append(self, x: "DaylightRedirectionDevice") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_size(self)

    def swap(self, v: "DaylightRedirectionDeviceVector") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::reverse_iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::reverse_iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::allocator_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DaylightRedirectionDeviceVector_swiginit(self, _openstudiomodelresources.new_DaylightRedirectionDeviceVector(*args))

    def push_back(self, x: "DaylightRedirectionDevice") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type", x: "DaylightRedirectionDevice") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type", x: "DaylightRedirectionDevice") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type") -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDeviceVector

# Register DaylightRedirectionDeviceVector in _openstudiomodelresources:
_openstudiomodelresources.DaylightRedirectionDeviceVector_swigregister(DaylightRedirectionDeviceVector)

class OptionalDaylightRedirectionDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDaylightRedirectionDevice_swiginit(self, _openstudiomodelresources.new_OptionalDaylightRedirectionDevice(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_reset(self)

    def __ref__(self) -> "openstudio::model::DaylightRedirectionDevice":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_isNull(self)

    def get(self) -> "openstudio::model::DaylightRedirectionDevice":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_get(self)

    def set(self, t: "DaylightRedirectionDevice") -> "void":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDaylightRedirectionDevice

# Register OptionalDaylightRedirectionDevice in _openstudiomodelresources:
_openstudiomodelresources.OptionalDaylightRedirectionDevice_swigregister(OptionalDaylightRedirectionDevice)

class AirGapVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.AirGapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.AirGapVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.AirGapVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirGap >::difference_type", j: "std::vector< openstudio::model::AirGap >::difference_type") -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > > *":
        return _openstudiomodelresources.AirGapVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirGap >::difference_type", j: "std::vector< openstudio::model::AirGap >::difference_type") -> "void":
        return _openstudiomodelresources.AirGapVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirGap >::value_type":
        return _openstudiomodelresources.AirGapVector_pop(self)

    def append(self, x: "AirGap") -> "void":
        return _openstudiomodelresources.AirGapVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.AirGapVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector_size(self)

    def swap(self, v: "AirGapVector") -> "void":
        return _openstudiomodelresources.AirGapVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirGap >::reverse_iterator":
        return _openstudiomodelresources.AirGapVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirGap >::reverse_iterator":
        return _openstudiomodelresources.AirGapVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.AirGapVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirGap >::allocator_type":
        return _openstudiomodelresources.AirGapVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.AirGapVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.AirGapVector_swiginit(self, _openstudiomodelresources.new_AirGapVector(*args))

    def push_back(self, x: "AirGap") -> "void":
        return _openstudiomodelresources.AirGapVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirGap >::size_type", x: "AirGap") -> "void":
        return _openstudiomodelresources.AirGapVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirGap >::size_type", x: "AirGap") -> "void":
        return _openstudiomodelresources.AirGapVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirGap >::size_type") -> "void":
        return _openstudiomodelresources.AirGapVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_AirGapVector

# Register AirGapVector in _openstudiomodelresources:
_openstudiomodelresources.AirGapVector_swigregister(AirGapVector)

class OptionalAirGap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalAirGap_swiginit(self, _openstudiomodelresources.new_OptionalAirGap(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalAirGap_reset(self)

    def __ref__(self) -> "openstudio::model::AirGap":
        return _openstudiomodelresources.OptionalAirGap___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalAirGap_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalAirGap_isNull(self)

    def get(self) -> "openstudio::model::AirGap":
        return _openstudiomodelresources.OptionalAirGap_get(self)

    def set(self, t: "AirGap") -> "void":
        return _openstudiomodelresources.OptionalAirGap_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalAirGap

# Register OptionalAirGap in _openstudiomodelresources:
_openstudiomodelresources.OptionalAirGap_swigregister(OptionalAirGap)

class GasVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Gas >::difference_type", j: "std::vector< openstudio::model::Gas >::difference_type") -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > > *":
        return _openstudiomodelresources.GasVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Gas >::difference_type", j: "std::vector< openstudio::model::Gas >::difference_type") -> "void":
        return _openstudiomodelresources.GasVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Gas >::value_type":
        return _openstudiomodelresources.GasVector_pop(self)

    def append(self, x: "Gas") -> "void":
        return _openstudiomodelresources.GasVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector_size(self)

    def swap(self, v: "GasVector") -> "void":
        return _openstudiomodelresources.GasVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Gas >::reverse_iterator":
        return _openstudiomodelresources.GasVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Gas >::reverse_iterator":
        return _openstudiomodelresources.GasVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Gas >::allocator_type":
        return _openstudiomodelresources.GasVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasVector_swiginit(self, _openstudiomodelresources.new_GasVector(*args))

    def push_back(self, x: "Gas") -> "void":
        return _openstudiomodelresources.GasVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Gas >::size_type", x: "Gas") -> "void":
        return _openstudiomodelresources.GasVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Gas >::size_type", x: "Gas") -> "void":
        return _openstudiomodelresources.GasVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Gas >::size_type") -> "void":
        return _openstudiomodelresources.GasVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasVector

# Register GasVector in _openstudiomodelresources:
_openstudiomodelresources.GasVector_swigregister(GasVector)

class OptionalGas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGas_swiginit(self, _openstudiomodelresources.new_OptionalGas(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGas_reset(self)

    def __ref__(self) -> "openstudio::model::Gas":
        return _openstudiomodelresources.OptionalGas___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGas_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGas_isNull(self)

    def get(self) -> "openstudio::model::Gas":
        return _openstudiomodelresources.OptionalGas_get(self)

    def set(self, t: "Gas") -> "void":
        return _openstudiomodelresources.OptionalGas_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGas

# Register OptionalGas in _openstudiomodelresources:
_openstudiomodelresources.OptionalGas_swigregister(OptionalGas)

class GasMixtureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasMixtureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GasMixture >::difference_type", j: "std::vector< openstudio::model::GasMixture >::difference_type") -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > > *":
        return _openstudiomodelresources.GasMixtureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GasMixture >::difference_type", j: "std::vector< openstudio::model::GasMixture >::difference_type") -> "void":
        return _openstudiomodelresources.GasMixtureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GasMixture >::value_type":
        return _openstudiomodelresources.GasMixtureVector_pop(self)

    def append(self, x: "GasMixture") -> "void":
        return _openstudiomodelresources.GasMixtureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector_size(self)

    def swap(self, v: "GasMixtureVector") -> "void":
        return _openstudiomodelresources.GasMixtureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasMixture >::reverse_iterator":
        return _openstudiomodelresources.GasMixtureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasMixture >::reverse_iterator":
        return _openstudiomodelresources.GasMixtureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasMixtureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GasMixture >::allocator_type":
        return _openstudiomodelresources.GasMixtureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasMixtureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasMixtureVector_swiginit(self, _openstudiomodelresources.new_GasMixtureVector(*args))

    def push_back(self, x: "GasMixture") -> "void":
        return _openstudiomodelresources.GasMixtureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GasMixture >::size_type", x: "GasMixture") -> "void":
        return _openstudiomodelresources.GasMixtureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GasMixture >::size_type", x: "GasMixture") -> "void":
        return _openstudiomodelresources.GasMixtureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GasMixture >::size_type") -> "void":
        return _openstudiomodelresources.GasMixtureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixtureVector

# Register GasMixtureVector in _openstudiomodelresources:
_openstudiomodelresources.GasMixtureVector_swigregister(GasMixtureVector)

class OptionalGasMixture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasMixture_swiginit(self, _openstudiomodelresources.new_OptionalGasMixture(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasMixture_reset(self)

    def __ref__(self) -> "openstudio::model::GasMixture":
        return _openstudiomodelresources.OptionalGasMixture___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasMixture_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasMixture_isNull(self)

    def get(self) -> "openstudio::model::GasMixture":
        return _openstudiomodelresources.OptionalGasMixture_get(self)

    def set(self, t: "GasMixture") -> "void":
        return _openstudiomodelresources.OptionalGasMixture_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasMixture

# Register OptionalGasMixture in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasMixture_swigregister(OptionalGasMixture)

class InfraredTransparentMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type", j: "std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type") -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > > *":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type", j: "std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop(self)

    def append(self, x: "InfraredTransparentMaterial") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_size(self)

    def swap(self, v: "InfraredTransparentMaterialVector") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::reverse_iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::reverse_iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::allocator_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.InfraredTransparentMaterialVector_swiginit(self, _openstudiomodelresources.new_InfraredTransparentMaterialVector(*args))

    def push_back(self, x: "InfraredTransparentMaterial") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type", x: "InfraredTransparentMaterial") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type", x: "InfraredTransparentMaterial") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type") -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterialVector

# Register InfraredTransparentMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.InfraredTransparentMaterialVector_swigregister(InfraredTransparentMaterialVector)

class OptionalInfraredTransparentMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalInfraredTransparentMaterial_swiginit(self, _openstudiomodelresources.new_OptionalInfraredTransparentMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::InfraredTransparentMaterial":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_isNull(self)

    def get(self) -> "openstudio::model::InfraredTransparentMaterial":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_get(self)

    def set(self, t: "InfraredTransparentMaterial") -> "void":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInfraredTransparentMaterial

# Register OptionalInfraredTransparentMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalInfraredTransparentMaterial_swigregister(OptionalInfraredTransparentMaterial)

class MasslessOpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type") -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > > *":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop(self)

    def append(self, x: "MasslessOpaqueMaterial") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_size(self)

    def swap(self, v: "MasslessOpaqueMaterialVector") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MasslessOpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_MasslessOpaqueMaterialVector(*args))

    def push_back(self, x: "MasslessOpaqueMaterial") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type", x: "MasslessOpaqueMaterial") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type", x: "MasslessOpaqueMaterial") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type") -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterialVector

# Register MasslessOpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.MasslessOpaqueMaterialVector_swigregister(MasslessOpaqueMaterialVector)

class OptionalMasslessOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMasslessOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalMasslessOpaqueMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::MasslessOpaqueMaterial":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::MasslessOpaqueMaterial":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_get(self)

    def set(self, t: "MasslessOpaqueMaterial") -> "void":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMasslessOpaqueMaterial

# Register OptionalMasslessOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalMasslessOpaqueMaterial_swigregister(OptionalMasslessOpaqueMaterial)

class RefractionExtinctionGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type", j: "std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type") -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > > *":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type", j: "std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop(self)

    def append(self, x: "RefractionExtinctionGlazing") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_size(self)

    def swap(self, v: "RefractionExtinctionGlazingVector") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::reverse_iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::reverse_iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::allocator_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RefractionExtinctionGlazingVector_swiginit(self, _openstudiomodelresources.new_RefractionExtinctionGlazingVector(*args))

    def push_back(self, x: "RefractionExtinctionGlazing") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type", x: "RefractionExtinctionGlazing") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type", x: "RefractionExtinctionGlazing") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazingVector

# Register RefractionExtinctionGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.RefractionExtinctionGlazingVector_swigregister(RefractionExtinctionGlazingVector)

class OptionalRefractionExtinctionGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRefractionExtinctionGlazing_swiginit(self, _openstudiomodelresources.new_OptionalRefractionExtinctionGlazing(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::RefractionExtinctionGlazing":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_isNull(self)

    def get(self) -> "openstudio::model::RefractionExtinctionGlazing":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_get(self)

    def set(self, t: "RefractionExtinctionGlazing") -> "void":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRefractionExtinctionGlazing

# Register OptionalRefractionExtinctionGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalRefractionExtinctionGlazing_swigregister(OptionalRefractionExtinctionGlazing)

class RoofVegetationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RoofVegetationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::RoofVegetation >::difference_type", j: "std::vector< openstudio::model::RoofVegetation >::difference_type") -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > > *":
        return _openstudiomodelresources.RoofVegetationVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::RoofVegetation >::difference_type", j: "std::vector< openstudio::model::RoofVegetation >::difference_type") -> "void":
        return _openstudiomodelresources.RoofVegetationVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type":
        return _openstudiomodelresources.RoofVegetationVector_pop(self)

    def append(self, x: "RoofVegetation") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector_size(self)

    def swap(self, v: "RoofVegetationVector") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RoofVegetation >::reverse_iterator":
        return _openstudiomodelresources.RoofVegetationVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RoofVegetation >::reverse_iterator":
        return _openstudiomodelresources.RoofVegetationVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::RoofVegetation >::allocator_type":
        return _openstudiomodelresources.RoofVegetationVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RoofVegetationVector_swiginit(self, _openstudiomodelresources.new_RoofVegetationVector(*args))

    def push_back(self, x: "RoofVegetation") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::RoofVegetation >::size_type", x: "RoofVegetation") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::RoofVegetation >::size_type", x: "RoofVegetation") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::RoofVegetation >::size_type") -> "void":
        return _openstudiomodelresources.RoofVegetationVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetationVector

# Register RoofVegetationVector in _openstudiomodelresources:
_openstudiomodelresources.RoofVegetationVector_swigregister(RoofVegetationVector)

class OptionalRoofVegetation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRoofVegetation_swiginit(self, _openstudiomodelresources.new_OptionalRoofVegetation(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRoofVegetation_reset(self)

    def __ref__(self) -> "openstudio::model::RoofVegetation":
        return _openstudiomodelresources.OptionalRoofVegetation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRoofVegetation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRoofVegetation_isNull(self)

    def get(self) -> "openstudio::model::RoofVegetation":
        return _openstudiomodelresources.OptionalRoofVegetation_get(self)

    def set(self, t: "RoofVegetation") -> "void":
        return _openstudiomodelresources.OptionalRoofVegetation_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRoofVegetation

# Register OptionalRoofVegetation in _openstudiomodelresources:
_openstudiomodelresources.OptionalRoofVegetation_swigregister(OptionalRoofVegetation)

class ScreenVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScreenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScreenVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScreenVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Screen >::difference_type", j: "std::vector< openstudio::model::Screen >::difference_type") -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > > *":
        return _openstudiomodelresources.ScreenVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Screen >::difference_type", j: "std::vector< openstudio::model::Screen >::difference_type") -> "void":
        return _openstudiomodelresources.ScreenVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Screen >::value_type":
        return _openstudiomodelresources.ScreenVector_pop(self)

    def append(self, x: "Screen") -> "void":
        return _openstudiomodelresources.ScreenVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScreenVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector_size(self)

    def swap(self, v: "ScreenVector") -> "void":
        return _openstudiomodelresources.ScreenVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Screen >::reverse_iterator":
        return _openstudiomodelresources.ScreenVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Screen >::reverse_iterator":
        return _openstudiomodelresources.ScreenVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScreenVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Screen >::allocator_type":
        return _openstudiomodelresources.ScreenVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScreenVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScreenVector_swiginit(self, _openstudiomodelresources.new_ScreenVector(*args))

    def push_back(self, x: "Screen") -> "void":
        return _openstudiomodelresources.ScreenVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Screen >::size_type", x: "Screen") -> "void":
        return _openstudiomodelresources.ScreenVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Screen >::size_type", x: "Screen") -> "void":
        return _openstudiomodelresources.ScreenVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Screen >::size_type") -> "void":
        return _openstudiomodelresources.ScreenVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScreenVector

# Register ScreenVector in _openstudiomodelresources:
_openstudiomodelresources.ScreenVector_swigregister(ScreenVector)

class OptionalScreen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScreen_swiginit(self, _openstudiomodelresources.new_OptionalScreen(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScreen_reset(self)

    def __ref__(self) -> "openstudio::model::Screen":
        return _openstudiomodelresources.OptionalScreen___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScreen_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScreen_isNull(self)

    def get(self) -> "openstudio::model::Screen":
        return _openstudiomodelresources.OptionalScreen_get(self)

    def set(self, t: "Screen") -> "void":
        return _openstudiomodelresources.OptionalScreen_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScreen

# Register OptionalScreen in _openstudiomodelresources:
_openstudiomodelresources.OptionalScreen_swigregister(OptionalScreen)

class ShadeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Shade >::difference_type", j: "std::vector< openstudio::model::Shade >::difference_type") -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > > *":
        return _openstudiomodelresources.ShadeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Shade >::difference_type", j: "std::vector< openstudio::model::Shade >::difference_type") -> "void":
        return _openstudiomodelresources.ShadeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Shade >::value_type":
        return _openstudiomodelresources.ShadeVector_pop(self)

    def append(self, x: "Shade") -> "void":
        return _openstudiomodelresources.ShadeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector_size(self)

    def swap(self, v: "ShadeVector") -> "void":
        return _openstudiomodelresources.ShadeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Shade >::reverse_iterator":
        return _openstudiomodelresources.ShadeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Shade >::reverse_iterator":
        return _openstudiomodelresources.ShadeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Shade >::allocator_type":
        return _openstudiomodelresources.ShadeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadeVector_swiginit(self, _openstudiomodelresources.new_ShadeVector(*args))

    def push_back(self, x: "Shade") -> "void":
        return _openstudiomodelresources.ShadeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Shade >::size_type", x: "Shade") -> "void":
        return _openstudiomodelresources.ShadeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Shade >::size_type", x: "Shade") -> "void":
        return _openstudiomodelresources.ShadeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Shade >::size_type") -> "void":
        return _openstudiomodelresources.ShadeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadeVector

# Register ShadeVector in _openstudiomodelresources:
_openstudiomodelresources.ShadeVector_swigregister(ShadeVector)

class OptionalShade(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShade_swiginit(self, _openstudiomodelresources.new_OptionalShade(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShade_reset(self)

    def __ref__(self) -> "openstudio::model::Shade":
        return _openstudiomodelresources.OptionalShade___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShade_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShade_isNull(self)

    def get(self) -> "openstudio::model::Shade":
        return _openstudiomodelresources.OptionalShade_get(self)

    def set(self, t: "Shade") -> "void":
        return _openstudiomodelresources.OptionalShade_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShade

# Register OptionalShade in _openstudiomodelresources:
_openstudiomodelresources.OptionalShade_swigregister(OptionalShade)

class SimpleGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SimpleGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SimpleGlazing >::difference_type", j: "std::vector< openstudio::model::SimpleGlazing >::difference_type") -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > > *":
        return _openstudiomodelresources.SimpleGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SimpleGlazing >::difference_type", j: "std::vector< openstudio::model::SimpleGlazing >::difference_type") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type":
        return _openstudiomodelresources.SimpleGlazingVector_pop(self)

    def append(self, x: "SimpleGlazing") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector_size(self)

    def swap(self, v: "SimpleGlazingVector") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SimpleGlazing >::reverse_iterator":
        return _openstudiomodelresources.SimpleGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SimpleGlazing >::reverse_iterator":
        return _openstudiomodelresources.SimpleGlazingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SimpleGlazing >::allocator_type":
        return _openstudiomodelresources.SimpleGlazingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SimpleGlazingVector_swiginit(self, _openstudiomodelresources.new_SimpleGlazingVector(*args))

    def push_back(self, x: "SimpleGlazing") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SimpleGlazing >::size_type", x: "SimpleGlazing") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SimpleGlazing >::size_type", x: "SimpleGlazing") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SimpleGlazing >::size_type") -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazingVector

# Register SimpleGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.SimpleGlazingVector_swigregister(SimpleGlazingVector)

class OptionalSimpleGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSimpleGlazing_swiginit(self, _openstudiomodelresources.new_OptionalSimpleGlazing(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSimpleGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::SimpleGlazing":
        return _openstudiomodelresources.OptionalSimpleGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSimpleGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSimpleGlazing_isNull(self)

    def get(self) -> "openstudio::model::SimpleGlazing":
        return _openstudiomodelresources.OptionalSimpleGlazing_get(self)

    def set(self, t: "SimpleGlazing") -> "void":
        return _openstudiomodelresources.OptionalSimpleGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSimpleGlazing

# Register OptionalSimpleGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalSimpleGlazing_swigregister(OptionalSimpleGlazing)

class StandardGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::StandardGlazing >::difference_type", j: "std::vector< openstudio::model::StandardGlazing >::difference_type") -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > > *":
        return _openstudiomodelresources.StandardGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::StandardGlazing >::difference_type", j: "std::vector< openstudio::model::StandardGlazing >::difference_type") -> "void":
        return _openstudiomodelresources.StandardGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type":
        return _openstudiomodelresources.StandardGlazingVector_pop(self)

    def append(self, x: "StandardGlazing") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector_size(self)

    def swap(self, v: "StandardGlazingVector") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardGlazing >::reverse_iterator":
        return _openstudiomodelresources.StandardGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardGlazing >::reverse_iterator":
        return _openstudiomodelresources.StandardGlazingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardGlazing >::allocator_type":
        return _openstudiomodelresources.StandardGlazingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardGlazingVector_swiginit(self, _openstudiomodelresources.new_StandardGlazingVector(*args))

    def push_back(self, x: "StandardGlazing") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::StandardGlazing >::size_type", x: "StandardGlazing") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::StandardGlazing >::size_type", x: "StandardGlazing") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::StandardGlazing >::size_type") -> "void":
        return _openstudiomodelresources.StandardGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazingVector

# Register StandardGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.StandardGlazingVector_swigregister(StandardGlazingVector)

class OptionalStandardGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardGlazing_swiginit(self, _openstudiomodelresources.new_OptionalStandardGlazing(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::StandardGlazing":
        return _openstudiomodelresources.OptionalStandardGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardGlazing_isNull(self)

    def get(self) -> "openstudio::model::StandardGlazing":
        return _openstudiomodelresources.OptionalStandardGlazing_get(self)

    def set(self, t: "StandardGlazing") -> "void":
        return _openstudiomodelresources.OptionalStandardGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardGlazing

# Register OptionalStandardGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardGlazing_swigregister(OptionalStandardGlazing)

class StandardOpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type") -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > > *":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type", j: "std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop(self)

    def append(self, x: "StandardOpaqueMaterial") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_size(self)

    def swap(self, v: "StandardOpaqueMaterialVector") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardOpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_StandardOpaqueMaterialVector(*args))

    def push_back(self, x: "StandardOpaqueMaterial") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type", x: "StandardOpaqueMaterial") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type", x: "StandardOpaqueMaterial") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type") -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterialVector

# Register StandardOpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.StandardOpaqueMaterialVector_swigregister(StandardOpaqueMaterialVector)

class OptionalStandardOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalStandardOpaqueMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::StandardOpaqueMaterial":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::StandardOpaqueMaterial":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_get(self)

    def set(self, t: "StandardOpaqueMaterial") -> "void":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardOpaqueMaterial

# Register OptionalStandardOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardOpaqueMaterial_swigregister(OptionalStandardOpaqueMaterial)

class ThermochromicGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ThermochromicGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ThermochromicGlazing >::difference_type", j: "std::vector< openstudio::model::ThermochromicGlazing >::difference_type") -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > > *":
        return _openstudiomodelresources.ThermochromicGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ThermochromicGlazing >::difference_type", j: "std::vector< openstudio::model::ThermochromicGlazing >::difference_type") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_pop(self)

    def append(self, x: "ThermochromicGlazing") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_size(self)

    def swap(self, v: "ThermochromicGlazingVector") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::reverse_iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::reverse_iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::allocator_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ThermochromicGlazingVector_swiginit(self, _openstudiomodelresources.new_ThermochromicGlazingVector(*args))

    def push_back(self, x: "ThermochromicGlazing") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ThermochromicGlazing >::size_type", x: "ThermochromicGlazing") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ThermochromicGlazing >::size_type", x: "ThermochromicGlazing") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ThermochromicGlazing >::size_type") -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazingVector

# Register ThermochromicGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.ThermochromicGlazingVector_swigregister(ThermochromicGlazingVector)

class OptionalThermochromicGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalThermochromicGlazing_swiginit(self, _openstudiomodelresources.new_OptionalThermochromicGlazing(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalThermochromicGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::ThermochromicGlazing":
        return _openstudiomodelresources.OptionalThermochromicGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalThermochromicGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalThermochromicGlazing_isNull(self)

    def get(self) -> "openstudio::model::ThermochromicGlazing":
        return _openstudiomodelresources.OptionalThermochromicGlazing_get(self)

    def set(self, t: "ThermochromicGlazing") -> "void":
        return _openstudiomodelresources.OptionalThermochromicGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalThermochromicGlazing

# Register OptionalThermochromicGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalThermochromicGlazing_swigregister(OptionalThermochromicGlazing)

class StandardsInformationMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardsInformationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::StandardsInformationMaterial >::difference_type", j: "std::vector< openstudio::model::StandardsInformationMaterial >::difference_type") -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > > *":
        return _openstudiomodelresources.StandardsInformationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::StandardsInformationMaterial >::difference_type", j: "std::vector< openstudio::model::StandardsInformationMaterial >::difference_type") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop(self)

    def append(self, x: "StandardsInformationMaterial") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_size(self)

    def swap(self, v: "StandardsInformationMaterialVector") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::allocator_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationMaterialVector_swiginit(self, _openstudiomodelresources.new_StandardsInformationMaterialVector(*args))

    def push_back(self, x: "StandardsInformationMaterial") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::StandardsInformationMaterial >::size_type", x: "StandardsInformationMaterial") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::StandardsInformationMaterial >::size_type", x: "StandardsInformationMaterial") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::StandardsInformationMaterial >::size_type") -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterialVector

# Register StandardsInformationMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationMaterialVector_swigregister(StandardsInformationMaterialVector)

class OptionalStandardsInformationMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardsInformationMaterial_swiginit(self, _openstudiomodelresources.new_OptionalStandardsInformationMaterial(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_isNull(self)

    def get(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_get(self)

    def set(self, t: "StandardsInformationMaterial") -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationMaterial

# Register OptionalStandardsInformationMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardsInformationMaterial_swigregister(OptionalStandardsInformationMaterial)

class ConstructionBaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ConstructionBase >::difference_type", j: "std::vector< openstudio::model::ConstructionBase >::difference_type") -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > > *":
        return _openstudiomodelresources.ConstructionBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ConstructionBase >::difference_type", j: "std::vector< openstudio::model::ConstructionBase >::difference_type") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type":
        return _openstudiomodelresources.ConstructionBaseVector_pop(self)

    def append(self, x: "ConstructionBase") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector_size(self)

    def swap(self, v: "ConstructionBaseVector") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConstructionBase >::reverse_iterator":
        return _openstudiomodelresources.ConstructionBaseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConstructionBase >::reverse_iterator":
        return _openstudiomodelresources.ConstructionBaseVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ConstructionBase >::allocator_type":
        return _openstudiomodelresources.ConstructionBaseVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionBaseVector_swiginit(self, _openstudiomodelresources.new_ConstructionBaseVector(*args))

    def push_back(self, x: "ConstructionBase") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ConstructionBase >::size_type", x: "ConstructionBase") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ConstructionBase >::size_type", x: "ConstructionBase") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ConstructionBase >::size_type") -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBaseVector

# Register ConstructionBaseVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionBaseVector_swigregister(ConstructionBaseVector)

class OptionalConstructionBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionBase_swiginit(self, _openstudiomodelresources.new_OptionalConstructionBase(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstructionBase_reset(self)

    def __ref__(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.OptionalConstructionBase___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionBase_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionBase_isNull(self)

    def get(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.OptionalConstructionBase_get(self)

    def set(self, t: "ConstructionBase") -> "void":
        return _openstudiomodelresources.OptionalConstructionBase_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionBase

# Register OptionalConstructionBase in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionBase_swigregister(OptionalConstructionBase)

class LayeredConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LayeredConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LayeredConstruction >::difference_type", j: "std::vector< openstudio::model::LayeredConstruction >::difference_type") -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > > *":
        return _openstudiomodelresources.LayeredConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LayeredConstruction >::difference_type", j: "std::vector< openstudio::model::LayeredConstruction >::difference_type") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type":
        return _openstudiomodelresources.LayeredConstructionVector_pop(self)

    def append(self, x: "LayeredConstruction") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector_size(self)

    def swap(self, v: "LayeredConstructionVector") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LayeredConstruction >::reverse_iterator":
        return _openstudiomodelresources.LayeredConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LayeredConstruction >::reverse_iterator":
        return _openstudiomodelresources.LayeredConstructionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LayeredConstruction >::allocator_type":
        return _openstudiomodelresources.LayeredConstructionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LayeredConstructionVector_swiginit(self, _openstudiomodelresources.new_LayeredConstructionVector(*args))

    def push_back(self, x: "LayeredConstruction") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LayeredConstruction >::size_type", x: "LayeredConstruction") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LayeredConstruction >::size_type", x: "LayeredConstruction") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LayeredConstruction >::size_type") -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstructionVector

# Register LayeredConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.LayeredConstructionVector_swigregister(LayeredConstructionVector)

class OptionalLayeredConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLayeredConstruction_swiginit(self, _openstudiomodelresources.new_OptionalLayeredConstruction(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLayeredConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::LayeredConstruction":
        return _openstudiomodelresources.OptionalLayeredConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLayeredConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLayeredConstruction_isNull(self)

    def get(self) -> "openstudio::model::LayeredConstruction":
        return _openstudiomodelresources.OptionalLayeredConstruction_get(self)

    def set(self, t: "LayeredConstruction") -> "void":
        return _openstudiomodelresources.OptionalLayeredConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLayeredConstruction

# Register OptionalLayeredConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalLayeredConstruction_swigregister(OptionalLayeredConstruction)

class ConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Construction >::difference_type", j: "std::vector< openstudio::model::Construction >::difference_type") -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > > *":
        return _openstudiomodelresources.ConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Construction >::difference_type", j: "std::vector< openstudio::model::Construction >::difference_type") -> "void":
        return _openstudiomodelresources.ConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Construction >::value_type":
        return _openstudiomodelresources.ConstructionVector_pop(self)

    def append(self, x: "Construction") -> "void":
        return _openstudiomodelresources.ConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector_size(self)

    def swap(self, v: "ConstructionVector") -> "void":
        return _openstudiomodelresources.ConstructionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Construction >::reverse_iterator":
        return _openstudiomodelresources.ConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Construction >::reverse_iterator":
        return _openstudiomodelresources.ConstructionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Construction >::allocator_type":
        return _openstudiomodelresources.ConstructionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionVector_swiginit(self, _openstudiomodelresources.new_ConstructionVector(*args))

    def push_back(self, x: "Construction") -> "void":
        return _openstudiomodelresources.ConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Construction >::size_type", x: "Construction") -> "void":
        return _openstudiomodelresources.ConstructionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Construction >::size_type", x: "Construction") -> "void":
        return _openstudiomodelresources.ConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Construction >::size_type") -> "void":
        return _openstudiomodelresources.ConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionVector

# Register ConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionVector_swigregister(ConstructionVector)

class OptionalConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstruction_swiginit(self, _openstudiomodelresources.new_OptionalConstruction(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.OptionalConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstruction_isNull(self)

    def get(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.OptionalConstruction_get(self)

    def set(self, t: "Construction") -> "void":
        return _openstudiomodelresources.OptionalConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstruction

# Register OptionalConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstruction_swigregister(OptionalConstruction)

class ConstructionAirBoundaryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::size_type":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ConstructionAirBoundary >::difference_type", j: "std::vector< openstudio::model::ConstructionAirBoundary >::difference_type") -> "std::vector< openstudio::model::ConstructionAirBoundary,std::allocator< openstudio::model::ConstructionAirBoundary > > *":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ConstructionAirBoundary >::difference_type", j: "std::vector< openstudio::model::ConstructionAirBoundary >::difference_type") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConstructionAirBoundary >::value_type const &":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::value_type":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_pop(self)

    def append(self, x: "ConstructionAirBoundary") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::size_type":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_size(self)

    def swap(self, v: "ConstructionAirBoundaryVector") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::iterator":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::iterator":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::reverse_iterator":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::reverse_iterator":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::allocator_type":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConstructionAirBoundary >::iterator":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionAirBoundaryVector_swiginit(self, _openstudiomodelresources.new_ConstructionAirBoundaryVector(*args))

    def push_back(self, x: "ConstructionAirBoundary") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::value_type const &":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::value_type const &":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ConstructionAirBoundary >::size_type", x: "ConstructionAirBoundary") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ConstructionAirBoundary >::size_type", x: "ConstructionAirBoundary") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ConstructionAirBoundary >::size_type") -> "void":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConstructionAirBoundary >::size_type":
        return _openstudiomodelresources.ConstructionAirBoundaryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionAirBoundaryVector

# Register ConstructionAirBoundaryVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionAirBoundaryVector_swigregister(ConstructionAirBoundaryVector)

class OptionalConstructionAirBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionAirBoundary_swiginit(self, _openstudiomodelresources.new_OptionalConstructionAirBoundary(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstructionAirBoundary_reset(self)

    def __ref__(self) -> "openstudio::model::ConstructionAirBoundary":
        return _openstudiomodelresources.OptionalConstructionAirBoundary___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionAirBoundary_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionAirBoundary_isNull(self)

    def get(self) -> "openstudio::model::ConstructionAirBoundary":
        return _openstudiomodelresources.OptionalConstructionAirBoundary_get(self)

    def set(self, t: "ConstructionAirBoundary") -> "void":
        return _openstudiomodelresources.OptionalConstructionAirBoundary_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionAirBoundary

# Register OptionalConstructionAirBoundary in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionAirBoundary_swigregister(OptionalConstructionAirBoundary)

class ConstructionWithInternalSourceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type", j: "std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type") -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > > *":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type", j: "std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop(self)

    def append(self, x: "ConstructionWithInternalSource") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_size(self)

    def swap(self, v: "ConstructionWithInternalSourceVector") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::reverse_iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::reverse_iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::allocator_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionWithInternalSourceVector_swiginit(self, _openstudiomodelresources.new_ConstructionWithInternalSourceVector(*args))

    def push_back(self, x: "ConstructionWithInternalSource") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type", x: "ConstructionWithInternalSource") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type", x: "ConstructionWithInternalSource") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type") -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSourceVector

# Register ConstructionWithInternalSourceVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionWithInternalSourceVector_swigregister(ConstructionWithInternalSourceVector)

class OptionalConstructionWithInternalSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionWithInternalSource_swiginit(self, _openstudiomodelresources.new_OptionalConstructionWithInternalSource(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_reset(self)

    def __ref__(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_isNull(self)

    def get(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_get(self)

    def set(self, t: "ConstructionWithInternalSource") -> "void":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionWithInternalSource

# Register OptionalConstructionWithInternalSource in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionWithInternalSource_swigregister(OptionalConstructionWithInternalSource)

class CFactorUndergroundWallConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type", j: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type") -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > > *":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type", j: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop(self)

    def append(self, x: "CFactorUndergroundWallConstruction") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_size(self)

    def swap(self, v: "CFactorUndergroundWallConstructionVector") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::reverse_iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::reverse_iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::allocator_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swiginit(self, _openstudiomodelresources.new_CFactorUndergroundWallConstructionVector(*args))

    def push_back(self, x: "CFactorUndergroundWallConstruction") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type", x: "CFactorUndergroundWallConstruction") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type", x: "CFactorUndergroundWallConstruction") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type") -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstructionVector

# Register CFactorUndergroundWallConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.CFactorUndergroundWallConstructionVector_swigregister(CFactorUndergroundWallConstructionVector)

class OptionalCFactorUndergroundWallConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_swiginit(self, _openstudiomodelresources.new_OptionalCFactorUndergroundWallConstruction(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::CFactorUndergroundWallConstruction":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_isNull(self)

    def get(self) -> "openstudio::model::CFactorUndergroundWallConstruction":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_get(self)

    def set(self, t: "CFactorUndergroundWallConstruction") -> "void":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCFactorUndergroundWallConstruction

# Register OptionalCFactorUndergroundWallConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_swigregister(OptionalCFactorUndergroundWallConstruction)

class FFactorGroundFloorConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type", j: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type") -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > > *":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type", j: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop(self)

    def append(self, x: "FFactorGroundFloorConstruction") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_size(self)

    def swap(self, v: "FFactorGroundFloorConstructionVector") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::reverse_iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::reverse_iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::allocator_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.FFactorGroundFloorConstructionVector_swiginit(self, _openstudiomodelresources.new_FFactorGroundFloorConstructionVector(*args))

    def push_back(self, x: "FFactorGroundFloorConstruction") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type", x: "FFactorGroundFloorConstruction") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type", x: "FFactorGroundFloorConstruction") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type") -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstructionVector

# Register FFactorGroundFloorConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.FFactorGroundFloorConstructionVector_swigregister(FFactorGroundFloorConstructionVector)

class OptionalFFactorGroundFloorConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_swiginit(self, _openstudiomodelresources.new_OptionalFFactorGroundFloorConstruction(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::FFactorGroundFloorConstruction":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_isNull(self)

    def get(self) -> "openstudio::model::FFactorGroundFloorConstruction":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_get(self)

    def set(self, t: "FFactorGroundFloorConstruction") -> "void":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFFactorGroundFloorConstruction

# Register OptionalFFactorGroundFloorConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalFFactorGroundFloorConstruction_swigregister(OptionalFFactorGroundFloorConstruction)

class StandardsInformationConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardsInformationConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::StandardsInformationConstruction >::difference_type", j: "std::vector< openstudio::model::StandardsInformationConstruction >::difference_type") -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > > *":
        return _openstudiomodelresources.StandardsInformationConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::StandardsInformationConstruction >::difference_type", j: "std::vector< openstudio::model::StandardsInformationConstruction >::difference_type") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop(self)

    def append(self, x: "StandardsInformationConstruction") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_size(self)

    def swap(self, v: "StandardsInformationConstructionVector") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::allocator_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationConstructionVector_swiginit(self, _openstudiomodelresources.new_StandardsInformationConstructionVector(*args))

    def push_back(self, x: "StandardsInformationConstruction") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::StandardsInformationConstruction >::size_type", x: "StandardsInformationConstruction") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::StandardsInformationConstruction >::size_type", x: "StandardsInformationConstruction") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::StandardsInformationConstruction >::size_type") -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstructionVector

# Register StandardsInformationConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationConstructionVector_swigregister(StandardsInformationConstructionVector)

class OptionalStandardsInformationConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardsInformationConstruction_swiginit(self, _openstudiomodelresources.new_OptionalStandardsInformationConstruction(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_isNull(self)

    def get(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_get(self)

    def set(self, t: "StandardsInformationConstruction") -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationConstruction

# Register OptionalStandardsInformationConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardsInformationConstruction_swigregister(OptionalStandardsInformationConstruction)

class WindowDataFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.WindowDataFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WindowDataFile >::difference_type", j: "std::vector< openstudio::model::WindowDataFile >::difference_type") -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > > *":
        return _openstudiomodelresources.WindowDataFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WindowDataFile >::difference_type", j: "std::vector< openstudio::model::WindowDataFile >::difference_type") -> "void":
        return _openstudiomodelresources.WindowDataFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type":
        return _openstudiomodelresources.WindowDataFileVector_pop(self)

    def append(self, x: "WindowDataFile") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector_size(self)

    def swap(self, v: "WindowDataFileVector") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WindowDataFile >::reverse_iterator":
        return _openstudiomodelresources.WindowDataFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WindowDataFile >::reverse_iterator":
        return _openstudiomodelresources.WindowDataFileVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WindowDataFile >::allocator_type":
        return _openstudiomodelresources.WindowDataFileVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.WindowDataFileVector_swiginit(self, _openstudiomodelresources.new_WindowDataFileVector(*args))

    def push_back(self, x: "WindowDataFile") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WindowDataFile >::size_type", x: "WindowDataFile") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WindowDataFile >::size_type", x: "WindowDataFile") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WindowDataFile >::size_type") -> "void":
        return _openstudiomodelresources.WindowDataFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFileVector

# Register WindowDataFileVector in _openstudiomodelresources:
_openstudiomodelresources.WindowDataFileVector_swigregister(WindowDataFileVector)

class OptionalWindowDataFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalWindowDataFile_swiginit(self, _openstudiomodelresources.new_OptionalWindowDataFile(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalWindowDataFile_reset(self)

    def __ref__(self) -> "openstudio::model::WindowDataFile":
        return _openstudiomodelresources.OptionalWindowDataFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowDataFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowDataFile_isNull(self)

    def get(self) -> "openstudio::model::WindowDataFile":
        return _openstudiomodelresources.OptionalWindowDataFile_get(self)

    def set(self, t: "WindowDataFile") -> "void":
        return _openstudiomodelresources.OptionalWindowDataFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowDataFile

# Register OptionalWindowDataFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalWindowDataFile_swigregister(OptionalWindowDataFile)

class WindowPropertyFrameAndDividerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type", j: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type") -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > > *":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type", j: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop(self)

    def append(self, x: "WindowPropertyFrameAndDivider") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_size(self)

    def swap(self, v: "WindowPropertyFrameAndDividerVector") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::reverse_iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::reverse_iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::allocator_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swiginit(self, _openstudiomodelresources.new_WindowPropertyFrameAndDividerVector(*args))

    def push_back(self, x: "WindowPropertyFrameAndDivider") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type", x: "WindowPropertyFrameAndDivider") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type", x: "WindowPropertyFrameAndDivider") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type") -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDividerVector

# Register WindowPropertyFrameAndDividerVector in _openstudiomodelresources:
_openstudiomodelresources.WindowPropertyFrameAndDividerVector_swigregister(WindowPropertyFrameAndDividerVector)

class OptionalWindowPropertyFrameAndDivider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_swiginit(self, _openstudiomodelresources.new_OptionalWindowPropertyFrameAndDivider(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_reset(self)

    def __ref__(self) -> "openstudio::model::WindowPropertyFrameAndDivider":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_isNull(self)

    def get(self) -> "openstudio::model::WindowPropertyFrameAndDivider":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_get(self)

    def set(self, t: "WindowPropertyFrameAndDivider") -> "void":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowPropertyFrameAndDivider

# Register OptionalWindowPropertyFrameAndDivider in _openstudiomodelresources:
_openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_swigregister(OptionalWindowPropertyFrameAndDivider)

class DefaultSubSurfaceConstructionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type", j: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type") -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > > *":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type", j: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop(self)

    def append(self, x: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_size(self)

    def swap(self, v: "DefaultSubSurfaceConstructionsVector") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::allocator_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swiginit(self, _openstudiomodelresources.new_DefaultSubSurfaceConstructionsVector(*args))

    def push_back(self, x: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type", x: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type", x: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructionsVector

# Register DefaultSubSurfaceConstructionsVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swigregister(DefaultSubSurfaceConstructionsVector)

class OptionalDefaultSubSurfaceConstructions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_OptionalDefaultSubSurfaceConstructions(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultSubSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_isNull(self)

    def get(self) -> "openstudio::model::DefaultSubSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_get(self)

    def set(self, t: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSubSurfaceConstructions

# Register OptionalDefaultSubSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_swigregister(OptionalDefaultSubSurfaceConstructions)

class DefaultSurfaceConstructionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type", j: "std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type") -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > > *":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type", j: "std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop(self)

    def append(self, x: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_size(self)

    def swap(self, v: "DefaultSurfaceConstructionsVector") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::allocator_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSurfaceConstructionsVector_swiginit(self, _openstudiomodelresources.new_DefaultSurfaceConstructionsVector(*args))

    def push_back(self, x: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type", x: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type", x: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructionsVector

# Register DefaultSurfaceConstructionsVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultSurfaceConstructionsVector_swigregister(DefaultSurfaceConstructionsVector)

class OptionalDefaultSurfaceConstructions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_OptionalDefaultSurfaceConstructions(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_isNull(self)

    def get(self) -> "openstudio::model::DefaultSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_get(self)

    def set(self, t: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSurfaceConstructions

# Register OptionalDefaultSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultSurfaceConstructions_swigregister(OptionalDefaultSurfaceConstructions)

class ShadingControlVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadingControlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ShadingControl >::difference_type", j: "std::vector< openstudio::model::ShadingControl >::difference_type") -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > > *":
        return _openstudiomodelresources.ShadingControlVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ShadingControl >::difference_type", j: "std::vector< openstudio::model::ShadingControl >::difference_type") -> "void":
        return _openstudiomodelresources.ShadingControlVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ShadingControl >::value_type":
        return _openstudiomodelresources.ShadingControlVector_pop(self)

    def append(self, x: "ShadingControl") -> "void":
        return _openstudiomodelresources.ShadingControlVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector_size(self)

    def swap(self, v: "ShadingControlVector") -> "void":
        return _openstudiomodelresources.ShadingControlVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ShadingControl >::reverse_iterator":
        return _openstudiomodelresources.ShadingControlVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ShadingControl >::reverse_iterator":
        return _openstudiomodelresources.ShadingControlVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadingControlVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ShadingControl >::allocator_type":
        return _openstudiomodelresources.ShadingControlVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadingControlVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadingControlVector_swiginit(self, _openstudiomodelresources.new_ShadingControlVector(*args))

    def push_back(self, x: "ShadingControl") -> "void":
        return _openstudiomodelresources.ShadingControlVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ShadingControl >::size_type", x: "ShadingControl") -> "void":
        return _openstudiomodelresources.ShadingControlVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ShadingControl >::size_type", x: "ShadingControl") -> "void":
        return _openstudiomodelresources.ShadingControlVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ShadingControl >::size_type") -> "void":
        return _openstudiomodelresources.ShadingControlVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControlVector

# Register ShadingControlVector in _openstudiomodelresources:
_openstudiomodelresources.ShadingControlVector_swigregister(ShadingControlVector)

class OptionalShadingControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShadingControl_swiginit(self, _openstudiomodelresources.new_OptionalShadingControl(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShadingControl_reset(self)

    def __ref__(self) -> "openstudio::model::ShadingControl":
        return _openstudiomodelresources.OptionalShadingControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingControl_isNull(self)

    def get(self) -> "openstudio::model::ShadingControl":
        return _openstudiomodelresources.OptionalShadingControl_get(self)

    def set(self, t: "ShadingControl") -> "void":
        return _openstudiomodelresources.OptionalShadingControl_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingControl

# Register OptionalShadingControl in _openstudiomodelresources:
_openstudiomodelresources.OptionalShadingControl_swigregister(OptionalShadingControl)

class CurveVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Curve >::difference_type", j: "std::vector< openstudio::model::Curve >::difference_type") -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > > *":
        return _openstudiomodelresources.CurveVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Curve >::difference_type", j: "std::vector< openstudio::model::Curve >::difference_type") -> "void":
        return _openstudiomodelresources.CurveVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Curve >::value_type":
        return _openstudiomodelresources.CurveVector_pop(self)

    def append(self, x: "Curve") -> "void":
        return _openstudiomodelresources.CurveVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector_size(self)

    def swap(self, v: "CurveVector") -> "void":
        return _openstudiomodelresources.CurveVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Curve >::reverse_iterator":
        return _openstudiomodelresources.CurveVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Curve >::reverse_iterator":
        return _openstudiomodelresources.CurveVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Curve >::allocator_type":
        return _openstudiomodelresources.CurveVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveVector_swiginit(self, _openstudiomodelresources.new_CurveVector(*args))

    def push_back(self, x: "Curve") -> "void":
        return _openstudiomodelresources.CurveVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Curve >::size_type", x: "Curve") -> "void":
        return _openstudiomodelresources.CurveVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Curve >::size_type", x: "Curve") -> "void":
        return _openstudiomodelresources.CurveVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Curve >::size_type") -> "void":
        return _openstudiomodelresources.CurveVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveVector

# Register CurveVector in _openstudiomodelresources:
_openstudiomodelresources.CurveVector_swigregister(CurveVector)

class OptionalCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurve_swiginit(self, _openstudiomodelresources.new_OptionalCurve(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurve_reset(self)

    def __ref__(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.OptionalCurve___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurve_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurve_isNull(self)

    def get(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.OptionalCurve_get(self)

    def set(self, t: "Curve") -> "void":
        return _openstudiomodelresources.OptionalCurve_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurve

# Register OptionalCurve in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurve_swigregister(OptionalCurve)

class CurveBicubicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveBicubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveBicubic >::difference_type", j: "std::vector< openstudio::model::CurveBicubic >::difference_type") -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > > *":
        return _openstudiomodelresources.CurveBicubicVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveBicubic >::difference_type", j: "std::vector< openstudio::model::CurveBicubic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveBicubicVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type":
        return _openstudiomodelresources.CurveBicubicVector_pop(self)

    def append(self, x: "CurveBicubic") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector_size(self)

    def swap(self, v: "CurveBicubicVector") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveBicubic >::reverse_iterator":
        return _openstudiomodelresources.CurveBicubicVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveBicubic >::reverse_iterator":
        return _openstudiomodelresources.CurveBicubicVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveBicubic >::allocator_type":
        return _openstudiomodelresources.CurveBicubicVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveBicubicVector_swiginit(self, _openstudiomodelresources.new_CurveBicubicVector(*args))

    def push_back(self, x: "CurveBicubic") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveBicubic >::size_type", x: "CurveBicubic") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveBicubic >::size_type", x: "CurveBicubic") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveBicubic >::size_type") -> "void":
        return _openstudiomodelresources.CurveBicubicVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubicVector

# Register CurveBicubicVector in _openstudiomodelresources:
_openstudiomodelresources.CurveBicubicVector_swigregister(CurveBicubicVector)

class OptionalCurveBicubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveBicubic_swiginit(self, _openstudiomodelresources.new_OptionalCurveBicubic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveBicubic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelresources.OptionalCurveBicubic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBicubic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBicubic_isNull(self)

    def get(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelresources.OptionalCurveBicubic_get(self)

    def set(self, t: "CurveBicubic") -> "void":
        return _openstudiomodelresources.OptionalCurveBicubic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBicubic

# Register OptionalCurveBicubic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveBicubic_swigregister(OptionalCurveBicubic)

class CurveBiquadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveBiquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveBiquadratic >::difference_type", j: "std::vector< openstudio::model::CurveBiquadratic >::difference_type") -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > > *":
        return _openstudiomodelresources.CurveBiquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveBiquadratic >::difference_type", j: "std::vector< openstudio::model::CurveBiquadratic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type":
        return _openstudiomodelresources.CurveBiquadraticVector_pop(self)

    def append(self, x: "CurveBiquadratic") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector_size(self)

    def swap(self, v: "CurveBiquadraticVector") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveBiquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveBiquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveBiquadratic >::allocator_type":
        return _openstudiomodelresources.CurveBiquadraticVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveBiquadraticVector_swiginit(self, _openstudiomodelresources.new_CurveBiquadraticVector(*args))

    def push_back(self, x: "CurveBiquadratic") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveBiquadratic >::size_type", x: "CurveBiquadratic") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveBiquadratic >::size_type", x: "CurveBiquadratic") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveBiquadratic >::size_type") -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadraticVector

# Register CurveBiquadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveBiquadraticVector_swigregister(CurveBiquadraticVector)

class OptionalCurveBiquadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveBiquadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveBiquadratic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveBiquadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelresources.OptionalCurveBiquadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBiquadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBiquadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelresources.OptionalCurveBiquadratic_get(self)

    def set(self, t: "CurveBiquadratic") -> "void":
        return _openstudiomodelresources.OptionalCurveBiquadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBiquadratic

# Register OptionalCurveBiquadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveBiquadratic_swigregister(OptionalCurveBiquadratic)

class CurveCubicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveCubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveCubic >::difference_type", j: "std::vector< openstudio::model::CurveCubic >::difference_type") -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > > *":
        return _openstudiomodelresources.CurveCubicVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveCubic >::difference_type", j: "std::vector< openstudio::model::CurveCubic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveCubicVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveCubic >::value_type":
        return _openstudiomodelresources.CurveCubicVector_pop(self)

    def append(self, x: "CurveCubic") -> "void":
        return _openstudiomodelresources.CurveCubicVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector_size(self)

    def swap(self, v: "CurveCubicVector") -> "void":
        return _openstudiomodelresources.CurveCubicVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveCubic >::reverse_iterator":
        return _openstudiomodelresources.CurveCubicVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveCubic >::reverse_iterator":
        return _openstudiomodelresources.CurveCubicVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveCubicVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveCubic >::allocator_type":
        return _openstudiomodelresources.CurveCubicVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveCubicVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveCubicVector_swiginit(self, _openstudiomodelresources.new_CurveCubicVector(*args))

    def push_back(self, x: "CurveCubic") -> "void":
        return _openstudiomodelresources.CurveCubicVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveCubic >::size_type", x: "CurveCubic") -> "void":
        return _openstudiomodelresources.CurveCubicVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveCubic >::size_type", x: "CurveCubic") -> "void":
        return _openstudiomodelresources.CurveCubicVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveCubic >::size_type") -> "void":
        return _openstudiomodelresources.CurveCubicVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubicVector

# Register CurveCubicVector in _openstudiomodelresources:
_openstudiomodelresources.CurveCubicVector_swigregister(CurveCubicVector)

class OptionalCurveCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveCubic_swiginit(self, _openstudiomodelresources.new_OptionalCurveCubic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveCubic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveCubic":
        return _openstudiomodelresources.OptionalCurveCubic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveCubic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveCubic_isNull(self)

    def get(self) -> "openstudio::model::CurveCubic":
        return _openstudiomodelresources.OptionalCurveCubic_get(self)

    def set(self, t: "CurveCubic") -> "void":
        return _openstudiomodelresources.OptionalCurveCubic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveCubic

# Register OptionalCurveCubic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveCubic_swigregister(OptionalCurveCubic)

class CurveDoubleExponentialDecayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type", j: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type") -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > > *":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type", j: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop(self)

    def append(self, x: "CurveDoubleExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_size(self)

    def swap(self, v: "CurveDoubleExponentialDecayVector") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::allocator_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveDoubleExponentialDecayVector_swiginit(self, _openstudiomodelresources.new_CurveDoubleExponentialDecayVector(*args))

    def push_back(self, x: "CurveDoubleExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type", x: "CurveDoubleExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type", x: "CurveDoubleExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type") -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecayVector

# Register CurveDoubleExponentialDecayVector in _openstudiomodelresources:
_openstudiomodelresources.CurveDoubleExponentialDecayVector_swigregister(CurveDoubleExponentialDecayVector)

class OptionalCurveDoubleExponentialDecay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_swiginit(self, _openstudiomodelresources.new_OptionalCurveDoubleExponentialDecay(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_reset(self)

    def __ref__(self) -> "openstudio::model::CurveDoubleExponentialDecay":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_isNull(self)

    def get(self) -> "openstudio::model::CurveDoubleExponentialDecay":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_get(self)

    def set(self, t: "CurveDoubleExponentialDecay") -> "void":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveDoubleExponentialDecay

# Register OptionalCurveDoubleExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveDoubleExponentialDecay_swigregister(OptionalCurveDoubleExponentialDecay)

class CurveExponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveExponent >::difference_type", j: "std::vector< openstudio::model::CurveExponent >::difference_type") -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > > *":
        return _openstudiomodelresources.CurveExponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveExponent >::difference_type", j: "std::vector< openstudio::model::CurveExponent >::difference_type") -> "void":
        return _openstudiomodelresources.CurveExponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveExponent >::value_type":
        return _openstudiomodelresources.CurveExponentVector_pop(self)

    def append(self, x: "CurveExponent") -> "void":
        return _openstudiomodelresources.CurveExponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector_size(self)

    def swap(self, v: "CurveExponentVector") -> "void":
        return _openstudiomodelresources.CurveExponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponent >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponent >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponent >::allocator_type":
        return _openstudiomodelresources.CurveExponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentVector_swiginit(self, _openstudiomodelresources.new_CurveExponentVector(*args))

    def push_back(self, x: "CurveExponent") -> "void":
        return _openstudiomodelresources.CurveExponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveExponent >::size_type", x: "CurveExponent") -> "void":
        return _openstudiomodelresources.CurveExponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveExponent >::size_type", x: "CurveExponent") -> "void":
        return _openstudiomodelresources.CurveExponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveExponent >::size_type") -> "void":
        return _openstudiomodelresources.CurveExponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentVector

# Register CurveExponentVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentVector_swigregister(CurveExponentVector)

class OptionalCurveExponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponent_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponent_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponent":
        return _openstudiomodelresources.OptionalCurveExponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponent_isNull(self)

    def get(self) -> "openstudio::model::CurveExponent":
        return _openstudiomodelresources.OptionalCurveExponent_get(self)

    def set(self, t: "CurveExponent") -> "void":
        return _openstudiomodelresources.OptionalCurveExponent_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponent

# Register OptionalCurveExponent in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponent_swigregister(OptionalCurveExponent)

class CurveExponentialDecayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveExponentialDecay >::difference_type", j: "std::vector< openstudio::model::CurveExponentialDecay >::difference_type") -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > > *":
        return _openstudiomodelresources.CurveExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveExponentialDecay >::difference_type", j: "std::vector< openstudio::model::CurveExponentialDecay >::difference_type") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_pop(self)

    def append(self, x: "CurveExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_size(self)

    def swap(self, v: "CurveExponentialDecayVector") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::allocator_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialDecayVector_swiginit(self, _openstudiomodelresources.new_CurveExponentialDecayVector(*args))

    def push_back(self, x: "CurveExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveExponentialDecay >::size_type", x: "CurveExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveExponentialDecay >::size_type", x: "CurveExponentialDecay") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveExponentialDecay >::size_type") -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecayVector

# Register CurveExponentialDecayVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialDecayVector_swigregister(CurveExponentialDecayVector)

class OptionalCurveExponentialDecay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponentialDecay_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponentialDecay(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponentialDecay":
        return _openstudiomodelresources.OptionalCurveExponentialDecay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_isNull(self)

    def get(self) -> "openstudio::model::CurveExponentialDecay":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_get(self)

    def set(self, t: "CurveExponentialDecay") -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialDecay

# Register OptionalCurveExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponentialDecay_swigregister(OptionalCurveExponentialDecay)

class CurveExponentialSkewNormalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type", j: "std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type") -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > > *":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type", j: "std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop(self)

    def append(self, x: "CurveExponentialSkewNormal") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_size(self)

    def swap(self, v: "CurveExponentialSkewNormalVector") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::allocator_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialSkewNormalVector_swiginit(self, _openstudiomodelresources.new_CurveExponentialSkewNormalVector(*args))

    def push_back(self, x: "CurveExponentialSkewNormal") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type", x: "CurveExponentialSkewNormal") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type", x: "CurveExponentialSkewNormal") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type") -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormalVector

# Register CurveExponentialSkewNormalVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialSkewNormalVector_swigregister(CurveExponentialSkewNormalVector)

class OptionalCurveExponentialSkewNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponentialSkewNormal_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponentialSkewNormal(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponentialSkewNormal":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_isNull(self)

    def get(self) -> "openstudio::model::CurveExponentialSkewNormal":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_get(self)

    def set(self, t: "CurveExponentialSkewNormal") -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialSkewNormal

# Register OptionalCurveExponentialSkewNormal in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponentialSkewNormal_swigregister(OptionalCurveExponentialSkewNormal)

class CurveFanPressureRiseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveFanPressureRiseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveFanPressureRise >::difference_type", j: "std::vector< openstudio::model::CurveFanPressureRise >::difference_type") -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > > *":
        return _openstudiomodelresources.CurveFanPressureRiseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveFanPressureRise >::difference_type", j: "std::vector< openstudio::model::CurveFanPressureRise >::difference_type") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop(self)

    def append(self, x: "CurveFanPressureRise") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_size(self)

    def swap(self, v: "CurveFanPressureRiseVector") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::reverse_iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::reverse_iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::allocator_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveFanPressureRiseVector_swiginit(self, _openstudiomodelresources.new_CurveFanPressureRiseVector(*args))

    def push_back(self, x: "CurveFanPressureRise") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveFanPressureRise >::size_type", x: "CurveFanPressureRise") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveFanPressureRise >::size_type", x: "CurveFanPressureRise") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveFanPressureRise >::size_type") -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRiseVector

# Register CurveFanPressureRiseVector in _openstudiomodelresources:
_openstudiomodelresources.CurveFanPressureRiseVector_swigregister(CurveFanPressureRiseVector)

class OptionalCurveFanPressureRise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveFanPressureRise_swiginit(self, _openstudiomodelresources.new_OptionalCurveFanPressureRise(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_reset(self)

    def __ref__(self) -> "openstudio::model::CurveFanPressureRise":
        return _openstudiomodelresources.OptionalCurveFanPressureRise___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_isNull(self)

    def get(self) -> "openstudio::model::CurveFanPressureRise":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_get(self)

    def set(self, t: "CurveFanPressureRise") -> "void":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFanPressureRise

# Register OptionalCurveFanPressureRise in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveFanPressureRise_swigregister(OptionalCurveFanPressureRise)

class CurveFunctionalPressureDropVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type", j: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type") -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > > *":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type", j: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop(self)

    def append(self, x: "CurveFunctionalPressureDrop") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_size(self)

    def swap(self, v: "CurveFunctionalPressureDropVector") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::reverse_iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::reverse_iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::allocator_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveFunctionalPressureDropVector_swiginit(self, _openstudiomodelresources.new_CurveFunctionalPressureDropVector(*args))

    def push_back(self, x: "CurveFunctionalPressureDrop") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type", x: "CurveFunctionalPressureDrop") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type", x: "CurveFunctionalPressureDrop") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type") -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDropVector

# Register CurveFunctionalPressureDropVector in _openstudiomodelresources:
_openstudiomodelresources.CurveFunctionalPressureDropVector_swigregister(CurveFunctionalPressureDropVector)

class OptionalCurveFunctionalPressureDrop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_swiginit(self, _openstudiomodelresources.new_OptionalCurveFunctionalPressureDrop(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_reset(self)

    def __ref__(self) -> "openstudio::model::CurveFunctionalPressureDrop":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_isNull(self)

    def get(self) -> "openstudio::model::CurveFunctionalPressureDrop":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_get(self)

    def set(self, t: "CurveFunctionalPressureDrop") -> "void":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFunctionalPressureDrop

# Register OptionalCurveFunctionalPressureDrop in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveFunctionalPressureDrop_swigregister(OptionalCurveFunctionalPressureDrop)

class CurveLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveLinear >::difference_type", j: "std::vector< openstudio::model::CurveLinear >::difference_type") -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > > *":
        return _openstudiomodelresources.CurveLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveLinear >::difference_type", j: "std::vector< openstudio::model::CurveLinear >::difference_type") -> "void":
        return _openstudiomodelresources.CurveLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveLinear >::value_type":
        return _openstudiomodelresources.CurveLinearVector_pop(self)

    def append(self, x: "CurveLinear") -> "void":
        return _openstudiomodelresources.CurveLinearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector_size(self)

    def swap(self, v: "CurveLinearVector") -> "void":
        return _openstudiomodelresources.CurveLinearVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveLinearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveLinearVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveLinearVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveLinear >::allocator_type":
        return _openstudiomodelresources.CurveLinearVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveLinearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveLinearVector_swiginit(self, _openstudiomodelresources.new_CurveLinearVector(*args))

    def push_back(self, x: "CurveLinear") -> "void":
        return _openstudiomodelresources.CurveLinearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveLinear >::size_type", x: "CurveLinear") -> "void":
        return _openstudiomodelresources.CurveLinearVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveLinear >::size_type", x: "CurveLinear") -> "void":
        return _openstudiomodelresources.CurveLinearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveLinear >::size_type") -> "void":
        return _openstudiomodelresources.CurveLinearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinearVector

# Register CurveLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveLinearVector_swigregister(CurveLinearVector)

class OptionalCurveLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveLinear(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveLinear_reset(self)

    def __ref__(self) -> "openstudio::model::CurveLinear":
        return _openstudiomodelresources.OptionalCurveLinear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveLinear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveLinear_isNull(self)

    def get(self) -> "openstudio::model::CurveLinear":
        return _openstudiomodelresources.OptionalCurveLinear_get(self)

    def set(self, t: "CurveLinear") -> "void":
        return _openstudiomodelresources.OptionalCurveLinear_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveLinear

# Register OptionalCurveLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveLinear_swigregister(OptionalCurveLinear)

class CurveQuadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveQuadratic >::difference_type", j: "std::vector< openstudio::model::CurveQuadratic >::difference_type") -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > > *":
        return _openstudiomodelresources.CurveQuadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveQuadratic >::difference_type", j: "std::vector< openstudio::model::CurveQuadratic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type":
        return _openstudiomodelresources.CurveQuadraticVector_pop(self)

    def append(self, x: "CurveQuadratic") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector_size(self)

    def swap(self, v: "CurveQuadraticVector") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuadratic >::allocator_type":
        return _openstudiomodelresources.CurveQuadraticVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadraticVector_swiginit(self, _openstudiomodelresources.new_CurveQuadraticVector(*args))

    def push_back(self, x: "CurveQuadratic") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveQuadratic >::size_type", x: "CurveQuadratic") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveQuadratic >::size_type", x: "CurveQuadratic") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveQuadratic >::size_type") -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticVector

# Register CurveQuadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticVector_swigregister(CurveQuadraticVector)

class OptionalCurveQuadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuadratic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuadratic":
        return _openstudiomodelresources.OptionalCurveQuadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveQuadratic":
        return _openstudiomodelresources.OptionalCurveQuadratic_get(self)

    def set(self, t: "CurveQuadratic") -> "void":
        return _openstudiomodelresources.OptionalCurveQuadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadratic

# Register OptionalCurveQuadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuadratic_swigregister(OptionalCurveQuadratic)

class CurveQuadraticLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuadraticLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveQuadraticLinear >::difference_type", j: "std::vector< openstudio::model::CurveQuadraticLinear >::difference_type") -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > > *":
        return _openstudiomodelresources.CurveQuadraticLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveQuadraticLinear >::difference_type", j: "std::vector< openstudio::model::CurveQuadraticLinear >::difference_type") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop(self)

    def append(self, x: "CurveQuadraticLinear") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_size(self)

    def swap(self, v: "CurveQuadraticLinearVector") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::allocator_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadraticLinearVector_swiginit(self, _openstudiomodelresources.new_CurveQuadraticLinearVector(*args))

    def push_back(self, x: "CurveQuadraticLinear") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveQuadraticLinear >::size_type", x: "CurveQuadraticLinear") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveQuadraticLinear >::size_type", x: "CurveQuadraticLinear") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveQuadraticLinear >::size_type") -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinearVector

# Register CurveQuadraticLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticLinearVector_swigregister(CurveQuadraticLinearVector)

class OptionalCurveQuadraticLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuadraticLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuadraticLinear(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuadraticLinear":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_isNull(self)

    def get(self) -> "openstudio::model::CurveQuadraticLinear":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_get(self)

    def set(self, t: "CurveQuadraticLinear") -> "void":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadraticLinear

# Register OptionalCurveQuadraticLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuadraticLinear_swigregister(OptionalCurveQuadraticLinear)

class CurveQuarticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuarticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveQuartic >::difference_type", j: "std::vector< openstudio::model::CurveQuartic >::difference_type") -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > > *":
        return _openstudiomodelresources.CurveQuarticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveQuartic >::difference_type", j: "std::vector< openstudio::model::CurveQuartic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveQuarticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type":
        return _openstudiomodelresources.CurveQuarticVector_pop(self)

    def append(self, x: "CurveQuartic") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector_size(self)

    def swap(self, v: "CurveQuarticVector") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuartic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuarticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuartic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuarticVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuartic >::allocator_type":
        return _openstudiomodelresources.CurveQuarticVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuarticVector_swiginit(self, _openstudiomodelresources.new_CurveQuarticVector(*args))

    def push_back(self, x: "CurveQuartic") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveQuartic >::size_type", x: "CurveQuartic") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveQuartic >::size_type", x: "CurveQuartic") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveQuartic >::size_type") -> "void":
        return _openstudiomodelresources.CurveQuarticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuarticVector

# Register CurveQuarticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuarticVector_swigregister(CurveQuarticVector)

class OptionalCurveQuartic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuartic_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuartic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuartic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuartic":
        return _openstudiomodelresources.OptionalCurveQuartic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuartic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuartic_isNull(self)

    def get(self) -> "openstudio::model::CurveQuartic":
        return _openstudiomodelresources.OptionalCurveQuartic_get(self)

    def set(self, t: "CurveQuartic") -> "void":
        return _openstudiomodelresources.OptionalCurveQuartic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuartic

# Register OptionalCurveQuartic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuartic_swigregister(OptionalCurveQuartic)

class CurveRectangularHyperbola1Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type", j: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type") -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > > *":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type", j: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop(self)

    def append(self, x: "CurveRectangularHyperbola1") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_size(self)

    def swap(self, v: "CurveRectangularHyperbola1Vector") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::allocator_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola1Vector_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola1Vector(*args))

    def push_back(self, x: "CurveRectangularHyperbola1") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type", x: "CurveRectangularHyperbola1") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type", x: "CurveRectangularHyperbola1") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1Vector

# Register CurveRectangularHyperbola1Vector in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola1Vector_swigregister(CurveRectangularHyperbola1Vector)

class OptionalCurveRectangularHyperbola1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveRectangularHyperbola1_swiginit(self, _openstudiomodelresources.new_OptionalCurveRectangularHyperbola1(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_reset(self)

    def __ref__(self) -> "openstudio::model::CurveRectangularHyperbola1":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_isNull(self)

    def get(self) -> "openstudio::model::CurveRectangularHyperbola1":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_get(self)

    def set(self, t: "CurveRectangularHyperbola1") -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola1

# Register OptionalCurveRectangularHyperbola1 in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveRectangularHyperbola1_swigregister(OptionalCurveRectangularHyperbola1)

class CurveRectangularHyperbola2Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type", j: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type") -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > > *":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type", j: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop(self)

    def append(self, x: "CurveRectangularHyperbola2") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_size(self)

    def swap(self, v: "CurveRectangularHyperbola2Vector") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::allocator_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola2Vector_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola2Vector(*args))

    def push_back(self, x: "CurveRectangularHyperbola2") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type", x: "CurveRectangularHyperbola2") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type", x: "CurveRectangularHyperbola2") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type") -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2Vector

# Register CurveRectangularHyperbola2Vector in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola2Vector_swigregister(CurveRectangularHyperbola2Vector)

class OptionalCurveRectangularHyperbola2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveRectangularHyperbola2_swiginit(self, _openstudiomodelresources.new_OptionalCurveRectangularHyperbola2(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_reset(self)

    def __ref__(self) -> "openstudio::model::CurveRectangularHyperbola2":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_isNull(self)

    def get(self) -> "openstudio::model::CurveRectangularHyperbola2":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_get(self)

    def set(self, t: "CurveRectangularHyperbola2") -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola2

# Register OptionalCurveRectangularHyperbola2 in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveRectangularHyperbola2_swigregister(OptionalCurveRectangularHyperbola2)

class CurveSigmoidVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveSigmoidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveSigmoid >::difference_type", j: "std::vector< openstudio::model::CurveSigmoid >::difference_type") -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > > *":
        return _openstudiomodelresources.CurveSigmoidVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveSigmoid >::difference_type", j: "std::vector< openstudio::model::CurveSigmoid >::difference_type") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type":
        return _openstudiomodelresources.CurveSigmoidVector_pop(self)

    def append(self, x: "CurveSigmoid") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector_size(self)

    def swap(self, v: "CurveSigmoidVector") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveSigmoid >::reverse_iterator":
        return _openstudiomodelresources.CurveSigmoidVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveSigmoid >::reverse_iterator":
        return _openstudiomodelresources.CurveSigmoidVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveSigmoid >::allocator_type":
        return _openstudiomodelresources.CurveSigmoidVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveSigmoidVector_swiginit(self, _openstudiomodelresources.new_CurveSigmoidVector(*args))

    def push_back(self, x: "CurveSigmoid") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveSigmoid >::size_type", x: "CurveSigmoid") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveSigmoid >::size_type", x: "CurveSigmoid") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveSigmoid >::size_type") -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoidVector

# Register CurveSigmoidVector in _openstudiomodelresources:
_openstudiomodelresources.CurveSigmoidVector_swigregister(CurveSigmoidVector)

class OptionalCurveSigmoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveSigmoid_swiginit(self, _openstudiomodelresources.new_OptionalCurveSigmoid(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveSigmoid_reset(self)

    def __ref__(self) -> "openstudio::model::CurveSigmoid":
        return _openstudiomodelresources.OptionalCurveSigmoid___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveSigmoid_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveSigmoid_isNull(self)

    def get(self) -> "openstudio::model::CurveSigmoid":
        return _openstudiomodelresources.OptionalCurveSigmoid_get(self)

    def set(self, t: "CurveSigmoid") -> "void":
        return _openstudiomodelresources.OptionalCurveSigmoid_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveSigmoid

# Register OptionalCurveSigmoid in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveSigmoid_swigregister(OptionalCurveSigmoid)

class CurveTriquadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveTriquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CurveTriquadratic >::difference_type", j: "std::vector< openstudio::model::CurveTriquadratic >::difference_type") -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > > *":
        return _openstudiomodelresources.CurveTriquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CurveTriquadratic >::difference_type", j: "std::vector< openstudio::model::CurveTriquadratic >::difference_type") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type":
        return _openstudiomodelresources.CurveTriquadraticVector_pop(self)

    def append(self, x: "CurveTriquadratic") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector_size(self)

    def swap(self, v: "CurveTriquadraticVector") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveTriquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveTriquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveTriquadratic >::allocator_type":
        return _openstudiomodelresources.CurveTriquadraticVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveTriquadraticVector_swiginit(self, _openstudiomodelresources.new_CurveTriquadraticVector(*args))

    def push_back(self, x: "CurveTriquadratic") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CurveTriquadratic >::size_type", x: "CurveTriquadratic") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CurveTriquadratic >::size_type", x: "CurveTriquadratic") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CurveTriquadratic >::size_type") -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadraticVector

# Register CurveTriquadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveTriquadraticVector_swigregister(CurveTriquadraticVector)

class OptionalCurveTriquadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveTriquadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveTriquadratic(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveTriquadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveTriquadratic":
        return _openstudiomodelresources.OptionalCurveTriquadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveTriquadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveTriquadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveTriquadratic":
        return _openstudiomodelresources.OptionalCurveTriquadratic_get(self)

    def set(self, t: "CurveTriquadratic") -> "void":
        return _openstudiomodelresources.OptionalCurveTriquadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveTriquadratic

# Register OptionalCurveTriquadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveTriquadratic_swigregister(OptionalCurveTriquadratic)

class TableMultiVariableLookupPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type", j: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type") -> "std::vector< openstudio::model::TableMultiVariableLookupPoint,std::allocator< openstudio::model::TableMultiVariableLookupPoint > > *":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type", j: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop(self)

    def append(self, x: "TableMultiVariableLookupPoint") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_size(self)

    def swap(self, v: "TableMultiVariableLookupPointVector") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::allocator_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupPointVector_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupPointVector(*args))

    def push_back(self, x: "TableMultiVariableLookupPoint") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type", x: "TableMultiVariableLookupPoint") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type", x: "TableMultiVariableLookupPoint") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPointVector

# Register TableMultiVariableLookupPointVector in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupPointVector_swigregister(TableMultiVariableLookupPointVector)

class OptionalTableMultiVariableLookupPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_swiginit(self, _openstudiomodelresources.new_OptionalTableMultiVariableLookupPoint(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_reset(self)

    def __ref__(self) -> "openstudio::model::TableMultiVariableLookupPoint":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_isNull(self)

    def get(self) -> "openstudio::model::TableMultiVariableLookupPoint":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_get(self)

    def set(self, t: "TableMultiVariableLookupPoint") -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookupPoint

# Register OptionalTableMultiVariableLookupPoint in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableMultiVariableLookupPoint_swigregister(OptionalTableMultiVariableLookupPoint)

class TableMultiVariableLookupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.TableMultiVariableLookupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::TableMultiVariableLookup >::difference_type", j: "std::vector< openstudio::model::TableMultiVariableLookup >::difference_type") -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > > *":
        return _openstudiomodelresources.TableMultiVariableLookupVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::TableMultiVariableLookup >::difference_type", j: "std::vector< openstudio::model::TableMultiVariableLookup >::difference_type") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop(self)

    def append(self, x: "TableMultiVariableLookup") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_size(self)

    def swap(self, v: "TableMultiVariableLookupVector") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::allocator_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupVector_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupVector(*args))

    def push_back(self, x: "TableMultiVariableLookup") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector_front(self)

    def back(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::TableMultiVariableLookup >::size_type", x: "TableMultiVariableLookup") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::TableMultiVariableLookup >::size_type", x: "TableMultiVariableLookup") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::TableMultiVariableLookup >::size_type") -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupVector

# Register TableMultiVariableLookupVector in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupVector_swigregister(TableMultiVariableLookupVector)

class OptionalTableMultiVariableLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableMultiVariableLookup_swiginit(self, _openstudiomodelresources.new_OptionalTableMultiVariableLookup(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_reset(self)

    def __ref__(self) -> "openstudio::model::TableMultiVariableLookup":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_isNull(self)

    def get(self) -> "openstudio::model::TableMultiVariableLookup":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_get(self)

    def set(self, t: "TableMultiVariableLookup") -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookup

# Register OptionalTableMultiVariableLookup in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableMultiVariableLookup_swigregister(OptionalTableMultiVariableLookup)

class SpaceLoadDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SpaceLoadDefinition >::difference_type", j: "std::vector< openstudio::model::SpaceLoadDefinition >::difference_type") -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > > *":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SpaceLoadDefinition >::difference_type", j: "std::vector< openstudio::model::SpaceLoadDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop(self)

    def append(self, x: "SpaceLoadDefinition") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_size(self)

    def swap(self, v: "SpaceLoadDefinitionVector") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::allocator_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SpaceLoadDefinitionVector_swiginit(self, _openstudiomodelresources.new_SpaceLoadDefinitionVector(*args))

    def push_back(self, x: "SpaceLoadDefinition") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SpaceLoadDefinition >::size_type", x: "SpaceLoadDefinition") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SpaceLoadDefinition >::size_type", x: "SpaceLoadDefinition") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SpaceLoadDefinition >::size_type") -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinitionVector

# Register SpaceLoadDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.SpaceLoadDefinitionVector_swigregister(SpaceLoadDefinitionVector)

class OptionalSpaceLoadDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSpaceLoadDefinition_swiginit(self, _openstudiomodelresources.new_OptionalSpaceLoadDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::SpaceLoadDefinition":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_isNull(self)

    def get(self) -> "openstudio::model::SpaceLoadDefinition":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_get(self)

    def set(self, t: "SpaceLoadDefinition") -> "void":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSpaceLoadDefinition

# Register OptionalSpaceLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalSpaceLoadDefinition_swigregister(OptionalSpaceLoadDefinition)

class PeopleDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.PeopleDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PeopleDefinition >::difference_type", j: "std::vector< openstudio::model::PeopleDefinition >::difference_type") -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > > *":
        return _openstudiomodelresources.PeopleDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PeopleDefinition >::difference_type", j: "std::vector< openstudio::model::PeopleDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type":
        return _openstudiomodelresources.PeopleDefinitionVector_pop(self)

    def append(self, x: "PeopleDefinition") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector_size(self)

    def swap(self, v: "PeopleDefinitionVector") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PeopleDefinition >::reverse_iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PeopleDefinition >::reverse_iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PeopleDefinition >::allocator_type":
        return _openstudiomodelresources.PeopleDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PeopleDefinitionVector_swiginit(self, _openstudiomodelresources.new_PeopleDefinitionVector(*args))

    def push_back(self, x: "PeopleDefinition") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PeopleDefinition >::size_type", x: "PeopleDefinition") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PeopleDefinition >::size_type", x: "PeopleDefinition") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PeopleDefinition >::size_type") -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinitionVector

# Register PeopleDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.PeopleDefinitionVector_swigregister(PeopleDefinitionVector)

class OptionalPeopleDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPeopleDefinition_swiginit(self, _openstudiomodelresources.new_OptionalPeopleDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalPeopleDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::PeopleDefinition":
        return _openstudiomodelresources.OptionalPeopleDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalPeopleDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalPeopleDefinition_isNull(self)

    def get(self) -> "openstudio::model::PeopleDefinition":
        return _openstudiomodelresources.OptionalPeopleDefinition_get(self)

    def set(self, t: "PeopleDefinition") -> "void":
        return _openstudiomodelresources.OptionalPeopleDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPeopleDefinition

# Register OptionalPeopleDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalPeopleDefinition_swigregister(OptionalPeopleDefinition)

class LightsDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LightsDefinition >::difference_type", j: "std::vector< openstudio::model::LightsDefinition >::difference_type") -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > > *":
        return _openstudiomodelresources.LightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LightsDefinition >::difference_type", j: "std::vector< openstudio::model::LightsDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type":
        return _openstudiomodelresources.LightsDefinitionVector_pop(self)

    def append(self, x: "LightsDefinition") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector_size(self)

    def swap(self, v: "LightsDefinitionVector") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.LightsDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.LightsDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LightsDefinition >::allocator_type":
        return _openstudiomodelresources.LightsDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LightsDefinitionVector_swiginit(self, _openstudiomodelresources.new_LightsDefinitionVector(*args))

    def push_back(self, x: "LightsDefinition") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LightsDefinition >::size_type", x: "LightsDefinition") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LightsDefinition >::size_type", x: "LightsDefinition") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LightsDefinition >::size_type") -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinitionVector

# Register LightsDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.LightsDefinitionVector_swigregister(LightsDefinitionVector)

class OptionalLightsDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLightsDefinition_swiginit(self, _openstudiomodelresources.new_OptionalLightsDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLightsDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::LightsDefinition":
        return _openstudiomodelresources.OptionalLightsDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLightsDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLightsDefinition_isNull(self)

    def get(self) -> "openstudio::model::LightsDefinition":
        return _openstudiomodelresources.OptionalLightsDefinition_get(self)

    def set(self, t: "LightsDefinition") -> "void":
        return _openstudiomodelresources.OptionalLightsDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLightsDefinition

# Register OptionalLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalLightsDefinition_swigregister(OptionalLightsDefinition)

class LuminaireDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LuminaireDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LuminaireDefinition >::difference_type", j: "std::vector< openstudio::model::LuminaireDefinition >::difference_type") -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > > *":
        return _openstudiomodelresources.LuminaireDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LuminaireDefinition >::difference_type", j: "std::vector< openstudio::model::LuminaireDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_pop(self)

    def append(self, x: "LuminaireDefinition") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_size(self)

    def swap(self, v: "LuminaireDefinitionVector") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LuminaireDefinition >::reverse_iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LuminaireDefinition >::reverse_iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LuminaireDefinition >::allocator_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LuminaireDefinitionVector_swiginit(self, _openstudiomodelresources.new_LuminaireDefinitionVector(*args))

    def push_back(self, x: "LuminaireDefinition") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LuminaireDefinition >::size_type", x: "LuminaireDefinition") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LuminaireDefinition >::size_type", x: "LuminaireDefinition") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LuminaireDefinition >::size_type") -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinitionVector

# Register LuminaireDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.LuminaireDefinitionVector_swigregister(LuminaireDefinitionVector)

class OptionalLuminaireDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLuminaireDefinition_swiginit(self, _openstudiomodelresources.new_OptionalLuminaireDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLuminaireDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::LuminaireDefinition":
        return _openstudiomodelresources.OptionalLuminaireDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLuminaireDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLuminaireDefinition_isNull(self)

    def get(self) -> "openstudio::model::LuminaireDefinition":
        return _openstudiomodelresources.OptionalLuminaireDefinition_get(self)

    def set(self, t: "LuminaireDefinition") -> "void":
        return _openstudiomodelresources.OptionalLuminaireDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLuminaireDefinition

# Register OptionalLuminaireDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalLuminaireDefinition_swigregister(OptionalLuminaireDefinition)

class ElectricEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > > *":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop(self)

    def append(self, x: "ElectricEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_size(self)

    def swap(self, v: "ElectricEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentDefinitionVector(*args))

    def push_back(self, x: "ElectricEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type", x: "ElectricEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type", x: "ElectricEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinitionVector

# Register ElectricEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentDefinitionVector_swigregister(ElectricEquipmentDefinitionVector)

class OptionalElectricEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalElectricEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalElectricEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ElectricEquipmentDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ElectricEquipmentDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_get(self)

    def set(self, t: "ElectricEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalElectricEquipmentDefinition

# Register OptionalElectricEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalElectricEquipmentDefinition_swigregister(OptionalElectricEquipmentDefinition)

class ElectricEquipmentITEAirCooledDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::difference_type", j: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::difference_type") -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition,std::allocator< openstudio::model::ElectricEquipmentITEAirCooledDefinition > > *":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::difference_type", j: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::value_type":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_pop(self)

    def append(self, x: "ElectricEquipmentITEAirCooledDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_size(self)

    def swap(self, v: "ElectricEquipmentITEAirCooledDefinitionVector") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::allocator_type":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentITEAirCooledDefinitionVector(*args))

    def push_back(self, x: "ElectricEquipmentITEAirCooledDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type", x: "ElectricEquipmentITEAirCooledDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type", x: "ElectricEquipmentITEAirCooledDefinition") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentITEAirCooledDefinitionVector

# Register ElectricEquipmentITEAirCooledDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swigregister(ElectricEquipmentITEAirCooledDefinitionVector)

class OptionalElectricEquipmentITEAirCooledDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_swiginit(self, _openstudiomodelresources.new_OptionalElectricEquipmentITEAirCooledDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ElectricEquipmentITEAirCooledDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_isNull(self)

    def get(self) -> "openstudio::model::ElectricEquipmentITEAirCooledDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_get(self)

    def set(self, t: "ElectricEquipmentITEAirCooledDefinition") -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalElectricEquipmentITEAirCooledDefinition

# Register OptionalElectricEquipmentITEAirCooledDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_swigregister(OptionalElectricEquipmentITEAirCooledDefinition)

class GasEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GasEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::GasEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > > *":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GasEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::GasEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop(self)

    def append(self, x: "GasEquipmentDefinition") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_size(self)

    def swap(self, v: "GasEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_GasEquipmentDefinitionVector(*args))

    def push_back(self, x: "GasEquipmentDefinition") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GasEquipmentDefinition >::size_type", x: "GasEquipmentDefinition") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GasEquipmentDefinition >::size_type", x: "GasEquipmentDefinition") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GasEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinitionVector

# Register GasEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.GasEquipmentDefinitionVector_swigregister(GasEquipmentDefinitionVector)

class OptionalGasEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalGasEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::GasEquipmentDefinition":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::GasEquipmentDefinition":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_get(self)

    def set(self, t: "GasEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasEquipmentDefinition

# Register OptionalGasEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasEquipmentDefinition_swigregister(OptionalGasEquipmentDefinition)

class HotWaterEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > > *":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop(self)

    def append(self, x: "HotWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_size(self)

    def swap(self, v: "HotWaterEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_HotWaterEquipmentDefinitionVector(*args))

    def push_back(self, x: "HotWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type", x: "HotWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type", x: "HotWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinitionVector

# Register HotWaterEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.HotWaterEquipmentDefinitionVector_swigregister(HotWaterEquipmentDefinitionVector)

class OptionalHotWaterEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalHotWaterEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::HotWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::HotWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_get(self)

    def set(self, t: "HotWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalHotWaterEquipmentDefinition

# Register OptionalHotWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalHotWaterEquipmentDefinition_swigregister(OptionalHotWaterEquipmentDefinition)

class SteamEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > > *":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop(self)

    def append(self, x: "SteamEquipmentDefinition") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_size(self)

    def swap(self, v: "SteamEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SteamEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_SteamEquipmentDefinitionVector(*args))

    def push_back(self, x: "SteamEquipmentDefinition") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type", x: "SteamEquipmentDefinition") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type", x: "SteamEquipmentDefinition") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinitionVector

# Register SteamEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.SteamEquipmentDefinitionVector_swigregister(SteamEquipmentDefinitionVector)

class OptionalSteamEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSteamEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalSteamEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::SteamEquipmentDefinition":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::SteamEquipmentDefinition":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_get(self)

    def set(self, t: "SteamEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSteamEquipmentDefinition

# Register OptionalSteamEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalSteamEquipmentDefinition_swigregister(OptionalSteamEquipmentDefinition)

class OtherEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > > *":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop(self)

    def append(self, x: "OtherEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_size(self)

    def swap(self, v: "OtherEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.OtherEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_OtherEquipmentDefinitionVector(*args))

    def push_back(self, x: "OtherEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type", x: "OtherEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type", x: "OtherEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinitionVector

# Register OtherEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.OtherEquipmentDefinitionVector_swigregister(OtherEquipmentDefinitionVector)

class OptionalOtherEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalOtherEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalOtherEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::OtherEquipmentDefinition":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::OtherEquipmentDefinition":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_get(self)

    def set(self, t: "OtherEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOtherEquipmentDefinition

# Register OptionalOtherEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalOtherEquipmentDefinition_swigregister(OptionalOtherEquipmentDefinition)

class InternalMassDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.InternalMassDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::InternalMassDefinition >::difference_type", j: "std::vector< openstudio::model::InternalMassDefinition >::difference_type") -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > > *":
        return _openstudiomodelresources.InternalMassDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::InternalMassDefinition >::difference_type", j: "std::vector< openstudio::model::InternalMassDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_pop(self)

    def append(self, x: "InternalMassDefinition") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_size(self)

    def swap(self, v: "InternalMassDefinitionVector") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::InternalMassDefinition >::reverse_iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::InternalMassDefinition >::reverse_iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::InternalMassDefinition >::allocator_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.InternalMassDefinitionVector_swiginit(self, _openstudiomodelresources.new_InternalMassDefinitionVector(*args))

    def push_back(self, x: "InternalMassDefinition") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::InternalMassDefinition >::size_type", x: "InternalMassDefinition") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::InternalMassDefinition >::size_type", x: "InternalMassDefinition") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::InternalMassDefinition >::size_type") -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinitionVector

# Register InternalMassDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.InternalMassDefinitionVector_swigregister(InternalMassDefinitionVector)

class OptionalInternalMassDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalInternalMassDefinition_swiginit(self, _openstudiomodelresources.new_OptionalInternalMassDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalInternalMassDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::InternalMassDefinition":
        return _openstudiomodelresources.OptionalInternalMassDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalInternalMassDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalInternalMassDefinition_isNull(self)

    def get(self) -> "openstudio::model::InternalMassDefinition":
        return _openstudiomodelresources.OptionalInternalMassDefinition_get(self)

    def set(self, t: "InternalMassDefinition") -> "void":
        return _openstudiomodelresources.OptionalInternalMassDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInternalMassDefinition

# Register OptionalInternalMassDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalInternalMassDefinition_swigregister(OptionalInternalMassDefinition)

class ExteriorLoadDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type") -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > > *":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop(self)

    def append(self, x: "ExteriorLoadDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_size(self)

    def swap(self, v: "ExteriorLoadDefinitionVector") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLoadDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorLoadDefinitionVector(*args))

    def push_back(self, x: "ExteriorLoadDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type", x: "ExteriorLoadDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type", x: "ExteriorLoadDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinitionVector

# Register ExteriorLoadDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLoadDefinitionVector_swigregister(ExteriorLoadDefinitionVector)

class OptionalExteriorLoadDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorLoadDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorLoadDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorLoadDefinition":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorLoadDefinition":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_get(self)

    def set(self, t: "ExteriorLoadDefinition") -> "void":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLoadDefinition

# Register OptionalExteriorLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorLoadDefinition_swigregister(OptionalExteriorLoadDefinition)

class ExteriorLightsDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type") -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > > *":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop(self)

    def append(self, x: "ExteriorLightsDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_size(self)

    def swap(self, v: "ExteriorLightsDefinitionVector") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLightsDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorLightsDefinitionVector(*args))

    def push_back(self, x: "ExteriorLightsDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type", x: "ExteriorLightsDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type", x: "ExteriorLightsDefinition") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinitionVector

# Register ExteriorLightsDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLightsDefinitionVector_swigregister(ExteriorLightsDefinitionVector)

class OptionalExteriorLightsDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorLightsDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorLightsDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorLightsDefinition":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorLightsDefinition":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_get(self)

    def set(self, t: "ExteriorLightsDefinition") -> "void":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLightsDefinition

# Register OptionalExteriorLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorLightsDefinition_swigregister(OptionalExteriorLightsDefinition)

class ExteriorFuelEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > > *":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop(self)

    def append(self, x: "ExteriorFuelEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_size(self)

    def swap(self, v: "ExteriorFuelEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorFuelEquipmentDefinitionVector(*args))

    def push_back(self, x: "ExteriorFuelEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type", x: "ExteriorFuelEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type", x: "ExteriorFuelEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinitionVector

# Register ExteriorFuelEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swigregister(ExteriorFuelEquipmentDefinitionVector)

class OptionalExteriorFuelEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorFuelEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorFuelEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorFuelEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_get(self)

    def set(self, t: "ExteriorFuelEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorFuelEquipmentDefinition

# Register OptionalExteriorFuelEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_swigregister(OptionalExteriorFuelEquipmentDefinition)

class ExteriorWaterEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > > *":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop(self)

    def append(self, x: "ExteriorWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_size(self)

    def swap(self, v: "ExteriorWaterEquipmentDefinitionVector") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorWaterEquipmentDefinitionVector(*args))

    def push_back(self, x: "ExteriorWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type", x: "ExteriorWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type", x: "ExteriorWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinitionVector

# Register ExteriorWaterEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swigregister(ExteriorWaterEquipmentDefinitionVector)

class OptionalExteriorWaterEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorWaterEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_get(self)

    def set(self, t: "ExteriorWaterEquipmentDefinition") -> "void":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorWaterEquipmentDefinition

# Register OptionalExteriorWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_swigregister(OptionalExteriorWaterEquipmentDefinition)

class RenderingColorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RenderingColorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::RenderingColor >::difference_type", j: "std::vector< openstudio::model::RenderingColor >::difference_type") -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > > *":
        return _openstudiomodelresources.RenderingColorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::RenderingColor >::difference_type", j: "std::vector< openstudio::model::RenderingColor >::difference_type") -> "void":
        return _openstudiomodelresources.RenderingColorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::RenderingColor >::value_type":
        return _openstudiomodelresources.RenderingColorVector_pop(self)

    def append(self, x: "RenderingColor") -> "void":
        return _openstudiomodelresources.RenderingColorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector_size(self)

    def swap(self, v: "RenderingColorVector") -> "void":
        return _openstudiomodelresources.RenderingColorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RenderingColor >::reverse_iterator":
        return _openstudiomodelresources.RenderingColorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RenderingColor >::reverse_iterator":
        return _openstudiomodelresources.RenderingColorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RenderingColorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::RenderingColor >::allocator_type":
        return _openstudiomodelresources.RenderingColorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RenderingColorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RenderingColorVector_swiginit(self, _openstudiomodelresources.new_RenderingColorVector(*args))

    def push_back(self, x: "RenderingColor") -> "void":
        return _openstudiomodelresources.RenderingColorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::RenderingColor >::size_type", x: "RenderingColor") -> "void":
        return _openstudiomodelresources.RenderingColorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::RenderingColor >::size_type", x: "RenderingColor") -> "void":
        return _openstudiomodelresources.RenderingColorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::RenderingColor >::size_type") -> "void":
        return _openstudiomodelresources.RenderingColorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColorVector

# Register RenderingColorVector in _openstudiomodelresources:
_openstudiomodelresources.RenderingColorVector_swigregister(RenderingColorVector)

class OptionalRenderingColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRenderingColor_swiginit(self, _openstudiomodelresources.new_OptionalRenderingColor(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRenderingColor_reset(self)

    def __ref__(self) -> "openstudio::model::RenderingColor":
        return _openstudiomodelresources.OptionalRenderingColor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRenderingColor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRenderingColor_isNull(self)

    def get(self) -> "openstudio::model::RenderingColor":
        return _openstudiomodelresources.OptionalRenderingColor_get(self)

    def set(self, t: "RenderingColor") -> "void":
        return _openstudiomodelresources.OptionalRenderingColor_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRenderingColor

# Register OptionalRenderingColor in _openstudiomodelresources:
_openstudiomodelresources.OptionalRenderingColor_swigregister(OptionalRenderingColor)

class DesignSpecificationOutdoorAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type", j: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type") -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > > *":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type", j: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop(self)

    def append(self, x: "DesignSpecificationOutdoorAir") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_size(self)

    def swap(self, v: "DesignSpecificationOutdoorAirVector") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::reverse_iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::reverse_iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::allocator_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swiginit(self, _openstudiomodelresources.new_DesignSpecificationOutdoorAirVector(*args))

    def push_back(self, x: "DesignSpecificationOutdoorAir") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type", x: "DesignSpecificationOutdoorAir") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type", x: "DesignSpecificationOutdoorAir") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type") -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAirVector

# Register DesignSpecificationOutdoorAirVector in _openstudiomodelresources:
_openstudiomodelresources.DesignSpecificationOutdoorAirVector_swigregister(DesignSpecificationOutdoorAirVector)

class OptionalDesignSpecificationOutdoorAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_swiginit(self, _openstudiomodelresources.new_OptionalDesignSpecificationOutdoorAir(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_reset(self)

    def __ref__(self) -> "openstudio::model::DesignSpecificationOutdoorAir":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_isNull(self)

    def get(self) -> "openstudio::model::DesignSpecificationOutdoorAir":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_get(self)

    def set(self, t: "DesignSpecificationOutdoorAir") -> "void":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDesignSpecificationOutdoorAir

# Register OptionalDesignSpecificationOutdoorAir in _openstudiomodelresources:
_openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_swigregister(OptionalDesignSpecificationOutdoorAir)

class CoilCoolingDXCurveFitPerformanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance,std::allocator< openstudio::model::CoilCoolingDXCurveFitPerformance > > *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::difference_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::value_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_pop(self)

    def append(self, x: "CoilCoolingDXCurveFitPerformance") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_size(self)

    def swap(self, v: "CoilCoolingDXCurveFitPerformanceVector") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::allocator_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitPerformanceVector(*args))

    def push_back(self, x: "CoilCoolingDXCurveFitPerformance") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type", x: "CoilCoolingDXCurveFitPerformance") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type", x: "CoilCoolingDXCurveFitPerformance") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitPerformanceVector

# Register CoilCoolingDXCurveFitPerformanceVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swigregister(CoilCoolingDXCurveFitPerformanceVector)

class OptionalCoilCoolingDXCurveFitPerformance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitPerformance(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXCurveFitPerformance":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXCurveFitPerformance":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_get(self)

    def set(self, t: "CoilCoolingDXCurveFitPerformance") -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitPerformance

# Register OptionalCoilCoolingDXCurveFitPerformance in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_swigregister(OptionalCoilCoolingDXCurveFitPerformance)

class CoilCoolingDXCurveFitOperatingModeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode,std::allocator< openstudio::model::CoilCoolingDXCurveFitOperatingMode > > *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::difference_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::value_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_pop(self)

    def append(self, x: "CoilCoolingDXCurveFitOperatingMode") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_size(self)

    def swap(self, v: "CoilCoolingDXCurveFitOperatingModeVector") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::allocator_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitOperatingModeVector(*args))

    def push_back(self, x: "CoilCoolingDXCurveFitOperatingMode") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type", x: "CoilCoolingDXCurveFitOperatingMode") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type", x: "CoilCoolingDXCurveFitOperatingMode") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitOperatingModeVector

# Register CoilCoolingDXCurveFitOperatingModeVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swigregister(CoilCoolingDXCurveFitOperatingModeVector)

class OptionalCoilCoolingDXCurveFitOperatingMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitOperatingMode(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXCurveFitOperatingMode":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXCurveFitOperatingMode":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_get(self)

    def set(self, t: "CoilCoolingDXCurveFitOperatingMode") -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitOperatingMode

# Register OptionalCoilCoolingDXCurveFitOperatingMode in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_swigregister(OptionalCoilCoolingDXCurveFitOperatingMode)

class CoilCoolingDXCurveFitSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed,std::allocator< openstudio::model::CoilCoolingDXCurveFitSpeed > > *":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::difference_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::value_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_pop(self)

    def append(self, x: "CoilCoolingDXCurveFitSpeed") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_size(self)

    def swap(self, v: "CoilCoolingDXCurveFitSpeedVector") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::reverse_iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::allocator_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::iterator":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitSpeedVector(*args))

    def push_back(self, x: "CoilCoolingDXCurveFitSpeed") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::value_type const &":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type", x: "CoilCoolingDXCurveFitSpeed") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type", x: "CoilCoolingDXCurveFitSpeed") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type") -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed >::size_type":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitSpeedVector

# Register CoilCoolingDXCurveFitSpeedVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swigregister(CoilCoolingDXCurveFitSpeedVector)

class OptionalCoilCoolingDXCurveFitSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXCurveFitSpeed":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXCurveFitSpeed":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_get(self)

    def set(self, t: "CoilCoolingDXCurveFitSpeed") -> "void":
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitSpeed

# Register OptionalCoilCoolingDXCurveFitSpeed in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_swigregister(OptionalCoilCoolingDXCurveFitSpeed)

class ScheduleInterval(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleInterval

    @staticmethod
    def fromTimeSeries(timeSeries: "TimeSeries", model: "Model") -> "boost::optional< openstudio::model::ScheduleInterval >":
        return _openstudiomodelresources.ScheduleInterval_fromTimeSeries(timeSeries, model)

    def timeSeries(self) -> "openstudio::TimeSeries":
        return _openstudiomodelresources.ScheduleInterval_timeSeries(self)

    def setTimeSeries(self, timeSeries: "TimeSeries") -> "bool":
        return _openstudiomodelresources.ScheduleInterval_setTimeSeries(self, timeSeries)

# Register ScheduleInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleInterval_swigregister(ScheduleInterval)

def ScheduleInterval_fromTimeSeries(timeSeries: "TimeSeries", model: "Model") -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.ScheduleInterval_fromTimeSeries(timeSeries, model)


def toScheduleInterval(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.toScheduleInterval(idfObject)

def getScheduleInterval(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.getScheduleInterval(t_model, t_handle)

def getScheduleIntervals(t_model: "Model") -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > >":
    return _openstudiomodelresources.getScheduleIntervals(t_model)

def getScheduleIntervalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.getScheduleIntervalByName(t_model, t_name)

def getScheduleIntervalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > >":
    return _openstudiomodelresources.getScheduleIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleInterval(self) -> OptionalScheduleInterval:
    return toScheduleInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleInterval = _to_ScheduleInterval

def _getScheduleInterval(self, t_handle: "UUID") -> OptionalScheduleInterval:
    return getScheduleInterval(self, t_handle)
Model.getScheduleInterval = _getScheduleInterval

def _getScheduleInterval(self, t_handle_str: str) -> OptionalScheduleInterval:
    return getScheduleInterval(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleInterval = _getScheduleInterval

def _getScheduleIntervals(self) -> ScheduleIntervalVector:
    return getScheduleIntervals(self)
Model.getScheduleIntervals = _getScheduleIntervals

def _getScheduleIntervalByName(self, t_name: str) -> OptionalScheduleInterval:
    return getScheduleIntervalByName(self, t_name)
Model.getScheduleIntervalByName = _getScheduleIntervalByName

def _getScheduleIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleIntervalVector:
    return getScheduleIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleIntervalsByName = _getScheduleIntervalsByName

class ScheduleFile(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, externalfile: "ExternalFile", column: "int"=1, rowsToSkip: "int"=0):
        _openstudiomodelresources.ScheduleFile_swiginit(self, _openstudiomodelresources.new_ScheduleFile(externalfile, column, rowsToSkip))
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFile

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ScheduleFile_iddObjectType()

    @staticmethod
    def minutesperItemValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ScheduleFile_minutesperItemValues()

    def scheduleTypeLimits(self) -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
        return _openstudiomodelresources.ScheduleFile_scheduleTypeLimits(self)

    def externalFile(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.ScheduleFile_externalFile(self)

    def columnNumber(self) -> "int":
        return _openstudiomodelresources.ScheduleFile_columnNumber(self)

    def rowstoSkipatTop(self) -> "int":
        return _openstudiomodelresources.ScheduleFile_rowstoSkipatTop(self)

    def numberofHoursofData(self) -> "boost::optional< int >":
        return _openstudiomodelresources.ScheduleFile_numberofHoursofData(self)

    def isNumberofHoursofDataDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isNumberofHoursofDataDefaulted(self)

    def columnSeparator(self) -> "std::string":
        return _openstudiomodelresources.ScheduleFile_columnSeparator(self)

    def isColumnSeparatorDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isColumnSeparatorDefaulted(self)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isInterpolatetoTimestepDefaulted(self)

    def minutesperItem(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.ScheduleFile_minutesperItem(self)

    def isMinutesperItemDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isMinutesperItemDefaulted(self)

    def csvFile(self) -> "boost::optional< openstudio::CSVFile >":
        return _openstudiomodelresources.ScheduleFile_csvFile(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits: "ScheduleTypeLimits") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_resetScheduleTypeLimits(self)

    def setColumnNumber(self, columnNumber: "int") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setColumnNumber(self, columnNumber)

    def setRowstoSkipatTop(self, rowstoSkipatTop: "int") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setRowstoSkipatTop(self, rowstoSkipatTop)

    def setNumberofHoursofData(self, numberofHours: "int") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setNumberofHoursofData(self, numberofHours)

    def setColumnSeparator(self, columnSeparator: "std::string const &") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setColumnSeparator(self, columnSeparator)

    def resetColumnSeparator(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetColumnSeparator(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: "bool") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetInterpolatetoTimestep(self)

    def setMinutesperItem(self, minutesperItem: "std::string const &") -> "bool":
        return _openstudiomodelresources.ScheduleFile_setMinutesperItem(self, minutesperItem)

    def resetMinutesperItem(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetMinutesperItem(self)

# Register ScheduleFile in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFile_swigregister(ScheduleFile)

def ScheduleFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleFile_iddObjectType()

def ScheduleFile_minutesperItemValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ScheduleFile_minutesperItemValues()


def toScheduleFile(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.toScheduleFile(idfObject)

def getScheduleFile(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.getScheduleFile(t_model, t_handle)

def getScheduleFiles(t_model: "Model") -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
    return _openstudiomodelresources.getScheduleFiles(t_model)

def getScheduleFileByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.getScheduleFileByName(t_model, t_name)

def getScheduleFilesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
    return _openstudiomodelresources.getScheduleFilesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleFile(self) -> OptionalScheduleFile:
    return toScheduleFile(self)
openstudioutilitiesidf.IdfObject.to_ScheduleFile = _to_ScheduleFile

def _getScheduleFile(self, t_handle: "UUID") -> OptionalScheduleFile:
    return getScheduleFile(self, t_handle)
Model.getScheduleFile = _getScheduleFile

def _getScheduleFile(self, t_handle_str: str) -> OptionalScheduleFile:
    return getScheduleFile(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleFile = _getScheduleFile

def _getScheduleFiles(self) -> ScheduleFileVector:
    return getScheduleFiles(self)
Model.getScheduleFiles = _getScheduleFiles

def _getScheduleFileByName(self, t_name: str) -> OptionalScheduleFile:
    return getScheduleFileByName(self, t_name)
Model.getScheduleFileByName = _getScheduleFileByName

def _getScheduleFilesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleFileVector:
    return getScheduleFilesByName(self, t_name, t_exactMatch)
Model.getScheduleFilesByName = _getScheduleFilesByName

class ExternalFile(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFile

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ExternalFile_iddObjectType()

    @staticmethod
    def columnSeparatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ExternalFile_columnSeparatorValues()

    @staticmethod
    def getExternalFile(model: "Model", filename: "std::string const &") -> "boost::optional< openstudio::model::ExternalFile >":
        return _openstudiomodelresources.ExternalFile_getExternalFile(model, filename)

    def fileName(self) -> "std::string":
        return _openstudiomodelresources.ExternalFile_fileName(self)

    def filePath(self) -> "openstudio::path":
        return _openstudiomodelresources.ExternalFile_filePath(self)

    def scheduleFiles(self) -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
        return _openstudiomodelresources.ExternalFile_scheduleFiles(self)

# Register ExternalFile in _openstudiomodelresources:
_openstudiomodelresources.ExternalFile_swigregister(ExternalFile)

def ExternalFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExternalFile_iddObjectType()

def ExternalFile_columnSeparatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ExternalFile_columnSeparatorValues()

def ExternalFile_getExternalFile(model: "Model", filename: "std::string const &") -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.ExternalFile_getExternalFile(model, filename)


def toExternalFile(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.toExternalFile(idfObject)

def getExternalFile(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.getExternalFile(t_model, t_handle)

def getExternalFiles(t_model: "Model") -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > >":
    return _openstudiomodelresources.getExternalFiles(t_model)

def getExternalFileByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.getExternalFileByName(t_model, t_name)

def getExternalFilesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > >":
    return _openstudiomodelresources.getExternalFilesByName(t_model, t_name, t_exactMatch)

def _to_ExternalFile(self) -> OptionalExternalFile:
    return toExternalFile(self)
openstudioutilitiesidf.IdfObject.to_ExternalFile = _to_ExternalFile

def _getExternalFile(self, t_handle: "UUID") -> OptionalExternalFile:
    return getExternalFile(self, t_handle)
Model.getExternalFile = _getExternalFile

def _getExternalFile(self, t_handle_str: str) -> OptionalExternalFile:
    return getExternalFile(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalFile = _getExternalFile

def _getExternalFiles(self) -> ExternalFileVector:
    return getExternalFiles(self)
Model.getExternalFiles = _getExternalFiles

def _getExternalFileByName(self, t_name: str) -> OptionalExternalFile:
    return getExternalFileByName(self, t_name)
Model.getExternalFileByName = _getExternalFileByName

def _getExternalFilesByName(self, t_name: str, t_exactMatch: bool) -> ExternalFileVector:
    return getExternalFilesByName(self, t_name, t_exactMatch)
Model.getExternalFilesByName = _getExternalFilesByName

class ScheduleFixedInterval(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ScheduleFixedInterval_swiginit(self, _openstudiomodelresources.new_ScheduleFixedInterval(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedInterval

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ScheduleFixedInterval_iddObjectType()

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_isInterpolatetoTimestepDefaulted(self)

    def translatetoScheduleFile(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_translatetoScheduleFile(self)

    def isTranslatetoScheduleFileDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_isTranslatetoScheduleFileDefaulted(self)

    def intervalLength(self) -> "double":
        return _openstudiomodelresources.ScheduleFixedInterval_intervalLength(self)

    def outOfRangeValue(self) -> "double":
        return _openstudiomodelresources.ScheduleFixedInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self) -> "int":
        return _openstudiomodelresources.ScheduleFixedInterval_startMonth(self)

    def startDay(self) -> "int":
        return _openstudiomodelresources.ScheduleFixedInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: "bool") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedInterval_resetInterpolatetoTimestep(self)

    def setTranslatetoScheduleFile(self, translatetoScheduleFile: "bool") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setTranslatetoScheduleFile(self, translatetoScheduleFile)

    def resetTranslatetoScheduleFile(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedInterval_resetTranslatetoScheduleFile(self)

    def setIntervalLength(self, intervalLength: "double") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setIntervalLength(self, intervalLength)

    def setOutOfRangeValue(self, outOfRangeValue: "double") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth: "int") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay: "int") -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setStartDay(self, startDay)

# Register ScheduleFixedInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFixedInterval_swigregister(ScheduleFixedInterval)

def ScheduleFixedInterval_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleFixedInterval_iddObjectType()


def toScheduleFixedInterval(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.toScheduleFixedInterval(idfObject)

def getScheduleFixedInterval(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.getScheduleFixedInterval(t_model, t_handle)

def getScheduleFixedIntervals(t_model: "Model") -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > >":
    return _openstudiomodelresources.getScheduleFixedIntervals(t_model)

def getScheduleFixedIntervalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.getScheduleFixedIntervalByName(t_model, t_name)

def getScheduleFixedIntervalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > >":
    return _openstudiomodelresources.getScheduleFixedIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleFixedInterval(self) -> OptionalScheduleFixedInterval:
    return toScheduleFixedInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleFixedInterval = _to_ScheduleFixedInterval

def _getScheduleFixedInterval(self, t_handle: "UUID") -> OptionalScheduleFixedInterval:
    return getScheduleFixedInterval(self, t_handle)
Model.getScheduleFixedInterval = _getScheduleFixedInterval

def _getScheduleFixedInterval(self, t_handle_str: str) -> OptionalScheduleFixedInterval:
    return getScheduleFixedInterval(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleFixedInterval = _getScheduleFixedInterval

def _getScheduleFixedIntervals(self) -> ScheduleFixedIntervalVector:
    return getScheduleFixedIntervals(self)
Model.getScheduleFixedIntervals = _getScheduleFixedIntervals

def _getScheduleFixedIntervalByName(self, t_name: str) -> OptionalScheduleFixedInterval:
    return getScheduleFixedIntervalByName(self, t_name)
Model.getScheduleFixedIntervalByName = _getScheduleFixedIntervalByName

def _getScheduleFixedIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleFixedIntervalVector:
    return getScheduleFixedIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleFixedIntervalsByName = _getScheduleFixedIntervalsByName

class ScheduleVariableInterval(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ScheduleVariableInterval_swiginit(self, _openstudiomodelresources.new_ScheduleVariableInterval(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableInterval

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ScheduleVariableInterval_iddObjectType()

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_isInterpolatetoTimestepDefaulted(self)

    def outOfRangeValue(self) -> "double":
        return _openstudiomodelresources.ScheduleVariableInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self) -> "int":
        return _openstudiomodelresources.ScheduleVariableInterval_startMonth(self)

    def startDay(self) -> "int":
        return _openstudiomodelresources.ScheduleVariableInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: "bool") -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableInterval_resetInterpolatetoTimestep(self)

    def setOutOfRangeValue(self, outOfRangeValue: "double") -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth: "int") -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay: "int") -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setStartDay(self, startDay)

# Register ScheduleVariableInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleVariableInterval_swigregister(ScheduleVariableInterval)

def ScheduleVariableInterval_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleVariableInterval_iddObjectType()


def toScheduleVariableInterval(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.toScheduleVariableInterval(idfObject)

def getScheduleVariableInterval(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.getScheduleVariableInterval(t_model, t_handle)

def getScheduleVariableIntervals(t_model: "Model") -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > >":
    return _openstudiomodelresources.getScheduleVariableIntervals(t_model)

def getScheduleVariableIntervalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.getScheduleVariableIntervalByName(t_model, t_name)

def getScheduleVariableIntervalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > >":
    return _openstudiomodelresources.getScheduleVariableIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleVariableInterval(self) -> OptionalScheduleVariableInterval:
    return toScheduleVariableInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleVariableInterval = _to_ScheduleVariableInterval

def _getScheduleVariableInterval(self, t_handle: "UUID") -> OptionalScheduleVariableInterval:
    return getScheduleVariableInterval(self, t_handle)
Model.getScheduleVariableInterval = _getScheduleVariableInterval

def _getScheduleVariableInterval(self, t_handle_str: str) -> OptionalScheduleVariableInterval:
    return getScheduleVariableInterval(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleVariableInterval = _getScheduleVariableInterval

def _getScheduleVariableIntervals(self) -> ScheduleVariableIntervalVector:
    return getScheduleVariableIntervals(self)
Model.getScheduleVariableIntervals = _getScheduleVariableIntervals

def _getScheduleVariableIntervalByName(self, t_name: str) -> OptionalScheduleVariableInterval:
    return getScheduleVariableIntervalByName(self, t_name)
Model.getScheduleVariableIntervalByName = _getScheduleVariableIntervalByName

def _getScheduleVariableIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleVariableIntervalVector:
    return getScheduleVariableIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleVariableIntervalsByName = _getScheduleVariableIntervalsByName

class ScheduleCompact(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleCompact_swiginit(self, _openstudiomodelresources.new_ScheduleCompact(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompact

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ScheduleCompact_iddObjectType()

    def setToConstantValue(self, value: "double") -> "bool":
        return _openstudiomodelresources.ScheduleCompact_setToConstantValue(self, value)

    def isConstantValue(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompact_isConstantValue(self)

    def constantValue(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ScheduleCompact_constantValue(self)

# Register ScheduleCompact in _openstudiomodelresources:
_openstudiomodelresources.ScheduleCompact_swigregister(ScheduleCompact)

def ScheduleCompact_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleCompact_iddObjectType()


def toScheduleCompact(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.toScheduleCompact(idfObject)

def getScheduleCompact(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.getScheduleCompact(t_model, t_handle)

def getScheduleCompacts(t_model: "Model") -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > >":
    return _openstudiomodelresources.getScheduleCompacts(t_model)

def getScheduleCompactByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.getScheduleCompactByName(t_model, t_name)

def getScheduleCompactsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > >":
    return _openstudiomodelresources.getScheduleCompactsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleCompact(self) -> OptionalScheduleCompact:
    return toScheduleCompact(self)
openstudioutilitiesidf.IdfObject.to_ScheduleCompact = _to_ScheduleCompact

def _getScheduleCompact(self, t_handle: "UUID") -> OptionalScheduleCompact:
    return getScheduleCompact(self, t_handle)
Model.getScheduleCompact = _getScheduleCompact

def _getScheduleCompact(self, t_handle_str: str) -> OptionalScheduleCompact:
    return getScheduleCompact(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleCompact = _getScheduleCompact

def _getScheduleCompacts(self) -> ScheduleCompactVector:
    return getScheduleCompacts(self)
Model.getScheduleCompacts = _getScheduleCompacts

def _getScheduleCompactByName(self, t_name: str) -> OptionalScheduleCompact:
    return getScheduleCompactByName(self, t_name)
Model.getScheduleCompactByName = _getScheduleCompactByName

def _getScheduleCompactsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleCompactVector:
    return getScheduleCompactsByName(self, t_name, t_exactMatch)
Model.getScheduleCompactsByName = _getScheduleCompactsByName

class ScheduleConstant(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ScheduleConstant_swiginit(self, _openstudiomodelresources.new_ScheduleConstant(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstant

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ScheduleConstant_iddObjectType()

    def value(self) -> "double":
        return _openstudiomodelresources.ScheduleConstant_value(self)

    def setValue(self, value: "double") -> "bool":
        return _openstudiomodelresources.ScheduleConstant_setValue(self, value)

# Register ScheduleConstant in _openstudiomodelresources:
_openstudiomodelresources.ScheduleConstant_swigregister(ScheduleConstant)

def ScheduleConstant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleConstant_iddObjectType()


def toScheduleConstant(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.toScheduleConstant(idfObject)

def getScheduleConstant(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.getScheduleConstant(t_model, t_handle)

def getScheduleConstants(t_model: "Model") -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > >":
    return _openstudiomodelresources.getScheduleConstants(t_model)

def getScheduleConstantByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.getScheduleConstantByName(t_model, t_name)

def getScheduleConstantsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > >":
    return _openstudiomodelresources.getScheduleConstantsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleConstant(self) -> OptionalScheduleConstant:
    return toScheduleConstant(self)
openstudioutilitiesidf.IdfObject.to_ScheduleConstant = _to_ScheduleConstant

def _getScheduleConstant(self, t_handle: "UUID") -> OptionalScheduleConstant:
    return getScheduleConstant(self, t_handle)
Model.getScheduleConstant = _getScheduleConstant

def _getScheduleConstant(self, t_handle_str: str) -> OptionalScheduleConstant:
    return getScheduleConstant(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleConstant = _getScheduleConstant

def _getScheduleConstants(self) -> ScheduleConstantVector:
    return getScheduleConstants(self)
Model.getScheduleConstants = _getScheduleConstants

def _getScheduleConstantByName(self, t_name: str) -> OptionalScheduleConstant:
    return getScheduleConstantByName(self, t_name)
Model.getScheduleConstantByName = _getScheduleConstantByName

def _getScheduleConstantsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleConstantVector:
    return getScheduleConstantsByName(self, t_name, t_exactMatch)
Model.getScheduleConstantsByName = _getScheduleConstantsByName

class DefaultScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.DefaultScheduleType_swiginit(self, _openstudiomodelresources.new_DefaultScheduleType(*args))

    def valueName(self) -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType_valueName(self)

    def value(self) -> "int":
        return _openstudiomodelresources.DefaultScheduleType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType_valueDescription(self)

    def __eq__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___eq__(self, other)

    def __ne__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___ne__(self, other)

    def __gt__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___gt__(self, other)

    def __ge__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___ge__(self, other)

    def __lt__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___lt__(self, other)

    def __le__(self, other: "DefaultScheduleType") -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___le__(self, other)

    @staticmethod
    def enumName() -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType_enumName()

    @staticmethod
    def getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _openstudiomodelresources.DefaultScheduleType_getValues()

    def __str__(self) -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleType

# Register DefaultScheduleType in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleType_swigregister(DefaultScheduleType)

def DefaultScheduleType_enumName() -> "std::string":
    return _openstudiomodelresources.DefaultScheduleType_enumName()

def DefaultScheduleType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudiomodelresources.DefaultScheduleType_getValues()

class DefaultScheduleSet(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.DefaultScheduleSet_swiginit(self, _openstudiomodelresources.new_DefaultScheduleSet(model))
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSet

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.DefaultScheduleSet_iddObjectType()

    def hoursofOperationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_hoursofOperationSchedule(self)

    def numberofPeopleSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_numberofPeopleSchedule(self)

    def peopleActivityLevelSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_peopleActivityLevelSchedule(self)

    def lightingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_lightingSchedule(self)

    def electricEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_electricEquipmentSchedule(self)

    def gasEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_gasEquipmentSchedule(self)

    def hotWaterEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_hotWaterEquipmentSchedule(self)

    def infiltrationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_infiltrationSchedule(self)

    def steamEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_steamEquipmentSchedule(self)

    def otherEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_otherEquipmentSchedule(self)

    def setHoursofOperationSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setHoursofOperationSchedule(self, schedule)

    def resetHoursofOperationSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetHoursofOperationSchedule(self)

    def setNumberofPeopleSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setNumberofPeopleSchedule(self, schedule)

    def resetNumberofPeopleSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetNumberofPeopleSchedule(self)

    def setPeopleActivityLevelSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setPeopleActivityLevelSchedule(self, schedule)

    def resetPeopleActivityLevelSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetPeopleActivityLevelSchedule(self)

    def setLightingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setLightingSchedule(self, schedule)

    def resetLightingSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetLightingSchedule(self)

    def setElectricEquipmentSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setElectricEquipmentSchedule(self, schedule)

    def resetElectricEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetElectricEquipmentSchedule(self)

    def setGasEquipmentSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setGasEquipmentSchedule(self, schedule)

    def resetGasEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetGasEquipmentSchedule(self)

    def setHotWaterEquipmentSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setHotWaterEquipmentSchedule(self, schedule)

    def resetHotWaterEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetHotWaterEquipmentSchedule(self)

    def setInfiltrationSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setInfiltrationSchedule(self, schedule)

    def resetInfiltrationSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetInfiltrationSchedule(self)

    def setSteamEquipmentSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setSteamEquipmentSchedule(self, schedule)

    def resetSteamEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetSteamEquipmentSchedule(self)

    def setOtherEquipmentSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setOtherEquipmentSchedule(self, schedule)

    def resetOtherEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetOtherEquipmentSchedule(self)

    def getDefaultSchedule(self, defaultScheduleType: "DefaultScheduleType") -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_getDefaultSchedule(self, defaultScheduleType)

    def merge(self, other: "DefaultScheduleSet") -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_merge(self, other)

# Register DefaultScheduleSet in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleSet_swigregister(DefaultScheduleSet)

def DefaultScheduleSet_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultScheduleSet_iddObjectType()


def toDefaultScheduleSet(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.toDefaultScheduleSet(idfObject)

def getDefaultScheduleSet(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.getDefaultScheduleSet(t_model, t_handle)

def getDefaultScheduleSets(t_model: "Model") -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > >":
    return _openstudiomodelresources.getDefaultScheduleSets(t_model)

def getDefaultScheduleSetByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.getDefaultScheduleSetByName(t_model, t_name)

def getDefaultScheduleSetsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > >":
    return _openstudiomodelresources.getDefaultScheduleSetsByName(t_model, t_name, t_exactMatch)

def _to_DefaultScheduleSet(self) -> OptionalDefaultScheduleSet:
    return toDefaultScheduleSet(self)
openstudioutilitiesidf.IdfObject.to_DefaultScheduleSet = _to_DefaultScheduleSet

def _getDefaultScheduleSet(self, t_handle: "UUID") -> OptionalDefaultScheduleSet:
    return getDefaultScheduleSet(self, t_handle)
Model.getDefaultScheduleSet = _getDefaultScheduleSet

def _getDefaultScheduleSet(self, t_handle_str: str) -> OptionalDefaultScheduleSet:
    return getDefaultScheduleSet(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDefaultScheduleSet = _getDefaultScheduleSet

def _getDefaultScheduleSets(self) -> DefaultScheduleSetVector:
    return getDefaultScheduleSets(self)
Model.getDefaultScheduleSets = _getDefaultScheduleSets

def _getDefaultScheduleSetByName(self, t_name: str) -> OptionalDefaultScheduleSet:
    return getDefaultScheduleSetByName(self, t_name)
Model.getDefaultScheduleSetByName = _getDefaultScheduleSetByName

def _getDefaultScheduleSetsByName(self, t_name: str, t_exactMatch: bool) -> DefaultScheduleSetVector:
    return getDefaultScheduleSetsByName(self, t_name, t_exactMatch)
Model.getDefaultScheduleSetsByName = _getDefaultScheduleSetsByName

class SpectralDataField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wavelength: "double", transmittance: "double", frontReflectance: "double", backReflectance: "double"):
        _openstudiomodelresources.SpectralDataField_swiginit(self, _openstudiomodelresources.new_SpectralDataField(wavelength, transmittance, frontReflectance, backReflectance))

    def wavelength(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_wavelength(self)

    def transmittance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_transmittance(self)

    def frontReflectance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_frontReflectance(self)

    def backReflectance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_backReflectance(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpectralDataField

# Register SpectralDataField in _openstudiomodelresources:
_openstudiomodelresources.SpectralDataField_swigregister(SpectralDataField)

class MaterialPropertyGlazingSpectralData(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.MaterialPropertyGlazingSpectralData_swiginit(self, _openstudiomodelresources.new_MaterialPropertyGlazingSpectralData(model))
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType()

    def spectralDataFields(self) -> "std::vector< openstudio::model::SpectralDataField,std::allocator< openstudio::model::SpectralDataField > >":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_spectralDataFields(self)

    def setSpectralDataFields(self, spectralDataFields: "SpectralDataFieldVector") -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_setSpectralDataFields(self, spectralDataFields)

    def addSpectralDataField(self, *args) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_addSpectralDataField(self, *args)

    def resetSpectralDataFields(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_resetSpectralDataFields(self)

# Register MaterialPropertyGlazingSpectralData in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyGlazingSpectralData_swigregister(MaterialPropertyGlazingSpectralData)

def MaterialPropertyGlazingSpectralData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType()


def toMaterialPropertyGlazingSpectralData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.toMaterialPropertyGlazingSpectralData(idfObject)

def getMaterialPropertyGlazingSpectralData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralData(t_model, t_handle)

def getMaterialPropertyGlazingSpectralDatas(t_model: "Model") -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatas(t_model)

def getMaterialPropertyGlazingSpectralDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDataByName(t_model, t_name)

def getMaterialPropertyGlazingSpectralDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatasByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyGlazingSpectralData(self) -> OptionalMaterialPropertyGlazingSpectralData:
    return toMaterialPropertyGlazingSpectralData(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyGlazingSpectralData = _to_MaterialPropertyGlazingSpectralData

def _getMaterialPropertyGlazingSpectralData(self, t_handle: "UUID") -> OptionalMaterialPropertyGlazingSpectralData:
    return getMaterialPropertyGlazingSpectralData(self, t_handle)
Model.getMaterialPropertyGlazingSpectralData = _getMaterialPropertyGlazingSpectralData

def _getMaterialPropertyGlazingSpectralData(self, t_handle_str: str) -> OptionalMaterialPropertyGlazingSpectralData:
    return getMaterialPropertyGlazingSpectralData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMaterialPropertyGlazingSpectralData = _getMaterialPropertyGlazingSpectralData

def _getMaterialPropertyGlazingSpectralDatas(self) -> MaterialPropertyGlazingSpectralDataVector:
    return getMaterialPropertyGlazingSpectralDatas(self)
Model.getMaterialPropertyGlazingSpectralDatas = _getMaterialPropertyGlazingSpectralDatas

def _getMaterialPropertyGlazingSpectralDataByName(self, t_name: str) -> OptionalMaterialPropertyGlazingSpectralData:
    return getMaterialPropertyGlazingSpectralDataByName(self, t_name)
Model.getMaterialPropertyGlazingSpectralDataByName = _getMaterialPropertyGlazingSpectralDataByName

def _getMaterialPropertyGlazingSpectralDatasByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyGlazingSpectralDataVector:
    return getMaterialPropertyGlazingSpectralDatasByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyGlazingSpectralDatasByName = _getMaterialPropertyGlazingSpectralDatasByName

class MaterialPropertyMoisturePenetrationDepthSettings(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, material: "Material", waterVaporDiffusionResistanceFactor: "double", moistureEquationCoefficientA: "double", moistureEquationCoefficientB: "double", moistureEquationCoefficientC: "double", moistureEquationCoefficientD: "double", coatingLayerThickness: "double", coatingLayerWaterVaporDiffusionResistanceFactor: "double"):
        _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_swiginit(self, _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettings(material, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor))
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettings

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType()

    def materialName(self) -> "std::string":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_materialName(self)

    def waterVaporDiffusionResistanceFactor(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_waterVaporDiffusionResistanceFactor(self)

    def moistureEquationCoefficientA(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientA(self)

    def moistureEquationCoefficientB(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientB(self)

    def moistureEquationCoefficientC(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientC(self)

    def moistureEquationCoefficientD(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientD(self)

    def moistureEquationCoefficients(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficients(self)

    def surfaceLayerPenetrationDepth(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_surfaceLayerPenetrationDepth(self)

    def isSurfaceLayerPenetrationDepthAutocalculated(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isSurfaceLayerPenetrationDepthAutocalculated(self)

    def deepLayerPenetrationDepth(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_deepLayerPenetrationDepth(self)

    def isDeepLayerPenetrationDepthAutocalculated(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isDeepLayerPenetrationDepthAutocalculated(self)

    def coatingLayerThickness(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerThickness(self)

    def coatingLayerWaterVaporDiffusionResistanceFactor(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerWaterVaporDiffusionResistanceFactor(self)

    def setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor)

    def setMoistureEquationCoefficientA(self, moistureEquationCoefficientA: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientA(self, moistureEquationCoefficientA)

    def setMoistureEquationCoefficientB(self, moistureEquationCoefficientB: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientB(self, moistureEquationCoefficientB)

    def setMoistureEquationCoefficientC(self, moistureEquationCoefficientC: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientC(self, moistureEquationCoefficientC)

    def setMoistureEquationCoefficientD(self, moistureEquationCoefficientD: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientD(self, moistureEquationCoefficientD)

    def setMoistureEquationCoefficients(self, moistureEquationCoefficientA: "double", moistureEquationCoefficientB: "double", moistureEquationCoefficientC: "double", moistureEquationCoefficientD: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficients(self, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD)

    def setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth)

    def autocalculateSurfaceLayerPenetrationDepth(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateSurfaceLayerPenetrationDepth(self)

    def setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth)

    def autocalculateDeepLayerPenetrationDepth(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateDeepLayerPenetrationDepth(self)

    def setCoatingLayerThickness(self, coatingLayerThickness: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerThickness(self, coatingLayerThickness)

    def setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor: "double") -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor)

# Register MaterialPropertyMoisturePenetrationDepthSettings in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_swigregister(MaterialPropertyMoisturePenetrationDepthSettings)

def MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType()


def toMaterialPropertyMoisturePenetrationDepthSettings(idfObject: "IdfObject") -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.toMaterialPropertyMoisturePenetrationDepthSettings(idfObject)

def getMaterialPropertyMoisturePenetrationDepthSettings(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettings(t_model, t_handle)

def getMaterialPropertyMoisturePenetrationDepthSettingss(t_model: "Model") -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingss(t_model)

def getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model, t_name)

def getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyMoisturePenetrationDepthSettings(self) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    return toMaterialPropertyMoisturePenetrationDepthSettings(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyMoisturePenetrationDepthSettings = _to_MaterialPropertyMoisturePenetrationDepthSettings

def _getMaterialPropertyMoisturePenetrationDepthSettings(self, t_handle: "UUID") -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    return getMaterialPropertyMoisturePenetrationDepthSettings(self, t_handle)
Model.getMaterialPropertyMoisturePenetrationDepthSettings = _getMaterialPropertyMoisturePenetrationDepthSettings

def _getMaterialPropertyMoisturePenetrationDepthSettings(self, t_handle_str: str) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    return getMaterialPropertyMoisturePenetrationDepthSettings(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMaterialPropertyMoisturePenetrationDepthSettings = _getMaterialPropertyMoisturePenetrationDepthSettings

def _getMaterialPropertyMoisturePenetrationDepthSettingss(self) -> MaterialPropertyMoisturePenetrationDepthSettingsVector:
    return getMaterialPropertyMoisturePenetrationDepthSettingss(self)
Model.getMaterialPropertyMoisturePenetrationDepthSettingss = _getMaterialPropertyMoisturePenetrationDepthSettingss

def _getMaterialPropertyMoisturePenetrationDepthSettingsByName(self, t_name: str) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    return getMaterialPropertyMoisturePenetrationDepthSettingsByName(self, t_name)
Model.getMaterialPropertyMoisturePenetrationDepthSettingsByName = _getMaterialPropertyMoisturePenetrationDepthSettingsByName

def _getMaterialPropertyMoisturePenetrationDepthSettingssByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyMoisturePenetrationDepthSettingsVector:
    return getMaterialPropertyMoisturePenetrationDepthSettingssByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyMoisturePenetrationDepthSettingssByName = _getMaterialPropertyMoisturePenetrationDepthSettingssByName

class Material(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Material

    def thickness(self) -> "double":
        return _openstudiomodelresources.Material_thickness(self)

    def getVisibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_getVisibleTransmittance(self)

    def interiorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_interiorVisibleAbsorptance(self)

    def exteriorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_exteriorVisibleAbsorptance(self)

    def standardsInformation(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.Material_standardsInformation(self)

    def setThickness(self, value: "double") -> "bool":
        return _openstudiomodelresources.Material_setThickness(self, value)

    def createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor: "double", moistureEquationCoefficientA: "double", moistureEquationCoefficientB: "double", moistureEquationCoefficientC: "double", moistureEquationCoefficientD: "double", coatingLayerThickness: "double", coatingLayerWaterVaporDiffusionResistanceFactor: "double") -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
        return _openstudiomodelresources.Material_createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor)

    def materialPropertyMoisturePenetrationDepthSettings(self) -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
        return _openstudiomodelresources.Material_materialPropertyMoisturePenetrationDepthSettings(self)

    def resetMaterialPropertyMoisturePenetrationDepthSettings(self) -> "void":
        return _openstudiomodelresources.Material_resetMaterialPropertyMoisturePenetrationDepthSettings(self)

# Register Material in _openstudiomodelresources:
_openstudiomodelresources.Material_swigregister(Material)


def toMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.toMaterial(idfObject)

def getMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.getMaterial(t_model, t_handle)

def getMaterials(t_model: "Model") -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
    return _openstudiomodelresources.getMaterials(t_model)

def getMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.getMaterialByName(t_model, t_name)

def getMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
    return _openstudiomodelresources.getMaterialsByName(t_model, t_name, t_exactMatch)

def _to_Material(self) -> OptionalMaterial:
    return toMaterial(self)
openstudioutilitiesidf.IdfObject.to_Material = _to_Material

def _getMaterial(self, t_handle: "UUID") -> OptionalMaterial:
    return getMaterial(self, t_handle)
Model.getMaterial = _getMaterial

def _getMaterial(self, t_handle_str: str) -> OptionalMaterial:
    return getMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMaterial = _getMaterial

def _getMaterials(self) -> MaterialVector:
    return getMaterials(self)
Model.getMaterials = _getMaterials

def _getMaterialByName(self, t_name: str) -> OptionalMaterial:
    return getMaterialByName(self, t_name)
Model.getMaterialByName = _getMaterialByName

def _getMaterialsByName(self, t_name: str, t_exactMatch: bool) -> MaterialVector:
    return getMaterialsByName(self, t_name, t_exactMatch)
Model.getMaterialsByName = _getMaterialsByName

class FenestrationMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterial

    @staticmethod
    def ufactorInsideAirTemperature() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature()

    @staticmethod
    def ufactorOutsideAirTemperature() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature()

    @staticmethod
    def airThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients()

    @staticmethod
    def airViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients()

    @staticmethod
    def airSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients()

    @staticmethod
    def airMolecularWeight() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_airMolecularWeight()

    @staticmethod
    def argonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients()

    @staticmethod
    def argonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients()

    @staticmethod
    def argonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients()

    @staticmethod
    def argonMolecularWeight() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight()

    @staticmethod
    def kryptonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients()

    @staticmethod
    def kryptonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients()

    @staticmethod
    def kryptonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients()

    @staticmethod
    def kryptonMolecularWeight() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight()

    @staticmethod
    def xenonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients()

    @staticmethod
    def xenonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients()

    @staticmethod
    def xenonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
        return _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients()

    @staticmethod
    def xenonMolecularWeight() -> "double":
        return _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight()

# Register FenestrationMaterial in _openstudiomodelresources:
_openstudiomodelresources.FenestrationMaterial_swigregister(FenestrationMaterial)

def FenestrationMaterial_ufactorInsideAirTemperature() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature()

def FenestrationMaterial_ufactorOutsideAirTemperature() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature()

def FenestrationMaterial_airThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients()

def FenestrationMaterial_airViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients()

def FenestrationMaterial_airSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients()

def FenestrationMaterial_airMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_airMolecularWeight()

def FenestrationMaterial_argonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients()

def FenestrationMaterial_argonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients()

def FenestrationMaterial_argonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients()

def FenestrationMaterial_argonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight()

def FenestrationMaterial_kryptonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients()

def FenestrationMaterial_kryptonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients()

def FenestrationMaterial_kryptonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients()

def FenestrationMaterial_kryptonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight()

def FenestrationMaterial_xenonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients()

def FenestrationMaterial_xenonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients()

def FenestrationMaterial_xenonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients()

def FenestrationMaterial_xenonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight()


def toFenestrationMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.toFenestrationMaterial(idfObject)

def getFenestrationMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.getFenestrationMaterial(t_model, t_handle)

def getFenestrationMaterials(t_model: "Model") -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > >":
    return _openstudiomodelresources.getFenestrationMaterials(t_model)

def getFenestrationMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.getFenestrationMaterialByName(t_model, t_name)

def getFenestrationMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > >":
    return _openstudiomodelresources.getFenestrationMaterialsByName(t_model, t_name, t_exactMatch)

def _to_FenestrationMaterial(self) -> OptionalFenestrationMaterial:
    return toFenestrationMaterial(self)
openstudioutilitiesidf.IdfObject.to_FenestrationMaterial = _to_FenestrationMaterial

def _getFenestrationMaterial(self, t_handle: "UUID") -> OptionalFenestrationMaterial:
    return getFenestrationMaterial(self, t_handle)
Model.getFenestrationMaterial = _getFenestrationMaterial

def _getFenestrationMaterial(self, t_handle_str: str) -> OptionalFenestrationMaterial:
    return getFenestrationMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFenestrationMaterial = _getFenestrationMaterial

def _getFenestrationMaterials(self) -> FenestrationMaterialVector:
    return getFenestrationMaterials(self)
Model.getFenestrationMaterials = _getFenestrationMaterials

def _getFenestrationMaterialByName(self, t_name: str) -> OptionalFenestrationMaterial:
    return getFenestrationMaterialByName(self, t_name)
Model.getFenestrationMaterialByName = _getFenestrationMaterialByName

def _getFenestrationMaterialsByName(self, t_name: str, t_exactMatch: bool) -> FenestrationMaterialVector:
    return getFenestrationMaterialsByName(self, t_name, t_exactMatch)
Model.getFenestrationMaterialsByName = _getFenestrationMaterialsByName

class GasLayer(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayer

# Register GasLayer in _openstudiomodelresources:
_openstudiomodelresources.GasLayer_swigregister(GasLayer)


def toGasLayer(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.toGasLayer(idfObject)

def getGasLayer(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.getGasLayer(t_model, t_handle)

def getGasLayers(t_model: "Model") -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > >":
    return _openstudiomodelresources.getGasLayers(t_model)

def getGasLayerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.getGasLayerByName(t_model, t_name)

def getGasLayersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > >":
    return _openstudiomodelresources.getGasLayersByName(t_model, t_name, t_exactMatch)

def _to_GasLayer(self) -> OptionalGasLayer:
    return toGasLayer(self)
openstudioutilitiesidf.IdfObject.to_GasLayer = _to_GasLayer

def _getGasLayer(self, t_handle: "UUID") -> OptionalGasLayer:
    return getGasLayer(self, t_handle)
Model.getGasLayer = _getGasLayer

def _getGasLayer(self, t_handle_str: str) -> OptionalGasLayer:
    return getGasLayer(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGasLayer = _getGasLayer

def _getGasLayers(self) -> GasLayerVector:
    return getGasLayers(self)
Model.getGasLayers = _getGasLayers

def _getGasLayerByName(self, t_name: str) -> OptionalGasLayer:
    return getGasLayerByName(self, t_name)
Model.getGasLayerByName = _getGasLayerByName

def _getGasLayersByName(self, t_name: str, t_exactMatch: bool) -> GasLayerVector:
    return getGasLayersByName(self, t_name, t_exactMatch)
Model.getGasLayersByName = _getGasLayersByName

class Glazing(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Glazing

# Register Glazing in _openstudiomodelresources:
_openstudiomodelresources.Glazing_swigregister(Glazing)


def toGlazing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.toGlazing(idfObject)

def getGlazing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.getGlazing(t_model, t_handle)

def getGlazings(t_model: "Model") -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > >":
    return _openstudiomodelresources.getGlazings(t_model)

def getGlazingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.getGlazingByName(t_model, t_name)

def getGlazingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > >":
    return _openstudiomodelresources.getGlazingsByName(t_model, t_name, t_exactMatch)

def _to_Glazing(self) -> OptionalGlazing:
    return toGlazing(self)
openstudioutilitiesidf.IdfObject.to_Glazing = _to_Glazing

def _getGlazing(self, t_handle: "UUID") -> OptionalGlazing:
    return getGlazing(self, t_handle)
Model.getGlazing = _getGlazing

def _getGlazing(self, t_handle_str: str) -> OptionalGlazing:
    return getGlazing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGlazing = _getGlazing

def _getGlazings(self) -> GlazingVector:
    return getGlazings(self)
Model.getGlazings = _getGlazings

def _getGlazingByName(self, t_name: str) -> OptionalGlazing:
    return getGlazingByName(self, t_name)
Model.getGlazingByName = _getGlazingByName

def _getGlazingsByName(self, t_name: str, t_exactMatch: bool) -> GlazingVector:
    return getGlazingsByName(self, t_name, t_exactMatch)
Model.getGlazingsByName = _getGlazingsByName

class ShadingMaterial(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterial

# Register ShadingMaterial in _openstudiomodelresources:
_openstudiomodelresources.ShadingMaterial_swigregister(ShadingMaterial)


def toShadingMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.toShadingMaterial(idfObject)

def getShadingMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.getShadingMaterial(t_model, t_handle)

def getShadingMaterials(t_model: "Model") -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > >":
    return _openstudiomodelresources.getShadingMaterials(t_model)

def getShadingMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.getShadingMaterialByName(t_model, t_name)

def getShadingMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > >":
    return _openstudiomodelresources.getShadingMaterialsByName(t_model, t_name, t_exactMatch)

def _to_ShadingMaterial(self) -> OptionalShadingMaterial:
    return toShadingMaterial(self)
openstudioutilitiesidf.IdfObject.to_ShadingMaterial = _to_ShadingMaterial

def _getShadingMaterial(self, t_handle: "UUID") -> OptionalShadingMaterial:
    return getShadingMaterial(self, t_handle)
Model.getShadingMaterial = _getShadingMaterial

def _getShadingMaterial(self, t_handle_str: str) -> OptionalShadingMaterial:
    return getShadingMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getShadingMaterial = _getShadingMaterial

def _getShadingMaterials(self) -> ShadingMaterialVector:
    return getShadingMaterials(self)
Model.getShadingMaterials = _getShadingMaterials

def _getShadingMaterialByName(self, t_name: str) -> OptionalShadingMaterial:
    return getShadingMaterialByName(self, t_name)
Model.getShadingMaterialByName = _getShadingMaterialByName

def _getShadingMaterialsByName(self, t_name: str, t_exactMatch: bool) -> ShadingMaterialVector:
    return getShadingMaterialsByName(self, t_name, t_exactMatch)
Model.getShadingMaterialsByName = _getShadingMaterialsByName

class ModelPartitionMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterial

# Register ModelPartitionMaterial in _openstudiomodelresources:
_openstudiomodelresources.ModelPartitionMaterial_swigregister(ModelPartitionMaterial)


def toModelPartitionMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.toModelPartitionMaterial(idfObject)

def getModelPartitionMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.getModelPartitionMaterial(t_model, t_handle)

def getModelPartitionMaterials(t_model: "Model") -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > >":
    return _openstudiomodelresources.getModelPartitionMaterials(t_model)

def getModelPartitionMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.getModelPartitionMaterialByName(t_model, t_name)

def getModelPartitionMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > >":
    return _openstudiomodelresources.getModelPartitionMaterialsByName(t_model, t_name, t_exactMatch)

def _to_ModelPartitionMaterial(self) -> OptionalModelPartitionMaterial:
    return toModelPartitionMaterial(self)
openstudioutilitiesidf.IdfObject.to_ModelPartitionMaterial = _to_ModelPartitionMaterial

def _getModelPartitionMaterial(self, t_handle: "UUID") -> OptionalModelPartitionMaterial:
    return getModelPartitionMaterial(self, t_handle)
Model.getModelPartitionMaterial = _getModelPartitionMaterial

def _getModelPartitionMaterial(self, t_handle_str: str) -> OptionalModelPartitionMaterial:
    return getModelPartitionMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getModelPartitionMaterial = _getModelPartitionMaterial

def _getModelPartitionMaterials(self) -> ModelPartitionMaterialVector:
    return getModelPartitionMaterials(self)
Model.getModelPartitionMaterials = _getModelPartitionMaterials

def _getModelPartitionMaterialByName(self, t_name: str) -> OptionalModelPartitionMaterial:
    return getModelPartitionMaterialByName(self, t_name)
Model.getModelPartitionMaterialByName = _getModelPartitionMaterialByName

def _getModelPartitionMaterialsByName(self, t_name: str, t_exactMatch: bool) -> ModelPartitionMaterialVector:
    return getModelPartitionMaterialsByName(self, t_name, t_exactMatch)
Model.getModelPartitionMaterialsByName = _getModelPartitionMaterialsByName

class OpaqueMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterial

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalResistance(self)

    def thermalAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalAbsorptance(self)

    def thermalReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_thermalReflectance(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_solarAbsorptance(self)

    def solarReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_solarReflectance(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_visibleAbsorptance(self)

    def visibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_visibleReflectance(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value: "double") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistance(self, value)

    def setThermalAbsorptance(self, value: "double") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalAbsorptance(self, value)

    def setThermalReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalReflectance(self, value)

    def setSolarAbsorptance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setSolarAbsorptance(self, value)

    def setSolarReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleAbsorptance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setVisibleAbsorptance(self, value)

    def setVisibleReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setVisibleReflectance(self, value)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_heatCapacity(self)

# Register OpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OpaqueMaterial_swigregister(OpaqueMaterial)


def toOpaqueMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.toOpaqueMaterial(idfObject)

def getOpaqueMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.getOpaqueMaterial(t_model, t_handle)

def getOpaqueMaterials(t_model: "Model") -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > >":
    return _openstudiomodelresources.getOpaqueMaterials(t_model)

def getOpaqueMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.getOpaqueMaterialByName(t_model, t_name)

def getOpaqueMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > >":
    return _openstudiomodelresources.getOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_OpaqueMaterial(self) -> OptionalOpaqueMaterial:
    return toOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_OpaqueMaterial = _to_OpaqueMaterial

def _getOpaqueMaterial(self, t_handle: "UUID") -> OptionalOpaqueMaterial:
    return getOpaqueMaterial(self, t_handle)
Model.getOpaqueMaterial = _getOpaqueMaterial

def _getOpaqueMaterial(self, t_handle_str: str) -> OptionalOpaqueMaterial:
    return getOpaqueMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getOpaqueMaterial = _getOpaqueMaterial

def _getOpaqueMaterials(self) -> OpaqueMaterialVector:
    return getOpaqueMaterials(self)
Model.getOpaqueMaterials = _getOpaqueMaterials

def _getOpaqueMaterialByName(self, t_name: str) -> OptionalOpaqueMaterial:
    return getOpaqueMaterialByName(self, t_name)
Model.getOpaqueMaterialByName = _getOpaqueMaterialByName

def _getOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> OpaqueMaterialVector:
    return getOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getOpaqueMaterialsByName = _getOpaqueMaterialsByName

class AirWallMaterial(ModelPartitionMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.AirWallMaterial_swiginit(self, _openstudiomodelresources.new_AirWallMaterial(model))
    __swig_destroy__ = _openstudiomodelresources.delete_AirWallMaterial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.AirWallMaterial_iddObjectType()

# Register AirWallMaterial in _openstudiomodelresources:
_openstudiomodelresources.AirWallMaterial_swigregister(AirWallMaterial)

def AirWallMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.AirWallMaterial_iddObjectType()


def toAirWallMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.toAirWallMaterial(idfObject)

def getAirWallMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.getAirWallMaterial(t_model, t_handle)

def getAirWallMaterials(t_model: "Model") -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > >":
    return _openstudiomodelresources.getAirWallMaterials(t_model)

def getAirWallMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.getAirWallMaterialByName(t_model, t_name)

def getAirWallMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > >":
    return _openstudiomodelresources.getAirWallMaterialsByName(t_model, t_name, t_exactMatch)

def _to_AirWallMaterial(self) -> OptionalAirWallMaterial:
    return toAirWallMaterial(self)
openstudioutilitiesidf.IdfObject.to_AirWallMaterial = _to_AirWallMaterial

def _getAirWallMaterial(self, t_handle: "UUID") -> OptionalAirWallMaterial:
    return getAirWallMaterial(self, t_handle)
Model.getAirWallMaterial = _getAirWallMaterial

def _getAirWallMaterial(self, t_handle_str: str) -> OptionalAirWallMaterial:
    return getAirWallMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirWallMaterial = _getAirWallMaterial

def _getAirWallMaterials(self) -> AirWallMaterialVector:
    return getAirWallMaterials(self)
Model.getAirWallMaterials = _getAirWallMaterials

def _getAirWallMaterialByName(self, t_name: str) -> OptionalAirWallMaterial:
    return getAirWallMaterialByName(self, t_name)
Model.getAirWallMaterialByName = _getAirWallMaterialByName

def _getAirWallMaterialsByName(self, t_name: str, t_exactMatch: bool) -> AirWallMaterialVector:
    return getAirWallMaterialsByName(self, t_name, t_exactMatch)
Model.getAirWallMaterialsByName = _getAirWallMaterialsByName

class Blind(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", slatWidth: "double"=0.025, slatSeparation: "double"=0.01875, frontSideSlatBeamSolarReflectance: "double"=0.5, backSideSlatBeamSolarReflectance: "double"=0.5, frontSideSlatDiffuseSolarReflectance: "double"=0.5, backSideSlatDiffuseSolarReflectance: "double"=0.5, slatBeamVisibleTransmittance: "double"=0.0):
        _openstudiomodelresources.Blind_swiginit(self, _openstudiomodelresources.new_Blind(model, slatWidth, slatSeparation, frontSideSlatBeamSolarReflectance, backSideSlatBeamSolarReflectance, frontSideSlatDiffuseSolarReflectance, backSideSlatDiffuseSolarReflectance, slatBeamVisibleTransmittance))
    __swig_destroy__ = _openstudiomodelresources.delete_Blind

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.Blind_iddObjectType()

    @staticmethod
    def slatOrientationValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.Blind_slatOrientationValues()

    def slatOrientation(self) -> "std::string":
        return _openstudiomodelresources.Blind_slatOrientation(self)

    def isSlatOrientationDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatOrientationDefaulted(self)

    def slatWidth(self) -> "double":
        return _openstudiomodelresources.Blind_slatWidth(self)

    def slatSeparation(self) -> "double":
        return _openstudiomodelresources.Blind_slatSeparation(self)

    def slatThickness(self) -> "double":
        return _openstudiomodelresources.Blind_slatThickness(self)

    def isSlatThicknessDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatThicknessDefaulted(self)

    def slatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_slatAngle(self)

    def isSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatAngleDefaulted(self)

    def slatConductivity(self) -> "double":
        return _openstudiomodelresources.Blind_slatConductivity(self)

    def isSlatConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatConductivityDefaulted(self)

    def slatBeamSolarTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatBeamSolarTransmittance(self)

    def isSlatBeamSolarTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatBeamSolarTransmittanceDefaulted(self)

    def frontSideSlatBeamSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatBeamSolarReflectance(self)

    def backSideSlatBeamSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatBeamSolarReflectance(self)

    def slatDiffuseSolarTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatDiffuseSolarTransmittance(self)

    def isSlatDiffuseSolarTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatDiffuseSolarTransmittanceDefaulted(self)

    def frontSideSlatDiffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseSolarReflectance(self)

    def backSideSlatDiffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatDiffuseSolarReflectance(self)

    def slatBeamVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatBeamVisibleTransmittance(self)

    def frontSideSlatBeamVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_frontSideSlatBeamVisibleReflectance(self)

    def backSideSlatBeamVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_backSideSlatBeamVisibleReflectance(self)

    def slatDiffuseVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatDiffuseVisibleTransmittance(self)

    def isSlatDiffuseVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatDiffuseVisibleTransmittanceDefaulted(self)

    def frontSideSlatDiffuseVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseVisibleReflectance(self)

    def backSideSlatDiffuseVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_backSideSlatDiffuseVisibleReflectance(self)

    def slatInfraredHemisphericalTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatInfraredHemisphericalTransmittance(self)

    def isSlatInfraredHemisphericalTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatInfraredHemisphericalTransmittanceDefaulted(self)

    def frontSideSlatInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatInfraredHemisphericalEmissivity(self)

    def isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def backSideSlatInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatInfraredHemisphericalEmissivity(self)

    def isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def blindtoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Blind_blindtoGlassDistance(self)

    def isBlindtoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindtoGlassDistanceDefaulted(self)

    def blindTopOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindTopOpeningMultiplier(self)

    def isBlindTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindTopOpeningMultiplierDefaulted(self)

    def blindBottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindBottomOpeningMultiplier(self)

    def isBlindBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindBottomOpeningMultiplierDefaulted(self)

    def blindLeftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindLeftSideOpeningMultiplier(self)

    def isBlindLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindLeftSideOpeningMultiplierDefaulted(self)

    def blindRightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindRightSideOpeningMultiplier(self)

    def isBlindRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindRightSideOpeningMultiplierDefaulted(self)

    def minimumSlatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_minimumSlatAngle(self)

    def isMinimumSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isMinimumSlatAngleDefaulted(self)

    def maximumSlatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_maximumSlatAngle(self)

    def isMaximumSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isMaximumSlatAngleDefaulted(self)

    def setSlatOrientation(self, slatOrientation: "std::string") -> "bool":
        return _openstudiomodelresources.Blind_setSlatOrientation(self, slatOrientation)

    def resetSlatOrientation(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatOrientation(self)

    def setSlatWidth(self, slatWidth: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatWidth(self, slatWidth)

    def setSlatSeparation(self, slatSeparation: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatSeparation(self, slatSeparation)

    def setSlatThickness(self, slatThickness: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatThickness(self, slatThickness)

    def resetSlatThickness(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatThickness(self)

    def setSlatAngle(self, slatAngle: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatAngle(self, slatAngle)

    def resetSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatAngle(self)

    def setSlatConductivity(self, slatConductivity: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatConductivity(self, slatConductivity)

    def resetSlatConductivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatConductivity(self)

    def setSlatBeamSolarTransmittance(self, slatBeamSolarTransmittance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatBeamSolarTransmittance(self, slatBeamSolarTransmittance)

    def resetSlatBeamSolarTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatBeamSolarTransmittance(self)

    def setFrontSideSlatBeamSolarReflectance(self, frontSideSlatBeamSolarReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamSolarReflectance(self, frontSideSlatBeamSolarReflectance)

    def setBackSideSlatBeamSolarReflectance(self, backSideSlatBeamSolarReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatBeamSolarReflectance(self, backSideSlatBeamSolarReflectance)

    def setSlatDiffuseSolarTransmittance(self, slatDiffuseSolarTransmittance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatDiffuseSolarTransmittance(self, slatDiffuseSolarTransmittance)

    def resetSlatDiffuseSolarTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatDiffuseSolarTransmittance(self)

    def setFrontSideSlatDiffuseSolarReflectance(self, frontSideSlatDiffuseSolarReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseSolarReflectance(self, frontSideSlatDiffuseSolarReflectance)

    def setBackSideSlatDiffuseSolarReflectance(self, backSideSlatDiffuseSolarReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseSolarReflectance(self, backSideSlatDiffuseSolarReflectance)

    def setSlatBeamVisibleTransmittance(self, slatBeamVisibleTransmittance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatBeamVisibleTransmittance(self, slatBeamVisibleTransmittance)

    def setFrontSideSlatBeamVisibleReflectance(self, frontSideSlatBeamVisibleReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamVisibleReflectance(self, frontSideSlatBeamVisibleReflectance)

    def resetFrontSideSlatBeamVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatBeamVisibleReflectance(self)

    def setBackSideSlatBeamVisibleReflectance(self, backSideSlatBeamVisibleReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatBeamVisibleReflectance(self, backSideSlatBeamVisibleReflectance)

    def resetBackSideSlatBeamVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatBeamVisibleReflectance(self)

    def setSlatDiffuseVisibleTransmittance(self, slatDiffuseVisibleTransmittance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatDiffuseVisibleTransmittance(self, slatDiffuseVisibleTransmittance)

    def resetSlatDiffuseVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatDiffuseVisibleTransmittance(self)

    def setFrontSideSlatDiffuseVisibleReflectance(self, frontSideSlatDiffuseVisibleReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseVisibleReflectance(self, frontSideSlatDiffuseVisibleReflectance)

    def resetFrontSideSlatDiffuseVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatDiffuseVisibleReflectance(self)

    def setBackSideSlatDiffuseVisibleReflectance(self, backSideSlatDiffuseVisibleReflectance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseVisibleReflectance(self, backSideSlatDiffuseVisibleReflectance)

    def resetBackSideSlatDiffuseVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatDiffuseVisibleReflectance(self)

    def setSlatInfraredHemisphericalTransmittance(self, slatInfraredHemisphericalTransmittance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setSlatInfraredHemisphericalTransmittance(self, slatInfraredHemisphericalTransmittance)

    def resetSlatInfraredHemisphericalTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatInfraredHemisphericalTransmittance(self)

    def setFrontSideSlatInfraredHemisphericalEmissivity(self, frontSideSlatInfraredHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatInfraredHemisphericalEmissivity(self, frontSideSlatInfraredHemisphericalEmissivity)

    def resetFrontSideSlatInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatInfraredHemisphericalEmissivity(self)

    def setBackSideSlatInfraredHemisphericalEmissivity(self, backSideSlatInfraredHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatInfraredHemisphericalEmissivity(self, backSideSlatInfraredHemisphericalEmissivity)

    def resetBackSideSlatInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatInfraredHemisphericalEmissivity(self)

    def setBlindtoGlassDistance(self, blindtoGlassDistance: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBlindtoGlassDistance(self, blindtoGlassDistance)

    def resetBlindtoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindtoGlassDistance(self)

    def setBlindTopOpeningMultiplier(self, blindTopOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBlindTopOpeningMultiplier(self, blindTopOpeningMultiplier)

    def resetBlindTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindTopOpeningMultiplier(self)

    def setBlindBottomOpeningMultiplier(self, blindBottomOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBlindBottomOpeningMultiplier(self, blindBottomOpeningMultiplier)

    def resetBlindBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindBottomOpeningMultiplier(self)

    def setBlindLeftSideOpeningMultiplier(self, blindLeftSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBlindLeftSideOpeningMultiplier(self, blindLeftSideOpeningMultiplier)

    def resetBlindLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindLeftSideOpeningMultiplier(self)

    def setBlindRightSideOpeningMultiplier(self, blindRightSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Blind_setBlindRightSideOpeningMultiplier(self, blindRightSideOpeningMultiplier)

    def resetBlindRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindRightSideOpeningMultiplier(self)

    def setMinimumSlatAngle(self, minimumSlatAngle: "double") -> "bool":
        return _openstudiomodelresources.Blind_setMinimumSlatAngle(self, minimumSlatAngle)

    def resetMinimumSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetMinimumSlatAngle(self)

    def setMaximumSlatAngle(self, maximumSlatAngle: "double") -> "bool":
        return _openstudiomodelresources.Blind_setMaximumSlatAngle(self, maximumSlatAngle)

    def resetMaximumSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetMaximumSlatAngle(self)

# Register Blind in _openstudiomodelresources:
_openstudiomodelresources.Blind_swigregister(Blind)

def Blind_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Blind_iddObjectType()

def Blind_slatOrientationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Blind_slatOrientationValues()


def toBlind(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.toBlind(idfObject)

def getBlind(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.getBlind(t_model, t_handle)

def getBlinds(t_model: "Model") -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > >":
    return _openstudiomodelresources.getBlinds(t_model)

def getBlindByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.getBlindByName(t_model, t_name)

def getBlindsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > >":
    return _openstudiomodelresources.getBlindsByName(t_model, t_name, t_exactMatch)

def _to_Blind(self) -> OptionalBlind:
    return toBlind(self)
openstudioutilitiesidf.IdfObject.to_Blind = _to_Blind

def _getBlind(self, t_handle: "UUID") -> OptionalBlind:
    return getBlind(self, t_handle)
Model.getBlind = _getBlind

def _getBlind(self, t_handle_str: str) -> OptionalBlind:
    return getBlind(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getBlind = _getBlind

def _getBlinds(self) -> BlindVector:
    return getBlinds(self)
Model.getBlinds = _getBlinds

def _getBlindByName(self, t_name: str) -> OptionalBlind:
    return getBlindByName(self, t_name)
Model.getBlindByName = _getBlindByName

def _getBlindsByName(self, t_name: str, t_exactMatch: bool) -> BlindVector:
    return getBlindsByName(self, t_name, t_exactMatch)
Model.getBlindsByName = _getBlindsByName

class DaylightRedirectionDevice(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.DaylightRedirectionDevice_swiginit(self, _openstudiomodelresources.new_DaylightRedirectionDevice(model))
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDevice

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType()

    @staticmethod
    def daylightRedirectionDeviceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues()

    def daylightRedirectionDeviceType(self) -> "std::string":
        return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceType(self)

    def isDaylightRedirectionDeviceTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDevice_isDaylightRedirectionDeviceTypeDefaulted(self)

    def setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType: "std::string const &") -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDevice_setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType)

    def resetDaylightRedirectionDeviceType(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDevice_resetDaylightRedirectionDeviceType(self)

# Register DaylightRedirectionDevice in _openstudiomodelresources:
_openstudiomodelresources.DaylightRedirectionDevice_swigregister(DaylightRedirectionDevice)

def DaylightRedirectionDevice_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType()

def DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues()


def toDaylightRedirectionDevice(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.toDaylightRedirectionDevice(idfObject)

def getDaylightRedirectionDevice(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.getDaylightRedirectionDevice(t_model, t_handle)

def getDaylightRedirectionDevices(t_model: "Model") -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > >":
    return _openstudiomodelresources.getDaylightRedirectionDevices(t_model)

def getDaylightRedirectionDeviceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.getDaylightRedirectionDeviceByName(t_model, t_name)

def getDaylightRedirectionDevicesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > >":
    return _openstudiomodelresources.getDaylightRedirectionDevicesByName(t_model, t_name, t_exactMatch)

def _to_DaylightRedirectionDevice(self) -> OptionalDaylightRedirectionDevice:
    return toDaylightRedirectionDevice(self)
openstudioutilitiesidf.IdfObject.to_DaylightRedirectionDevice = _to_DaylightRedirectionDevice

def _getDaylightRedirectionDevice(self, t_handle: "UUID") -> OptionalDaylightRedirectionDevice:
    return getDaylightRedirectionDevice(self, t_handle)
Model.getDaylightRedirectionDevice = _getDaylightRedirectionDevice

def _getDaylightRedirectionDevice(self, t_handle_str: str) -> OptionalDaylightRedirectionDevice:
    return getDaylightRedirectionDevice(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDaylightRedirectionDevice = _getDaylightRedirectionDevice

def _getDaylightRedirectionDevices(self) -> DaylightRedirectionDeviceVector:
    return getDaylightRedirectionDevices(self)
Model.getDaylightRedirectionDevices = _getDaylightRedirectionDevices

def _getDaylightRedirectionDeviceByName(self, t_name: str) -> OptionalDaylightRedirectionDevice:
    return getDaylightRedirectionDeviceByName(self, t_name)
Model.getDaylightRedirectionDeviceByName = _getDaylightRedirectionDeviceByName

def _getDaylightRedirectionDevicesByName(self, t_name: str, t_exactMatch: bool) -> DaylightRedirectionDeviceVector:
    return getDaylightRedirectionDevicesByName(self, t_name, t_exactMatch)
Model.getDaylightRedirectionDevicesByName = _getDaylightRedirectionDevicesByName

class AirGap(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", thermalResistance: "double"=0.1):
        _openstudiomodelresources.AirGap_swiginit(self, _openstudiomodelresources.new_AirGap(model, thermalResistance))
    __swig_destroy__ = _openstudiomodelresources.delete_AirGap

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.AirGap_iddObjectType()

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.AirGap_thermalResistance(self)

    def setThermalResistance(self, thermalResistance: "double") -> "bool":
        return _openstudiomodelresources.AirGap_setThermalResistance(self, thermalResistance)

    def resetThermalResistance(self) -> "void":
        return _openstudiomodelresources.AirGap_resetThermalResistance(self)

# Register AirGap in _openstudiomodelresources:
_openstudiomodelresources.AirGap_swigregister(AirGap)

def AirGap_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.AirGap_iddObjectType()


def toAirGap(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.toAirGap(idfObject)

def getAirGap(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.getAirGap(t_model, t_handle)

def getAirGaps(t_model: "Model") -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > >":
    return _openstudiomodelresources.getAirGaps(t_model)

def getAirGapByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.getAirGapByName(t_model, t_name)

def getAirGapsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > >":
    return _openstudiomodelresources.getAirGapsByName(t_model, t_name, t_exactMatch)

def _to_AirGap(self) -> OptionalAirGap:
    return toAirGap(self)
openstudioutilitiesidf.IdfObject.to_AirGap = _to_AirGap

def _getAirGap(self, t_handle: "UUID") -> OptionalAirGap:
    return getAirGap(self, t_handle)
Model.getAirGap = _getAirGap

def _getAirGap(self, t_handle_str: str) -> OptionalAirGap:
    return getAirGap(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirGap = _getAirGap

def _getAirGaps(self) -> AirGapVector:
    return getAirGaps(self)
Model.getAirGaps = _getAirGaps

def _getAirGapByName(self, t_name: str) -> OptionalAirGap:
    return getAirGapByName(self, t_name)
Model.getAirGapByName = _getAirGapByName

def _getAirGapsByName(self, t_name: str, t_exactMatch: bool) -> AirGapVector:
    return getAirGapsByName(self, t_name, t_exactMatch)
Model.getAirGapsByName = _getAirGapsByName

class Gas(GasLayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.Gas_swiginit(self, _openstudiomodelresources.new_Gas(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_Gas

    @staticmethod
    def validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.Gas_validGasTypes()

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.Gas_iddObjectType()

    @staticmethod
    def gasTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.Gas_gasTypeValues()

    def gasType(self) -> "std::string":
        return _openstudiomodelresources.Gas_gasType(self)

    def getThermalConductivity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getThermalResistance(self, temperature)

    def getViscosity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature: "double") -> "double":
        return _openstudiomodelresources.Gas_getSpecificHeat(self, temperature)

    def customConductivityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientA(self)

    def customConductivityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientB(self)

    def customConductivityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientC(self)

    def customViscosityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientA(self)

    def customViscosityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientB(self)

    def customViscosityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientC(self)

    def customSpecificHeatCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientA(self)

    def customSpecificHeatCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientB(self)

    def customSpecificHeatCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientC(self)

    def customMolecularWeight(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customMolecularWeight(self)

    def specificHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatRatio(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.Gas_thickness(self)

    def conductivityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientA(self)

    def conductivityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientB(self)

    def conductivityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientC(self)

    def viscosityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientA(self)

    def viscosityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientB(self)

    def viscosityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientC(self)

    def specificHeatCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientA(self)

    def specificHeatCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientB(self)

    def specificHeatCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientC(self)

    def molecularWeight(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_molecularWeight(self)

    def setCustomConductivity(self, A: "double", B: "double", C: "double") -> "bool":
        return _openstudiomodelresources.Gas_setCustomConductivity(self, A, B, C)

    def setCustomViscosity(self, A: "double", B: "double", C: "double") -> "bool":
        return _openstudiomodelresources.Gas_setCustomViscosity(self, A, B, C)

    def setCustomSpecificHeat(self, A: "double", B: "double", C: "double") -> "bool":
        return _openstudiomodelresources.Gas_setCustomSpecificHeat(self, A, B, C)

    def setCustomMolecularWeight(self, value: "double") -> "bool":
        return _openstudiomodelresources.Gas_setCustomMolecularWeight(self, value)

    def setGasType(self, gasType: "std::string") -> "bool":
        return _openstudiomodelresources.Gas_setGasType(self, gasType)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.Gas_setThickness(self, thickness)

    def setConductivityCoefficientA(self, conductivityCoefficientA: "double") -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientA(self, conductivityCoefficientA)

    def resetConductivityCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientA(self)

    def setConductivityCoefficientB(self, conductivityCoefficientB: "double") -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientB(self, conductivityCoefficientB)

    def resetConductivityCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientB(self)

    def setConductivityCoefficientC(self, conductivityCoefficientC: "double") -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientC(self, conductivityCoefficientC)

    def resetConductivityCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientC(self)

    def setViscosityCoefficientA(self, viscosityCoefficientA: "double") -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientA(self, viscosityCoefficientA)

    def resetViscosityCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientA(self)

    def setViscosityCoefficientB(self, viscosityCoefficientB: "double") -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientB(self, viscosityCoefficientB)

    def resetViscosityCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientB(self)

    def setViscosityCoefficientC(self, viscosityCoefficientC: "double") -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientC(self, viscosityCoefficientC)

    def resetViscosityCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientC(self)

    def setSpecificHeatCoefficientA(self, specificHeatCoefficientA: "double") -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientA(self, specificHeatCoefficientA)

    def resetSpecificHeatCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientA(self)

    def setSpecificHeatCoefficientB(self, specificHeatCoefficientB: "double") -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientB(self, specificHeatCoefficientB)

    def resetSpecificHeatCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientB(self)

    def setSpecificHeatCoefficientC(self, specificHeatCoefficientC: "double") -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientC(self, specificHeatCoefficientC)

    def resetSpecificHeatCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientC(self)

    def setMolecularWeight(self, molecularWeight: "double") -> "bool":
        return _openstudiomodelresources.Gas_setMolecularWeight(self, molecularWeight)

    def resetMolecularWeight(self) -> "void":
        return _openstudiomodelresources.Gas_resetMolecularWeight(self)

    def setSpecificHeatRatio(self, specificHeatRatio: "double") -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatRatio(self, specificHeatRatio)

    def resetSpecificHeatRatio(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatRatio(self)

# Register Gas in _openstudiomodelresources:
_openstudiomodelresources.Gas_swigregister(Gas)

def Gas_validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Gas_validGasTypes()

def Gas_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Gas_iddObjectType()

def Gas_gasTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Gas_gasTypeValues()


def toGas(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.toGas(idfObject)

def getGas(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.getGas(t_model, t_handle)

def getGass(t_model: "Model") -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > >":
    return _openstudiomodelresources.getGass(t_model)

def getGasByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.getGasByName(t_model, t_name)

def getGassByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > >":
    return _openstudiomodelresources.getGassByName(t_model, t_name, t_exactMatch)

def _to_Gas(self) -> OptionalGas:
    return toGas(self)
openstudioutilitiesidf.IdfObject.to_Gas = _to_Gas

def _getGas(self, t_handle: "UUID") -> OptionalGas:
    return getGas(self, t_handle)
Model.getGas = _getGas

def _getGas(self, t_handle_str: str) -> OptionalGas:
    return getGas(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGas = _getGas

def _getGass(self) -> GasVector:
    return getGass(self)
Model.getGass = _getGass

def _getGasByName(self, t_name: str) -> OptionalGas:
    return getGasByName(self, t_name)
Model.getGasByName = _getGasByName

def _getGassByName(self, t_name: str, t_exactMatch: bool) -> GasVector:
    return getGassByName(self, t_name, t_exactMatch)
Model.getGassByName = _getGassByName

class GasMixture(GasLayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.GasMixture_swiginit(self, _openstudiomodelresources.new_GasMixture(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixture

    @staticmethod
    def validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasMixture_validGasTypes()

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.GasMixture_iddObjectType()

    @staticmethod
    def gas1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasMixture_gas1TypeValues()

    @staticmethod
    def gas2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasMixture_gas2TypeValues()

    @staticmethod
    def gas3TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasMixture_gas3TypeValues()

    @staticmethod
    def gas4TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasMixture_gas4TypeValues()

    def getGasType(self, index: "unsigned int") -> "std::string":
        return _openstudiomodelresources.GasMixture_getGasType(self, index)

    def getGasFraction(self, index: "unsigned int") -> "double":
        return _openstudiomodelresources.GasMixture_getGasFraction(self, index)

    def getThermalConductivity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getThermalResistance(self, temperature)

    def getViscosity(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature: "double") -> "double":
        return _openstudiomodelresources.GasMixture_getSpecificHeat(self, temperature)

    def thickness(self) -> "double":
        return _openstudiomodelresources.GasMixture_thickness(self)

    def numberofGasesinMixture(self) -> "int":
        return _openstudiomodelresources.GasMixture_numberofGasesinMixture(self)

    def gas1Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas1Type(self)

    def gas1Fraction(self) -> "double":
        return _openstudiomodelresources.GasMixture_gas1Fraction(self)

    def gas2Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas2Type(self)

    def gas2Fraction(self) -> "double":
        return _openstudiomodelresources.GasMixture_gas2Fraction(self)

    def gas3Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas3Type(self)

    def gas3Fraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasMixture_gas3Fraction(self)

    def gas4Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas4Type(self)

    def gas4Fraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasMixture_gas4Fraction(self)

    def setGas(self, index: "unsigned int", type: "std::string const &", fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas(self, index, type, fraction)

    def setGasType(self, index: "unsigned int", type: "std::string const &") -> "bool":
        return _openstudiomodelresources.GasMixture_setGasType(self, index, type)

    def setGasFraction(self, index: "unsigned int", fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGasFraction(self, index, fraction)

    def addGas(self, type: "std::string const &", fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_addGas(self, type, fraction)

    def setFractions(self, fractions: "DoubleVector") -> "bool":
        return _openstudiomodelresources.GasMixture_setFractions(self, fractions)

    def balanceFractions(self, index: "unsigned int") -> "bool":
        return _openstudiomodelresources.GasMixture_balanceFractions(self, index)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setThickness(self, thickness)

    def setNumberofGasesinMixture(self, numberofGasesinMixture: "int") -> "bool":
        return _openstudiomodelresources.GasMixture_setNumberofGasesinMixture(self, numberofGasesinMixture)

    def setGas1Type(self, gas1Type: "std::string") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas1Type(self, gas1Type)

    def resetGas1Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas1Type(self)

    def setGas1Fraction(self, gas1Fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas1Fraction(self, gas1Fraction)

    def resetGas1Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas1Fraction(self)

    def setGas2Type(self, gas2Type: "std::string") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas2Type(self, gas2Type)

    def resetGas2Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas2Type(self)

    def setGas2Fraction(self, gas2Fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas2Fraction(self, gas2Fraction)

    def resetGas2Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas2Fraction(self)

    def setGas3Type(self, gas3Type: "std::string") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas3Type(self, gas3Type)

    def resetGas3Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas3Type(self)

    def setGas3Fraction(self, gas3Fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas3Fraction(self, gas3Fraction)

    def resetGas3Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas3Fraction(self)

    def setGas4Type(self, gas4Type: "std::string") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas4Type(self, gas4Type)

    def resetGas4Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas4Type(self)

    def setGas4Fraction(self, gas4Fraction: "double") -> "bool":
        return _openstudiomodelresources.GasMixture_setGas4Fraction(self, gas4Fraction)

    def resetGas4Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas4Fraction(self)

    def numGases(self) -> "unsigned int":
        return _openstudiomodelresources.GasMixture_numGases(self)

# Register GasMixture in _openstudiomodelresources:
_openstudiomodelresources.GasMixture_swigregister(GasMixture)

def GasMixture_validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_validGasTypes()

def GasMixture_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.GasMixture_iddObjectType()

def GasMixture_gas1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas1TypeValues()

def GasMixture_gas2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas2TypeValues()

def GasMixture_gas3TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas3TypeValues()

def GasMixture_gas4TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas4TypeValues()


def toGasMixture(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.toGasMixture(idfObject)

def getGasMixture(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.getGasMixture(t_model, t_handle)

def getGasMixtures(t_model: "Model") -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > >":
    return _openstudiomodelresources.getGasMixtures(t_model)

def getGasMixtureByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.getGasMixtureByName(t_model, t_name)

def getGasMixturesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > >":
    return _openstudiomodelresources.getGasMixturesByName(t_model, t_name, t_exactMatch)

def _to_GasMixture(self) -> OptionalGasMixture:
    return toGasMixture(self)
openstudioutilitiesidf.IdfObject.to_GasMixture = _to_GasMixture

def _getGasMixture(self, t_handle: "UUID") -> OptionalGasMixture:
    return getGasMixture(self, t_handle)
Model.getGasMixture = _getGasMixture

def _getGasMixture(self, t_handle_str: str) -> OptionalGasMixture:
    return getGasMixture(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGasMixture = _getGasMixture

def _getGasMixtures(self) -> GasMixtureVector:
    return getGasMixtures(self)
Model.getGasMixtures = _getGasMixtures

def _getGasMixtureByName(self, t_name: str) -> OptionalGasMixture:
    return getGasMixtureByName(self, t_name)
Model.getGasMixtureByName = _getGasMixtureByName

def _getGasMixturesByName(self, t_name: str, t_exactMatch: bool) -> GasMixtureVector:
    return getGasMixturesByName(self, t_name, t_exactMatch)
Model.getGasMixturesByName = _getGasMixturesByName

class InfraredTransparentMaterial(ModelPartitionMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.InfraredTransparentMaterial_swiginit(self, _openstudiomodelresources.new_InfraredTransparentMaterial(model))
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType()

# Register InfraredTransparentMaterial in _openstudiomodelresources:
_openstudiomodelresources.InfraredTransparentMaterial_swigregister(InfraredTransparentMaterial)

def InfraredTransparentMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType()


def toInfraredTransparentMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.toInfraredTransparentMaterial(idfObject)

def getInfraredTransparentMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.getInfraredTransparentMaterial(t_model, t_handle)

def getInfraredTransparentMaterials(t_model: "Model") -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > >":
    return _openstudiomodelresources.getInfraredTransparentMaterials(t_model)

def getInfraredTransparentMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.getInfraredTransparentMaterialByName(t_model, t_name)

def getInfraredTransparentMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > >":
    return _openstudiomodelresources.getInfraredTransparentMaterialsByName(t_model, t_name, t_exactMatch)

def _to_InfraredTransparentMaterial(self) -> OptionalInfraredTransparentMaterial:
    return toInfraredTransparentMaterial(self)
openstudioutilitiesidf.IdfObject.to_InfraredTransparentMaterial = _to_InfraredTransparentMaterial

def _getInfraredTransparentMaterial(self, t_handle: "UUID") -> OptionalInfraredTransparentMaterial:
    return getInfraredTransparentMaterial(self, t_handle)
Model.getInfraredTransparentMaterial = _getInfraredTransparentMaterial

def _getInfraredTransparentMaterial(self, t_handle_str: str) -> OptionalInfraredTransparentMaterial:
    return getInfraredTransparentMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getInfraredTransparentMaterial = _getInfraredTransparentMaterial

def _getInfraredTransparentMaterials(self) -> InfraredTransparentMaterialVector:
    return getInfraredTransparentMaterials(self)
Model.getInfraredTransparentMaterials = _getInfraredTransparentMaterials

def _getInfraredTransparentMaterialByName(self, t_name: str) -> OptionalInfraredTransparentMaterial:
    return getInfraredTransparentMaterialByName(self, t_name)
Model.getInfraredTransparentMaterialByName = _getInfraredTransparentMaterialByName

def _getInfraredTransparentMaterialsByName(self, t_name: str, t_exactMatch: bool) -> InfraredTransparentMaterialVector:
    return getInfraredTransparentMaterialsByName(self, t_name, t_exactMatch)
Model.getInfraredTransparentMaterialsByName = _getInfraredTransparentMaterialsByName

class MasslessOpaqueMaterial(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.MasslessOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_MasslessOpaqueMaterial(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType()

    @staticmethod
    def roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues()

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.MasslessOpaqueMaterial_roughness(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalResistance(self)

    def thermalAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def setRoughness(self, roughness: "std::string") -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setRoughness(self, roughness)

    def setThermalResistance(self, thermalResistance: "double") -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalResistance(self, thermalResistance)

    def setThermalAbsorptance(self, thermalAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalAbsorptance(self, thermalAbsorptance)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, solarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setSolarAbsorptance(self, solarAbsorptance)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, visibleAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setVisibleAbsorptance(self, visibleAbsorptance)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetVisibleAbsorptance(self)

# Register MasslessOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.MasslessOpaqueMaterial_swigregister(MasslessOpaqueMaterial)

def MasslessOpaqueMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType()

def MasslessOpaqueMaterial_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues()


def toMasslessOpaqueMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.toMasslessOpaqueMaterial(idfObject)

def getMasslessOpaqueMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.getMasslessOpaqueMaterial(t_model, t_handle)

def getMasslessOpaqueMaterials(t_model: "Model") -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > >":
    return _openstudiomodelresources.getMasslessOpaqueMaterials(t_model)

def getMasslessOpaqueMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.getMasslessOpaqueMaterialByName(t_model, t_name)

def getMasslessOpaqueMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > >":
    return _openstudiomodelresources.getMasslessOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_MasslessOpaqueMaterial(self) -> OptionalMasslessOpaqueMaterial:
    return toMasslessOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_MasslessOpaqueMaterial = _to_MasslessOpaqueMaterial

def _getMasslessOpaqueMaterial(self, t_handle: "UUID") -> OptionalMasslessOpaqueMaterial:
    return getMasslessOpaqueMaterial(self, t_handle)
Model.getMasslessOpaqueMaterial = _getMasslessOpaqueMaterial

def _getMasslessOpaqueMaterial(self, t_handle_str: str) -> OptionalMasslessOpaqueMaterial:
    return getMasslessOpaqueMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMasslessOpaqueMaterial = _getMasslessOpaqueMaterial

def _getMasslessOpaqueMaterials(self) -> MasslessOpaqueMaterialVector:
    return getMasslessOpaqueMaterials(self)
Model.getMasslessOpaqueMaterials = _getMasslessOpaqueMaterials

def _getMasslessOpaqueMaterialByName(self, t_name: str) -> OptionalMasslessOpaqueMaterial:
    return getMasslessOpaqueMaterialByName(self, t_name)
Model.getMasslessOpaqueMaterialByName = _getMasslessOpaqueMaterialByName

def _getMasslessOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> MasslessOpaqueMaterialVector:
    return getMasslessOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getMasslessOpaqueMaterialsByName = _getMasslessOpaqueMaterialsByName

class RefractionExtinctionGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", thickness: "double"=0.1, solarIndexofRefraction: "double"=1.1, solarExtinctionCoefficient: "double"=0.1, visibleIndexofRefraction: "double"=1.1, visibleExtinctionCoefficient: "double"=0.1):
        _openstudiomodelresources.RefractionExtinctionGlazing_swiginit(self, _openstudiomodelresources.new_RefractionExtinctionGlazing(model, thickness, solarIndexofRefraction, solarExtinctionCoefficient, visibleIndexofRefraction, visibleExtinctionCoefficient))
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazing

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType()

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistance(self)

    def thermalTransmittance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalTransmittance(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thickness(self)

    def solarIndexofRefraction(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarIndexofRefraction(self)

    def solarExtinctionCoefficient(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarExtinctionCoefficient(self)

    def visibleIndexofRefraction(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleIndexofRefraction(self)

    def visibleExtinctionCoefficient(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleExtinctionCoefficient(self)

    def infraredTransmittanceatNormalIncidence(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredTransmittanceatNormalIncidence(self)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def infraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredHemisphericalEmissivity(self)

    def isInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredHemisphericalEmissivityDefaulted(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_conductivity(self)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isSolarDiffusingDefaulted(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductivity(self, value)

    def setThermalConductance(self, value: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistance(self, value)

    def setThermalTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalTransmittance(self, value)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThickness(self, thickness)

    def setSolarIndexofRefraction(self, solarIndexofRefraction: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarIndexofRefraction(self, solarIndexofRefraction)

    def setSolarExtinctionCoefficient(self, solarExtinctionCoefficient: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarExtinctionCoefficient(self, solarExtinctionCoefficient)

    def setVisibleIndexofRefraction(self, visibleIndexofRefraction: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleIndexofRefraction(self, visibleIndexofRefraction)

    def setVisibleExtinctionCoefficient(self, visibleExtinctionCoefficient: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleExtinctionCoefficient(self, visibleExtinctionCoefficient)

    def setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence)

    def resetInfraredTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setInfraredHemisphericalEmissivity(self, infraredHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredHemisphericalEmissivity(self, infraredHemisphericalEmissivity)

    def resetInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredHemisphericalEmissivity(self)

    def setConductivity(self, conductivity: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setConductivity(self, conductivity)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance: "double") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing: "bool") -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing: "bool") -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetSolarDiffusing(self)

# Register RefractionExtinctionGlazing in _openstudiomodelresources:
_openstudiomodelresources.RefractionExtinctionGlazing_swigregister(RefractionExtinctionGlazing)

def RefractionExtinctionGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType()


def toRefractionExtinctionGlazing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.toRefractionExtinctionGlazing(idfObject)

def getRefractionExtinctionGlazing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.getRefractionExtinctionGlazing(t_model, t_handle)

def getRefractionExtinctionGlazings(t_model: "Model") -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > >":
    return _openstudiomodelresources.getRefractionExtinctionGlazings(t_model)

def getRefractionExtinctionGlazingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.getRefractionExtinctionGlazingByName(t_model, t_name)

def getRefractionExtinctionGlazingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > >":
    return _openstudiomodelresources.getRefractionExtinctionGlazingsByName(t_model, t_name, t_exactMatch)

def _to_RefractionExtinctionGlazing(self) -> OptionalRefractionExtinctionGlazing:
    return toRefractionExtinctionGlazing(self)
openstudioutilitiesidf.IdfObject.to_RefractionExtinctionGlazing = _to_RefractionExtinctionGlazing

def _getRefractionExtinctionGlazing(self, t_handle: "UUID") -> OptionalRefractionExtinctionGlazing:
    return getRefractionExtinctionGlazing(self, t_handle)
Model.getRefractionExtinctionGlazing = _getRefractionExtinctionGlazing

def _getRefractionExtinctionGlazing(self, t_handle_str: str) -> OptionalRefractionExtinctionGlazing:
    return getRefractionExtinctionGlazing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getRefractionExtinctionGlazing = _getRefractionExtinctionGlazing

def _getRefractionExtinctionGlazings(self) -> RefractionExtinctionGlazingVector:
    return getRefractionExtinctionGlazings(self)
Model.getRefractionExtinctionGlazings = _getRefractionExtinctionGlazings

def _getRefractionExtinctionGlazingByName(self, t_name: str) -> OptionalRefractionExtinctionGlazing:
    return getRefractionExtinctionGlazingByName(self, t_name)
Model.getRefractionExtinctionGlazingByName = _getRefractionExtinctionGlazingByName

def _getRefractionExtinctionGlazingsByName(self, t_name: str, t_exactMatch: bool) -> RefractionExtinctionGlazingVector:
    return getRefractionExtinctionGlazingsByName(self, t_name, t_exactMatch)
Model.getRefractionExtinctionGlazingsByName = _getRefractionExtinctionGlazingsByName

class RoofVegetation(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.RoofVegetation_swiginit(self, _openstudiomodelresources.new_RoofVegetation(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetation

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.RoofVegetation_iddObjectType()

    @staticmethod
    def roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.RoofVegetation_roughnessValues()

    @staticmethod
    def moistureDiffusionCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues()

    def heightofPlants(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_heightofPlants(self)

    def isHeightofPlantsDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isHeightofPlantsDefaulted(self)

    def leafAreaIndex(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafAreaIndex(self)

    def isLeafAreaIndexDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafAreaIndexDefaulted(self)

    def leafReflectivity(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafReflectivity(self)

    def isLeafReflectivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafReflectivityDefaulted(self)

    def leafEmissivity(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafEmissivity(self)

    def isLeafEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafEmissivityDefaulted(self)

    def minimumStomatalResistance(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_minimumStomatalResistance(self)

    def isMinimumStomatalResistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isMinimumStomatalResistanceDefaulted(self)

    def soilLayerName(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_soilLayerName(self)

    def isSoilLayerNameDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSoilLayerNameDefaulted(self)

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_roughness(self)

    def density(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_density(self)

    def specificHeat(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_specificHeat(self)

    def saturationVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContent(self)

    def residualVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContent(self)

    def initialVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContent(self)

    def isRoughnessDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isRoughnessDefaulted(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_thickness(self)

    def isThicknessDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isThicknessDefaulted(self)

    def conductivityofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_conductivityofDrySoil(self)

    def isConductivityofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isConductivityofDrySoilDefaulted(self)

    def densityofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_densityofDrySoil(self)

    def isDensityofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isDensityofDrySoilDefaulted(self)

    def specificHeatofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_specificHeatofDrySoil(self)

    def isSpecificHeatofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSpecificHeatofDrySoilDefaulted(self)

    def thermalAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isVisibleAbsorptanceDefaulted(self)

    def saturationVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContentoftheSoilLayer(self)

    def isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def residualVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContentoftheSoilLayer(self)

    def isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def initialVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContentoftheSoilLayer(self)

    def isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def moistureDiffusionCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethod(self)

    def isMoistureDiffusionCalculationMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isMoistureDiffusionCalculationMethodDefaulted(self)

    def setLeafAreaIndex(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafAreaIndex(self, value)

    def setLeafReflectivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafReflectivity(self, value)

    def setLeafEmissivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafEmissivity(self, value)

    def setMinimumStomatalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setMinimumStomatalResistance(self, value)

    def setSoilLayerName(self, name: "std::string const &") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSoilLayerName(self, name)

    def setRoughness(self, value: "std::string const &") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setRoughness(self, value)

    def setDensity(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setDensity(self, value)

    def setSpecificHeat(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSpecificHeat(self, value)

    def setSaturationVolumetricMoistureContent(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContent(self, value)

    def setResidualVolumetricMoistureContent(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContent(self, value)

    def setInitialVolumetricMoistureConent(self, value: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureConent(self, value)

    def setMoistureDiffusionCalculationMethod(self, value: "std::string const &") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setMoistureDiffusionCalculationMethod(self, value)

    def setHeightofPlants(self, heightofPlants: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setHeightofPlants(self, heightofPlants)

    def resetHeightofPlants(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetHeightofPlants(self)

    def resetLeafAreaIndex(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafAreaIndex(self)

    def resetLeafReflectivity(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafReflectivity(self)

    def resetLeafEmissivity(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafEmissivity(self)

    def resetMinimumStomatalResistance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetMinimumStomatalResistance(self)

    def resetSoilLayerName(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSoilLayerName(self)

    def resetRoughness(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetRoughness(self)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setThickness(self, thickness)

    def resetThickness(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetThickness(self)

    def setConductivityofDrySoil(self, conductivityofDrySoil: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setConductivityofDrySoil(self, conductivityofDrySoil)

    def resetConductivityofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetConductivityofDrySoil(self)

    def setDensityofDrySoil(self, densityofDrySoil: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setDensityofDrySoil(self, densityofDrySoil)

    def resetDensityofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetDensityofDrySoil(self)

    def setSpecificHeatofDrySoil(self, specificHeatofDrySoil: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSpecificHeatofDrySoil(self, specificHeatofDrySoil)

    def resetSpecificHeatofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSpecificHeatofDrySoil(self)

    def setThermalAbsorptance(self, thermalAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setThermalAbsorptance(self, thermalAbsorptance)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, solarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSolarAbsorptance(self, solarAbsorptance)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, visibleAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setVisibleAbsorptance(self, visibleAbsorptance)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetVisibleAbsorptance(self)

    def setSaturationVolumetricMoistureContentoftheSoilLayer(self, saturationVolumetricMoistureContentoftheSoilLayer: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContentoftheSoilLayer(self, saturationVolumetricMoistureContentoftheSoilLayer)

    def resetSaturationVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSaturationVolumetricMoistureContentoftheSoilLayer(self)

    def setResidualVolumetricMoistureContentoftheSoilLayer(self, residualVolumetricMoistureContentoftheSoilLayer: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContentoftheSoilLayer(self, residualVolumetricMoistureContentoftheSoilLayer)

    def resetResidualVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetResidualVolumetricMoistureContentoftheSoilLayer(self)

    def setInitialVolumetricMoistureContentoftheSoilLayer(self, initialVolumetricMoistureContentoftheSoilLayer: "double") -> "bool":
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureContentoftheSoilLayer(self, initialVolumetricMoistureContentoftheSoilLayer)

    def resetInitialVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetInitialVolumetricMoistureContentoftheSoilLayer(self)

    def resetMoistureDiffusionCalculationMethod(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetMoistureDiffusionCalculationMethod(self)

# Register RoofVegetation in _openstudiomodelresources:
_openstudiomodelresources.RoofVegetation_swigregister(RoofVegetation)

def RoofVegetation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RoofVegetation_iddObjectType()

def RoofVegetation_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.RoofVegetation_roughnessValues()

def RoofVegetation_moistureDiffusionCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues()


def toRoofVegetation(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.toRoofVegetation(idfObject)

def getRoofVegetation(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.getRoofVegetation(t_model, t_handle)

def getRoofVegetations(t_model: "Model") -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > >":
    return _openstudiomodelresources.getRoofVegetations(t_model)

def getRoofVegetationByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.getRoofVegetationByName(t_model, t_name)

def getRoofVegetationsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > >":
    return _openstudiomodelresources.getRoofVegetationsByName(t_model, t_name, t_exactMatch)

def _to_RoofVegetation(self) -> OptionalRoofVegetation:
    return toRoofVegetation(self)
openstudioutilitiesidf.IdfObject.to_RoofVegetation = _to_RoofVegetation

def _getRoofVegetation(self, t_handle: "UUID") -> OptionalRoofVegetation:
    return getRoofVegetation(self, t_handle)
Model.getRoofVegetation = _getRoofVegetation

def _getRoofVegetation(self, t_handle_str: str) -> OptionalRoofVegetation:
    return getRoofVegetation(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getRoofVegetation = _getRoofVegetation

def _getRoofVegetations(self) -> RoofVegetationVector:
    return getRoofVegetations(self)
Model.getRoofVegetations = _getRoofVegetations

def _getRoofVegetationByName(self, t_name: str) -> OptionalRoofVegetation:
    return getRoofVegetationByName(self, t_name)
Model.getRoofVegetationByName = _getRoofVegetationByName

def _getRoofVegetationsByName(self, t_name: str, t_exactMatch: bool) -> RoofVegetationVector:
    return getRoofVegetationsByName(self, t_name, t_exactMatch)
Model.getRoofVegetationsByName = _getRoofVegetationsByName

class Screen(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", diffuseSolarReflectance: "double"=0.08, diffuseVisibleReflectance: "double"=0.08, screenMaterialSpacing: "double"=0.00157, screenMaterialDiameter: "double"=0.000381):
        _openstudiomodelresources.Screen_swiginit(self, _openstudiomodelresources.new_Screen(model, diffuseSolarReflectance, diffuseVisibleReflectance, screenMaterialSpacing, screenMaterialDiameter))
    __swig_destroy__ = _openstudiomodelresources.delete_Screen

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.Screen_iddObjectType()

    @staticmethod
    def reflectedBeamTransmittanceAccountingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues()

    @staticmethod
    def angleofResolutionforScreenTransmittanceOutputMapValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues()

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.Screen_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.Screen_thermalResistance(self)

    def reflectedBeamTransmittanceAccountingMethod(self) -> "std::string":
        return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethod(self)

    def isReflectedBeamTransmittanceAccountingMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isReflectedBeamTransmittanceAccountingMethodDefaulted(self)

    def diffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Screen_diffuseSolarReflectance(self)

    def diffuseVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.Screen_diffuseVisibleReflectance(self)

    def thermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalHemisphericalEmissivity(self)

    def isThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isThermalHemisphericalEmissivityDefaulted(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.Screen_conductivity(self)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isConductivityDefaulted(self)

    def screenMaterialSpacing(self) -> "double":
        return _openstudiomodelresources.Screen_screenMaterialSpacing(self)

    def screenMaterialDiameter(self) -> "double":
        return _openstudiomodelresources.Screen_screenMaterialDiameter(self)

    def screentoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Screen_screentoGlassDistance(self)

    def isScreentoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isScreentoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_topOpeningMultiplier(self)

    def isTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_bottomOpeningMultiplier(self)

    def isBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_leftSideOpeningMultiplier(self)

    def isLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_rightSideOpeningMultiplier(self)

    def isRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isRightSideOpeningMultiplierDefaulted(self)

    def angleofResolutionforScreenTransmittanceOutputMap(self) -> "std::string":
        return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMap(self)

    def isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.Screen_setThermalConductivity(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.Screen_setThermalResistivity(self, value)

    def setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod: "std::string") -> "bool":
        return _openstudiomodelresources.Screen_setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod)

    def resetReflectedBeamTransmittanceAccountingMethod(self) -> "void":
        return _openstudiomodelresources.Screen_resetReflectedBeamTransmittanceAccountingMethod(self)

    def setDiffuseSolarReflectance(self, diffuseSolarReflectance: "double") -> "bool":
        return _openstudiomodelresources.Screen_setDiffuseSolarReflectance(self, diffuseSolarReflectance)

    def setDiffuseVisibleReflectance(self, diffuseVisibleReflectance: "double") -> "bool":
        return _openstudiomodelresources.Screen_setDiffuseVisibleReflectance(self, diffuseVisibleReflectance)

    def setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.Screen_setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity)

    def resetThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Screen_resetThermalHemisphericalEmissivity(self)

    def setConductivity(self, conductivity: "double") -> "bool":
        return _openstudiomodelresources.Screen_setConductivity(self, conductivity)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.Screen_resetConductivity(self)

    def setScreenMaterialSpacing(self, screenMaterialSpacing: "double") -> "bool":
        return _openstudiomodelresources.Screen_setScreenMaterialSpacing(self, screenMaterialSpacing)

    def setScreenMaterialDiameter(self, screenMaterialDiameter: "double") -> "bool":
        return _openstudiomodelresources.Screen_setScreenMaterialDiameter(self, screenMaterialDiameter)

    def setScreentoGlassDistance(self, screentoGlassDistance: "double") -> "bool":
        return _openstudiomodelresources.Screen_setScreentoGlassDistance(self, screentoGlassDistance)

    def resetScreentoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Screen_resetScreentoGlassDistance(self)

    def setTopOpeningMultiplier(self, topOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Screen_setTopOpeningMultiplier(self, topOpeningMultiplier)

    def resetTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, bottomOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Screen_setBottomOpeningMultiplier(self, bottomOpeningMultiplier)

    def resetBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Screen_setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier)

    def resetLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Screen_setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier)

    def resetRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetRightSideOpeningMultiplier(self)

    def setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap: "std::string") -> "bool":
        return _openstudiomodelresources.Screen_setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap)

    def resetAngleofResolutionforScreenTransmittanceOutputMap(self) -> "void":
        return _openstudiomodelresources.Screen_resetAngleofResolutionforScreenTransmittanceOutputMap(self)

# Register Screen in _openstudiomodelresources:
_openstudiomodelresources.Screen_swigregister(Screen)

def Screen_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Screen_iddObjectType()

def Screen_reflectedBeamTransmittanceAccountingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues()

def Screen_angleofResolutionforScreenTransmittanceOutputMapValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues()


def toScreen(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.toScreen(idfObject)

def getScreen(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.getScreen(t_model, t_handle)

def getScreens(t_model: "Model") -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > >":
    return _openstudiomodelresources.getScreens(t_model)

def getScreenByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.getScreenByName(t_model, t_name)

def getScreensByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > >":
    return _openstudiomodelresources.getScreensByName(t_model, t_name, t_exactMatch)

def _to_Screen(self) -> OptionalScreen:
    return toScreen(self)
openstudioutilitiesidf.IdfObject.to_Screen = _to_Screen

def _getScreen(self, t_handle: "UUID") -> OptionalScreen:
    return getScreen(self, t_handle)
Model.getScreen = _getScreen

def _getScreen(self, t_handle_str: str) -> OptionalScreen:
    return getScreen(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScreen = _getScreen

def _getScreens(self) -> ScreenVector:
    return getScreens(self)
Model.getScreens = _getScreens

def _getScreenByName(self, t_name: str) -> OptionalScreen:
    return getScreenByName(self, t_name)
Model.getScreenByName = _getScreenByName

def _getScreensByName(self, t_name: str, t_exactMatch: bool) -> ScreenVector:
    return getScreensByName(self, t_name, t_exactMatch)
Model.getScreensByName = _getScreensByName

class Shade(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", solarTransmittance: "double"=0.4, solarReflectance: "double"=0.5, visibleTransmittance: "double"=0.4, visibleReflectance: "double"=0.5, thermalHemisphericalEmissivity: "double"=0.9, thermalTransmittance: "double"=0.0, thickness: "double"=0.005, conductivity: "double"=0.1):
        _openstudiomodelresources.Shade_swiginit(self, _openstudiomodelresources.new_Shade(model, solarTransmittance, solarReflectance, visibleTransmittance, visibleReflectance, thermalHemisphericalEmissivity, thermalTransmittance, thickness, conductivity))
    __swig_destroy__ = _openstudiomodelresources.delete_Shade

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.Shade_iddObjectType()

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalResistance(self)

    def solarTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_solarTransmittance(self)

    def solarReflectance(self) -> "double":
        return _openstudiomodelresources.Shade_solarReflectance(self)

    def visibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleTransmittance(self)

    def visibleReflectance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleReflectance(self)

    def thermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalHemisphericalEmissivity(self)

    def thermalTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalTransmittance(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.Shade_solarAbsorptance(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleAbsorptance(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.Shade_thickness(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.Shade_conductivity(self)

    def shadetoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Shade_shadetoGlassDistance(self)

    def isShadetoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isShadetoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_topOpeningMultiplier(self)

    def isTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_bottomOpeningMultiplier(self)

    def isBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_leftSideOpeningMultiplier(self)

    def isLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_rightSideOpeningMultiplier(self)

    def isRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isRightSideOpeningMultiplierDefaulted(self)

    def airflowPermeability(self) -> "double":
        return _openstudiomodelresources.Shade_airflowPermeability(self)

    def isAirflowPermeabilityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isAirflowPermeabilityDefaulted(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalConductivity(self, value)

    def setThermalConductance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalConductance(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalResistivity(self, value)

    def setThermalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalResistance(self, value)

    def setThermalTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalTransmittance(self, value)

    def setSolarTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setSolarTransmittance(self, value)

    def setSolarReflectance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setSolarReflectance(self, value)

    def setVisibleTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setVisibleTransmittance(self, value)

    def setVisibleReflectance(self, value: "double") -> "bool":
        return _openstudiomodelresources.Shade_setVisibleReflectance(self, value)

    def setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.Shade_setThickness(self, thickness)

    def setConductivity(self, conductivity: "double") -> "bool":
        return _openstudiomodelresources.Shade_setConductivity(self, conductivity)

    def setShadetoGlassDistance(self, shadetoGlassDistance: "double") -> "bool":
        return _openstudiomodelresources.Shade_setShadetoGlassDistance(self, shadetoGlassDistance)

    def resetShadetoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Shade_resetShadetoGlassDistance(self)

    def setTopOpeningMultiplier(self, topOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Shade_setTopOpeningMultiplier(self, topOpeningMultiplier)

    def resetTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, bottomOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Shade_setBottomOpeningMultiplier(self, bottomOpeningMultiplier)

    def resetBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Shade_setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier)

    def resetLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier: "double") -> "bool":
        return _openstudiomodelresources.Shade_setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier)

    def resetRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetRightSideOpeningMultiplier(self)

    def setAirflowPermeability(self, airflowPermeability: "double") -> "bool":
        return _openstudiomodelresources.Shade_setAirflowPermeability(self, airflowPermeability)

    def resetAirflowPermeability(self) -> "void":
        return _openstudiomodelresources.Shade_resetAirflowPermeability(self)

# Register Shade in _openstudiomodelresources:
_openstudiomodelresources.Shade_swigregister(Shade)

def Shade_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Shade_iddObjectType()


def toShade(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.toShade(idfObject)

def getShade(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.getShade(t_model, t_handle)

def getShades(t_model: "Model") -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > >":
    return _openstudiomodelresources.getShades(t_model)

def getShadeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.getShadeByName(t_model, t_name)

def getShadesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > >":
    return _openstudiomodelresources.getShadesByName(t_model, t_name, t_exactMatch)

def _to_Shade(self) -> OptionalShade:
    return toShade(self)
openstudioutilitiesidf.IdfObject.to_Shade = _to_Shade

def _getShade(self, t_handle: "UUID") -> OptionalShade:
    return getShade(self, t_handle)
Model.getShade = _getShade

def _getShade(self, t_handle_str: str) -> OptionalShade:
    return getShade(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getShade = _getShade

def _getShades(self) -> ShadeVector:
    return getShades(self)
Model.getShades = _getShades

def _getShadeByName(self, t_name: str) -> OptionalShade:
    return getShadeByName(self, t_name)
Model.getShadeByName = _getShadeByName

def _getShadesByName(self, t_name: str, t_exactMatch: bool) -> ShadeVector:
    return getShadesByName(self, t_name, t_exactMatch)
Model.getShadesByName = _getShadesByName

class SimpleGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", uFactor: "double"=0.1, solarHeatGainCoefficient: "double"=0.1):
        _openstudiomodelresources.SimpleGlazing_swiginit(self, _openstudiomodelresources.new_SimpleGlazing(model, uFactor, solarHeatGainCoefficient))
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazing

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.SimpleGlazing_iddObjectType()

    def uFactor(self) -> "double":
        return _openstudiomodelresources.SimpleGlazing_uFactor(self)

    def solarHeatGainCoefficient(self) -> "double":
        return _openstudiomodelresources.SimpleGlazing_solarHeatGainCoefficient(self)

    def visibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SimpleGlazing_visibleTransmittance(self)

    def setUFactor(self, uFactor: "double") -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setUFactor(self, uFactor)

    def setSolarHeatGainCoefficient(self, solarHeatGainCoefficient: "double") -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setSolarHeatGainCoefficient(self, solarHeatGainCoefficient)

    def setVisibleTransmittance(self, visibleTransmittance: "double") -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setVisibleTransmittance(self, visibleTransmittance)

    def resetVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.SimpleGlazing_resetVisibleTransmittance(self)

# Register SimpleGlazing in _openstudiomodelresources:
_openstudiomodelresources.SimpleGlazing_swigregister(SimpleGlazing)

def SimpleGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.SimpleGlazing_iddObjectType()


def toSimpleGlazing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.toSimpleGlazing(idfObject)

def getSimpleGlazing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.getSimpleGlazing(t_model, t_handle)

def getSimpleGlazings(t_model: "Model") -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > >":
    return _openstudiomodelresources.getSimpleGlazings(t_model)

def getSimpleGlazingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.getSimpleGlazingByName(t_model, t_name)

def getSimpleGlazingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > >":
    return _openstudiomodelresources.getSimpleGlazingsByName(t_model, t_name, t_exactMatch)

def _to_SimpleGlazing(self) -> OptionalSimpleGlazing:
    return toSimpleGlazing(self)
openstudioutilitiesidf.IdfObject.to_SimpleGlazing = _to_SimpleGlazing

def _getSimpleGlazing(self, t_handle: "UUID") -> OptionalSimpleGlazing:
    return getSimpleGlazing(self, t_handle)
Model.getSimpleGlazing = _getSimpleGlazing

def _getSimpleGlazing(self, t_handle_str: str) -> OptionalSimpleGlazing:
    return getSimpleGlazing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSimpleGlazing = _getSimpleGlazing

def _getSimpleGlazings(self) -> SimpleGlazingVector:
    return getSimpleGlazings(self)
Model.getSimpleGlazings = _getSimpleGlazings

def _getSimpleGlazingByName(self, t_name: str) -> OptionalSimpleGlazing:
    return getSimpleGlazingByName(self, t_name)
Model.getSimpleGlazingByName = _getSimpleGlazingByName

def _getSimpleGlazingsByName(self, t_name: str, t_exactMatch: bool) -> SimpleGlazingVector:
    return getSimpleGlazingsByName(self, t_name, t_exactMatch)
Model.getSimpleGlazingsByName = _getSimpleGlazingsByName

class StandardGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.StandardGlazing_swiginit(self, _openstudiomodelresources.new_StandardGlazing(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazing

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.StandardGlazing_iddObjectType()

    @staticmethod
    def opticalDataTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardGlazing_opticalDataTypeValues()

    def opticalDataType(self) -> "std::string":
        return _openstudiomodelresources.StandardGlazing_opticalDataType(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thickness(self)

    def windowGlassSpectralDataSetName(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSetName(self)

    def windowGlassSpectralDataSet(self) -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSet(self)

    def solarTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_solarTransmittance(self)

    def solarTransmittanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_solarTransmittanceatNormalIncidence(self)

    def frontSideSolarReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_frontSideSolarReflectanceatNormalIncidence(self)

    def backSideSolarReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_backSideSolarReflectanceatNormalIncidence(self)

    def visibleTransmittanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_visibleTransmittanceatNormalIncidence(self)

    def frontSideVisibleReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_frontSideVisibleReflectanceatNormalIncidence(self)

    def backSideVisibleReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_backSideVisibleReflectanceatNormalIncidence(self)

    def infraredTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_infraredTransmittance(self)

    def infraredTransmittanceatNormalIncidence(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_infraredTransmittanceatNormalIncidence(self)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def frontSideInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_frontSideInfraredHemisphericalEmissivity(self)

    def isFrontSideInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isFrontSideInfraredHemisphericalEmissivityDefaulted(self)

    def backSideInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_backSideInfraredHemisphericalEmissivity(self)

    def isBackSideInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isBackSideInfraredHemisphericalEmissivityDefaulted(self)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalConductivity(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_conductivity(self)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isSolarDiffusingDefaulted(self)

    def setOpticalDataType(self, opticalDataType: "std::string") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setOpticalDataType(self, opticalDataType)

    def setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName)

    def resetWindowGlassSpectralDataSetName(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSetName(self)

    def setWindowGlassSpectralDataSet(self, spectralData: "MaterialPropertyGlazingSpectralData") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSet(self, spectralData)

    def resetWindowGlassSpectralDataSet(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSet(self)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThickness(self, thickness)

    def setSolarTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittance(self, value)

    def setSolarTransmittanceatNormalIncidence(self, solarTransmittanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittanceatNormalIncidence(self, solarTransmittanceatNormalIncidence)

    def resetSolarTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetSolarTransmittanceatNormalIncidence(self)

    def setFrontSideSolarReflectanceatNormalIncidence(self, frontSideSolarReflectanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideSolarReflectanceatNormalIncidence(self, frontSideSolarReflectanceatNormalIncidence)

    def resetFrontSideSolarReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideSolarReflectanceatNormalIncidence(self)

    def setBackSideSolarReflectanceatNormalIncidence(self, backSideSolarReflectanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideSolarReflectanceatNormalIncidence(self, backSideSolarReflectanceatNormalIncidence)

    def resetBackSideSolarReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideSolarReflectanceatNormalIncidence(self)

    def setVisibleTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittance(self, value)

    def setVisibleTransmittanceatNormalIncidence(self, visibleTransmittanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittanceatNormalIncidence(self, visibleTransmittanceatNormalIncidence)

    def resetVisibleTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetVisibleTransmittanceatNormalIncidence(self)

    def setFrontSideVisibleReflectanceatNormalIncidence(self, frontSideVisibleReflectanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideVisibleReflectanceatNormalIncidence(self, frontSideVisibleReflectanceatNormalIncidence)

    def resetFrontSideVisibleReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideVisibleReflectanceatNormalIncidence(self)

    def setBackSideVisibleReflectanceatNormalIncidence(self, backSideVisibleReflectanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideVisibleReflectanceatNormalIncidence(self, backSideVisibleReflectanceatNormalIncidence)

    def resetBackSideVisibleReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideVisibleReflectanceatNormalIncidence(self)

    def setInfraredTransmittance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittance(self, value)

    def setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence)

    def resetInfraredTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setFrontSideInfraredHemisphericalEmissivity(self, frontSideInfraredHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideInfraredHemisphericalEmissivity(self, frontSideInfraredHemisphericalEmissivity)

    def resetFrontSideInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideInfraredHemisphericalEmissivity(self)

    def setBackSideInfraredHemisphericalEmissivity(self, backSideInfraredHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideInfraredHemisphericalEmissivity(self, backSideInfraredHemisphericalEmissivity)

    def resetBackSideInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideInfraredHemisphericalEmissivity(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalConductivity(self, value)

    def setConductivity(self, conductivity: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setConductivity(self, conductivity)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing: "bool") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing: "bool") -> "void":
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetSolarDiffusing(self)

    def interiorVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_interiorVisibleReflectance(self)

    def exteriorVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_exteriorVisibleReflectance(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalResistance(self)

    def setThermalConductance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalResistance(self, value)

# Register StandardGlazing in _openstudiomodelresources:
_openstudiomodelresources.StandardGlazing_swigregister(StandardGlazing)

def StandardGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardGlazing_iddObjectType()

def StandardGlazing_opticalDataTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardGlazing_opticalDataTypeValues()


def toStandardGlazing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.toStandardGlazing(idfObject)

def getStandardGlazing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.getStandardGlazing(t_model, t_handle)

def getStandardGlazings(t_model: "Model") -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > >":
    return _openstudiomodelresources.getStandardGlazings(t_model)

def getStandardGlazingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.getStandardGlazingByName(t_model, t_name)

def getStandardGlazingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > >":
    return _openstudiomodelresources.getStandardGlazingsByName(t_model, t_name, t_exactMatch)

def _to_StandardGlazing(self) -> OptionalStandardGlazing:
    return toStandardGlazing(self)
openstudioutilitiesidf.IdfObject.to_StandardGlazing = _to_StandardGlazing

def _getStandardGlazing(self, t_handle: "UUID") -> OptionalStandardGlazing:
    return getStandardGlazing(self, t_handle)
Model.getStandardGlazing = _getStandardGlazing

def _getStandardGlazing(self, t_handle_str: str) -> OptionalStandardGlazing:
    return getStandardGlazing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getStandardGlazing = _getStandardGlazing

def _getStandardGlazings(self) -> StandardGlazingVector:
    return getStandardGlazings(self)
Model.getStandardGlazings = _getStandardGlazings

def _getStandardGlazingByName(self, t_name: str) -> OptionalStandardGlazing:
    return getStandardGlazingByName(self, t_name)
Model.getStandardGlazingByName = _getStandardGlazingByName

def _getStandardGlazingsByName(self, t_name: str, t_exactMatch: bool) -> StandardGlazingVector:
    return getStandardGlazingsByName(self, t_name, t_exactMatch)
Model.getStandardGlazingsByName = _getStandardGlazingsByName

class StandardOpaqueMaterial(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.StandardOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_StandardOpaqueMaterial(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType()

    @staticmethod
    def roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues()

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistance(self)

    def thermalReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalReflectance(self)

    def solarReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_solarReflectance(self)

    def visibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleReflectance(self)

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.StandardOpaqueMaterial_roughness(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thickness(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_conductivity(self)

    def density(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_density(self)

    def specificHeat(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_specificHeat(self)

    def thermalAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def setThermalConductivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistance(self, value)

    def setThermalReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalReflectance(self, value)

    def setSolarReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleReflectance(self, value: "OptionalDouble") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleReflectance(self, value)

    def setRoughness(self, roughness: "std::string") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setRoughness(self, roughness)

    def setThickness(self, thickness: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThickness(self, thickness)

    def setConductivity(self, conductivity: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setConductivity(self, conductivity)

    def setDensity(self, density: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setDensity(self, density)

    def setSpecificHeat(self, specificHeat: "double") -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSpecificHeat(self, specificHeat)

    def setThermalAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalAbsorptance(self, *args)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarAbsorptance(self, *args)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleAbsorptance(self, *args)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetVisibleAbsorptance(self)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_heatCapacity(self)

# Register StandardOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.StandardOpaqueMaterial_swigregister(StandardOpaqueMaterial)

def StandardOpaqueMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType()

def StandardOpaqueMaterial_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues()


def toStandardOpaqueMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.toStandardOpaqueMaterial(idfObject)

def getStandardOpaqueMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.getStandardOpaqueMaterial(t_model, t_handle)

def getStandardOpaqueMaterials(t_model: "Model") -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > >":
    return _openstudiomodelresources.getStandardOpaqueMaterials(t_model)

def getStandardOpaqueMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.getStandardOpaqueMaterialByName(t_model, t_name)

def getStandardOpaqueMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > >":
    return _openstudiomodelresources.getStandardOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_StandardOpaqueMaterial(self) -> OptionalStandardOpaqueMaterial:
    return toStandardOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_StandardOpaqueMaterial = _to_StandardOpaqueMaterial

def _getStandardOpaqueMaterial(self, t_handle: "UUID") -> OptionalStandardOpaqueMaterial:
    return getStandardOpaqueMaterial(self, t_handle)
Model.getStandardOpaqueMaterial = _getStandardOpaqueMaterial

def _getStandardOpaqueMaterial(self, t_handle_str: str) -> OptionalStandardOpaqueMaterial:
    return getStandardOpaqueMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getStandardOpaqueMaterial = _getStandardOpaqueMaterial

def _getStandardOpaqueMaterials(self) -> StandardOpaqueMaterialVector:
    return getStandardOpaqueMaterials(self)
Model.getStandardOpaqueMaterials = _getStandardOpaqueMaterials

def _getStandardOpaqueMaterialByName(self, t_name: str) -> OptionalStandardOpaqueMaterial:
    return getStandardOpaqueMaterialByName(self, t_name)
Model.getStandardOpaqueMaterialByName = _getStandardOpaqueMaterialByName

def _getStandardOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> StandardOpaqueMaterialVector:
    return getStandardOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getStandardOpaqueMaterialsByName = _getStandardOpaqueMaterialsByName

class ThermochromicGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", opticalDataTemperature: "double"=80.0):
        _openstudiomodelresources.ThermochromicGlazing_swiginit(self, _openstudiomodelresources.new_ThermochromicGlazing(model, opticalDataTemperature))
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazing

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ThermochromicGlazing_iddObjectType()

    def opticalDataTemperature(self) -> "double":
        return _openstudiomodelresources.ThermochromicGlazing_opticalDataTemperature(self)

    def setOpticalDataTemperature(self, value: "double") -> "bool":
        return _openstudiomodelresources.ThermochromicGlazing_setOpticalDataTemperature(self, value)

# Register ThermochromicGlazing in _openstudiomodelresources:
_openstudiomodelresources.ThermochromicGlazing_swigregister(ThermochromicGlazing)

def ThermochromicGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ThermochromicGlazing_iddObjectType()


def toThermochromicGlazing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.toThermochromicGlazing(idfObject)

def getThermochromicGlazing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.getThermochromicGlazing(t_model, t_handle)

def getThermochromicGlazings(t_model: "Model") -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > >":
    return _openstudiomodelresources.getThermochromicGlazings(t_model)

def getThermochromicGlazingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.getThermochromicGlazingByName(t_model, t_name)

def getThermochromicGlazingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > >":
    return _openstudiomodelresources.getThermochromicGlazingsByName(t_model, t_name, t_exactMatch)

def _to_ThermochromicGlazing(self) -> OptionalThermochromicGlazing:
    return toThermochromicGlazing(self)
openstudioutilitiesidf.IdfObject.to_ThermochromicGlazing = _to_ThermochromicGlazing

def _getThermochromicGlazing(self, t_handle: "UUID") -> OptionalThermochromicGlazing:
    return getThermochromicGlazing(self, t_handle)
Model.getThermochromicGlazing = _getThermochromicGlazing

def _getThermochromicGlazing(self, t_handle_str: str) -> OptionalThermochromicGlazing:
    return getThermochromicGlazing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermochromicGlazing = _getThermochromicGlazing

def _getThermochromicGlazings(self) -> ThermochromicGlazingVector:
    return getThermochromicGlazings(self)
Model.getThermochromicGlazings = _getThermochromicGlazings

def _getThermochromicGlazingByName(self, t_name: str) -> OptionalThermochromicGlazing:
    return getThermochromicGlazingByName(self, t_name)
Model.getThermochromicGlazingByName = _getThermochromicGlazingByName

def _getThermochromicGlazingsByName(self, t_name: str, t_exactMatch: bool) -> ThermochromicGlazingVector:
    return getThermochromicGlazingsByName(self, t_name, t_exactMatch)
Model.getThermochromicGlazingsByName = _getThermochromicGlazingsByName

class StandardsInformationMaterial(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.StandardsInformationMaterial_iddObjectType()

    def material(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.StandardsInformationMaterial_material(self)

    def materialStandard(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandard(self)

    def suggestedMaterialStandards(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandards(self)

    def materialStandardSource(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandardSource(self)

    def suggestedMaterialStandardSources(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandardSources(self)

    def standardsCategory(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_standardsCategory(self)

    def suggestedStandardsCategories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsCategories(self)

    def isCompositeMaterial(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_isCompositeMaterial(self)

    def standardsIdentifier(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_standardsIdentifier(self)

    def suggestedStandardsIdentifiers(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsIdentifiers(self)

    def compositeFramingMaterial(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingMaterial(self)

    def suggestedCompositeFramingMaterials(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingMaterials(self)

    def compositeFramingConfiguration(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingConfiguration(self)

    def suggestedCompositeFramingConfigurations(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingConfigurations(self)

    def compositeFramingDepth(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingDepth(self)

    def suggestedCompositeFramingDepths(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingDepths(self)

    def compositeFramingSize(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingSize(self)

    def suggestedCompositeFramingSizes(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingSizes(self)

    def compositeCavityInsulation(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeCavityInsulation(self)

    def suggestedCompositeCavityInsulations(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeCavityInsulations(self)

    def setMaterialStandard(self, materialStandard: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandard(self, materialStandard)

    def resetMaterialStandard(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandard(self)

    def setMaterialStandardSource(self, materialStandardSource: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandardSource(self, materialStandardSource)

    def resetMaterialStandardSource(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandardSource(self)

    def setStandardsCategory(self, standardsCategory: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsCategory(self, standardsCategory)

    def resetStandardsCategory(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsCategory(self)

    def setStandardsIdentifier(self, standardsIdentifier: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsIdentifier(self, standardsIdentifier)

    def resetStandardsIdentifier(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsIdentifier(self)

    def setCompositeFramingMaterial(self, compositeFramingMaterial: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingMaterial(self, compositeFramingMaterial)

    def resetCompositeFramingMaterial(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingMaterial(self)

    def setCompositeFramingConfiguration(self, compositeFramingConfiguration: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingConfiguration(self, compositeFramingConfiguration)

    def resetCompositeFramingConfiguration(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingConfiguration(self)

    def setCompositeFramingDepth(self, compositeFramingDepth: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingDepth(self, compositeFramingDepth)

    def resetCompositeFramingDepth(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingDepth(self)

    def setCompositeFramingSize(self, compositeFramingSize: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingSize(self, compositeFramingSize)

    def resetCompositeFramingSize(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingSize(self)

    def setCompositeCavityInsulation(self, compositeCavityInsulation: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeCavityInsulation(self, compositeCavityInsulation)

    def resetCompositeCavityInsulation(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeCavityInsulation(self)

# Register StandardsInformationMaterial in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationMaterial_swigregister(StandardsInformationMaterial)

def StandardsInformationMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardsInformationMaterial_iddObjectType()


def toStandardsInformationMaterial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.toStandardsInformationMaterial(idfObject)

def getStandardsInformationMaterial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.getStandardsInformationMaterial(t_model, t_handle)

def getStandardsInformationMaterials(t_model: "Model") -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > >":
    return _openstudiomodelresources.getStandardsInformationMaterials(t_model)

def getStandardsInformationMaterialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.getStandardsInformationMaterialByName(t_model, t_name)

def getStandardsInformationMaterialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > >":
    return _openstudiomodelresources.getStandardsInformationMaterialsByName(t_model, t_name, t_exactMatch)

def _to_StandardsInformationMaterial(self) -> OptionalStandardsInformationMaterial:
    return toStandardsInformationMaterial(self)
openstudioutilitiesidf.IdfObject.to_StandardsInformationMaterial = _to_StandardsInformationMaterial

def _getStandardsInformationMaterial(self, t_handle: "UUID") -> OptionalStandardsInformationMaterial:
    return getStandardsInformationMaterial(self, t_handle)
Model.getStandardsInformationMaterial = _getStandardsInformationMaterial

def _getStandardsInformationMaterial(self, t_handle_str: str) -> OptionalStandardsInformationMaterial:
    return getStandardsInformationMaterial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getStandardsInformationMaterial = _getStandardsInformationMaterial

def _getStandardsInformationMaterials(self) -> StandardsInformationMaterialVector:
    return getStandardsInformationMaterials(self)
Model.getStandardsInformationMaterials = _getStandardsInformationMaterials

def _getStandardsInformationMaterialByName(self, t_name: str) -> OptionalStandardsInformationMaterial:
    return getStandardsInformationMaterialByName(self, t_name)
Model.getStandardsInformationMaterialByName = _getStandardsInformationMaterialByName

def _getStandardsInformationMaterialsByName(self, t_name: str, t_exactMatch: bool) -> StandardsInformationMaterialVector:
    return getStandardsInformationMaterialsByName(self, t_name, t_exactMatch)
Model.getStandardsInformationMaterialsByName = _getStandardsInformationMaterialsByName

class ConstructionBase(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBase

    def standardsInformation(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.ConstructionBase_standardsInformation(self)

    def getNetArea(self) -> "double":
        return _openstudiomodelresources.ConstructionBase_getNetArea(self)

    def setUFactor(self, *args) -> "bool":
        return _openstudiomodelresources.ConstructionBase_setUFactor(self, *args)

    def setConductance(self, *args) -> "bool":
        return _openstudiomodelresources.ConstructionBase_setConductance(self, *args)

    def isOpaque(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isOpaque(self)

    def isFenestration(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isFenestration(self)

    def isSolarDiffusing(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isSolarDiffusing(self)

    def isModelPartition(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isModelPartition(self)

    def isGreenRoof(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isGreenRoof(self)

    def uFactor(self, *args) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_uFactor(self, *args)

    def thermalConductance(self, *args) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_thermalConductance(self, *args)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_heatCapacity(self)

    def interiorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_interiorVisibleAbsorptance(self)

    def interiorVisibleAbsorbtance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_interiorVisibleAbsorbtance(self)

    def exteriorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_exteriorVisibleAbsorptance(self)

    def exteriorVisibleAbsorbtance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_exteriorVisibleAbsorbtance(self)

    def visibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_visibleTransmittance(self)

    def renderingColor(self) -> "boost::optional< openstudio::model::RenderingColor >":
        return _openstudiomodelresources.ConstructionBase_renderingColor(self)

    def setRenderingColor(self, renderingColor: "RenderingColor") -> "bool":
        return _openstudiomodelresources.ConstructionBase_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self) -> "void":
        return _openstudiomodelresources.ConstructionBase_resetRenderingColor(self)

# Register ConstructionBase in _openstudiomodelresources:
_openstudiomodelresources.ConstructionBase_swigregister(ConstructionBase)


def toConstructionBase(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.toConstructionBase(idfObject)

def getConstructionBase(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.getConstructionBase(t_model, t_handle)

def getConstructionBases(t_model: "Model") -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > >":
    return _openstudiomodelresources.getConstructionBases(t_model)

def getConstructionBaseByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.getConstructionBaseByName(t_model, t_name)

def getConstructionBasesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > >":
    return _openstudiomodelresources.getConstructionBasesByName(t_model, t_name, t_exactMatch)

def _to_ConstructionBase(self) -> OptionalConstructionBase:
    return toConstructionBase(self)
openstudioutilitiesidf.IdfObject.to_ConstructionBase = _to_ConstructionBase

def _getConstructionBase(self, t_handle: "UUID") -> OptionalConstructionBase:
    return getConstructionBase(self, t_handle)
Model.getConstructionBase = _getConstructionBase

def _getConstructionBase(self, t_handle_str: str) -> OptionalConstructionBase:
    return getConstructionBase(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConstructionBase = _getConstructionBase

def _getConstructionBases(self) -> ConstructionBaseVector:
    return getConstructionBases(self)
Model.getConstructionBases = _getConstructionBases

def _getConstructionBaseByName(self, t_name: str) -> OptionalConstructionBase:
    return getConstructionBaseByName(self, t_name)
Model.getConstructionBaseByName = _getConstructionBaseByName

def _getConstructionBasesByName(self, t_name: str, t_exactMatch: bool) -> ConstructionBaseVector:
    return getConstructionBasesByName(self, t_name, t_exactMatch)
Model.getConstructionBasesByName = _getConstructionBasesByName

class LayeredConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstruction

    @staticmethod
    def layersAreValid(*args) -> "bool":
        return _openstudiomodelresources.LayeredConstruction_layersAreValid(*args)

    def layers(self) -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
        return _openstudiomodelresources.LayeredConstruction_layers(self)

    def getLayer(self, layerIndex: "unsigned int") -> "openstudio::model::Material":
        return _openstudiomodelresources.LayeredConstruction_getLayer(self, layerIndex)

    def eraseLayer(self, layerIndex: "unsigned int") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_eraseLayer(self, layerIndex)

    def insertLayer(self, layerIndex: "unsigned int", material: "Material") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_insertLayer(self, layerIndex, material)

    def setLayers(self, materials: "MaterialVector") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setLayers(self, materials)

    def setLayer(self, *args) -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setLayer(self, *args)

    def isSymmetric(self) -> "bool":
        return _openstudiomodelresources.LayeredConstruction_isSymmetric(self)

    def equalLayers(self, other: "LayeredConstruction") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_equalLayers(self, other)

    def reverseEqualLayers(self, other: "LayeredConstruction") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_reverseEqualLayers(self, other)

    def nullLayers(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelresources.LayeredConstruction_nullLayers(self)

    def numLayers(self) -> "unsigned int":
        return _openstudiomodelresources.LayeredConstruction_numLayers(self)

    def getLayerIndices(self, material: "Material") -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelresources.LayeredConstruction_getLayerIndices(self, material)

    def insulation(self) -> "boost::optional< openstudio::model::OpaqueMaterial >":
        return _openstudiomodelresources.LayeredConstruction_insulation(self)

    def setInsulation(self, insulationLayer: "OpaqueMaterial") -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setInsulation(self, insulationLayer)

    def resetInsulation(self) -> "void":
        return _openstudiomodelresources.LayeredConstruction_resetInsulation(self)

    def ensureUniqueLayers(self) -> "void":
        return _openstudiomodelresources.LayeredConstruction_ensureUniqueLayers(self)

# Register LayeredConstruction in _openstudiomodelresources:
_openstudiomodelresources.LayeredConstruction_swigregister(LayeredConstruction)

def LayeredConstruction_layersAreValid(*args) -> "bool":
    return _openstudiomodelresources.LayeredConstruction_layersAreValid(*args)


def toLayeredConstruction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.toLayeredConstruction(idfObject)

def getLayeredConstruction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.getLayeredConstruction(t_model, t_handle)

def getLayeredConstructions(t_model: "Model") -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > >":
    return _openstudiomodelresources.getLayeredConstructions(t_model)

def getLayeredConstructionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.getLayeredConstructionByName(t_model, t_name)

def getLayeredConstructionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > >":
    return _openstudiomodelresources.getLayeredConstructionsByName(t_model, t_name, t_exactMatch)

def _to_LayeredConstruction(self) -> OptionalLayeredConstruction:
    return toLayeredConstruction(self)
openstudioutilitiesidf.IdfObject.to_LayeredConstruction = _to_LayeredConstruction

def _getLayeredConstruction(self, t_handle: "UUID") -> OptionalLayeredConstruction:
    return getLayeredConstruction(self, t_handle)
Model.getLayeredConstruction = _getLayeredConstruction

def _getLayeredConstruction(self, t_handle_str: str) -> OptionalLayeredConstruction:
    return getLayeredConstruction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLayeredConstruction = _getLayeredConstruction

def _getLayeredConstructions(self) -> LayeredConstructionVector:
    return getLayeredConstructions(self)
Model.getLayeredConstructions = _getLayeredConstructions

def _getLayeredConstructionByName(self, t_name: str) -> OptionalLayeredConstruction:
    return getLayeredConstructionByName(self, t_name)
Model.getLayeredConstructionByName = _getLayeredConstructionByName

def _getLayeredConstructionsByName(self, t_name: str, t_exactMatch: bool) -> LayeredConstructionVector:
    return getLayeredConstructionsByName(self, t_name, t_exactMatch)
Model.getLayeredConstructionsByName = _getLayeredConstructionsByName

class Construction(LayeredConstruction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.Construction_swiginit(self, _openstudiomodelresources.new_Construction(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_Construction

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.Construction_iddObjectType()

    def reverseConstruction(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.Construction_reverseConstruction(self)

# Register Construction in _openstudiomodelresources:
_openstudiomodelresources.Construction_swigregister(Construction)

def Construction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Construction_iddObjectType()


def toConstruction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.toConstruction(idfObject)

def getConstruction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.getConstruction(t_model, t_handle)

def getConstructions(t_model: "Model") -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > >":
    return _openstudiomodelresources.getConstructions(t_model)

def getConstructionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.getConstructionByName(t_model, t_name)

def getConstructionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > >":
    return _openstudiomodelresources.getConstructionsByName(t_model, t_name, t_exactMatch)

def _to_Construction(self) -> OptionalConstruction:
    return toConstruction(self)
openstudioutilitiesidf.IdfObject.to_Construction = _to_Construction

def _getConstruction(self, t_handle: "UUID") -> OptionalConstruction:
    return getConstruction(self, t_handle)
Model.getConstruction = _getConstruction

def _getConstruction(self, t_handle_str: str) -> OptionalConstruction:
    return getConstruction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConstruction = _getConstruction

def _getConstructions(self) -> ConstructionVector:
    return getConstructions(self)
Model.getConstructions = _getConstructions

def _getConstructionByName(self, t_name: str) -> OptionalConstruction:
    return getConstructionByName(self, t_name)
Model.getConstructionByName = _getConstructionByName

def _getConstructionsByName(self, t_name: str, t_exactMatch: bool) -> ConstructionVector:
    return getConstructionsByName(self, t_name, t_exactMatch)
Model.getConstructionsByName = _getConstructionsByName

class ConstructionAirBoundary(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ConstructionAirBoundary_swiginit(self, _openstudiomodelresources.new_ConstructionAirBoundary(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionAirBoundary

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ConstructionAirBoundary_iddObjectType()

    @staticmethod
    def solarAndDaylightingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ConstructionAirBoundary_solarAndDaylightingMethodValues()

    @staticmethod
    def radiantExchangeMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ConstructionAirBoundary_radiantExchangeMethodValues()

    @staticmethod
    def airExchangeMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ConstructionAirBoundary_airExchangeMethodValues()

    def solarAndDaylightingMethod(self) -> "std::string":
        return _openstudiomodelresources.ConstructionAirBoundary_solarAndDaylightingMethod(self)

    def isSolarAndDaylightingMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_isSolarAndDaylightingMethodDefaulted(self)

    def radiantExchangeMethod(self) -> "std::string":
        return _openstudiomodelresources.ConstructionAirBoundary_radiantExchangeMethod(self)

    def isRadiantExchangeMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_isRadiantExchangeMethodDefaulted(self)

    def airExchangeMethod(self) -> "std::string":
        return _openstudiomodelresources.ConstructionAirBoundary_airExchangeMethod(self)

    def isAirExchangeMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_isAirExchangeMethodDefaulted(self)

    def simpleMixingAirChangesPerHour(self) -> "double":
        return _openstudiomodelresources.ConstructionAirBoundary_simpleMixingAirChangesPerHour(self)

    def isSimpleMixingAirChangesPerHourDefaulted(self) -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_isSimpleMixingAirChangesPerHourDefaulted(self)

    def simpleMixingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ConstructionAirBoundary_simpleMixingSchedule(self)

    def setSolarAndDaylightingMethod(self, solarAndDaylightingMethod: "std::string const &") -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_setSolarAndDaylightingMethod(self, solarAndDaylightingMethod)

    def resetSolarAndDaylightingMethod(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundary_resetSolarAndDaylightingMethod(self)

    def setRadiantExchangeMethod(self, radiantExchangeMethod: "std::string const &") -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_setRadiantExchangeMethod(self, radiantExchangeMethod)

    def resetRadiantExchangeMethod(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundary_resetRadiantExchangeMethod(self)

    def setAirExchangeMethod(self, airExchangeMethod: "std::string const &") -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_setAirExchangeMethod(self, airExchangeMethod)

    def resetAirExchangeMethod(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundary_resetAirExchangeMethod(self)

    def setSimpleMixingAirChangesPerHour(self, simpleMixingAirChangesPerHour: "double") -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_setSimpleMixingAirChangesPerHour(self, simpleMixingAirChangesPerHour)

    def resetSimpleMixingAirChangesPerHour(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundary_resetSimpleMixingAirChangesPerHour(self)

    def setSimpleMixingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.ConstructionAirBoundary_setSimpleMixingSchedule(self, schedule)

    def resetSimpleMixingSchedule(self) -> "void":
        return _openstudiomodelresources.ConstructionAirBoundary_resetSimpleMixingSchedule(self)

# Register ConstructionAirBoundary in _openstudiomodelresources:
_openstudiomodelresources.ConstructionAirBoundary_swigregister(ConstructionAirBoundary)

def ConstructionAirBoundary_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ConstructionAirBoundary_iddObjectType()

def ConstructionAirBoundary_solarAndDaylightingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ConstructionAirBoundary_solarAndDaylightingMethodValues()

def ConstructionAirBoundary_radiantExchangeMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ConstructionAirBoundary_radiantExchangeMethodValues()

def ConstructionAirBoundary_airExchangeMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ConstructionAirBoundary_airExchangeMethodValues()


def toConstructionAirBoundary(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConstructionAirBoundary >":
    return _openstudiomodelresources.toConstructionAirBoundary(idfObject)

def getConstructionAirBoundary(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ConstructionAirBoundary >":
    return _openstudiomodelresources.getConstructionAirBoundary(t_model, t_handle)

def getConstructionAirBoundarys(t_model: "Model") -> "std::vector< openstudio::model::ConstructionAirBoundary,std::allocator< openstudio::model::ConstructionAirBoundary > >":
    return _openstudiomodelresources.getConstructionAirBoundarys(t_model)

def getConstructionAirBoundaryByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ConstructionAirBoundary >":
    return _openstudiomodelresources.getConstructionAirBoundaryByName(t_model, t_name)

def getConstructionAirBoundarysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ConstructionAirBoundary,std::allocator< openstudio::model::ConstructionAirBoundary > >":
    return _openstudiomodelresources.getConstructionAirBoundarysByName(t_model, t_name, t_exactMatch)

def _to_ConstructionAirBoundary(self) -> OptionalConstructionAirBoundary:
    return toConstructionAirBoundary(self)
openstudioutilitiesidf.IdfObject.to_ConstructionAirBoundary = _to_ConstructionAirBoundary

def _getConstructionAirBoundary(self, t_handle: "UUID") -> OptionalConstructionAirBoundary:
    return getConstructionAirBoundary(self, t_handle)
Model.getConstructionAirBoundary = _getConstructionAirBoundary

def _getConstructionAirBoundary(self, t_handle_str: str) -> OptionalConstructionAirBoundary:
    return getConstructionAirBoundary(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConstructionAirBoundary = _getConstructionAirBoundary

def _getConstructionAirBoundarys(self) -> ConstructionAirBoundaryVector:
    return getConstructionAirBoundarys(self)
Model.getConstructionAirBoundarys = _getConstructionAirBoundarys

def _getConstructionAirBoundaryByName(self, t_name: str) -> OptionalConstructionAirBoundary:
    return getConstructionAirBoundaryByName(self, t_name)
Model.getConstructionAirBoundaryByName = _getConstructionAirBoundaryByName

def _getConstructionAirBoundarysByName(self, t_name: str, t_exactMatch: bool) -> ConstructionAirBoundaryVector:
    return getConstructionAirBoundarysByName(self, t_name, t_exactMatch)
Model.getConstructionAirBoundarysByName = _getConstructionAirBoundarysByName

class ConstructionWithInternalSource(LayeredConstruction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionWithInternalSource_swiginit(self, _openstudiomodelresources.new_ConstructionWithInternalSource(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSource

    def sourcePresentAfterLayerNumber(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_sourcePresentAfterLayerNumber(self)

    def setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber: "int") -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber)

    def temperatureCalculationRequestedAfterLayerNumber(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_temperatureCalculationRequestedAfterLayerNumber(self)

    def setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber: "int") -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber)

    def dimensionsForTheCTFCalculation(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_dimensionsForTheCTFCalculation(self)

    def setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation: "int") -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation)

    def tubeSpacing(self) -> "double":
        return _openstudiomodelresources.ConstructionWithInternalSource_tubeSpacing(self)

    def setTubeSpacing(self, tubeSpacing: "double") -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setTubeSpacing(self, tubeSpacing)

    def twoDimensionalTemperatureCalculationPosition(self) -> "double":
        return _openstudiomodelresources.ConstructionWithInternalSource_twoDimensionalTemperatureCalculationPosition(self)

    def setTwoDimensionalTemperatureCalculationPosition(self, twoDimensionalTemperatureCalculationPosition: "double") -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setTwoDimensionalTemperatureCalculationPosition(self, twoDimensionalTemperatureCalculationPosition)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType()

    def reverseConstructionWithInternalSource(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.ConstructionWithInternalSource_reverseConstructionWithInternalSource(self)

# Register ConstructionWithInternalSource in _openstudiomodelresources:
_openstudiomodelresources.ConstructionWithInternalSource_swigregister(ConstructionWithInternalSource)

def ConstructionWithInternalSource_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType()


def toConstructionWithInternalSource(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.toConstructionWithInternalSource(idfObject)

def getConstructionWithInternalSource(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.getConstructionWithInternalSource(t_model, t_handle)

def getConstructionWithInternalSources(t_model: "Model") -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > >":
    return _openstudiomodelresources.getConstructionWithInternalSources(t_model)

def getConstructionWithInternalSourceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.getConstructionWithInternalSourceByName(t_model, t_name)

def getConstructionWithInternalSourcesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > >":
    return _openstudiomodelresources.getConstructionWithInternalSourcesByName(t_model, t_name, t_exactMatch)

def _to_ConstructionWithInternalSource(self) -> OptionalConstructionWithInternalSource:
    return toConstructionWithInternalSource(self)
openstudioutilitiesidf.IdfObject.to_ConstructionWithInternalSource = _to_ConstructionWithInternalSource

def _getConstructionWithInternalSource(self, t_handle: "UUID") -> OptionalConstructionWithInternalSource:
    return getConstructionWithInternalSource(self, t_handle)
Model.getConstructionWithInternalSource = _getConstructionWithInternalSource

def _getConstructionWithInternalSource(self, t_handle_str: str) -> OptionalConstructionWithInternalSource:
    return getConstructionWithInternalSource(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConstructionWithInternalSource = _getConstructionWithInternalSource

def _getConstructionWithInternalSources(self) -> ConstructionWithInternalSourceVector:
    return getConstructionWithInternalSources(self)
Model.getConstructionWithInternalSources = _getConstructionWithInternalSources

def _getConstructionWithInternalSourceByName(self, t_name: str) -> OptionalConstructionWithInternalSource:
    return getConstructionWithInternalSourceByName(self, t_name)
Model.getConstructionWithInternalSourceByName = _getConstructionWithInternalSourceByName

def _getConstructionWithInternalSourcesByName(self, t_name: str, t_exactMatch: bool) -> ConstructionWithInternalSourceVector:
    return getConstructionWithInternalSourcesByName(self, t_name, t_exactMatch)
Model.getConstructionWithInternalSourcesByName = _getConstructionWithInternalSourcesByName

class CFactorUndergroundWallConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", cFactor: "double"=0.1, height: "double"=0.1):
        _openstudiomodelresources.CFactorUndergroundWallConstruction_swiginit(self, _openstudiomodelresources.new_CFactorUndergroundWallConstruction(model, cFactor, height))
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstruction

    def cFactor(self) -> "double":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_cFactor(self)

    def setCFactor(self, cFactor: "double") -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setCFactor(self, cFactor)

    def height(self) -> "double":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_height(self)

    def setHeight(self, height: "double") -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setHeight(self, height)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType()

# Register CFactorUndergroundWallConstruction in _openstudiomodelresources:
_openstudiomodelresources.CFactorUndergroundWallConstruction_swigregister(CFactorUndergroundWallConstruction)

def CFactorUndergroundWallConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType()


def toCFactorUndergroundWallConstruction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.toCFactorUndergroundWallConstruction(idfObject)

def getCFactorUndergroundWallConstruction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstruction(t_model, t_handle)

def getCFactorUndergroundWallConstructions(t_model: "Model") -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructions(t_model)

def getCFactorUndergroundWallConstructionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionByName(t_model, t_name)

def getCFactorUndergroundWallConstructionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionsByName(t_model, t_name, t_exactMatch)

def _to_CFactorUndergroundWallConstruction(self) -> OptionalCFactorUndergroundWallConstruction:
    return toCFactorUndergroundWallConstruction(self)
openstudioutilitiesidf.IdfObject.to_CFactorUndergroundWallConstruction = _to_CFactorUndergroundWallConstruction

def _getCFactorUndergroundWallConstruction(self, t_handle: "UUID") -> OptionalCFactorUndergroundWallConstruction:
    return getCFactorUndergroundWallConstruction(self, t_handle)
Model.getCFactorUndergroundWallConstruction = _getCFactorUndergroundWallConstruction

def _getCFactorUndergroundWallConstruction(self, t_handle_str: str) -> OptionalCFactorUndergroundWallConstruction:
    return getCFactorUndergroundWallConstruction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCFactorUndergroundWallConstruction = _getCFactorUndergroundWallConstruction

def _getCFactorUndergroundWallConstructions(self) -> CFactorUndergroundWallConstructionVector:
    return getCFactorUndergroundWallConstructions(self)
Model.getCFactorUndergroundWallConstructions = _getCFactorUndergroundWallConstructions

def _getCFactorUndergroundWallConstructionByName(self, t_name: str) -> OptionalCFactorUndergroundWallConstruction:
    return getCFactorUndergroundWallConstructionByName(self, t_name)
Model.getCFactorUndergroundWallConstructionByName = _getCFactorUndergroundWallConstructionByName

def _getCFactorUndergroundWallConstructionsByName(self, t_name: str, t_exactMatch: bool) -> CFactorUndergroundWallConstructionVector:
    return getCFactorUndergroundWallConstructionsByName(self, t_name, t_exactMatch)
Model.getCFactorUndergroundWallConstructionsByName = _getCFactorUndergroundWallConstructionsByName

class FFactorGroundFloorConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fFactor: "double"=0.1, area: "double"=0.1, perimeterExposed: "double"=0.1):
        _openstudiomodelresources.FFactorGroundFloorConstruction_swiginit(self, _openstudiomodelresources.new_FFactorGroundFloorConstruction(model, fFactor, area, perimeterExposed))
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstruction

    def fFactor(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_fFactor(self)

    def setFFactor(self, fFactor: "double") -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setFFactor(self, fFactor)

    def area(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_area(self)

    def setArea(self, area: "double") -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setArea(self, area)

    def perimeterExposed(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_perimeterExposed(self)

    def setPerimeterExposed(self, perimeterExposed: "double") -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setPerimeterExposed(self, perimeterExposed)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType()

# Register FFactorGroundFloorConstruction in _openstudiomodelresources:
_openstudiomodelresources.FFactorGroundFloorConstruction_swigregister(FFactorGroundFloorConstruction)

def FFactorGroundFloorConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType()


def toFFactorGroundFloorConstruction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.toFFactorGroundFloorConstruction(idfObject)

def getFFactorGroundFloorConstruction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.getFFactorGroundFloorConstruction(t_model, t_handle)

def getFFactorGroundFloorConstructions(t_model: "Model") -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructions(t_model)

def getFFactorGroundFloorConstructionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructionByName(t_model, t_name)

def getFFactorGroundFloorConstructionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructionsByName(t_model, t_name, t_exactMatch)

def _to_FFactorGroundFloorConstruction(self) -> OptionalFFactorGroundFloorConstruction:
    return toFFactorGroundFloorConstruction(self)
openstudioutilitiesidf.IdfObject.to_FFactorGroundFloorConstruction = _to_FFactorGroundFloorConstruction

def _getFFactorGroundFloorConstruction(self, t_handle: "UUID") -> OptionalFFactorGroundFloorConstruction:
    return getFFactorGroundFloorConstruction(self, t_handle)
Model.getFFactorGroundFloorConstruction = _getFFactorGroundFloorConstruction

def _getFFactorGroundFloorConstruction(self, t_handle_str: str) -> OptionalFFactorGroundFloorConstruction:
    return getFFactorGroundFloorConstruction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFFactorGroundFloorConstruction = _getFFactorGroundFloorConstruction

def _getFFactorGroundFloorConstructions(self) -> FFactorGroundFloorConstructionVector:
    return getFFactorGroundFloorConstructions(self)
Model.getFFactorGroundFloorConstructions = _getFFactorGroundFloorConstructions

def _getFFactorGroundFloorConstructionByName(self, t_name: str) -> OptionalFFactorGroundFloorConstruction:
    return getFFactorGroundFloorConstructionByName(self, t_name)
Model.getFFactorGroundFloorConstructionByName = _getFFactorGroundFloorConstructionByName

def _getFFactorGroundFloorConstructionsByName(self, t_name: str, t_exactMatch: bool) -> FFactorGroundFloorConstructionVector:
    return getFFactorGroundFloorConstructionsByName(self, t_name, t_exactMatch)
Model.getFFactorGroundFloorConstructionsByName = _getFFactorGroundFloorConstructionsByName

class StandardsInformationConstruction(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstruction

    @staticmethod
    def standardPerturbableLayerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues()

    @staticmethod
    def fenestrationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues()

    @staticmethod
    def fenestrationAssemblyContextValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues()

    @staticmethod
    def fenestrationNumberOfPanesValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues()

    @staticmethod
    def fenestrationFrameTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues()

    @staticmethod
    def fenestrationDividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues()

    @staticmethod
    def fenestrationTintValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues()

    @staticmethod
    def fenestrationGasFillValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues()

    @staticmethod
    def intendedSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues()

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.StandardsInformationConstruction_iddObjectType()

    def construction(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.StandardsInformationConstruction_construction(self)

    def intendedSurfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceType(self)

    def standardsConstructionType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_standardsConstructionType(self)

    def suggestedStandardsConstructionTypes(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedStandardsConstructionTypes(self)

    def perturbableLayer(self) -> "boost::optional< openstudio::model::Material >":
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayer(self)

    def perturbableLayerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayerType(self)

    def isPerturbableLayerTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_isPerturbableLayerTypeDefaulted(self)

    def otherPerturbableLayerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_otherPerturbableLayerType(self)

    def suggestedConstructionStandards(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandards(self)

    def constructionStandard(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandard(self)

    def suggestedConstructionStandardSources(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandardSources(self)

    def constructionStandardSource(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandardSource(self)

    def fenestrationType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationType(self)

    def fenestrationAssemblyContext(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContext(self)

    def fenestrationNumberOfPanes(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanes(self)

    def fenestrationFrameType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameType(self)

    def fenestrationDividerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerType(self)

    def fenestrationTint(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTint(self)

    def fenestrationGasFill(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFill(self)

    def fenestrationLowEmissivityCoating(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationLowEmissivityCoating(self)

    def setIntendedSurfaceType(self, type: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setIntendedSurfaceType(self, type)

    def resetIntendedSurfaceType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetIntendedSurfaceType(self)

    def setStandardsConstructionType(self, type: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setStandardsConstructionType(self, type)

    def resetStandardsConstructionType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetStandardsConstructionType(self)

    def setPerturbableLayer(self, *args) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayer(self, *args)

    def resetPerturbableLayer(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayer(self)

    def setPerturbableLayerType(self, type: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayerType(self, type)

    def resetPerturbableLayerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayerType(self)

    def setOtherPerturbableLayerType(self, otherPerturbableLayerType: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setOtherPerturbableLayerType(self, otherPerturbableLayerType)

    def resetOtherPerturbableLayerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetOtherPerturbableLayerType(self)

    def setConstructionStandard(self, constructionStandard: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandard(self, constructionStandard)

    def resetConstructionStandard(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandard(self)

    def setConstructionStandardSource(self, constructionStandardSource: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandardSource(self, constructionStandardSource)

    def resetConstructionStandardSource(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandardSource(self)

    def setFenestrationType(self, fenestrationType: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationType(self, fenestrationType)

    def resetFenestrationType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationType(self)

    def setFenestrationAssemblyContext(self, fenestrationAssemblyContext: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationAssemblyContext(self, fenestrationAssemblyContext)

    def resetFenestrationAssemblyContext(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationAssemblyContext(self)

    def setFenestrationNumberOfPanes(self, fenestrationNumberofPanes: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationNumberOfPanes(self, fenestrationNumberofPanes)

    def resetFenestrationNumberOfPanes(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationNumberOfPanes(self)

    def setFenestrationFrameType(self, fenestrationFrameType: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationFrameType(self, fenestrationFrameType)

    def resetFenestrationFrameType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationFrameType(self)

    def setFenestrationDividerType(self, fenestrationDividerType: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationDividerType(self, fenestrationDividerType)

    def resetFenestrationDividerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationDividerType(self)

    def setFenestrationTint(self, fenestrationTint: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationTint(self, fenestrationTint)

    def resetFenestrationTint(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationTint(self)

    def setFenestrationGasFill(self, fenestrationGasFill: "std::string const &") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationGasFill(self, fenestrationGasFill)

    def resetFenestrationGasFill(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationGasFill(self)

    def setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating: "bool") -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating)

    def setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating: "bool") -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating)

    def resetFenestrationLowEmissivityCoating(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationLowEmissivityCoating(self)

# Register StandardsInformationConstruction in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationConstruction_swigregister(StandardsInformationConstruction)

def StandardsInformationConstruction_standardPerturbableLayerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues()

def StandardsInformationConstruction_fenestrationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues()

def StandardsInformationConstruction_fenestrationAssemblyContextValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues()

def StandardsInformationConstruction_fenestrationNumberOfPanesValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues()

def StandardsInformationConstruction_fenestrationFrameTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues()

def StandardsInformationConstruction_fenestrationDividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues()

def StandardsInformationConstruction_fenestrationTintValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues()

def StandardsInformationConstruction_fenestrationGasFillValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues()

def StandardsInformationConstruction_intendedSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues()

def StandardsInformationConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardsInformationConstruction_iddObjectType()


def toStandardsInformationConstruction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.toStandardsInformationConstruction(idfObject)

def getStandardsInformationConstruction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.getStandardsInformationConstruction(t_model, t_handle)

def getStandardsInformationConstructions(t_model: "Model") -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > >":
    return _openstudiomodelresources.getStandardsInformationConstructions(t_model)

def getStandardsInformationConstructionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.getStandardsInformationConstructionByName(t_model, t_name)

def getStandardsInformationConstructionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > >":
    return _openstudiomodelresources.getStandardsInformationConstructionsByName(t_model, t_name, t_exactMatch)

def _to_StandardsInformationConstruction(self) -> OptionalStandardsInformationConstruction:
    return toStandardsInformationConstruction(self)
openstudioutilitiesidf.IdfObject.to_StandardsInformationConstruction = _to_StandardsInformationConstruction

def _getStandardsInformationConstruction(self, t_handle: "UUID") -> OptionalStandardsInformationConstruction:
    return getStandardsInformationConstruction(self, t_handle)
Model.getStandardsInformationConstruction = _getStandardsInformationConstruction

def _getStandardsInformationConstruction(self, t_handle_str: str) -> OptionalStandardsInformationConstruction:
    return getStandardsInformationConstruction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getStandardsInformationConstruction = _getStandardsInformationConstruction

def _getStandardsInformationConstructions(self) -> StandardsInformationConstructionVector:
    return getStandardsInformationConstructions(self)
Model.getStandardsInformationConstructions = _getStandardsInformationConstructions

def _getStandardsInformationConstructionByName(self, t_name: str) -> OptionalStandardsInformationConstruction:
    return getStandardsInformationConstructionByName(self, t_name)
Model.getStandardsInformationConstructionByName = _getStandardsInformationConstructionByName

def _getStandardsInformationConstructionsByName(self, t_name: str, t_exactMatch: bool) -> StandardsInformationConstructionVector:
    return getStandardsInformationConstructionsByName(self, t_name, t_exactMatch)
Model.getStandardsInformationConstructionsByName = _getStandardsInformationConstructionsByName

class WindowDataFile(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.WindowDataFile_swiginit(self, _openstudiomodelresources.new_WindowDataFile(model))
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFile

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.WindowDataFile_iddObjectType()

# Register WindowDataFile in _openstudiomodelresources:
_openstudiomodelresources.WindowDataFile_swigregister(WindowDataFile)

def WindowDataFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.WindowDataFile_iddObjectType()


def toWindowDataFile(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.toWindowDataFile(idfObject)

def getWindowDataFile(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.getWindowDataFile(t_model, t_handle)

def getWindowDataFiles(t_model: "Model") -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > >":
    return _openstudiomodelresources.getWindowDataFiles(t_model)

def getWindowDataFileByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.getWindowDataFileByName(t_model, t_name)

def getWindowDataFilesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > >":
    return _openstudiomodelresources.getWindowDataFilesByName(t_model, t_name, t_exactMatch)

def _to_WindowDataFile(self) -> OptionalWindowDataFile:
    return toWindowDataFile(self)
openstudioutilitiesidf.IdfObject.to_WindowDataFile = _to_WindowDataFile

def _getWindowDataFile(self, t_handle: "UUID") -> OptionalWindowDataFile:
    return getWindowDataFile(self, t_handle)
Model.getWindowDataFile = _getWindowDataFile

def _getWindowDataFile(self, t_handle_str: str) -> OptionalWindowDataFile:
    return getWindowDataFile(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWindowDataFile = _getWindowDataFile

def _getWindowDataFiles(self) -> WindowDataFileVector:
    return getWindowDataFiles(self)
Model.getWindowDataFiles = _getWindowDataFiles

def _getWindowDataFileByName(self, t_name: str) -> OptionalWindowDataFile:
    return getWindowDataFileByName(self, t_name)
Model.getWindowDataFileByName = _getWindowDataFileByName

def _getWindowDataFilesByName(self, t_name: str, t_exactMatch: bool) -> WindowDataFileVector:
    return getWindowDataFilesByName(self, t_name, t_exactMatch)
Model.getWindowDataFilesByName = _getWindowDataFilesByName

class WindowPropertyFrameAndDivider(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.WindowPropertyFrameAndDivider_swiginit(self, _openstudiomodelresources.new_WindowPropertyFrameAndDivider(model))
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDivider

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType()

    @staticmethod
    def dividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues()

    def frameWidth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameWidth(self)

    def isFrameWidthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameWidthDefaulted(self)

    def frameOutsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameOutsideProjection(self)

    def isFrameOutsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameOutsideProjectionDefaulted(self)

    def frameInsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameInsideProjection(self)

    def isFrameInsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameInsideProjectionDefaulted(self)

    def frameConductance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameConductance(self)

    def ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def frameSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameSolarAbsorptance(self)

    def isFrameSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameSolarAbsorptanceDefaulted(self)

    def frameVisibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameVisibleAbsorptance(self)

    def isFrameVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameVisibleAbsorptanceDefaulted(self)

    def frameThermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameThermalHemisphericalEmissivity(self)

    def isFrameThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameThermalHemisphericalEmissivityDefaulted(self)

    def dividerType(self) -> "std::string":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerType(self)

    def isDividerTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerTypeDefaulted(self)

    def dividerWidth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerWidth(self)

    def isDividerWidthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerWidthDefaulted(self)

    def numberOfHorizontalDividers(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfHorizontalDividers(self)

    def isNumberOfHorizontalDividersDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfHorizontalDividersDefaulted(self)

    def numberOfVerticalDividers(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfVerticalDividers(self)

    def isNumberOfVerticalDividersDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfVerticalDividersDefaulted(self)

    def dividerOutsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerOutsideProjection(self)

    def isDividerOutsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerOutsideProjectionDefaulted(self)

    def dividerInsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerInsideProjection(self)

    def isDividerInsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerInsideProjectionDefaulted(self)

    def dividerConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerConductance(self)

    def isDividerConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerConductanceDefaulted(self)

    def ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def dividerSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerSolarAbsorptance(self)

    def isDividerSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerSolarAbsorptanceDefaulted(self)

    def dividerVisibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerVisibleAbsorptance(self)

    def isDividerVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerVisibleAbsorptanceDefaulted(self)

    def dividerThermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerThermalHemisphericalEmissivity(self)

    def isDividerThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerThermalHemisphericalEmissivityDefaulted(self)

    def outsideRevealDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealDepth(self)

    def isOutsideRevealDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealDepthDefaulted(self)

    def outsideRevealSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealSolarAbsorptance(self)

    def isOutsideRevealSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealSolarAbsorptanceDefaulted(self)

    def insideSillDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillDepth(self)

    def isInsideSillDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillDepthDefaulted(self)

    def insideSillSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillSolarAbsorptance(self)

    def isInsideSillSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillSolarAbsorptanceDefaulted(self)

    def insideRevealDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealDepth(self)

    def isInsideRevealDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealDepthDefaulted(self)

    def insideRevealSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealSolarAbsorptance(self)

    def isInsideRevealSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealSolarAbsorptanceDefaulted(self)

    def setFrameWidth(self, frameWidth: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameWidth(self, frameWidth)

    def resetFrameWidth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameWidth(self)

    def setFrameOutsideProjection(self, frameOutsideProjection: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameOutsideProjection(self, frameOutsideProjection)

    def resetFrameOutsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameOutsideProjection(self)

    def setFrameInsideProjection(self, frameInsideProjection: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameInsideProjection(self, frameInsideProjection)

    def resetFrameInsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameInsideProjection(self)

    def setFrameConductance(self, frameConductance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameConductance(self, frameConductance)

    def resetFrameConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameConductance(self)

    def setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setFrameSolarAbsorptance(self, frameSolarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameSolarAbsorptance(self, frameSolarAbsorptance)

    def resetFrameSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameSolarAbsorptance(self)

    def setFrameVisibleAbsorptance(self, frameVisibleAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameVisibleAbsorptance(self, frameVisibleAbsorptance)

    def resetFrameVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameVisibleAbsorptance(self)

    def setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity)

    def resetFrameThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameThermalHemisphericalEmissivity(self)

    def setDividerType(self, dividerType: "std::string") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerType(self, dividerType)

    def resetDividerType(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerType(self)

    def setDividerWidth(self, dividerWidth: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerWidth(self, dividerWidth)

    def resetDividerWidth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerWidth(self)

    def setNumberOfHorizontalDividers(self, numberOfHorizontalDividers: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfHorizontalDividers(self, numberOfHorizontalDividers)

    def resetNumberOfHorizontalDividers(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfHorizontalDividers(self)

    def setNumberOfVerticalDividers(self, numberOfVerticalDividers: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfVerticalDividers(self, numberOfVerticalDividers)

    def resetNumberOfVerticalDividers(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfVerticalDividers(self)

    def setDividerOutsideProjection(self, dividerOutsideProjection: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerOutsideProjection(self, dividerOutsideProjection)

    def resetDividerOutsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerOutsideProjection(self)

    def setDividerInsideProjection(self, dividerInsideProjection: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerInsideProjection(self, dividerInsideProjection)

    def resetDividerInsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerInsideProjection(self)

    def setDividerConductance(self, dividerConductance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerConductance(self, dividerConductance)

    def resetDividerConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerConductance(self)

    def setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setDividerSolarAbsorptance(self, dividerSolarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerSolarAbsorptance(self, dividerSolarAbsorptance)

    def resetDividerSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerSolarAbsorptance(self)

    def setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance)

    def resetDividerVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerVisibleAbsorptance(self)

    def setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity)

    def resetDividerThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerThermalHemisphericalEmissivity(self)

    def setOutsideRevealDepth(self, outsideRevealDepth: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealDepth(self, outsideRevealDepth)

    def resetOutsideRevealDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealDepth(self)

    def setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance)

    def resetOutsideRevealSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealSolarAbsorptance(self)

    def setInsideSillDepth(self, insideSillDepth: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillDepth(self, insideSillDepth)

    def resetInsideSillDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillDepth(self)

    def setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance)

    def resetInsideSillSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillSolarAbsorptance(self)

    def setInsideRevealDepth(self, insideRevealDepth: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealDepth(self, insideRevealDepth)

    def resetInsideRevealDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealDepth(self)

    def setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance: "double") -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance)

    def resetInsideRevealSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealSolarAbsorptance(self)

# Register WindowPropertyFrameAndDivider in _openstudiomodelresources:
_openstudiomodelresources.WindowPropertyFrameAndDivider_swigregister(WindowPropertyFrameAndDivider)

def WindowPropertyFrameAndDivider_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType()

def WindowPropertyFrameAndDivider_dividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues()


def toWindowPropertyFrameAndDivider(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.toWindowPropertyFrameAndDivider(idfObject)

def getWindowPropertyFrameAndDivider(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDivider(t_model, t_handle)

def getWindowPropertyFrameAndDividers(t_model: "Model") -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividers(t_model)

def getWindowPropertyFrameAndDividerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividerByName(t_model, t_name)

def getWindowPropertyFrameAndDividersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividersByName(t_model, t_name, t_exactMatch)

def _to_WindowPropertyFrameAndDivider(self) -> OptionalWindowPropertyFrameAndDivider:
    return toWindowPropertyFrameAndDivider(self)
openstudioutilitiesidf.IdfObject.to_WindowPropertyFrameAndDivider = _to_WindowPropertyFrameAndDivider

def _getWindowPropertyFrameAndDivider(self, t_handle: "UUID") -> OptionalWindowPropertyFrameAndDivider:
    return getWindowPropertyFrameAndDivider(self, t_handle)
Model.getWindowPropertyFrameAndDivider = _getWindowPropertyFrameAndDivider

def _getWindowPropertyFrameAndDivider(self, t_handle_str: str) -> OptionalWindowPropertyFrameAndDivider:
    return getWindowPropertyFrameAndDivider(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWindowPropertyFrameAndDivider = _getWindowPropertyFrameAndDivider

def _getWindowPropertyFrameAndDividers(self) -> WindowPropertyFrameAndDividerVector:
    return getWindowPropertyFrameAndDividers(self)
Model.getWindowPropertyFrameAndDividers = _getWindowPropertyFrameAndDividers

def _getWindowPropertyFrameAndDividerByName(self, t_name: str) -> OptionalWindowPropertyFrameAndDivider:
    return getWindowPropertyFrameAndDividerByName(self, t_name)
Model.getWindowPropertyFrameAndDividerByName = _getWindowPropertyFrameAndDividerByName

def _getWindowPropertyFrameAndDividersByName(self, t_name: str, t_exactMatch: bool) -> WindowPropertyFrameAndDividerVector:
    return getWindowPropertyFrameAndDividersByName(self, t_name, t_exactMatch)
Model.getWindowPropertyFrameAndDividersByName = _getWindowPropertyFrameAndDividersByName

class DefaultSubSurfaceConstructions(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.DefaultSubSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_DefaultSubSurfaceConstructions(model))
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructions

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType()

    def fixedWindowConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_fixedWindowConstruction(self)

    def operableWindowConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_operableWindowConstruction(self)

    def doorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_doorConstruction(self)

    def glassDoorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_glassDoorConstruction(self)

    def overheadDoorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_overheadDoorConstruction(self)

    def skylightConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_skylightConstruction(self)

    def tubularDaylightDomeConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDomeConstruction(self)

    def tubularDaylightDiffuserConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDiffuserConstruction(self)

    def setFixedWindowConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setFixedWindowConstruction(self, construction)

    def resetFixedWindowConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetFixedWindowConstruction(self)

    def setOperableWindowConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOperableWindowConstruction(self, construction)

    def resetOperableWindowConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOperableWindowConstruction(self)

    def setDoorConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setDoorConstruction(self, construction)

    def resetDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetDoorConstruction(self)

    def setGlassDoorConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setGlassDoorConstruction(self, construction)

    def resetGlassDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetGlassDoorConstruction(self)

    def setOverheadDoorConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOverheadDoorConstruction(self, construction)

    def resetOverheadDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOverheadDoorConstruction(self)

    def setSkylightConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setSkylightConstruction(self, construction)

    def resetSkylightConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetSkylightConstruction(self)

    def setTubularDaylightDomeConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDomeConstruction(self, construction)

    def resetTubularDaylightDomeConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDomeConstruction(self)

    def setTubularDaylightDiffuserConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDiffuserConstruction(self, construction)

    def resetTubularDaylightDiffuserConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDiffuserConstruction(self)

    def merge(self, other: "DefaultSubSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_merge(self, other)

# Register DefaultSubSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.DefaultSubSurfaceConstructions_swigregister(DefaultSubSurfaceConstructions)

def DefaultSubSurfaceConstructions_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType()


def toDefaultSubSurfaceConstructions(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.toDefaultSubSurfaceConstructions(idfObject)

def getDefaultSubSurfaceConstructions(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructions(t_model, t_handle)

def getDefaultSubSurfaceConstructionss(t_model: "Model") -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionss(t_model)

def getDefaultSubSurfaceConstructionsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionsByName(t_model, t_name)

def getDefaultSubSurfaceConstructionssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionssByName(t_model, t_name, t_exactMatch)

def _to_DefaultSubSurfaceConstructions(self) -> OptionalDefaultSubSurfaceConstructions:
    return toDefaultSubSurfaceConstructions(self)
openstudioutilitiesidf.IdfObject.to_DefaultSubSurfaceConstructions = _to_DefaultSubSurfaceConstructions

def _getDefaultSubSurfaceConstructions(self, t_handle: "UUID") -> OptionalDefaultSubSurfaceConstructions:
    return getDefaultSubSurfaceConstructions(self, t_handle)
Model.getDefaultSubSurfaceConstructions = _getDefaultSubSurfaceConstructions

def _getDefaultSubSurfaceConstructions(self, t_handle_str: str) -> OptionalDefaultSubSurfaceConstructions:
    return getDefaultSubSurfaceConstructions(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDefaultSubSurfaceConstructions = _getDefaultSubSurfaceConstructions

def _getDefaultSubSurfaceConstructionss(self) -> DefaultSubSurfaceConstructionsVector:
    return getDefaultSubSurfaceConstructionss(self)
Model.getDefaultSubSurfaceConstructionss = _getDefaultSubSurfaceConstructionss

def _getDefaultSubSurfaceConstructionsByName(self, t_name: str) -> OptionalDefaultSubSurfaceConstructions:
    return getDefaultSubSurfaceConstructionsByName(self, t_name)
Model.getDefaultSubSurfaceConstructionsByName = _getDefaultSubSurfaceConstructionsByName

def _getDefaultSubSurfaceConstructionssByName(self, t_name: str, t_exactMatch: bool) -> DefaultSubSurfaceConstructionsVector:
    return getDefaultSubSurfaceConstructionssByName(self, t_name, t_exactMatch)
Model.getDefaultSubSurfaceConstructionssByName = _getDefaultSubSurfaceConstructionssByName

class DefaultSurfaceConstructions(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.DefaultSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_DefaultSurfaceConstructions(model))
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructions

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType()

    def floorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_floorConstruction(self)

    def wallConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_wallConstruction(self)

    def roofCeilingConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_roofCeilingConstruction(self)

    def setFloorConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setFloorConstruction(self, construction)

    def resetFloorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetFloorConstruction(self)

    def setWallConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setWallConstruction(self, construction)

    def resetWallConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetWallConstruction(self)

    def setRoofCeilingConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setRoofCeilingConstruction(self, construction)

    def resetRoofCeilingConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetRoofCeilingConstruction(self)

    def merge(self, other: "DefaultSurfaceConstructions") -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_merge(self, other)

# Register DefaultSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.DefaultSurfaceConstructions_swigregister(DefaultSurfaceConstructions)

def DefaultSurfaceConstructions_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType()


def toDefaultSurfaceConstructions(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.toDefaultSurfaceConstructions(idfObject)

def getDefaultSurfaceConstructions(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSurfaceConstructions(t_model, t_handle)

def getDefaultSurfaceConstructionss(t_model: "Model") -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionss(t_model)

def getDefaultSurfaceConstructionsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionsByName(t_model, t_name)

def getDefaultSurfaceConstructionssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionssByName(t_model, t_name, t_exactMatch)

def _to_DefaultSurfaceConstructions(self) -> OptionalDefaultSurfaceConstructions:
    return toDefaultSurfaceConstructions(self)
openstudioutilitiesidf.IdfObject.to_DefaultSurfaceConstructions = _to_DefaultSurfaceConstructions

def _getDefaultSurfaceConstructions(self, t_handle: "UUID") -> OptionalDefaultSurfaceConstructions:
    return getDefaultSurfaceConstructions(self, t_handle)
Model.getDefaultSurfaceConstructions = _getDefaultSurfaceConstructions

def _getDefaultSurfaceConstructions(self, t_handle_str: str) -> OptionalDefaultSurfaceConstructions:
    return getDefaultSurfaceConstructions(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDefaultSurfaceConstructions = _getDefaultSurfaceConstructions

def _getDefaultSurfaceConstructionss(self) -> DefaultSurfaceConstructionsVector:
    return getDefaultSurfaceConstructionss(self)
Model.getDefaultSurfaceConstructionss = _getDefaultSurfaceConstructionss

def _getDefaultSurfaceConstructionsByName(self, t_name: str) -> OptionalDefaultSurfaceConstructions:
    return getDefaultSurfaceConstructionsByName(self, t_name)
Model.getDefaultSurfaceConstructionsByName = _getDefaultSurfaceConstructionsByName

def _getDefaultSurfaceConstructionssByName(self, t_name: str, t_exactMatch: bool) -> DefaultSurfaceConstructionsVector:
    return getDefaultSurfaceConstructionssByName(self, t_name, t_exactMatch)
Model.getDefaultSurfaceConstructionssByName = _getDefaultSurfaceConstructionssByName

class ShadingControl(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.ShadingControl_swiginit(self, _openstudiomodelresources.new_ShadingControl(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControl

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ShadingControl_iddObjectType()

    @staticmethod
    def shadingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ShadingControl_shadingTypeValues()

    @staticmethod
    def shadingControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ShadingControl_shadingControlTypeValues()

    @staticmethod
    def typeofSlatAngleControlforBlindsValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ShadingControl_typeofSlatAngleControlforBlindsValues()

    @staticmethod
    def multipleSurfaceControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ShadingControl_multipleSurfaceControlTypeValues()

    def shadingType(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_shadingType(self)

    def construction(self) -> "boost::optional< openstudio::model::Construction >":
        return _openstudiomodelresources.ShadingControl_construction(self)

    def shadingMaterial(self) -> "boost::optional< openstudio::model::ShadingMaterial >":
        return _openstudiomodelresources.ShadingControl_shadingMaterial(self)

    def shadingControlType(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_shadingControlType(self)

    def isShadingControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isShadingControlTypeDefaulted(self)

    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ShadingControl_schedule(self)

    def setpoint(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ShadingControl_setpoint(self)

    def isSetpointDefaulted(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isSetpointDefaulted(self)

    def glareControlIsActive(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_glareControlIsActive(self)

    def typeofSlatAngleControlforBlinds(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_typeofSlatAngleControlforBlinds(self)

    def isTypeofSlatAngleControlforBlindsDefaulted(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isTypeofSlatAngleControlforBlindsDefaulted(self)

    def slatAngleSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ShadingControl_slatAngleSchedule(self)

    def setpoint2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ShadingControl_setpoint2(self)

    def multipleSurfaceControlType(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_multipleSurfaceControlType(self)

    def setShadingType(self, shadingType: "std::string const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_setShadingType(self, shadingType)

    def setShadingControlType(self, shadingControlType: "std::string const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_setShadingControlType(self, shadingControlType)

    def resetShadingControlType(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetShadingControlType(self)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSchedule(self, schedule)

    def resetSchedule(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetSchedule(self)

    def setSetpoint(self, setpoint: "double") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSetpoint(self, setpoint)

    def resetSetpoint(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetSetpoint(self)

    def setGlareControlIsActive(self, glareControlIsActive: "bool") -> "bool":
        return _openstudiomodelresources.ShadingControl_setGlareControlIsActive(self, glareControlIsActive)

    def resetGlareControlIsActive(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetGlareControlIsActive(self)

    def setTypeofSlatAngleControlforBlinds(self, typeofSlatAngleControlforBlinds: "std::string const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_setTypeofSlatAngleControlforBlinds(self, typeofSlatAngleControlforBlinds)

    def resetTypeofSlatAngleControlforBlinds(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetTypeofSlatAngleControlforBlinds(self)

    def setSlatAngleSchedule(self, slatAngleSchedule: "Schedule") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSlatAngleSchedule(self, slatAngleSchedule)

    def resetSlatAngleSchedule(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetSlatAngleSchedule(self)

    def setSetpoint2(self, setpoint2: "double") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSetpoint2(self, setpoint2)

    def setMultipleSurfaceControlType(self, multipleSurfaceControlType: "std::string const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_setMultipleSurfaceControlType(self, multipleSurfaceControlType)

    def isControlTypeValueNeedingSetpoint1(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isControlTypeValueNeedingSetpoint1(self)

    def isControlTypeValueNeedingSetpoint2(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isControlTypeValueNeedingSetpoint2(self)

    def isControlTypeValueAllowingSchedule(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isControlTypeValueAllowingSchedule(self)

    def isControlTypeValueRequiringSchedule(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isControlTypeValueRequiringSchedule(self)

    def isTypeValueAllowingSlatAngleControl(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isTypeValueAllowingSlatAngleControl(self)

    def subSurfaces(self) -> "std::vector< openstudio::model::SubSurface,std::allocator< openstudio::model::SubSurface > >":
        return _openstudiomodelresources.ShadingControl_subSurfaces(self)

    def numberofSubSurfaces(self) -> "unsigned int":
        return _openstudiomodelresources.ShadingControl_numberofSubSurfaces(self)

    def subSurfaceIndex(self, subSurface: "openstudio::model::SubSurface const &") -> "boost::optional< unsigned int >":
        return _openstudiomodelresources.ShadingControl_subSurfaceIndex(self, subSurface)

    def addSubSurface(self, *args) -> "bool":
        return _openstudiomodelresources.ShadingControl_addSubSurface(self, *args)

    def setSubSurfaceIndex(self, subSurface: "openstudio::model::SubSurface const &", index: "unsigned int") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSubSurfaceIndex(self, subSurface, index)

    def removeSubSurface(self, *args) -> "bool":
        return _openstudiomodelresources.ShadingControl_removeSubSurface(self, *args)

    def addSubSurfaces(self, subSurfaces: "std::vector< openstudio::model::SubSurface,std::allocator< openstudio::model::SubSurface > > const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_addSubSurfaces(self, subSurfaces)

    def setSubSurfaces(self, subSurfaces: "std::vector< openstudio::model::SubSurface,std::allocator< openstudio::model::SubSurface > > const &") -> "bool":
        return _openstudiomodelresources.ShadingControl_setSubSurfaces(self, subSurfaces)

    def removeAllSubSurfaces(self) -> "void":
        return _openstudiomodelresources.ShadingControl_removeAllSubSurfaces(self)

# Register ShadingControl in _openstudiomodelresources:
_openstudiomodelresources.ShadingControl_swigregister(ShadingControl)

def ShadingControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ShadingControl_iddObjectType()

def ShadingControl_shadingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_shadingTypeValues()

def ShadingControl_shadingControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_shadingControlTypeValues()

def ShadingControl_typeofSlatAngleControlforBlindsValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_typeofSlatAngleControlforBlindsValues()

def ShadingControl_multipleSurfaceControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_multipleSurfaceControlTypeValues()


def toShadingControl(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.toShadingControl(idfObject)

def getShadingControl(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.getShadingControl(t_model, t_handle)

def getShadingControls(t_model: "Model") -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > >":
    return _openstudiomodelresources.getShadingControls(t_model)

def getShadingControlByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.getShadingControlByName(t_model, t_name)

def getShadingControlsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > >":
    return _openstudiomodelresources.getShadingControlsByName(t_model, t_name, t_exactMatch)

def _to_ShadingControl(self) -> OptionalShadingControl:
    return toShadingControl(self)
openstudioutilitiesidf.IdfObject.to_ShadingControl = _to_ShadingControl

def _getShadingControl(self, t_handle: "UUID") -> OptionalShadingControl:
    return getShadingControl(self, t_handle)
Model.getShadingControl = _getShadingControl

def _getShadingControl(self, t_handle_str: str) -> OptionalShadingControl:
    return getShadingControl(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getShadingControl = _getShadingControl

def _getShadingControls(self) -> ShadingControlVector:
    return getShadingControls(self)
Model.getShadingControls = _getShadingControls

def _getShadingControlByName(self, t_name: str) -> OptionalShadingControl:
    return getShadingControlByName(self, t_name)
Model.getShadingControlByName = _getShadingControlByName

def _getShadingControlsByName(self, t_name: str, t_exactMatch: bool) -> ShadingControlVector:
    return getShadingControlsByName(self, t_name, t_exactMatch)
Model.getShadingControlsByName = _getShadingControlsByName

class Curve(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Curve

    def numVariables(self) -> "int":
        return _openstudiomodelresources.Curve_numVariables(self)

    def evaluate(self, *args) -> "double":
        return _openstudiomodelresources.Curve_evaluate(self, *args)

# Register Curve in _openstudiomodelresources:
_openstudiomodelresources.Curve_swigregister(Curve)


def toCurve(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.toCurve(idfObject)

def getCurve(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.getCurve(t_model, t_handle)

def getCurves(t_model: "Model") -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > >":
    return _openstudiomodelresources.getCurves(t_model)

def getCurveByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.getCurveByName(t_model, t_name)

def getCurvesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > >":
    return _openstudiomodelresources.getCurvesByName(t_model, t_name, t_exactMatch)

def _to_Curve(self) -> OptionalCurve:
    return toCurve(self)
openstudioutilitiesidf.IdfObject.to_Curve = _to_Curve

def _getCurve(self, t_handle: "UUID") -> OptionalCurve:
    return getCurve(self, t_handle)
Model.getCurve = _getCurve

def _getCurve(self, t_handle_str: str) -> OptionalCurve:
    return getCurve(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurve = _getCurve

def _getCurves(self) -> CurveVector:
    return getCurves(self)
Model.getCurves = _getCurves

def _getCurveByName(self, t_name: str) -> OptionalCurve:
    return getCurveByName(self, t_name)
Model.getCurveByName = _getCurveByName

def _getCurvesByName(self, t_name: str, t_exactMatch: bool) -> CurveVector:
    return getCurvesByName(self, t_name, t_exactMatch)
Model.getCurvesByName = _getCurvesByName

class CurveBicubic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveBicubic_swiginit(self, _openstudiomodelresources.new_CurveBicubic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveBicubic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient4y(self)

    def coefficient5yPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient6xTIMESY(self)

    def coefficient7xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient7xPOW3(self)

    def coefficient8yPOW3(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient8yPOW3(self)

    def coefficient9xPOW2TIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient9xPOW2TIMESY(self)

    def coefficient10xTIMESYPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient10xTIMESYPOW2(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBicubic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBicubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setCoefficient7xPOW3(self, coefficient7xPOW3: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient7xPOW3(self, coefficient7xPOW3)

    def setCoefficient8yPOW3(self, coefficient8yPOW3: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient8yPOW3(self, coefficient8yPOW3)

    def setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBicubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetOutputUnitType(self)

# Register CurveBicubic in _openstudiomodelresources:
_openstudiomodelresources.CurveBicubic_swigregister(CurveBicubic)

def CurveBicubic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveBicubic_iddObjectType()

def CurveBicubic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues()

def CurveBicubic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues()

def CurveBicubic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues()


def toCurveBicubic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.toCurveBicubic(idfObject)

def getCurveBicubic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.getCurveBicubic(t_model, t_handle)

def getCurveBicubics(t_model: "Model") -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > >":
    return _openstudiomodelresources.getCurveBicubics(t_model)

def getCurveBicubicByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.getCurveBicubicByName(t_model, t_name)

def getCurveBicubicsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > >":
    return _openstudiomodelresources.getCurveBicubicsByName(t_model, t_name, t_exactMatch)

def _to_CurveBicubic(self) -> OptionalCurveBicubic:
    return toCurveBicubic(self)
openstudioutilitiesidf.IdfObject.to_CurveBicubic = _to_CurveBicubic

def _getCurveBicubic(self, t_handle: "UUID") -> OptionalCurveBicubic:
    return getCurveBicubic(self, t_handle)
Model.getCurveBicubic = _getCurveBicubic

def _getCurveBicubic(self, t_handle_str: str) -> OptionalCurveBicubic:
    return getCurveBicubic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveBicubic = _getCurveBicubic

def _getCurveBicubics(self) -> CurveBicubicVector:
    return getCurveBicubics(self)
Model.getCurveBicubics = _getCurveBicubics

def _getCurveBicubicByName(self, t_name: str) -> OptionalCurveBicubic:
    return getCurveBicubicByName(self, t_name)
Model.getCurveBicubicByName = _getCurveBicubicByName

def _getCurveBicubicsByName(self, t_name: str, t_exactMatch: bool) -> CurveBicubicVector:
    return getCurveBicubicsByName(self, t_name, t_exactMatch)
Model.getCurveBicubicsByName = _getCurveBicubicsByName

class CurveBiquadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveBiquadratic_swiginit(self, _openstudiomodelresources.new_CurveBiquadratic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadratic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveBiquadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient4y(self)

    def coefficient5yPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient6xTIMESY(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBiquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBiquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetOutputUnitType(self)

# Register CurveBiquadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveBiquadratic_swigregister(CurveBiquadratic)

def CurveBiquadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveBiquadratic_iddObjectType()

def CurveBiquadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues()

def CurveBiquadratic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues()

def CurveBiquadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues()


def toCurveBiquadratic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.toCurveBiquadratic(idfObject)

def getCurveBiquadratic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.getCurveBiquadratic(t_model, t_handle)

def getCurveBiquadratics(t_model: "Model") -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > >":
    return _openstudiomodelresources.getCurveBiquadratics(t_model)

def getCurveBiquadraticByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.getCurveBiquadraticByName(t_model, t_name)

def getCurveBiquadraticsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > >":
    return _openstudiomodelresources.getCurveBiquadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveBiquadratic(self) -> OptionalCurveBiquadratic:
    return toCurveBiquadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveBiquadratic = _to_CurveBiquadratic

def _getCurveBiquadratic(self, t_handle: "UUID") -> OptionalCurveBiquadratic:
    return getCurveBiquadratic(self, t_handle)
Model.getCurveBiquadratic = _getCurveBiquadratic

def _getCurveBiquadratic(self, t_handle_str: str) -> OptionalCurveBiquadratic:
    return getCurveBiquadratic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveBiquadratic = _getCurveBiquadratic

def _getCurveBiquadratics(self) -> CurveBiquadraticVector:
    return getCurveBiquadratics(self)
Model.getCurveBiquadratics = _getCurveBiquadratics

def _getCurveBiquadraticByName(self, t_name: str) -> OptionalCurveBiquadratic:
    return getCurveBiquadraticByName(self, t_name)
Model.getCurveBiquadraticByName = _getCurveBiquadraticByName

def _getCurveBiquadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveBiquadraticVector:
    return getCurveBiquadraticsByName(self, t_name, t_exactMatch)
Model.getCurveBiquadraticsByName = _getCurveBiquadraticsByName

class CurveCubic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveCubic_swiginit(self, _openstudiomodelresources.new_CurveCubic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveCubic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient4xPOW3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveCubic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveCubic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveCubic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveCubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveCubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveCubic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveCubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveCubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveCubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveCubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveCubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetOutputUnitType(self)

# Register CurveCubic in _openstudiomodelresources:
_openstudiomodelresources.CurveCubic_swigregister(CurveCubic)

def CurveCubic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveCubic_iddObjectType()

def CurveCubic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues()

def CurveCubic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues()


def toCurveCubic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.toCurveCubic(idfObject)

def getCurveCubic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.getCurveCubic(t_model, t_handle)

def getCurveCubics(t_model: "Model") -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > >":
    return _openstudiomodelresources.getCurveCubics(t_model)

def getCurveCubicByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.getCurveCubicByName(t_model, t_name)

def getCurveCubicsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > >":
    return _openstudiomodelresources.getCurveCubicsByName(t_model, t_name, t_exactMatch)

def _to_CurveCubic(self) -> OptionalCurveCubic:
    return toCurveCubic(self)
openstudioutilitiesidf.IdfObject.to_CurveCubic = _to_CurveCubic

def _getCurveCubic(self, t_handle: "UUID") -> OptionalCurveCubic:
    return getCurveCubic(self, t_handle)
Model.getCurveCubic = _getCurveCubic

def _getCurveCubic(self, t_handle_str: str) -> OptionalCurveCubic:
    return getCurveCubic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveCubic = _getCurveCubic

def _getCurveCubics(self) -> CurveCubicVector:
    return getCurveCubics(self)
Model.getCurveCubics = _getCurveCubics

def _getCurveCubicByName(self, t_name: str) -> OptionalCurveCubic:
    return getCurveCubicByName(self, t_name)
Model.getCurveCubicByName = _getCurveCubicByName

def _getCurveCubicsByName(self, t_name: str, t_exactMatch: bool) -> CurveCubicVector:
    return getCurveCubicsByName(self, t_name, t_exactMatch)
Model.getCurveCubicsByName = _getCurveCubicsByName

class CurveDoubleExponentialDecay(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveDoubleExponentialDecay_swiginit(self, _openstudiomodelresources.new_CurveDoubleExponentialDecay(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecay

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient4C4(self)

    def coefficient3C4(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C4(self)

    def coefficient5C5(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient5C5(self)

    def coefficient3C5(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C5(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient4C4(self, coefficient4C4)

    def setCoefficient3C4(self, coefficient4C4: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C4(self, coefficient4C4)

    def setCoefficient5C5(self, coefficient5C5: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient5C5(self, coefficient5C5)

    def setCoefficient3C5(self, coefficient5C5: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C5(self, coefficient5C5)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetOutputUnitType(self)

# Register CurveDoubleExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.CurveDoubleExponentialDecay_swigregister(CurveDoubleExponentialDecay)

def CurveDoubleExponentialDecay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType()

def CurveDoubleExponentialDecay_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues()

def CurveDoubleExponentialDecay_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues()


def toCurveDoubleExponentialDecay(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.toCurveDoubleExponentialDecay(idfObject)

def getCurveDoubleExponentialDecay(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecay(t_model, t_handle)

def getCurveDoubleExponentialDecays(t_model: "Model") -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecays(t_model)

def getCurveDoubleExponentialDecayByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecayByName(t_model, t_name)

def getCurveDoubleExponentialDecaysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecaysByName(t_model, t_name, t_exactMatch)

def _to_CurveDoubleExponentialDecay(self) -> OptionalCurveDoubleExponentialDecay:
    return toCurveDoubleExponentialDecay(self)
openstudioutilitiesidf.IdfObject.to_CurveDoubleExponentialDecay = _to_CurveDoubleExponentialDecay

def _getCurveDoubleExponentialDecay(self, t_handle: "UUID") -> OptionalCurveDoubleExponentialDecay:
    return getCurveDoubleExponentialDecay(self, t_handle)
Model.getCurveDoubleExponentialDecay = _getCurveDoubleExponentialDecay

def _getCurveDoubleExponentialDecay(self, t_handle_str: str) -> OptionalCurveDoubleExponentialDecay:
    return getCurveDoubleExponentialDecay(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveDoubleExponentialDecay = _getCurveDoubleExponentialDecay

def _getCurveDoubleExponentialDecays(self) -> CurveDoubleExponentialDecayVector:
    return getCurveDoubleExponentialDecays(self)
Model.getCurveDoubleExponentialDecays = _getCurveDoubleExponentialDecays

def _getCurveDoubleExponentialDecayByName(self, t_name: str) -> OptionalCurveDoubleExponentialDecay:
    return getCurveDoubleExponentialDecayByName(self, t_name)
Model.getCurveDoubleExponentialDecayByName = _getCurveDoubleExponentialDecayByName

def _getCurveDoubleExponentialDecaysByName(self, t_name: str, t_exactMatch: bool) -> CurveDoubleExponentialDecayVector:
    return getCurveDoubleExponentialDecaysByName(self, t_name, t_exactMatch)
Model.getCurveDoubleExponentialDecaysByName = _getCurveDoubleExponentialDecaysByName

class CurveExponent(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveExponent_swiginit(self, _openstudiomodelresources.new_CurveExponent(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponent

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveExponent_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient1Constant(self)

    def coefficient2Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient2Constant(self)

    def coefficient3Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient3Constant(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponent_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponent_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponent_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponent_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveExponent_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponent_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponent_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponent_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2Constant(self, coefficient2Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient2Constant(self, coefficient2Constant)

    def setCoefficient3Constant(self, coefficient3Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient3Constant(self, coefficient3Constant)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponent_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponent_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponent_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetOutputUnitType(self)

# Register CurveExponent in _openstudiomodelresources:
_openstudiomodelresources.CurveExponent_swigregister(CurveExponent)

def CurveExponent_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponent_iddObjectType()

def CurveExponent_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues()

def CurveExponent_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues()


def toCurveExponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.toCurveExponent(idfObject)

def getCurveExponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.getCurveExponent(t_model, t_handle)

def getCurveExponents(t_model: "Model") -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > >":
    return _openstudiomodelresources.getCurveExponents(t_model)

def getCurveExponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.getCurveExponentByName(t_model, t_name)

def getCurveExponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > >":
    return _openstudiomodelresources.getCurveExponentsByName(t_model, t_name, t_exactMatch)

def _to_CurveExponent(self) -> OptionalCurveExponent:
    return toCurveExponent(self)
openstudioutilitiesidf.IdfObject.to_CurveExponent = _to_CurveExponent

def _getCurveExponent(self, t_handle: "UUID") -> OptionalCurveExponent:
    return getCurveExponent(self, t_handle)
Model.getCurveExponent = _getCurveExponent

def _getCurveExponent(self, t_handle_str: str) -> OptionalCurveExponent:
    return getCurveExponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveExponent = _getCurveExponent

def _getCurveExponents(self) -> CurveExponentVector:
    return getCurveExponents(self)
Model.getCurveExponents = _getCurveExponents

def _getCurveExponentByName(self, t_name: str) -> OptionalCurveExponent:
    return getCurveExponentByName(self, t_name)
Model.getCurveExponentByName = _getCurveExponentByName

def _getCurveExponentsByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentVector:
    return getCurveExponentsByName(self, t_name, t_exactMatch)
Model.getCurveExponentsByName = _getCurveExponentsByName

class CurveExponentialDecay(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveExponentialDecay_swiginit(self, _openstudiomodelresources.new_CurveExponentialDecay(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecay

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveExponentialDecay_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetOutputUnitType(self)

# Register CurveExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialDecay_swigregister(CurveExponentialDecay)

def CurveExponentialDecay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponentialDecay_iddObjectType()

def CurveExponentialDecay_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues()

def CurveExponentialDecay_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues()


def toCurveExponentialDecay(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.toCurveExponentialDecay(idfObject)

def getCurveExponentialDecay(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.getCurveExponentialDecay(t_model, t_handle)

def getCurveExponentialDecays(t_model: "Model") -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > >":
    return _openstudiomodelresources.getCurveExponentialDecays(t_model)

def getCurveExponentialDecayByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.getCurveExponentialDecayByName(t_model, t_name)

def getCurveExponentialDecaysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > >":
    return _openstudiomodelresources.getCurveExponentialDecaysByName(t_model, t_name, t_exactMatch)

def _to_CurveExponentialDecay(self) -> OptionalCurveExponentialDecay:
    return toCurveExponentialDecay(self)
openstudioutilitiesidf.IdfObject.to_CurveExponentialDecay = _to_CurveExponentialDecay

def _getCurveExponentialDecay(self, t_handle: "UUID") -> OptionalCurveExponentialDecay:
    return getCurveExponentialDecay(self, t_handle)
Model.getCurveExponentialDecay = _getCurveExponentialDecay

def _getCurveExponentialDecay(self, t_handle_str: str) -> OptionalCurveExponentialDecay:
    return getCurveExponentialDecay(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveExponentialDecay = _getCurveExponentialDecay

def _getCurveExponentialDecays(self) -> CurveExponentialDecayVector:
    return getCurveExponentialDecays(self)
Model.getCurveExponentialDecays = _getCurveExponentialDecays

def _getCurveExponentialDecayByName(self, t_name: str) -> OptionalCurveExponentialDecay:
    return getCurveExponentialDecayByName(self, t_name)
Model.getCurveExponentialDecayByName = _getCurveExponentialDecayByName

def _getCurveExponentialDecaysByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentialDecayVector:
    return getCurveExponentialDecaysByName(self, t_name, t_exactMatch)
Model.getCurveExponentialDecaysByName = _getCurveExponentialDecaysByName

class CurveExponentialSkewNormal(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveExponentialSkewNormal_swiginit(self, _openstudiomodelresources.new_CurveExponentialSkewNormal(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormal

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient4C4(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialSkewNormal_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialSkewNormal_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetOutputUnitType(self)

# Register CurveExponentialSkewNormal in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialSkewNormal_swigregister(CurveExponentialSkewNormal)

def CurveExponentialSkewNormal_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType()

def CurveExponentialSkewNormal_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues()

def CurveExponentialSkewNormal_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues()


def toCurveExponentialSkewNormal(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.toCurveExponentialSkewNormal(idfObject)

def getCurveExponentialSkewNormal(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.getCurveExponentialSkewNormal(t_model, t_handle)

def getCurveExponentialSkewNormals(t_model: "Model") -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > >":
    return _openstudiomodelresources.getCurveExponentialSkewNormals(t_model)

def getCurveExponentialSkewNormalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.getCurveExponentialSkewNormalByName(t_model, t_name)

def getCurveExponentialSkewNormalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > >":
    return _openstudiomodelresources.getCurveExponentialSkewNormalsByName(t_model, t_name, t_exactMatch)

def _to_CurveExponentialSkewNormal(self) -> OptionalCurveExponentialSkewNormal:
    return toCurveExponentialSkewNormal(self)
openstudioutilitiesidf.IdfObject.to_CurveExponentialSkewNormal = _to_CurveExponentialSkewNormal

def _getCurveExponentialSkewNormal(self, t_handle: "UUID") -> OptionalCurveExponentialSkewNormal:
    return getCurveExponentialSkewNormal(self, t_handle)
Model.getCurveExponentialSkewNormal = _getCurveExponentialSkewNormal

def _getCurveExponentialSkewNormal(self, t_handle_str: str) -> OptionalCurveExponentialSkewNormal:
    return getCurveExponentialSkewNormal(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveExponentialSkewNormal = _getCurveExponentialSkewNormal

def _getCurveExponentialSkewNormals(self) -> CurveExponentialSkewNormalVector:
    return getCurveExponentialSkewNormals(self)
Model.getCurveExponentialSkewNormals = _getCurveExponentialSkewNormals

def _getCurveExponentialSkewNormalByName(self, t_name: str) -> OptionalCurveExponentialSkewNormal:
    return getCurveExponentialSkewNormalByName(self, t_name)
Model.getCurveExponentialSkewNormalByName = _getCurveExponentialSkewNormalByName

def _getCurveExponentialSkewNormalsByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentialSkewNormalVector:
    return getCurveExponentialSkewNormalsByName(self, t_name, t_exactMatch)
Model.getCurveExponentialSkewNormalsByName = _getCurveExponentialSkewNormalsByName

class CurveFanPressureRise(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveFanPressureRise_swiginit(self, _openstudiomodelresources.new_CurveFanPressureRise(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRise

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveFanPressureRise_iddObjectType()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient4C4(self)

    def minimumValueofQfan(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofQfan(self)

    def maximumValueofQfan(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofQfan(self)

    def minimumValueofPsm(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofPsm(self)

    def maximumValueofPsm(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofPsm(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFanPressureRise_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFanPressureRise_maximumCurveOutput(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofQfan(self, minimumValueofQfan: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofQfan(self, minimumValueofQfan)

    def setMaximumValueofQfan(self, maximumValueofQfan: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofQfan(self, maximumValueofQfan)

    def setMinimumValueofPsm(self, minimumValueofPsm: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofPsm(self, minimumValueofPsm)

    def setMaximumValueofPsm(self, maximumValueofPsm: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofPsm(self, maximumValueofPsm)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRise_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRise_resetMaximumCurveOutput(self)

# Register CurveFanPressureRise in _openstudiomodelresources:
_openstudiomodelresources.CurveFanPressureRise_swigregister(CurveFanPressureRise)

def CurveFanPressureRise_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveFanPressureRise_iddObjectType()


def toCurveFanPressureRise(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.toCurveFanPressureRise(idfObject)

def getCurveFanPressureRise(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.getCurveFanPressureRise(t_model, t_handle)

def getCurveFanPressureRises(t_model: "Model") -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > >":
    return _openstudiomodelresources.getCurveFanPressureRises(t_model)

def getCurveFanPressureRiseByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.getCurveFanPressureRiseByName(t_model, t_name)

def getCurveFanPressureRisesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > >":
    return _openstudiomodelresources.getCurveFanPressureRisesByName(t_model, t_name, t_exactMatch)

def _to_CurveFanPressureRise(self) -> OptionalCurveFanPressureRise:
    return toCurveFanPressureRise(self)
openstudioutilitiesidf.IdfObject.to_CurveFanPressureRise = _to_CurveFanPressureRise

def _getCurveFanPressureRise(self, t_handle: "UUID") -> OptionalCurveFanPressureRise:
    return getCurveFanPressureRise(self, t_handle)
Model.getCurveFanPressureRise = _getCurveFanPressureRise

def _getCurveFanPressureRise(self, t_handle_str: str) -> OptionalCurveFanPressureRise:
    return getCurveFanPressureRise(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveFanPressureRise = _getCurveFanPressureRise

def _getCurveFanPressureRises(self) -> CurveFanPressureRiseVector:
    return getCurveFanPressureRises(self)
Model.getCurveFanPressureRises = _getCurveFanPressureRises

def _getCurveFanPressureRiseByName(self, t_name: str) -> OptionalCurveFanPressureRise:
    return getCurveFanPressureRiseByName(self, t_name)
Model.getCurveFanPressureRiseByName = _getCurveFanPressureRiseByName

def _getCurveFanPressureRisesByName(self, t_name: str, t_exactMatch: bool) -> CurveFanPressureRiseVector:
    return getCurveFanPressureRisesByName(self, t_name, t_exactMatch)
Model.getCurveFanPressureRisesByName = _getCurveFanPressureRisesByName

class CurveFunctionalPressureDrop(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveFunctionalPressureDrop_swiginit(self, _openstudiomodelresources.new_CurveFunctionalPressureDrop(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDrop

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType()

    def diameter(self) -> "double":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_diameter(self)

    def minorLossCoefficient(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_minorLossCoefficient(self)

    def length(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_length(self)

    def roughness(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_roughness(self)

    def fixedFrictionFactor(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_fixedFrictionFactor(self)

    def setDiameter(self, diameter: "double") -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setDiameter(self, diameter)

    def setMinorLossCoefficient(self, minorLossCoefficient: "double") -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setMinorLossCoefficient(self, minorLossCoefficient)

    def resetMinorLossCoefficient(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetMinorLossCoefficient(self)

    def setLength(self, length: "double") -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setLength(self, length)

    def resetLength(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetLength(self)

    def setRoughness(self, roughness: "double") -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setRoughness(self, roughness)

    def resetRoughness(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetRoughness(self)

    def setFixedFrictionFactor(self, fixedFrictionFactor: "double") -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setFixedFrictionFactor(self, fixedFrictionFactor)

    def resetFixedFrictionFactor(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetFixedFrictionFactor(self)

# Register CurveFunctionalPressureDrop in _openstudiomodelresources:
_openstudiomodelresources.CurveFunctionalPressureDrop_swigregister(CurveFunctionalPressureDrop)

def CurveFunctionalPressureDrop_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType()


def toCurveFunctionalPressureDrop(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.toCurveFunctionalPressureDrop(idfObject)

def getCurveFunctionalPressureDrop(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.getCurveFunctionalPressureDrop(t_model, t_handle)

def getCurveFunctionalPressureDrops(t_model: "Model") -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > >":
    return _openstudiomodelresources.getCurveFunctionalPressureDrops(t_model)

def getCurveFunctionalPressureDropByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.getCurveFunctionalPressureDropByName(t_model, t_name)

def getCurveFunctionalPressureDropsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > >":
    return _openstudiomodelresources.getCurveFunctionalPressureDropsByName(t_model, t_name, t_exactMatch)

def _to_CurveFunctionalPressureDrop(self) -> OptionalCurveFunctionalPressureDrop:
    return toCurveFunctionalPressureDrop(self)
openstudioutilitiesidf.IdfObject.to_CurveFunctionalPressureDrop = _to_CurveFunctionalPressureDrop

def _getCurveFunctionalPressureDrop(self, t_handle: "UUID") -> OptionalCurveFunctionalPressureDrop:
    return getCurveFunctionalPressureDrop(self, t_handle)
Model.getCurveFunctionalPressureDrop = _getCurveFunctionalPressureDrop

def _getCurveFunctionalPressureDrop(self, t_handle_str: str) -> OptionalCurveFunctionalPressureDrop:
    return getCurveFunctionalPressureDrop(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveFunctionalPressureDrop = _getCurveFunctionalPressureDrop

def _getCurveFunctionalPressureDrops(self) -> CurveFunctionalPressureDropVector:
    return getCurveFunctionalPressureDrops(self)
Model.getCurveFunctionalPressureDrops = _getCurveFunctionalPressureDrops

def _getCurveFunctionalPressureDropByName(self, t_name: str) -> OptionalCurveFunctionalPressureDrop:
    return getCurveFunctionalPressureDropByName(self, t_name)
Model.getCurveFunctionalPressureDropByName = _getCurveFunctionalPressureDropByName

def _getCurveFunctionalPressureDropsByName(self, t_name: str, t_exactMatch: bool) -> CurveFunctionalPressureDropVector:
    return getCurveFunctionalPressureDropsByName(self, t_name, t_exactMatch)
Model.getCurveFunctionalPressureDropsByName = _getCurveFunctionalPressureDropsByName

class CurveLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveLinear_swiginit(self, _openstudiomodelresources.new_CurveLinear(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinear

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveLinear_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveLinear_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveLinear_coefficient2x(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveLinear_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveLinear_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveLinear_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setCoefficient2x(self, coefficient2x)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetOutputUnitType(self)

# Register CurveLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveLinear_swigregister(CurveLinear)

def CurveLinear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveLinear_iddObjectType()

def CurveLinear_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues()

def CurveLinear_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues()


def toCurveLinear(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.toCurveLinear(idfObject)

def getCurveLinear(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.getCurveLinear(t_model, t_handle)

def getCurveLinears(t_model: "Model") -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > >":
    return _openstudiomodelresources.getCurveLinears(t_model)

def getCurveLinearByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.getCurveLinearByName(t_model, t_name)

def getCurveLinearsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > >":
    return _openstudiomodelresources.getCurveLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveLinear(self) -> OptionalCurveLinear:
    return toCurveLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveLinear = _to_CurveLinear

def _getCurveLinear(self, t_handle: "UUID") -> OptionalCurveLinear:
    return getCurveLinear(self, t_handle)
Model.getCurveLinear = _getCurveLinear

def _getCurveLinear(self, t_handle_str: str) -> OptionalCurveLinear:
    return getCurveLinear(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveLinear = _getCurveLinear

def _getCurveLinears(self) -> CurveLinearVector:
    return getCurveLinears(self)
Model.getCurveLinears = _getCurveLinears

def _getCurveLinearByName(self, t_name: str) -> OptionalCurveLinear:
    return getCurveLinearByName(self, t_name)
Model.getCurveLinearByName = _getCurveLinearByName

def _getCurveLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveLinearVector:
    return getCurveLinearsByName(self, t_name, t_exactMatch)
Model.getCurveLinearsByName = _getCurveLinearsByName

class CurveQuadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveQuadratic_swiginit(self, _openstudiomodelresources.new_CurveQuadratic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadratic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveQuadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient3xPOW2(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadratic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetOutputUnitType(self)

# Register CurveQuadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadratic_swigregister(CurveQuadratic)

def CurveQuadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuadratic_iddObjectType()

def CurveQuadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues()

def CurveQuadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues()


def toCurveQuadratic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.toCurveQuadratic(idfObject)

def getCurveQuadratic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.getCurveQuadratic(t_model, t_handle)

def getCurveQuadratics(t_model: "Model") -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > >":
    return _openstudiomodelresources.getCurveQuadratics(t_model)

def getCurveQuadraticByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.getCurveQuadraticByName(t_model, t_name)

def getCurveQuadraticsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > >":
    return _openstudiomodelresources.getCurveQuadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuadratic(self) -> OptionalCurveQuadratic:
    return toCurveQuadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveQuadratic = _to_CurveQuadratic

def _getCurveQuadratic(self, t_handle: "UUID") -> OptionalCurveQuadratic:
    return getCurveQuadratic(self, t_handle)
Model.getCurveQuadratic = _getCurveQuadratic

def _getCurveQuadratic(self, t_handle_str: str) -> OptionalCurveQuadratic:
    return getCurveQuadratic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveQuadratic = _getCurveQuadratic

def _getCurveQuadratics(self) -> CurveQuadraticVector:
    return getCurveQuadratics(self)
Model.getCurveQuadratics = _getCurveQuadratics

def _getCurveQuadraticByName(self, t_name: str) -> OptionalCurveQuadratic:
    return getCurveQuadraticByName(self, t_name)
Model.getCurveQuadraticByName = _getCurveQuadraticByName

def _getCurveQuadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuadraticVector:
    return getCurveQuadraticsByName(self, t_name, t_exactMatch)
Model.getCurveQuadraticsByName = _getCurveQuadraticsByName

class CurveQuadraticLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveQuadraticLinear_swiginit(self, _openstudiomodelresources.new_CurveQuadraticLinear(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinear

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveQuadraticLinear_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient4y(self)

    def coefficient5xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient5xTIMESY(self)

    def coefficient6xPOW2TIMESY(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient6xPOW2TIMESY(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient4y(self, coefficient4y)

    def setCoefficient5xTIMESY(self, coefficient5xTIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient5xTIMESY(self, coefficient5xTIMESY)

    def setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetOutputUnitType(self)

# Register CurveQuadraticLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticLinear_swigregister(CurveQuadraticLinear)

def CurveQuadraticLinear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuadraticLinear_iddObjectType()

def CurveQuadraticLinear_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues()

def CurveQuadraticLinear_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues()

def CurveQuadraticLinear_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues()


def toCurveQuadraticLinear(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.toCurveQuadraticLinear(idfObject)

def getCurveQuadraticLinear(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.getCurveQuadraticLinear(t_model, t_handle)

def getCurveQuadraticLinears(t_model: "Model") -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > >":
    return _openstudiomodelresources.getCurveQuadraticLinears(t_model)

def getCurveQuadraticLinearByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.getCurveQuadraticLinearByName(t_model, t_name)

def getCurveQuadraticLinearsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > >":
    return _openstudiomodelresources.getCurveQuadraticLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuadraticLinear(self) -> OptionalCurveQuadraticLinear:
    return toCurveQuadraticLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveQuadraticLinear = _to_CurveQuadraticLinear

def _getCurveQuadraticLinear(self, t_handle: "UUID") -> OptionalCurveQuadraticLinear:
    return getCurveQuadraticLinear(self, t_handle)
Model.getCurveQuadraticLinear = _getCurveQuadraticLinear

def _getCurveQuadraticLinear(self, t_handle_str: str) -> OptionalCurveQuadraticLinear:
    return getCurveQuadraticLinear(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveQuadraticLinear = _getCurveQuadraticLinear

def _getCurveQuadraticLinears(self) -> CurveQuadraticLinearVector:
    return getCurveQuadraticLinears(self)
Model.getCurveQuadraticLinears = _getCurveQuadraticLinears

def _getCurveQuadraticLinearByName(self, t_name: str) -> OptionalCurveQuadraticLinear:
    return getCurveQuadraticLinearByName(self, t_name)
Model.getCurveQuadraticLinearByName = _getCurveQuadraticLinearByName

def _getCurveQuadraticLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuadraticLinearVector:
    return getCurveQuadraticLinearsByName(self, t_name, t_exactMatch)
Model.getCurveQuadraticLinearsByName = _getCurveQuadraticLinearsByName

class CurveQuartic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveQuartic_swiginit(self, _openstudiomodelresources.new_CurveQuartic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuartic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveQuartic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient4xPOW3(self)

    def coefficient5xPOW4(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient5xPOW4(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuartic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuartic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuartic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuartic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuartic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuartic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setCoefficient5xPOW4(self, coefficient5xPOW4: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient5xPOW4(self, coefficient5xPOW4)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveQuartic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetOutputUnitType(self)

# Register CurveQuartic in _openstudiomodelresources:
_openstudiomodelresources.CurveQuartic_swigregister(CurveQuartic)

def CurveQuartic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuartic_iddObjectType()

def CurveQuartic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues()

def CurveQuartic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues()


def toCurveQuartic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.toCurveQuartic(idfObject)

def getCurveQuartic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.getCurveQuartic(t_model, t_handle)

def getCurveQuartics(t_model: "Model") -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > >":
    return _openstudiomodelresources.getCurveQuartics(t_model)

def getCurveQuarticByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.getCurveQuarticByName(t_model, t_name)

def getCurveQuarticsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > >":
    return _openstudiomodelresources.getCurveQuarticsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuartic(self) -> OptionalCurveQuartic:
    return toCurveQuartic(self)
openstudioutilitiesidf.IdfObject.to_CurveQuartic = _to_CurveQuartic

def _getCurveQuartic(self, t_handle: "UUID") -> OptionalCurveQuartic:
    return getCurveQuartic(self, t_handle)
Model.getCurveQuartic = _getCurveQuartic

def _getCurveQuartic(self, t_handle_str: str) -> OptionalCurveQuartic:
    return getCurveQuartic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveQuartic = _getCurveQuartic

def _getCurveQuartics(self) -> CurveQuarticVector:
    return getCurveQuartics(self)
Model.getCurveQuartics = _getCurveQuartics

def _getCurveQuarticByName(self, t_name: str) -> OptionalCurveQuartic:
    return getCurveQuarticByName(self, t_name)
Model.getCurveQuarticByName = _getCurveQuarticByName

def _getCurveQuarticsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuarticVector:
    return getCurveQuarticsByName(self, t_name, t_exactMatch)
Model.getCurveQuarticsByName = _getCurveQuarticsByName

class CurveRectangularHyperbola1(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveRectangularHyperbola1_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola1(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola1_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola1_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetOutputUnitType(self)

# Register CurveRectangularHyperbola1 in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola1_swigregister(CurveRectangularHyperbola1)

def CurveRectangularHyperbola1_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType()

def CurveRectangularHyperbola1_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues()

def CurveRectangularHyperbola1_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues()


def toCurveRectangularHyperbola1(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.toCurveRectangularHyperbola1(idfObject)

def getCurveRectangularHyperbola1(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1(t_model, t_handle)

def getCurveRectangularHyperbola1s(t_model: "Model") -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1s(t_model)

def getCurveRectangularHyperbola1ByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1ByName(t_model, t_name)

def getCurveRectangularHyperbola1sByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1sByName(t_model, t_name, t_exactMatch)

def _to_CurveRectangularHyperbola1(self) -> OptionalCurveRectangularHyperbola1:
    return toCurveRectangularHyperbola1(self)
openstudioutilitiesidf.IdfObject.to_CurveRectangularHyperbola1 = _to_CurveRectangularHyperbola1

def _getCurveRectangularHyperbola1(self, t_handle: "UUID") -> OptionalCurveRectangularHyperbola1:
    return getCurveRectangularHyperbola1(self, t_handle)
Model.getCurveRectangularHyperbola1 = _getCurveRectangularHyperbola1

def _getCurveRectangularHyperbola1(self, t_handle_str: str) -> OptionalCurveRectangularHyperbola1:
    return getCurveRectangularHyperbola1(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveRectangularHyperbola1 = _getCurveRectangularHyperbola1

def _getCurveRectangularHyperbola1s(self) -> CurveRectangularHyperbola1Vector:
    return getCurveRectangularHyperbola1s(self)
Model.getCurveRectangularHyperbola1s = _getCurveRectangularHyperbola1s

def _getCurveRectangularHyperbola1ByName(self, t_name: str) -> OptionalCurveRectangularHyperbola1:
    return getCurveRectangularHyperbola1ByName(self, t_name)
Model.getCurveRectangularHyperbola1ByName = _getCurveRectangularHyperbola1ByName

def _getCurveRectangularHyperbola1sByName(self, t_name: str, t_exactMatch: bool) -> CurveRectangularHyperbola1Vector:
    return getCurveRectangularHyperbola1sByName(self, t_name, t_exactMatch)
Model.getCurveRectangularHyperbola1sByName = _getCurveRectangularHyperbola1sByName

class CurveRectangularHyperbola2(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveRectangularHyperbola2_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola2(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola2_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola2_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetOutputUnitType(self)

# Register CurveRectangularHyperbola2 in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola2_swigregister(CurveRectangularHyperbola2)

def CurveRectangularHyperbola2_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType()

def CurveRectangularHyperbola2_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues()

def CurveRectangularHyperbola2_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues()


def toCurveRectangularHyperbola2(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.toCurveRectangularHyperbola2(idfObject)

def getCurveRectangularHyperbola2(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2(t_model, t_handle)

def getCurveRectangularHyperbola2s(t_model: "Model") -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2s(t_model)

def getCurveRectangularHyperbola2ByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2ByName(t_model, t_name)

def getCurveRectangularHyperbola2sByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2sByName(t_model, t_name, t_exactMatch)

def _to_CurveRectangularHyperbola2(self) -> OptionalCurveRectangularHyperbola2:
    return toCurveRectangularHyperbola2(self)
openstudioutilitiesidf.IdfObject.to_CurveRectangularHyperbola2 = _to_CurveRectangularHyperbola2

def _getCurveRectangularHyperbola2(self, t_handle: "UUID") -> OptionalCurveRectangularHyperbola2:
    return getCurveRectangularHyperbola2(self, t_handle)
Model.getCurveRectangularHyperbola2 = _getCurveRectangularHyperbola2

def _getCurveRectangularHyperbola2(self, t_handle_str: str) -> OptionalCurveRectangularHyperbola2:
    return getCurveRectangularHyperbola2(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveRectangularHyperbola2 = _getCurveRectangularHyperbola2

def _getCurveRectangularHyperbola2s(self) -> CurveRectangularHyperbola2Vector:
    return getCurveRectangularHyperbola2s(self)
Model.getCurveRectangularHyperbola2s = _getCurveRectangularHyperbola2s

def _getCurveRectangularHyperbola2ByName(self, t_name: str) -> OptionalCurveRectangularHyperbola2:
    return getCurveRectangularHyperbola2ByName(self, t_name)
Model.getCurveRectangularHyperbola2ByName = _getCurveRectangularHyperbola2ByName

def _getCurveRectangularHyperbola2sByName(self, t_name: str, t_exactMatch: bool) -> CurveRectangularHyperbola2Vector:
    return getCurveRectangularHyperbola2sByName(self, t_name, t_exactMatch)
Model.getCurveRectangularHyperbola2sByName = _getCurveRectangularHyperbola2sByName

class CurveSigmoid(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveSigmoid_swiginit(self, _openstudiomodelresources.new_CurveSigmoid(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoid

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveSigmoid_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues()

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient4C4(self)

    def coefficient5C5(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient5C5(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveSigmoid_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveSigmoid_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveSigmoid_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoid_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveSigmoid_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoid_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient4C4(self, coefficient4C4)

    def setCoefficient5C5(self, coefficient5C5: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient5C5(self, coefficient5C5)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: "std::string") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetOutputUnitType(self)

# Register CurveSigmoid in _openstudiomodelresources:
_openstudiomodelresources.CurveSigmoid_swigregister(CurveSigmoid)

def CurveSigmoid_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveSigmoid_iddObjectType()

def CurveSigmoid_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues()

def CurveSigmoid_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues()


def toCurveSigmoid(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.toCurveSigmoid(idfObject)

def getCurveSigmoid(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.getCurveSigmoid(t_model, t_handle)

def getCurveSigmoids(t_model: "Model") -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > >":
    return _openstudiomodelresources.getCurveSigmoids(t_model)

def getCurveSigmoidByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.getCurveSigmoidByName(t_model, t_name)

def getCurveSigmoidsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > >":
    return _openstudiomodelresources.getCurveSigmoidsByName(t_model, t_name, t_exactMatch)

def _to_CurveSigmoid(self) -> OptionalCurveSigmoid:
    return toCurveSigmoid(self)
openstudioutilitiesidf.IdfObject.to_CurveSigmoid = _to_CurveSigmoid

def _getCurveSigmoid(self, t_handle: "UUID") -> OptionalCurveSigmoid:
    return getCurveSigmoid(self, t_handle)
Model.getCurveSigmoid = _getCurveSigmoid

def _getCurveSigmoid(self, t_handle_str: str) -> OptionalCurveSigmoid:
    return getCurveSigmoid(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveSigmoid = _getCurveSigmoid

def _getCurveSigmoids(self) -> CurveSigmoidVector:
    return getCurveSigmoids(self)
Model.getCurveSigmoids = _getCurveSigmoids

def _getCurveSigmoidByName(self, t_name: str) -> OptionalCurveSigmoid:
    return getCurveSigmoidByName(self, t_name)
Model.getCurveSigmoidByName = _getCurveSigmoidByName

def _getCurveSigmoidsByName(self, t_name: str, t_exactMatch: bool) -> CurveSigmoidVector:
    return getCurveSigmoidsByName(self, t_name, t_exactMatch)
Model.getCurveSigmoidsByName = _getCurveSigmoidsByName

class CurveTriquadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CurveTriquadratic_swiginit(self, _openstudiomodelresources.new_CurveTriquadratic(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadratic

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CurveTriquadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues()

    @staticmethod
    def validInputUnitTypeforZValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues()

    @staticmethod
    def validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient1Constant(self)

    def coefficient2xPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient2xPOW2(self)

    def coefficient3x(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient3x(self)

    def coefficient4yPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient4yPOW2(self)

    def coefficient5y(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient5y(self)

    def coefficient6zPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient6zPOW2(self)

    def coefficient7z(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient7z(self)

    def coefficient8xPOW2TIMESYPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient8xPOW2TIMESYPOW2(self)

    def coefficient9xTIMESY(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient9xTIMESY(self)

    def coefficient10xTIMESYPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient10xTIMESYPOW2(self)

    def coefficient11xPOW2TIMESY(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient11xPOW2TIMESY(self)

    def coefficient12xPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient12xPOW2TIMESZPOW2(self)

    def coefficient13xTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient13xTIMESZ(self)

    def coefficient14xTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient14xTIMESZPOW2(self)

    def coefficient15xPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient15xPOW2TIMESZ(self)

    def coefficient16yPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient16yPOW2TIMESZPOW2(self)

    def coefficient17yTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient17yTIMESZ(self)

    def coefficient18yTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient18yTIMESZPOW2(self)

    def coefficient19yPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient19yPOW2TIMESZ(self)

    def coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def coefficient21xPOW2TIMESYPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def coefficient22xPOW2TIMESYTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient22xPOW2TIMESYTIMESZPOW2(self)

    def coefficient23xTIMESYPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient23xTIMESYPOW2TIMESZPOW2(self)

    def coefficient24xPOW2TIMESYTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient24xPOW2TIMESYTIMESZ(self)

    def coefficient25xTIMESYPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient25xTIMESYPOW2TIMESZ(self)

    def coefficient26xTIMESYTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient26xTIMESYTIMESZPOW2(self)

    def coefficient27xTIMESYTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient27xTIMESYTIMESZ(self)

    def minimumValueofx(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofx(self)

    def minimumValueofy(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofy(self)

    def maximumValueofy(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofy(self)

    def minimumValueofz(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofz(self)

    def maximumValueofz(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofz(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforYDefaulted(self)

    def inputUnitTypeforZ(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforZ(self)

    def isInputUnitTypeforZDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforZDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def resetCoefficient1Constant(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient1Constant(self)

    def setCoefficient2xPOW2(self, coefficient2xPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient2xPOW2(self, coefficient2xPOW2)

    def resetCoefficient2xPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient2xPOW2(self)

    def setCoefficient3x(self, coefficient3x: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient3x(self, coefficient3x)

    def resetCoefficient3x(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient3x(self)

    def setCoefficient4yPOW2(self, coefficient4yPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient4yPOW2(self, coefficient4yPOW2)

    def resetCoefficient4yPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient4yPOW2(self)

    def setCoefficient5y(self, coefficient5y: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient5y(self, coefficient5y)

    def resetCoefficient5y(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient5y(self)

    def setCoefficient6zPOW2(self, coefficient6zPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient6zPOW2(self, coefficient6zPOW2)

    def resetCoefficient6zPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient6zPOW2(self)

    def setCoefficient7z(self, coefficient7z: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient7z(self, coefficient7z)

    def resetCoefficient7z(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient7z(self)

    def setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2)

    def resetCoefficient8xPOW2TIMESYPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient8xPOW2TIMESYPOW2(self)

    def setCoefficient9xTIMESY(self, coefficient9xTIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient9xTIMESY(self, coefficient9xTIMESY)

    def resetCoefficient9xTIMESY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient9xTIMESY(self)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def resetCoefficient10xTIMESYPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient10xTIMESYPOW2(self)

    def setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY)

    def resetCoefficient11xPOW2TIMESY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient11xPOW2TIMESY(self)

    def setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2)

    def resetCoefficient12xPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient12xPOW2TIMESZPOW2(self)

    def setCoefficient13xTIMESZ(self, coefficient13xTIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient13xTIMESZ(self, coefficient13xTIMESZ)

    def resetCoefficient13xTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient13xTIMESZ(self)

    def setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2)

    def resetCoefficient14xTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient14xTIMESZPOW2(self)

    def setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ)

    def resetCoefficient15xPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient15xPOW2TIMESZ(self)

    def setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2)

    def resetCoefficient16yPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient16yPOW2TIMESZPOW2(self)

    def setCoefficient17yTIMESZ(self, coefficient17yTIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient17yTIMESZ(self, coefficient17yTIMESZ)

    def resetCoefficient17yTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient17yTIMESZ(self)

    def setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2)

    def resetCoefficient18yTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient18yTIMESZPOW2(self)

    def setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ)

    def resetCoefficient19yPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient19yPOW2TIMESZ(self)

    def setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2)

    def resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ)

    def resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2)

    def resetCoefficient22xPOW2TIMESYTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient22xPOW2TIMESYTIMESZPOW2(self)

    def setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2)

    def resetCoefficient23xTIMESYPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient23xTIMESYPOW2TIMESZPOW2(self)

    def setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ)

    def resetCoefficient24xPOW2TIMESYTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient24xPOW2TIMESYTIMESZ(self)

    def setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ)

    def resetCoefficient25xTIMESYPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient25xTIMESYPOW2TIMESZ(self)

    def setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2)

    def resetCoefficient26xTIMESYTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient26xTIMESYTIMESZPOW2(self)

    def setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ)

    def resetCoefficient27xTIMESYTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient27xTIMESYTIMESZ(self)

    def setMinimumValueofx(self, minimumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofx(self, minimumValueofx)

    def resetMinimumValueofx(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofx(self)

    def setMaximumValueofx(self, maximumValueofx: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofx(self, maximumValueofx)

    def resetMaximumValueofx(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofx(self)

    def setMinimumValueofy(self, minimumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofy(self, minimumValueofy)

    def resetMinimumValueofy(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofy(self)

    def setMaximumValueofy(self, maximumValueofy: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofy(self, maximumValueofy)

    def resetMaximumValueofy(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofy(self)

    def setMinimumValueofz(self, minimumValueofz: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofz(self, minimumValueofz)

    def resetMinimumValueofz(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofz(self)

    def setMaximumValueofz(self, maximumValueofz: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofz(self, maximumValueofz)

    def resetMaximumValueofz(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofz(self)

    def setMinimumCurveOutput(self, minimumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: "double") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: "std::string") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: "std::string") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforY(self)

    def setInputUnitTypeforZ(self, inputUnitTypeforZ: "std::string") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforZ(self, inputUnitTypeforZ)

    def resetInputUnitTypeforZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforZ(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetOutputUnitType(self)

# Register CurveTriquadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveTriquadratic_swigregister(CurveTriquadratic)

def CurveTriquadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveTriquadratic_iddObjectType()

def CurveTriquadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues()

def CurveTriquadratic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues()

def CurveTriquadratic_validInputUnitTypeforZValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues()

def CurveTriquadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues()


def toCurveTriquadratic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.toCurveTriquadratic(idfObject)

def getCurveTriquadratic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.getCurveTriquadratic(t_model, t_handle)

def getCurveTriquadratics(t_model: "Model") -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > >":
    return _openstudiomodelresources.getCurveTriquadratics(t_model)

def getCurveTriquadraticByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.getCurveTriquadraticByName(t_model, t_name)

def getCurveTriquadraticsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > >":
    return _openstudiomodelresources.getCurveTriquadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveTriquadratic(self) -> OptionalCurveTriquadratic:
    return toCurveTriquadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveTriquadratic = _to_CurveTriquadratic

def _getCurveTriquadratic(self, t_handle: "UUID") -> OptionalCurveTriquadratic:
    return getCurveTriquadratic(self, t_handle)
Model.getCurveTriquadratic = _getCurveTriquadratic

def _getCurveTriquadratic(self, t_handle_str: str) -> OptionalCurveTriquadratic:
    return getCurveTriquadratic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCurveTriquadratic = _getCurveTriquadratic

def _getCurveTriquadratics(self) -> CurveTriquadraticVector:
    return getCurveTriquadratics(self)
Model.getCurveTriquadratics = _getCurveTriquadratics

def _getCurveTriquadraticByName(self, t_name: str) -> OptionalCurveTriquadratic:
    return getCurveTriquadraticByName(self, t_name)
Model.getCurveTriquadraticByName = _getCurveTriquadraticByName

def _getCurveTriquadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveTriquadraticVector:
    return getCurveTriquadraticsByName(self, t_name, t_exactMatch)
Model.getCurveTriquadraticsByName = _getCurveTriquadraticsByName

class TableMultiVariableLookupPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupPoint_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupPoint(*args))

    def x(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.TableMultiVariableLookupPoint_x(self)

    def y(self) -> "double":
        return _openstudiomodelresources.TableMultiVariableLookupPoint_y(self)

    def __lt__(self, other: "TableMultiVariableLookupPoint") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPoint___lt__(self, other)

    def __str__(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookupPoint___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPoint

# Register TableMultiVariableLookupPoint in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupPoint_swigregister(TableMultiVariableLookupPoint)


def __lshift__(*args) -> "std::ostream &":
    return _openstudiomodelresources.__lshift__(*args)
class TableMultiVariableLookup(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", numberofIndependentVariables: "int const &"):
        _openstudiomodelresources.TableMultiVariableLookup_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookup(model, numberofIndependentVariables))
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookup

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.TableMultiVariableLookup_iddObjectType()

    @staticmethod
    def interpolationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues()

    @staticmethod
    def curveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues()

    @staticmethod
    def tableDataFormatValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues()

    @staticmethod
    def x1SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues()

    @staticmethod
    def x2SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues()

    @staticmethod
    def inputUnitTypeforX1Values() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values()

    @staticmethod
    def inputUnitTypeforX2Values() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values()

    @staticmethod
    def inputUnitTypeforX3Values() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values()

    @staticmethod
    def inputUnitTypeforX4Values() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values()

    @staticmethod
    def inputUnitTypeforX5Values() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values()

    @staticmethod
    def outputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues()

    def interpolationMethod(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethod(self)

    def isInterpolationMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInterpolationMethodDefaulted(self)

    def numberofInterpolationPoints(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numberofInterpolationPoints(self)

    def isNumberofInterpolationPointsDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isNumberofInterpolationPointsDefaulted(self)

    def curveType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.TableMultiVariableLookup_curveType(self)

    def tableDataFormat(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormat(self)

    def isTableDataFormatDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isTableDataFormatDefaulted(self)

    def normalizationReference(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_normalizationReference(self)

    def minimumValueofX1(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX1(self)

    def maximumValueofX1(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX1(self)

    def minimumValueofX2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX2(self)

    def maximumValueofX2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX2(self)

    def minimumValueofX3(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX3(self)

    def maximumValueofX3(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX3(self)

    def minimumValueofX4(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX4(self)

    def maximumValueofX4(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX4(self)

    def minimumValueofX5(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX5(self)

    def maximumValueofX5(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX5(self)

    def minimumTableOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumTableOutput(self)

    def maximumTableOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumTableOutput(self)

    def inputUnitTypeforX1(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1(self)

    def isInputUnitTypeforX1Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX1Defaulted(self)

    def inputUnitTypeforX2(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2(self)

    def isInputUnitTypeforX2Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX2Defaulted(self)

    def inputUnitTypeforX3(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3(self)

    def isInputUnitTypeforX3Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX3Defaulted(self)

    def inputUnitTypeforX4(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4(self)

    def isInputUnitTypeforX4Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX4Defaulted(self)

    def inputUnitTypeforX5(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5(self)

    def isInputUnitTypeforX5Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX5Defaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isOutputUnitTypeDefaulted(self)

    def numberofIndependentVariables(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numberofIndependentVariables(self)

    def printTable(self, precision: "unsigned int"=3) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_printTable(self, precision)

    def setInterpolationMethod(self, interpolationMethod: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInterpolationMethod(self, interpolationMethod)

    def resetInterpolationMethod(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInterpolationMethod(self)

    def setNumberofInterpolationPoints(self, numberofInterpolationPoints: "int") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setNumberofInterpolationPoints(self, numberofInterpolationPoints)

    def resetNumberofInterpolationPoints(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetNumberofInterpolationPoints(self)

    def setCurveType(self, curveType: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setCurveType(self, curveType)

    def resetCurveType(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetCurveType(self)

    def setTableDataFormat(self, tableDataFormat: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setTableDataFormat(self, tableDataFormat)

    def resetTableDataFormat(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetTableDataFormat(self)

    def setNormalizationReference(self, normalizationReference: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setNormalizationReference(self, normalizationReference)

    def resetNormalizationReference(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetNormalizationReference(self)

    def setMinimumValueofX1(self, minimumValueofX1: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX1(self, minimumValueofX1)

    def resetMinimumValueofX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX1(self)

    def setMaximumValueofX1(self, maximumValueofX1: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX1(self, maximumValueofX1)

    def resetMaximumValueofX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX1(self)

    def setMinimumValueofX2(self, minimumValueofX2: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX2(self, minimumValueofX2)

    def resetMinimumValueofX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX2(self)

    def setMaximumValueofX2(self, maximumValueofX2: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX2(self, maximumValueofX2)

    def resetMaximumValueofX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX2(self)

    def setMinimumValueofX3(self, minimumValueofX3: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX3(self, minimumValueofX3)

    def resetMinimumValueofX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX3(self)

    def setMaximumValueofX3(self, maximumValueofX3: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX3(self, maximumValueofX3)

    def resetMaximumValueofX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX3(self)

    def setMinimumValueofX4(self, minimumValueofX4: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX4(self, minimumValueofX4)

    def resetMinimumValueofX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX4(self)

    def setMaximumValueofX4(self, maximumValueofX4: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX4(self, maximumValueofX4)

    def resetMaximumValueofX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX4(self)

    def setMinimumValueofX5(self, minimumValueofX5: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX5(self, minimumValueofX5)

    def resetMinimumValueofX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX5(self)

    def setMaximumValueofX5(self, maximumValueofX5: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX5(self, maximumValueofX5)

    def resetMaximumValueofX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX5(self)

    def setMinimumTableOutput(self, minimumTableOutput: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumTableOutput(self, minimumTableOutput)

    def resetMinimumTableOutput(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumTableOutput(self)

    def setMaximumTableOutput(self, maximumTableOutput: "double") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumTableOutput(self, maximumTableOutput)

    def resetMaximumTableOutput(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumTableOutput(self)

    def setInputUnitTypeforX1(self, inputUnitTypeforX1: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX1(self, inputUnitTypeforX1)

    def resetInputUnitTypeforX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX1(self)

    def setInputUnitTypeforX2(self, inputUnitTypeforX2: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX2(self, inputUnitTypeforX2)

    def resetInputUnitTypeforX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX2(self)

    def setInputUnitTypeforX3(self, inputUnitTypeforX3: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX3(self, inputUnitTypeforX3)

    def resetInputUnitTypeforX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX3(self)

    def setInputUnitTypeforX4(self, inputUnitTypeforX4: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX4(self, inputUnitTypeforX4)

    def resetInputUnitTypeforX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX4(self)

    def setInputUnitTypeforX5(self, inputUnitTypeforX5: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX5(self, inputUnitTypeforX5)

    def resetInputUnitTypeforX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX5(self)

    def setOutputUnitType(self, outputUnitType: "std::string") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetOutputUnitType(self)

    def addPoint(self, *args) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_addPoint(self, *args)

    def points(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint,std::allocator< openstudio::model::TableMultiVariableLookupPoint > >":
        return _openstudiomodelresources.TableMultiVariableLookup_points(self)

    def setPoints(self, points: "TableMultiVariableLookupPointVector") -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setPoints(self, points)

    def yValue(self, xValues: "DoubleVector") -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_yValue(self, xValues)

    def xValues(self, i: "int") -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.TableMultiVariableLookup_xValues(self, i)

    def numVariables(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numVariables(self)

    def evaluate(self, x: "DoubleVector") -> "double":
        return _openstudiomodelresources.TableMultiVariableLookup_evaluate(self, x)

# Register TableMultiVariableLookup in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookup_swigregister(TableMultiVariableLookup)

def TableMultiVariableLookup_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.TableMultiVariableLookup_iddObjectType()

def TableMultiVariableLookup_interpolationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues()

def TableMultiVariableLookup_curveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues()

def TableMultiVariableLookup_tableDataFormatValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues()

def TableMultiVariableLookup_x1SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues()

def TableMultiVariableLookup_x2SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues()

def TableMultiVariableLookup_inputUnitTypeforX1Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values()

def TableMultiVariableLookup_inputUnitTypeforX2Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values()

def TableMultiVariableLookup_inputUnitTypeforX3Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values()

def TableMultiVariableLookup_inputUnitTypeforX4Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values()

def TableMultiVariableLookup_inputUnitTypeforX5Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values()

def TableMultiVariableLookup_outputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues()


def toTableMultiVariableLookup(idfObject: "IdfObject") -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.toTableMultiVariableLookup(idfObject)

def getTableMultiVariableLookup(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.getTableMultiVariableLookup(t_model, t_handle)

def getTableMultiVariableLookups(t_model: "Model") -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > >":
    return _openstudiomodelresources.getTableMultiVariableLookups(t_model)

def getTableMultiVariableLookupByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.getTableMultiVariableLookupByName(t_model, t_name)

def getTableMultiVariableLookupsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > >":
    return _openstudiomodelresources.getTableMultiVariableLookupsByName(t_model, t_name, t_exactMatch)

def _to_TableMultiVariableLookup(self) -> OptionalTableMultiVariableLookup:
    return toTableMultiVariableLookup(self)
openstudioutilitiesidf.IdfObject.to_TableMultiVariableLookup = _to_TableMultiVariableLookup

def _getTableMultiVariableLookup(self, t_handle: "UUID") -> OptionalTableMultiVariableLookup:
    return getTableMultiVariableLookup(self, t_handle)
Model.getTableMultiVariableLookup = _getTableMultiVariableLookup

def _getTableMultiVariableLookup(self, t_handle_str: str) -> OptionalTableMultiVariableLookup:
    return getTableMultiVariableLookup(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getTableMultiVariableLookup = _getTableMultiVariableLookup

def _getTableMultiVariableLookups(self) -> TableMultiVariableLookupVector:
    return getTableMultiVariableLookups(self)
Model.getTableMultiVariableLookups = _getTableMultiVariableLookups

def _getTableMultiVariableLookupByName(self, t_name: str) -> OptionalTableMultiVariableLookup:
    return getTableMultiVariableLookupByName(self, t_name)
Model.getTableMultiVariableLookupByName = _getTableMultiVariableLookupByName

def _getTableMultiVariableLookupsByName(self, t_name: str, t_exactMatch: bool) -> TableMultiVariableLookupVector:
    return getTableMultiVariableLookupsByName(self, t_name, t_exactMatch)
Model.getTableMultiVariableLookupsByName = _getTableMultiVariableLookupsByName

class SpaceLoadDefinition(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinition

    def instances(self) -> "std::vector< openstudio::model::SpaceLoadInstance,std::allocator< openstudio::model::SpaceLoadInstance > >":
        return _openstudiomodelresources.SpaceLoadDefinition_instances(self)

    def floorArea(self) -> "double":
        return _openstudiomodelresources.SpaceLoadDefinition_floorArea(self)

    def quantity(self) -> "int":
        return _openstudiomodelresources.SpaceLoadDefinition_quantity(self)

# Register SpaceLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.SpaceLoadDefinition_swigregister(SpaceLoadDefinition)


def toSpaceLoadDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.toSpaceLoadDefinition(idfObject)

def getSpaceLoadDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.getSpaceLoadDefinition(t_model, t_handle)

def getSpaceLoadDefinitions(t_model: "Model") -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > >":
    return _openstudiomodelresources.getSpaceLoadDefinitions(t_model)

def getSpaceLoadDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.getSpaceLoadDefinitionByName(t_model, t_name)

def getSpaceLoadDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > >":
    return _openstudiomodelresources.getSpaceLoadDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_SpaceLoadDefinition(self) -> OptionalSpaceLoadDefinition:
    return toSpaceLoadDefinition(self)
openstudioutilitiesidf.IdfObject.to_SpaceLoadDefinition = _to_SpaceLoadDefinition

def _getSpaceLoadDefinition(self, t_handle: "UUID") -> OptionalSpaceLoadDefinition:
    return getSpaceLoadDefinition(self, t_handle)
Model.getSpaceLoadDefinition = _getSpaceLoadDefinition

def _getSpaceLoadDefinition(self, t_handle_str: str) -> OptionalSpaceLoadDefinition:
    return getSpaceLoadDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSpaceLoadDefinition = _getSpaceLoadDefinition

def _getSpaceLoadDefinitions(self) -> SpaceLoadDefinitionVector:
    return getSpaceLoadDefinitions(self)
Model.getSpaceLoadDefinitions = _getSpaceLoadDefinitions

def _getSpaceLoadDefinitionByName(self, t_name: str) -> OptionalSpaceLoadDefinition:
    return getSpaceLoadDefinitionByName(self, t_name)
Model.getSpaceLoadDefinitionByName = _getSpaceLoadDefinitionByName

def _getSpaceLoadDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> SpaceLoadDefinitionVector:
    return getSpaceLoadDefinitionsByName(self, t_name, t_exactMatch)
Model.getSpaceLoadDefinitionsByName = _getSpaceLoadDefinitionsByName

class PeopleDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.PeopleDefinition_swiginit(self, _openstudiomodelresources.new_PeopleDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.PeopleDefinition_iddObjectType()

    @staticmethod
    def numberofPeopleCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues()

    @staticmethod
    def meanRadiantTemperatureCalculationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues()

    @staticmethod
    def thermalComfortModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues()

    def numberofPeopleCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethod(self)

    def numberofPeople(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_numberofPeople(self)

    def peopleperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_peopleperSpaceFloorArea(self)

    def spaceFloorAreaperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_spaceFloorAreaperPerson(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.PeopleDefinition_fractionRadiant(self)

    def sensibleHeatFraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_sensibleHeatFraction(self)

    def isSensibleHeatFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionDefaulted(self)

    def isSensibleHeatFractionAutocalculated(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionAutocalculated(self)

    def carbonDioxideGenerationRate(self) -> "double":
        return _openstudiomodelresources.PeopleDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def enableASHRAE55ComfortWarnings(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_enableASHRAE55ComfortWarnings(self)

    def isEnableASHRAE55ComfortWarningsDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isEnableASHRAE55ComfortWarningsDefaulted(self)

    def meanRadiantTemperatureCalculationType(self) -> "std::string":
        return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationType(self)

    def isMeanRadiantTemperatureCalculationTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isMeanRadiantTemperatureCalculationTypeDefaulted(self)

    def getThermalComfortModelType(self, i: "int") -> "boost::optional< std::string >":
        return _openstudiomodelresources.PeopleDefinition_getThermalComfortModelType(self, i)

    def numThermalComfortModelTypes(self) -> "int":
        return _openstudiomodelresources.PeopleDefinition_numThermalComfortModelTypes(self)

    def setNumberofPeople(self, numberofPeople: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setNumberofPeople(self, numberofPeople)

    def setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea)

    def setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setFractionRadiant(self, fractionRadiant)

    def setSensibleHeatFraction(self, sensibleHeatFraction: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setSensibleHeatFraction(self, sensibleHeatFraction)

    def resetSensibleHeatFraction(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetSensibleHeatFraction(self)

    def autocalculateSensibleHeatFraction(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_autocalculateSensibleHeatFraction(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetCarbonDioxideGenerationRate(self)

    def setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings: "bool") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings)

    def resetEnableASHRAE55ComfortWarnings(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetEnableASHRAE55ComfortWarnings(self)

    def setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType: "std::string") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType)

    def resetMeanRadiantTemperatureCalculationType(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetMeanRadiantTemperatureCalculationType(self)

    def pushThermalComfortModelType(self, thermalComfortModelType: "std::string const &") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_pushThermalComfortModelType(self, thermalComfortModelType)

    def setThermalComfortModelType(self, i: "int", thermalComfortModelType: "std::string const &") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setThermalComfortModelType(self, i, thermalComfortModelType)

    def eraseThermalComfortModelType(self, i: "int") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_eraseThermalComfortModelType(self, i)

    def getNumberOfPeople(self, floorArea: "double") -> "double":
        return _openstudiomodelresources.PeopleDefinition_getNumberOfPeople(self, floorArea)

    def getPeoplePerFloorArea(self, floorArea: "double") -> "double":
        return _openstudiomodelresources.PeopleDefinition_getPeoplePerFloorArea(self, floorArea)

    def getFloorAreaPerPerson(self, floorArea: "double") -> "double":
        return _openstudiomodelresources.PeopleDefinition_getFloorAreaPerPerson(self, floorArea)

    def setNumberOfPeopleCalculationMethod(self, method: "std::string const &", floorArea: "double") -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setNumberOfPeopleCalculationMethod(self, method, floorArea)

# Register PeopleDefinition in _openstudiomodelresources:
_openstudiomodelresources.PeopleDefinition_swigregister(PeopleDefinition)

def PeopleDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.PeopleDefinition_iddObjectType()

def PeopleDefinition_numberofPeopleCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues()

def PeopleDefinition_meanRadiantTemperatureCalculationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues()

def PeopleDefinition_thermalComfortModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues()


def toPeopleDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.toPeopleDefinition(idfObject)

def getPeopleDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.getPeopleDefinition(t_model, t_handle)

def getPeopleDefinitions(t_model: "Model") -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > >":
    return _openstudiomodelresources.getPeopleDefinitions(t_model)

def getPeopleDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.getPeopleDefinitionByName(t_model, t_name)

def getPeopleDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > >":
    return _openstudiomodelresources.getPeopleDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_PeopleDefinition(self) -> OptionalPeopleDefinition:
    return toPeopleDefinition(self)
openstudioutilitiesidf.IdfObject.to_PeopleDefinition = _to_PeopleDefinition

def _getPeopleDefinition(self, t_handle: "UUID") -> OptionalPeopleDefinition:
    return getPeopleDefinition(self, t_handle)
Model.getPeopleDefinition = _getPeopleDefinition

def _getPeopleDefinition(self, t_handle_str: str) -> OptionalPeopleDefinition:
    return getPeopleDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPeopleDefinition = _getPeopleDefinition

def _getPeopleDefinitions(self) -> PeopleDefinitionVector:
    return getPeopleDefinitions(self)
Model.getPeopleDefinitions = _getPeopleDefinitions

def _getPeopleDefinitionByName(self, t_name: str) -> OptionalPeopleDefinition:
    return getPeopleDefinitionByName(self, t_name)
Model.getPeopleDefinitionByName = _getPeopleDefinitionByName

def _getPeopleDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> PeopleDefinitionVector:
    return getPeopleDefinitionsByName(self, t_name, t_exactMatch)
Model.getPeopleDefinitionsByName = _getPeopleDefinitionsByName

class LightsDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.LightsDefinition_swiginit(self, _openstudiomodelresources.new_LightsDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.LightsDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.LightsDefinition_designLevelCalculationMethod(self)

    def lightingLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_lightingLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_wattsperPerson(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingLevel(self, lightingLevel: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setLightingLevel(self, lightingLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature: "bool") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def getLightingPower(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.LightsDefinition_getLightingPower(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.LightsDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.LightsDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.LightsDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register LightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.LightsDefinition_swigregister(LightsDefinition)

def LightsDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.LightsDefinition_iddObjectType()

def LightsDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues()


def toLightsDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.toLightsDefinition(idfObject)

def getLightsDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.getLightsDefinition(t_model, t_handle)

def getLightsDefinitions(t_model: "Model") -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > >":
    return _openstudiomodelresources.getLightsDefinitions(t_model)

def getLightsDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.getLightsDefinitionByName(t_model, t_name)

def getLightsDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > >":
    return _openstudiomodelresources.getLightsDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_LightsDefinition(self) -> OptionalLightsDefinition:
    return toLightsDefinition(self)
openstudioutilitiesidf.IdfObject.to_LightsDefinition = _to_LightsDefinition

def _getLightsDefinition(self, t_handle: "UUID") -> OptionalLightsDefinition:
    return getLightsDefinition(self, t_handle)
Model.getLightsDefinition = _getLightsDefinition

def _getLightsDefinition(self, t_handle_str: str) -> OptionalLightsDefinition:
    return getLightsDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLightsDefinition = _getLightsDefinition

def _getLightsDefinitions(self) -> LightsDefinitionVector:
    return getLightsDefinitions(self)
Model.getLightsDefinitions = _getLightsDefinitions

def _getLightsDefinitionByName(self, t_name: str) -> OptionalLightsDefinition:
    return getLightsDefinitionByName(self, t_name)
Model.getLightsDefinitionByName = _getLightsDefinitionByName

def _getLightsDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> LightsDefinitionVector:
    return getLightsDefinitionsByName(self, t_name, t_exactMatch)
Model.getLightsDefinitionsByName = _getLightsDefinitionsByName

class LuminaireDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.LuminaireDefinition_swiginit(self, _openstudiomodelresources.new_LuminaireDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.LuminaireDefinition_iddObjectType()

    def lightingPower(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_lightingPower(self)

    def isLightingPowerDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isLightingPowerDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingPower(self, lightingPower: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setLightingPower(self, lightingPower)

    def resetLightingPower(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetLightingPower(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature: "bool") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2: "double") -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

# Register LuminaireDefinition in _openstudiomodelresources:
_openstudiomodelresources.LuminaireDefinition_swigregister(LuminaireDefinition)

def LuminaireDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.LuminaireDefinition_iddObjectType()


def toLuminaireDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.toLuminaireDefinition(idfObject)

def getLuminaireDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.getLuminaireDefinition(t_model, t_handle)

def getLuminaireDefinitions(t_model: "Model") -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > >":
    return _openstudiomodelresources.getLuminaireDefinitions(t_model)

def getLuminaireDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.getLuminaireDefinitionByName(t_model, t_name)

def getLuminaireDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > >":
    return _openstudiomodelresources.getLuminaireDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_LuminaireDefinition(self) -> OptionalLuminaireDefinition:
    return toLuminaireDefinition(self)
openstudioutilitiesidf.IdfObject.to_LuminaireDefinition = _to_LuminaireDefinition

def _getLuminaireDefinition(self, t_handle: "UUID") -> OptionalLuminaireDefinition:
    return getLuminaireDefinition(self, t_handle)
Model.getLuminaireDefinition = _getLuminaireDefinition

def _getLuminaireDefinition(self, t_handle_str: str) -> OptionalLuminaireDefinition:
    return getLuminaireDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLuminaireDefinition = _getLuminaireDefinition

def _getLuminaireDefinitions(self) -> LuminaireDefinitionVector:
    return getLuminaireDefinitions(self)
Model.getLuminaireDefinitions = _getLuminaireDefinitions

def _getLuminaireDefinitionByName(self, t_name: str) -> OptionalLuminaireDefinition:
    return getLuminaireDefinitionByName(self, t_name)
Model.getLuminaireDefinitionByName = _getLuminaireDefinitionByName

def _getLuminaireDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> LuminaireDefinitionVector:
    return getLuminaireDefinitionsByName(self, t_name, t_exactMatch)
Model.getLuminaireDefinitionsByName = _getLuminaireDefinitionsByName

class ElectricEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ElectricEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register ElectricEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentDefinition_swigregister(ElectricEquipmentDefinition)

def ElectricEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType()

def ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues()


def toElectricEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.toElectricEquipmentDefinition(idfObject)

def getElectricEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.getElectricEquipmentDefinition(t_model, t_handle)

def getElectricEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentDefinitions(t_model)

def getElectricEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.getElectricEquipmentDefinitionByName(t_model, t_name)

def getElectricEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipmentDefinition(self) -> OptionalElectricEquipmentDefinition:
    return toElectricEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipmentDefinition = _to_ElectricEquipmentDefinition

def _getElectricEquipmentDefinition(self, t_handle: "UUID") -> OptionalElectricEquipmentDefinition:
    return getElectricEquipmentDefinition(self, t_handle)
Model.getElectricEquipmentDefinition = _getElectricEquipmentDefinition

def _getElectricEquipmentDefinition(self, t_handle_str: str) -> OptionalElectricEquipmentDefinition:
    return getElectricEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getElectricEquipmentDefinition = _getElectricEquipmentDefinition

def _getElectricEquipmentDefinitions(self) -> ElectricEquipmentDefinitionVector:
    return getElectricEquipmentDefinitions(self)
Model.getElectricEquipmentDefinitions = _getElectricEquipmentDefinitions

def _getElectricEquipmentDefinitionByName(self, t_name: str) -> OptionalElectricEquipmentDefinition:
    return getElectricEquipmentDefinitionByName(self, t_name)
Model.getElectricEquipmentDefinitionByName = _getElectricEquipmentDefinitionByName

def _getElectricEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentDefinitionVector:
    return getElectricEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentDefinitionsByName = _getElectricEquipmentDefinitionsByName

class ElectricEquipmentITEAirCooledDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentITEAirCooledDefinition(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentITEAirCooledDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_iddObjectType()

    @staticmethod
    def validAirFlowCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirFlowCalculationMethodValues()

    @staticmethod
    def validDesignPowerInputCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validDesignPowerInputCalculationMethodValues()

    @staticmethod
    def validEnvironmentalClassValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validEnvironmentalClassValues()

    @staticmethod
    def validAirInletConnectionTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirInletConnectionTypeValues()

    def airFlowCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airFlowCalculationMethod(self)

    def designPowerInputCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designPowerInputCalculationMethod(self)

    def wattsperUnit(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_wattsperUnit(self)

    def wattsperZoneFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_wattsperZoneFloorArea(self)

    def cPUPowerInputFunctionofLoadingandAirTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_cPUPowerInputFunctionofLoadingandAirTemperatureCurve(self)

    def designFanPowerInputFraction(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designFanPowerInputFraction(self)

    def isDesignFanPowerInputFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignFanPowerInputFractionDefaulted(self)

    def designFanAirFlowRateperPowerInput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designFanAirFlowRateperPowerInput(self)

    def airFlowFunctionofLoadingandAirTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airFlowFunctionofLoadingandAirTemperatureCurve(self)

    def fanPowerInputFunctionofFlowCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_fanPowerInputFunctionofFlowCurve(self)

    def designEnteringAirTemperature(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designEnteringAirTemperature(self)

    def isDesignEnteringAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignEnteringAirTemperatureDefaulted(self)

    def environmentalClass(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_environmentalClass(self)

    def airInletConnectionType(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airInletConnectionType(self)

    def designRecirculationFraction(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designRecirculationFraction(self)

    def isDesignRecirculationFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignRecirculationFractionDefaulted(self)

    def recirculationFunctionofLoadingandSupplyTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_recirculationFunctionofLoadingandSupplyTemperatureCurve(self)

    def designElectricPowerSupplyEfficiency(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designElectricPowerSupplyEfficiency(self)

    def isDesignElectricPowerSupplyEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignElectricPowerSupplyEfficiencyDefaulted(self)

    def electricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_electricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self)

    def fractionofElectricPowerSupplyLossestoZone(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_fractionofElectricPowerSupplyLossestoZone(self)

    def isFractionofElectricPowerSupplyLossestoZoneDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isFractionofElectricPowerSupplyLossestoZoneDefaulted(self)

    def supplyTemperatureDifference(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_supplyTemperatureDifference(self)

    def isSupplyTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isSupplyTemperatureDifferenceDefaulted(self)

    def supplyTemperatureDifferenceSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_supplyTemperatureDifferenceSchedule(self)

    def returnTemperatureDifference(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_returnTemperatureDifference(self)

    def isReturnTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isReturnTemperatureDifferenceDefaulted(self)

    def returnTemperatureDifferenceSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_returnTemperatureDifferenceSchedule(self)

    def setAirFlowCalculationMethod(self, airFlowCalculationMethod: "std::string const &") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirFlowCalculationMethod(self, airFlowCalculationMethod)

    def setDesignPowerInputCalculationMethod(self, designPowerInputCalculationMethod: "std::string const &", floorArea: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignPowerInputCalculationMethod(self, designPowerInputCalculationMethod, floorArea)

    def setWattsperUnit(self, wattsperUnit: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setWattsperUnit(self, wattsperUnit)

    def setWattsperZoneFloorArea(self, wattsperZoneFloorArea: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setWattsperZoneFloorArea(self, wattsperZoneFloorArea)

    def setCPUPowerInputFunctionofLoadingandAirTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setCPUPowerInputFunctionofLoadingandAirTemperatureCurve(self, curve)

    def setDesignFanPowerInputFraction(self, designFanPowerInputFraction: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignFanPowerInputFraction(self, designFanPowerInputFraction)

    def resetDesignFanPowerInputFraction(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignFanPowerInputFraction(self)

    def setDesignFanAirFlowRateperPowerInput(self, designFanAirFlowRateperPowerInput: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignFanAirFlowRateperPowerInput(self, designFanAirFlowRateperPowerInput)

    def setAirFlowFunctionofLoadingandAirTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirFlowFunctionofLoadingandAirTemperatureCurve(self, curve)

    def setFanPowerInputFunctionofFlowCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setFanPowerInputFunctionofFlowCurve(self, curve)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature: "double") -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def resetDesignEnteringAirTemperature(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignEnteringAirTemperature(self)

    def setEnvironmentalClass(self, environmentalClass: "std::string const &") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setEnvironmentalClass(self, environmentalClass)

    def setAirInletConnectionType(self, airInletConnectionType: "std::string const &") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirInletConnectionType(self, airInletConnectionType)

    def setDesignRecirculationFraction(self, designRecirculationFraction: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignRecirculationFraction(self, designRecirculationFraction)

    def resetDesignRecirculationFraction(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignRecirculationFraction(self)

    def setRecirculationFunctionofLoadingandSupplyTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setRecirculationFunctionofLoadingandSupplyTemperatureCurve(self, curve)

    def resetRecirculationFunctionofLoadingandSupplyTemperatureCurve(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetRecirculationFunctionofLoadingandSupplyTemperatureCurve(self)

    def setDesignElectricPowerSupplyEfficiency(self, designElectricPowerSupplyEfficiency: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignElectricPowerSupplyEfficiency(self, designElectricPowerSupplyEfficiency)

    def resetDesignElectricPowerSupplyEfficiency(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignElectricPowerSupplyEfficiency(self)

    def setElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self, curve)

    def resetElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self)

    def setFractionofElectricPowerSupplyLossestoZone(self, fractionofElectricPowerSupplyLossestoZone: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setFractionofElectricPowerSupplyLossestoZone(self, fractionofElectricPowerSupplyLossestoZone)

    def resetFractionofElectricPowerSupplyLossestoZone(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetFractionofElectricPowerSupplyLossestoZone(self)

    def setSupplyTemperatureDifference(self, supplyTemperatureDifference: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setSupplyTemperatureDifference(self, supplyTemperatureDifference)

    def resetSupplyTemperatureDifference(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetSupplyTemperatureDifference(self)

    def setSupplyTemperatureDifferenceSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setSupplyTemperatureDifferenceSchedule(self, schedule)

    def resetSupplyTemperatureDifferenceSchedule(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetSupplyTemperatureDifferenceSchedule(self)

    def setReturnTemperatureDifference(self, returnTemperatureDifference: "double") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setReturnTemperatureDifference(self, returnTemperatureDifference)

    def resetReturnTemperatureDifference(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetReturnTemperatureDifference(self)

    def setReturnTemperatureDifferenceSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setReturnTemperatureDifferenceSchedule(self, schedule)

    def resetReturnTemperatureDifferenceSchedule(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetReturnTemperatureDifferenceSchedule(self)

    def getWattsperUnit(self, floorArea: "double") -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getWattsperUnit(self, floorArea)

    def getWattsperZoneFloorArea(self, floorArea: "double") -> "double":
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getWattsperZoneFloorArea(self, floorArea)

# Register ElectricEquipmentITEAirCooledDefinition in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_swigregister(ElectricEquipmentITEAirCooledDefinition)

def ElectricEquipmentITEAirCooledDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_iddObjectType()

def ElectricEquipmentITEAirCooledDefinition_validAirFlowCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirFlowCalculationMethodValues()

def ElectricEquipmentITEAirCooledDefinition_validDesignPowerInputCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validDesignPowerInputCalculationMethodValues()

def ElectricEquipmentITEAirCooledDefinition_validEnvironmentalClassValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validEnvironmentalClassValues()

def ElectricEquipmentITEAirCooledDefinition_validAirInletConnectionTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirInletConnectionTypeValues()


def toElectricEquipmentITEAirCooledDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ElectricEquipmentITEAirCooledDefinition >":
    return _openstudiomodelresources.toElectricEquipmentITEAirCooledDefinition(idfObject)

def getElectricEquipmentITEAirCooledDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ElectricEquipmentITEAirCooledDefinition >":
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinition(t_model, t_handle)

def getElectricEquipmentITEAirCooledDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition,std::allocator< openstudio::model::ElectricEquipmentITEAirCooledDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitions(t_model)

def getElectricEquipmentITEAirCooledDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ElectricEquipmentITEAirCooledDefinition >":
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitionByName(t_model, t_name)

def getElectricEquipmentITEAirCooledDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ElectricEquipmentITEAirCooledDefinition,std::allocator< openstudio::model::ElectricEquipmentITEAirCooledDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipmentITEAirCooledDefinition(self) -> OptionalElectricEquipmentITEAirCooledDefinition:
    return toElectricEquipmentITEAirCooledDefinition(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipmentITEAirCooledDefinition = _to_ElectricEquipmentITEAirCooledDefinition

def _getElectricEquipmentITEAirCooledDefinition(self, t_handle: "UUID") -> OptionalElectricEquipmentITEAirCooledDefinition:
    return getElectricEquipmentITEAirCooledDefinition(self, t_handle)
Model.getElectricEquipmentITEAirCooledDefinition = _getElectricEquipmentITEAirCooledDefinition

def _getElectricEquipmentITEAirCooledDefinition(self, t_handle_str: str) -> OptionalElectricEquipmentITEAirCooledDefinition:
    return getElectricEquipmentITEAirCooledDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getElectricEquipmentITEAirCooledDefinition = _getElectricEquipmentITEAirCooledDefinition

def _getElectricEquipmentITEAirCooledDefinitions(self) -> ElectricEquipmentITEAirCooledDefinitionVector:
    return getElectricEquipmentITEAirCooledDefinitions(self)
Model.getElectricEquipmentITEAirCooledDefinitions = _getElectricEquipmentITEAirCooledDefinitions

def _getElectricEquipmentITEAirCooledDefinitionByName(self, t_name: str) -> OptionalElectricEquipmentITEAirCooledDefinition:
    return getElectricEquipmentITEAirCooledDefinitionByName(self, t_name)
Model.getElectricEquipmentITEAirCooledDefinitionByName = _getElectricEquipmentITEAirCooledDefinitionByName

def _getElectricEquipmentITEAirCooledDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentITEAirCooledDefinitionVector:
    return getElectricEquipmentITEAirCooledDefinitionsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentITEAirCooledDefinitionsByName = _getElectricEquipmentITEAirCooledDefinitionsByName

class GasEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.GasEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_GasEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.GasEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.GasEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLostDefaulted(self)

    def carbonDioxideGenerationRate(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLost(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetCarbonDioxideGenerationRate(self)

    def getDesignLevel(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register GasEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.GasEquipmentDefinition_swigregister(GasEquipmentDefinition)

def GasEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.GasEquipmentDefinition_iddObjectType()

def GasEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues()


def toGasEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.toGasEquipmentDefinition(idfObject)

def getGasEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.getGasEquipmentDefinition(t_model, t_handle)

def getGasEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > >":
    return _openstudiomodelresources.getGasEquipmentDefinitions(t_model)

def getGasEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.getGasEquipmentDefinitionByName(t_model, t_name)

def getGasEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > >":
    return _openstudiomodelresources.getGasEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_GasEquipmentDefinition(self) -> OptionalGasEquipmentDefinition:
    return toGasEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_GasEquipmentDefinition = _to_GasEquipmentDefinition

def _getGasEquipmentDefinition(self, t_handle: "UUID") -> OptionalGasEquipmentDefinition:
    return getGasEquipmentDefinition(self, t_handle)
Model.getGasEquipmentDefinition = _getGasEquipmentDefinition

def _getGasEquipmentDefinition(self, t_handle_str: str) -> OptionalGasEquipmentDefinition:
    return getGasEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGasEquipmentDefinition = _getGasEquipmentDefinition

def _getGasEquipmentDefinitions(self) -> GasEquipmentDefinitionVector:
    return getGasEquipmentDefinitions(self)
Model.getGasEquipmentDefinitions = _getGasEquipmentDefinitions

def _getGasEquipmentDefinitionByName(self, t_name: str) -> OptionalGasEquipmentDefinition:
    return getGasEquipmentDefinitionByName(self, t_name)
Model.getGasEquipmentDefinitionByName = _getGasEquipmentDefinitionByName

def _getGasEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> GasEquipmentDefinitionVector:
    return getGasEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getGasEquipmentDefinitionsByName = _getGasEquipmentDefinitionsByName

class HotWaterEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.HotWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_HotWaterEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register HotWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.HotWaterEquipmentDefinition_swigregister(HotWaterEquipmentDefinition)

def HotWaterEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType()

def HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues()


def toHotWaterEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.toHotWaterEquipmentDefinition(idfObject)

def getHotWaterEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinition(t_model, t_handle)

def getHotWaterEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitions(t_model)

def getHotWaterEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionByName(t_model, t_name)

def getHotWaterEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_HotWaterEquipmentDefinition(self) -> OptionalHotWaterEquipmentDefinition:
    return toHotWaterEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_HotWaterEquipmentDefinition = _to_HotWaterEquipmentDefinition

def _getHotWaterEquipmentDefinition(self, t_handle: "UUID") -> OptionalHotWaterEquipmentDefinition:
    return getHotWaterEquipmentDefinition(self, t_handle)
Model.getHotWaterEquipmentDefinition = _getHotWaterEquipmentDefinition

def _getHotWaterEquipmentDefinition(self, t_handle_str: str) -> OptionalHotWaterEquipmentDefinition:
    return getHotWaterEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHotWaterEquipmentDefinition = _getHotWaterEquipmentDefinition

def _getHotWaterEquipmentDefinitions(self) -> HotWaterEquipmentDefinitionVector:
    return getHotWaterEquipmentDefinitions(self)
Model.getHotWaterEquipmentDefinitions = _getHotWaterEquipmentDefinitions

def _getHotWaterEquipmentDefinitionByName(self, t_name: str) -> OptionalHotWaterEquipmentDefinition:
    return getHotWaterEquipmentDefinitionByName(self, t_name)
Model.getHotWaterEquipmentDefinitionByName = _getHotWaterEquipmentDefinitionByName

def _getHotWaterEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> HotWaterEquipmentDefinitionVector:
    return getHotWaterEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getHotWaterEquipmentDefinitionsByName = _getHotWaterEquipmentDefinitionsByName

class SteamEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.SteamEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_SteamEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register SteamEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.SteamEquipmentDefinition_swigregister(SteamEquipmentDefinition)

def SteamEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType()

def SteamEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues()


def toSteamEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.toSteamEquipmentDefinition(idfObject)

def getSteamEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.getSteamEquipmentDefinition(t_model, t_handle)

def getSteamEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > >":
    return _openstudiomodelresources.getSteamEquipmentDefinitions(t_model)

def getSteamEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.getSteamEquipmentDefinitionByName(t_model, t_name)

def getSteamEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > >":
    return _openstudiomodelresources.getSteamEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_SteamEquipmentDefinition(self) -> OptionalSteamEquipmentDefinition:
    return toSteamEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_SteamEquipmentDefinition = _to_SteamEquipmentDefinition

def _getSteamEquipmentDefinition(self, t_handle: "UUID") -> OptionalSteamEquipmentDefinition:
    return getSteamEquipmentDefinition(self, t_handle)
Model.getSteamEquipmentDefinition = _getSteamEquipmentDefinition

def _getSteamEquipmentDefinition(self, t_handle_str: str) -> OptionalSteamEquipmentDefinition:
    return getSteamEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSteamEquipmentDefinition = _getSteamEquipmentDefinition

def _getSteamEquipmentDefinitions(self) -> SteamEquipmentDefinitionVector:
    return getSteamEquipmentDefinitions(self)
Model.getSteamEquipmentDefinitions = _getSteamEquipmentDefinitions

def _getSteamEquipmentDefinitionByName(self, t_name: str) -> OptionalSteamEquipmentDefinition:
    return getSteamEquipmentDefinitionByName(self, t_name)
Model.getSteamEquipmentDefinitionByName = _getSteamEquipmentDefinitionByName

def _getSteamEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> SteamEquipmentDefinitionVector:
    return getSteamEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getSteamEquipmentDefinitionsByName = _getSteamEquipmentDefinitionsByName

class OtherEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.OtherEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OtherEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register OtherEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OtherEquipmentDefinition_swigregister(OtherEquipmentDefinition)

def OtherEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType()

def OtherEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues()


def toOtherEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.toOtherEquipmentDefinition(idfObject)

def getOtherEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.getOtherEquipmentDefinition(t_model, t_handle)

def getOtherEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > >":
    return _openstudiomodelresources.getOtherEquipmentDefinitions(t_model)

def getOtherEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.getOtherEquipmentDefinitionByName(t_model, t_name)

def getOtherEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > >":
    return _openstudiomodelresources.getOtherEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_OtherEquipmentDefinition(self) -> OptionalOtherEquipmentDefinition:
    return toOtherEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_OtherEquipmentDefinition = _to_OtherEquipmentDefinition

def _getOtherEquipmentDefinition(self, t_handle: "UUID") -> OptionalOtherEquipmentDefinition:
    return getOtherEquipmentDefinition(self, t_handle)
Model.getOtherEquipmentDefinition = _getOtherEquipmentDefinition

def _getOtherEquipmentDefinition(self, t_handle_str: str) -> OptionalOtherEquipmentDefinition:
    return getOtherEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getOtherEquipmentDefinition = _getOtherEquipmentDefinition

def _getOtherEquipmentDefinitions(self) -> OtherEquipmentDefinitionVector:
    return getOtherEquipmentDefinitions(self)
Model.getOtherEquipmentDefinitions = _getOtherEquipmentDefinitions

def _getOtherEquipmentDefinitionByName(self, t_name: str) -> OptionalOtherEquipmentDefinition:
    return getOtherEquipmentDefinitionByName(self, t_name)
Model.getOtherEquipmentDefinitionByName = _getOtherEquipmentDefinitionByName

def _getOtherEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> OtherEquipmentDefinitionVector:
    return getOtherEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getOtherEquipmentDefinitionsByName = _getOtherEquipmentDefinitionsByName

class InternalMassDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.InternalMassDefinition_swiginit(self, _openstudiomodelresources.new_InternalMassDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.InternalMassDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues()

    def construction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.InternalMassDefinition_construction(self)

    def isConstructionDefaulted(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_isConstructionDefaulted(self)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.InternalMassDefinition_designLevelCalculationMethod(self)

    def surfaceArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceArea(self)

    def surfaceAreaperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperSpaceFloorArea(self)

    def surfaceAreaperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperPerson(self)

    def setConstruction(self, construction: "ConstructionBase") -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setConstruction(self, construction)

    def resetConstruction(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinition_resetConstruction(self)

    def setSurfaceArea(self, surfaceArea: "double") -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceArea(self, surfaceArea)

    def setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea: "double") -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea)

    def setSurfaceAreaperPerson(self, surfaceAreaperPerson: "double") -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperPerson(self, surfaceAreaperPerson)

    def getSurfaceArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceArea(self, floorArea, numPeople)

    def getSurfaceAreaPerFloorArea(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerFloorArea(self, floorArea, numPeople)

    def getSurfaceAreaPerPerson(self, floorArea: "double", numPeople: "double") -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: "std::string const &", floorArea: "double", numPeople: "double") -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register InternalMassDefinition in _openstudiomodelresources:
_openstudiomodelresources.InternalMassDefinition_swigregister(InternalMassDefinition)

def InternalMassDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.InternalMassDefinition_iddObjectType()

def InternalMassDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues()


def toInternalMassDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.toInternalMassDefinition(idfObject)

def getInternalMassDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.getInternalMassDefinition(t_model, t_handle)

def getInternalMassDefinitions(t_model: "Model") -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > >":
    return _openstudiomodelresources.getInternalMassDefinitions(t_model)

def getInternalMassDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.getInternalMassDefinitionByName(t_model, t_name)

def getInternalMassDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > >":
    return _openstudiomodelresources.getInternalMassDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_InternalMassDefinition(self) -> OptionalInternalMassDefinition:
    return toInternalMassDefinition(self)
openstudioutilitiesidf.IdfObject.to_InternalMassDefinition = _to_InternalMassDefinition

def _getInternalMassDefinition(self, t_handle: "UUID") -> OptionalInternalMassDefinition:
    return getInternalMassDefinition(self, t_handle)
Model.getInternalMassDefinition = _getInternalMassDefinition

def _getInternalMassDefinition(self, t_handle_str: str) -> OptionalInternalMassDefinition:
    return getInternalMassDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getInternalMassDefinition = _getInternalMassDefinition

def _getInternalMassDefinitions(self) -> InternalMassDefinitionVector:
    return getInternalMassDefinitions(self)
Model.getInternalMassDefinitions = _getInternalMassDefinitions

def _getInternalMassDefinitionByName(self, t_name: str) -> OptionalInternalMassDefinition:
    return getInternalMassDefinitionByName(self, t_name)
Model.getInternalMassDefinitionByName = _getInternalMassDefinitionByName

def _getInternalMassDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> InternalMassDefinitionVector:
    return getInternalMassDefinitionsByName(self, t_name, t_exactMatch)
Model.getInternalMassDefinitionsByName = _getInternalMassDefinitionsByName

class ExteriorLoadDefinition(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinition

    def instances(self) -> "std::vector< openstudio::model::ExteriorLoadInstance,std::allocator< openstudio::model::ExteriorLoadInstance > >":
        return _openstudiomodelresources.ExteriorLoadDefinition_instances(self)

    def quantity(self) -> "int":
        return _openstudiomodelresources.ExteriorLoadDefinition_quantity(self)

# Register ExteriorLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLoadDefinition_swigregister(ExteriorLoadDefinition)


def toExteriorLoadDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.toExteriorLoadDefinition(idfObject)

def getExteriorLoadDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.getExteriorLoadDefinition(t_model, t_handle)

def getExteriorLoadDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > >":
    return _openstudiomodelresources.getExteriorLoadDefinitions(t_model)

def getExteriorLoadDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.getExteriorLoadDefinitionByName(t_model, t_name)

def getExteriorLoadDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > >":
    return _openstudiomodelresources.getExteriorLoadDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLoadDefinition(self) -> OptionalExteriorLoadDefinition:
    return toExteriorLoadDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLoadDefinition = _to_ExteriorLoadDefinition

def _getExteriorLoadDefinition(self, t_handle: "UUID") -> OptionalExteriorLoadDefinition:
    return getExteriorLoadDefinition(self, t_handle)
Model.getExteriorLoadDefinition = _getExteriorLoadDefinition

def _getExteriorLoadDefinition(self, t_handle_str: str) -> OptionalExteriorLoadDefinition:
    return getExteriorLoadDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExteriorLoadDefinition = _getExteriorLoadDefinition

def _getExteriorLoadDefinitions(self) -> ExteriorLoadDefinitionVector:
    return getExteriorLoadDefinitions(self)
Model.getExteriorLoadDefinitions = _getExteriorLoadDefinitions

def _getExteriorLoadDefinitionByName(self, t_name: str) -> OptionalExteriorLoadDefinition:
    return getExteriorLoadDefinitionByName(self, t_name)
Model.getExteriorLoadDefinitionByName = _getExteriorLoadDefinitionByName

def _getExteriorLoadDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLoadDefinitionVector:
    return getExteriorLoadDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorLoadDefinitionsByName = _getExteriorLoadDefinitionsByName

class ExteriorLightsDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ExteriorLightsDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorLightsDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType()

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorLightsDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinition_setDesignLevel(self, designLevel)

# Register ExteriorLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLightsDefinition_swigregister(ExteriorLightsDefinition)

def ExteriorLightsDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType()


def toExteriorLightsDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.toExteriorLightsDefinition(idfObject)

def getExteriorLightsDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.getExteriorLightsDefinition(t_model, t_handle)

def getExteriorLightsDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > >":
    return _openstudiomodelresources.getExteriorLightsDefinitions(t_model)

def getExteriorLightsDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.getExteriorLightsDefinitionByName(t_model, t_name)

def getExteriorLightsDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > >":
    return _openstudiomodelresources.getExteriorLightsDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLightsDefinition(self) -> OptionalExteriorLightsDefinition:
    return toExteriorLightsDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLightsDefinition = _to_ExteriorLightsDefinition

def _getExteriorLightsDefinition(self, t_handle: "UUID") -> OptionalExteriorLightsDefinition:
    return getExteriorLightsDefinition(self, t_handle)
Model.getExteriorLightsDefinition = _getExteriorLightsDefinition

def _getExteriorLightsDefinition(self, t_handle_str: str) -> OptionalExteriorLightsDefinition:
    return getExteriorLightsDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExteriorLightsDefinition = _getExteriorLightsDefinition

def _getExteriorLightsDefinitions(self) -> ExteriorLightsDefinitionVector:
    return getExteriorLightsDefinitions(self)
Model.getExteriorLightsDefinitions = _getExteriorLightsDefinitions

def _getExteriorLightsDefinitionByName(self, t_name: str) -> OptionalExteriorLightsDefinition:
    return getExteriorLightsDefinitionByName(self, t_name)
Model.getExteriorLightsDefinitionByName = _getExteriorLightsDefinitionByName

def _getExteriorLightsDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLightsDefinitionVector:
    return getExteriorLightsDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorLightsDefinitionsByName = _getExteriorLightsDefinitionsByName

class ExteriorFuelEquipmentDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ExteriorFuelEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorFuelEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType()

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_setDesignLevel(self, designLevel)

# Register ExteriorFuelEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorFuelEquipmentDefinition_swigregister(ExteriorFuelEquipmentDefinition)

def ExteriorFuelEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType()


def toExteriorFuelEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.toExteriorFuelEquipmentDefinition(idfObject)

def getExteriorFuelEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinition(t_model, t_handle)

def getExteriorFuelEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitions(t_model)

def getExteriorFuelEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionByName(t_model, t_name)

def getExteriorFuelEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorFuelEquipmentDefinition(self) -> OptionalExteriorFuelEquipmentDefinition:
    return toExteriorFuelEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorFuelEquipmentDefinition = _to_ExteriorFuelEquipmentDefinition

def _getExteriorFuelEquipmentDefinition(self, t_handle: "UUID") -> OptionalExteriorFuelEquipmentDefinition:
    return getExteriorFuelEquipmentDefinition(self, t_handle)
Model.getExteriorFuelEquipmentDefinition = _getExteriorFuelEquipmentDefinition

def _getExteriorFuelEquipmentDefinition(self, t_handle_str: str) -> OptionalExteriorFuelEquipmentDefinition:
    return getExteriorFuelEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExteriorFuelEquipmentDefinition = _getExteriorFuelEquipmentDefinition

def _getExteriorFuelEquipmentDefinitions(self) -> ExteriorFuelEquipmentDefinitionVector:
    return getExteriorFuelEquipmentDefinitions(self)
Model.getExteriorFuelEquipmentDefinitions = _getExteriorFuelEquipmentDefinitions

def _getExteriorFuelEquipmentDefinitionByName(self, t_name: str) -> OptionalExteriorFuelEquipmentDefinition:
    return getExteriorFuelEquipmentDefinitionByName(self, t_name)
Model.getExteriorFuelEquipmentDefinitionByName = _getExteriorFuelEquipmentDefinitionByName

def _getExteriorFuelEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorFuelEquipmentDefinitionVector:
    return getExteriorFuelEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorFuelEquipmentDefinitionsByName = _getExteriorFuelEquipmentDefinitionsByName

class ExteriorWaterEquipmentDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.ExteriorWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorWaterEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType()

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: "double") -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_setDesignLevel(self, designLevel)

# Register ExteriorWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorWaterEquipmentDefinition_swigregister(ExteriorWaterEquipmentDefinition)

def ExteriorWaterEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType()


def toExteriorWaterEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.toExteriorWaterEquipmentDefinition(idfObject)

def getExteriorWaterEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinition(t_model, t_handle)

def getExteriorWaterEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitions(t_model)

def getExteriorWaterEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionByName(t_model, t_name)

def getExteriorWaterEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorWaterEquipmentDefinition(self) -> OptionalExteriorWaterEquipmentDefinition:
    return toExteriorWaterEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorWaterEquipmentDefinition = _to_ExteriorWaterEquipmentDefinition

def _getExteriorWaterEquipmentDefinition(self, t_handle: "UUID") -> OptionalExteriorWaterEquipmentDefinition:
    return getExteriorWaterEquipmentDefinition(self, t_handle)
Model.getExteriorWaterEquipmentDefinition = _getExteriorWaterEquipmentDefinition

def _getExteriorWaterEquipmentDefinition(self, t_handle_str: str) -> OptionalExteriorWaterEquipmentDefinition:
    return getExteriorWaterEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExteriorWaterEquipmentDefinition = _getExteriorWaterEquipmentDefinition

def _getExteriorWaterEquipmentDefinitions(self) -> ExteriorWaterEquipmentDefinitionVector:
    return getExteriorWaterEquipmentDefinitions(self)
Model.getExteriorWaterEquipmentDefinitions = _getExteriorWaterEquipmentDefinitions

def _getExteriorWaterEquipmentDefinitionByName(self, t_name: str) -> OptionalExteriorWaterEquipmentDefinition:
    return getExteriorWaterEquipmentDefinitionByName(self, t_name)
Model.getExteriorWaterEquipmentDefinitionByName = _getExteriorWaterEquipmentDefinitionByName

def _getExteriorWaterEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorWaterEquipmentDefinitionVector:
    return getExteriorWaterEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorWaterEquipmentDefinitionsByName = _getExteriorWaterEquipmentDefinitionsByName

class ColorRGB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r: "int", g: "int", b: "int"):
        _openstudiomodelresources.ColorRGB_swiginit(self, _openstudiomodelresources.new_ColorRGB(r, g, b))

    def red(self) -> "int":
        return _openstudiomodelresources.ColorRGB_red(self)

    def green(self) -> "int":
        return _openstudiomodelresources.ColorRGB_green(self)

    def blue(self) -> "int":
        return _openstudiomodelresources.ColorRGB_blue(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ColorRGB

# Register ColorRGB in _openstudiomodelresources:
_openstudiomodelresources.ColorRGB_swigregister(ColorRGB)

class RenderingColor(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.RenderingColor_swiginit(self, _openstudiomodelresources.new_RenderingColor(model))
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColor

    @staticmethod
    def fromColorString(s: "std::string const &", model: "Model") -> "boost::optional< openstudio::model::RenderingColor >":
        return _openstudiomodelresources.RenderingColor_fromColorString(s, model)

    @staticmethod
    def randomColor() -> "openstudio::model::ColorRGB":
        return _openstudiomodelresources.RenderingColor_randomColor()

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.RenderingColor_iddObjectType()

    def renderingRedValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingRedValue(self)

    def renderingGreenValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingGreenValue(self)

    def renderingBlueValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingBlueValue(self)

    def renderingAlphaValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingAlphaValue(self)

    def isRenderingAlphaValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.RenderingColor_isRenderingAlphaValueDefaulted(self)

    def setRenderingRedValue(self, renderingRedValue: "int") -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingRedValue(self, renderingRedValue)

    def setRenderingGreenValue(self, renderingGreenValue: "int") -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingGreenValue(self, renderingGreenValue)

    def setRenderingBlueValue(self, renderingBlueValue: "int") -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingBlueValue(self, renderingBlueValue)

    def setRenderingAlphaValue(self, renderingAlphaValue: "int") -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingAlphaValue(self, renderingAlphaValue)

    def resetRenderingAlphaValue(self) -> "void":
        return _openstudiomodelresources.RenderingColor_resetRenderingAlphaValue(self)

    def colorString(self) -> "std::string":
        return _openstudiomodelresources.RenderingColor_colorString(self)

# Register RenderingColor in _openstudiomodelresources:
_openstudiomodelresources.RenderingColor_swigregister(RenderingColor)

def RenderingColor_fromColorString(s: "std::string const &", model: "Model") -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.RenderingColor_fromColorString(s, model)

def RenderingColor_randomColor() -> "openstudio::model::ColorRGB":
    return _openstudiomodelresources.RenderingColor_randomColor()

def RenderingColor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RenderingColor_iddObjectType()


def toRenderingColor(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.toRenderingColor(idfObject)

def getRenderingColor(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.getRenderingColor(t_model, t_handle)

def getRenderingColors(t_model: "Model") -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > >":
    return _openstudiomodelresources.getRenderingColors(t_model)

def getRenderingColorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.getRenderingColorByName(t_model, t_name)

def getRenderingColorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > >":
    return _openstudiomodelresources.getRenderingColorsByName(t_model, t_name, t_exactMatch)

def _to_RenderingColor(self) -> OptionalRenderingColor:
    return toRenderingColor(self)
openstudioutilitiesidf.IdfObject.to_RenderingColor = _to_RenderingColor

def _getRenderingColor(self, t_handle: "UUID") -> OptionalRenderingColor:
    return getRenderingColor(self, t_handle)
Model.getRenderingColor = _getRenderingColor

def _getRenderingColor(self, t_handle_str: str) -> OptionalRenderingColor:
    return getRenderingColor(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getRenderingColor = _getRenderingColor

def _getRenderingColors(self) -> RenderingColorVector:
    return getRenderingColors(self)
Model.getRenderingColors = _getRenderingColors

def _getRenderingColorByName(self, t_name: str) -> OptionalRenderingColor:
    return getRenderingColorByName(self, t_name)
Model.getRenderingColorByName = _getRenderingColorByName

def _getRenderingColorsByName(self, t_name: str, t_exactMatch: bool) -> RenderingColorVector:
    return getRenderingColorsByName(self, t_name, t_exactMatch)
Model.getRenderingColorsByName = _getRenderingColorsByName

class DesignSpecificationOutdoorAir(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.DesignSpecificationOutdoorAir_swiginit(self, _openstudiomodelresources.new_DesignSpecificationOutdoorAir(model))
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAir

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType()

    @staticmethod
    def outdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues()

    @staticmethod
    def validOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues()

    def outdoorAirMethod(self) -> "std::string":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethod(self)

    def isOutdoorAirMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirMethodDefaulted(self)

    def outdoorAirFlowperPerson(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperPerson(self)

    def isOutdoorAirFlowperPersonDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperPersonDefaulted(self)

    def outdoorAirFlowperFloorArea(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperFloorArea(self)

    def isOutdoorAirFlowperFloorAreaDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperFloorAreaDefaulted(self)

    def outdoorAirFlowRate(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRate(self)

    def isOutdoorAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowRateDefaulted(self)

    def outdoorAirFlowAirChangesperHour(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowAirChangesperHour(self)

    def isOutdoorAirFlowAirChangesperHourDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowAirChangesperHourDefaulted(self)

    def outdoorAirFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRateFractionSchedule(self)

    def setOutdoorAirMethod(self, outdoorAirMethod: "std::string") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirMethod(self, outdoorAirMethod)

    def resetOutdoorAirMethod(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirMethod(self)

    def setOutdoorAirFlowperPerson(self, outdoorAirFlowperPerson: "double") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperPerson(self, outdoorAirFlowperPerson)

    def resetOutdoorAirFlowperPerson(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperPerson(self)

    def setOutdoorAirFlowperFloorArea(self, outdoorAirFlowperFloorArea: "double") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperFloorArea(self, outdoorAirFlowperFloorArea)

    def resetOutdoorAirFlowperFloorArea(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperFloorArea(self)

    def setOutdoorAirFlowRate(self, outdoorAirFlowRate: "double") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRate(self, outdoorAirFlowRate)

    def resetOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRate(self)

    def setOutdoorAirFlowAirChangesperHour(self, outdoorAirFlowAirChangesperHour: "double") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowAirChangesperHour(self, outdoorAirFlowAirChangesperHour)

    def resetOutdoorAirFlowAirChangesperHour(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowAirChangesperHour(self)

    def setOutdoorAirFlowRateFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRateFractionSchedule(self, schedule)

    def resetOutdoorAirFlowRateFractionSchedule(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRateFractionSchedule(self)

# Register DesignSpecificationOutdoorAir in _openstudiomodelresources:
_openstudiomodelresources.DesignSpecificationOutdoorAir_swigregister(DesignSpecificationOutdoorAir)

def DesignSpecificationOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType()

def DesignSpecificationOutdoorAir_outdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues()

def DesignSpecificationOutdoorAir_validOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues()


def toDesignSpecificationOutdoorAir(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.toDesignSpecificationOutdoorAir(idfObject)

def getDesignSpecificationOutdoorAir(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAir(t_model, t_handle)

def getDesignSpecificationOutdoorAirs(t_model: "Model") -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirs(t_model)

def getDesignSpecificationOutdoorAirByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirByName(t_model, t_name)

def getDesignSpecificationOutdoorAirsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirsByName(t_model, t_name, t_exactMatch)

def _to_DesignSpecificationOutdoorAir(self) -> OptionalDesignSpecificationOutdoorAir:
    return toDesignSpecificationOutdoorAir(self)
openstudioutilitiesidf.IdfObject.to_DesignSpecificationOutdoorAir = _to_DesignSpecificationOutdoorAir

def _getDesignSpecificationOutdoorAir(self, t_handle: "UUID") -> OptionalDesignSpecificationOutdoorAir:
    return getDesignSpecificationOutdoorAir(self, t_handle)
Model.getDesignSpecificationOutdoorAir = _getDesignSpecificationOutdoorAir

def _getDesignSpecificationOutdoorAir(self, t_handle_str: str) -> OptionalDesignSpecificationOutdoorAir:
    return getDesignSpecificationOutdoorAir(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDesignSpecificationOutdoorAir = _getDesignSpecificationOutdoorAir

def _getDesignSpecificationOutdoorAirs(self) -> DesignSpecificationOutdoorAirVector:
    return getDesignSpecificationOutdoorAirs(self)
Model.getDesignSpecificationOutdoorAirs = _getDesignSpecificationOutdoorAirs

def _getDesignSpecificationOutdoorAirByName(self, t_name: str) -> OptionalDesignSpecificationOutdoorAir:
    return getDesignSpecificationOutdoorAirByName(self, t_name)
Model.getDesignSpecificationOutdoorAirByName = _getDesignSpecificationOutdoorAirByName

def _getDesignSpecificationOutdoorAirsByName(self, t_name: str, t_exactMatch: bool) -> DesignSpecificationOutdoorAirVector:
    return getDesignSpecificationOutdoorAirsByName(self, t_name, t_exactMatch)
Model.getDesignSpecificationOutdoorAirsByName = _getDesignSpecificationOutdoorAirsByName

class CoilCoolingDXCurveFitPerformance(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", baseOperatingMode: "CoilCoolingDXCurveFitOperatingMode"):
        _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitPerformance(model, baseOperatingMode))
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitPerformance

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_iddObjectType()

    @staticmethod
    def capacityControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_capacityControlMethodValues()

    @staticmethod
    def compressorFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_compressorFuelTypeValues()

    @staticmethod
    def validCapacityControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCapacityControlMethodValues()

    @staticmethod
    def validCompressorFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCompressorFuelTypeValues()

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_crankcaseHeaterCapacity(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def unitInternalStaticAirPressure(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_unitInternalStaticAirPressure(self)

    def capacityControlMethod(self) -> "std::string":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_capacityControlMethod(self)

    def evaporativeCondenserBasinHeaterCapacity(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterCapacity(self)

    def evaporativeCondenserBasinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterSetpointTemperature(self)

    def evaporativeCondenserBasinHeaterOperatingSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterOperatingSchedule(self)

    def compressorFuelType(self) -> "std::string":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_compressorFuelType(self)

    def baseOperatingMode(self) -> "openstudio::model::CoilCoolingDXCurveFitOperatingMode":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_baseOperatingMode(self)

    def alternativeOperatingMode1(self) -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitOperatingMode >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_alternativeOperatingMode1(self)

    def alternativeOperatingMode2(self) -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitOperatingMode >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_alternativeOperatingMode2(self)

    def coilCoolingDXs(self) -> "std::vector< openstudio::model::CoilCoolingDX,std::allocator< openstudio::model::CoilCoolingDX > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_coilCoolingDXs(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure)

    def setCapacityControlMethod(self, capacityControlMethod: "std::string const &") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCapacityControlMethod(self, capacityControlMethod)

    def setEvaporativeCondenserBasinHeaterCapacity(self, evaporativeCondenserBasinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterCapacity(self, evaporativeCondenserBasinHeaterCapacity)

    def setEvaporativeCondenserBasinHeaterSetpointTemperature(self, evaporativeCondenserBasinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterSetpointTemperature(self, evaporativeCondenserBasinHeaterSetpointTemperature)

    def setEvaporativeCondenserBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterOperatingSchedule(self, schedule)

    def setCompressorFuelType(self, compressorFuelType: "std::string const &") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCompressorFuelType(self, compressorFuelType)

    def setBaseOperatingMode(self, baseOperatingMode: "CoilCoolingDXCurveFitOperatingMode") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setBaseOperatingMode(self, baseOperatingMode)

    def setAlternativeOperatingMode1(self, alternativeOperatingMode1: "CoilCoolingDXCurveFitOperatingMode") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setAlternativeOperatingMode1(self, alternativeOperatingMode1)

    def resetAlternativeOperatingMode1(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_resetAlternativeOperatingMode1(self)

    def setAlternativeOperatingMode2(self, alternativeOperatingMode2: "CoilCoolingDXCurveFitOperatingMode") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setAlternativeOperatingMode2(self, alternativeOperatingMode2)

    def resetAlternativeOperatingMode2(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_resetAlternativeOperatingMode2(self)

# Register CoilCoolingDXCurveFitPerformance in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitPerformance_swigregister(CoilCoolingDXCurveFitPerformance)

def CoilCoolingDXCurveFitPerformance_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_iddObjectType()

def CoilCoolingDXCurveFitPerformance_capacityControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_capacityControlMethodValues()

def CoilCoolingDXCurveFitPerformance_compressorFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_compressorFuelTypeValues()

def CoilCoolingDXCurveFitPerformance_validCapacityControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCapacityControlMethodValues()

def CoilCoolingDXCurveFitPerformance_validCompressorFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCompressorFuelTypeValues()


def toCoilCoolingDXCurveFitPerformance(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitPerformance >":
    return _openstudiomodelresources.toCoilCoolingDXCurveFitPerformance(idfObject)

def getCoilCoolingDXCurveFitPerformance(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitPerformance >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformance(t_model, t_handle)

def getCoilCoolingDXCurveFitPerformances(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance,std::allocator< openstudio::model::CoilCoolingDXCurveFitPerformance > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformances(t_model)

def getCoilCoolingDXCurveFitPerformanceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitPerformance >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformanceByName(t_model, t_name)

def getCoilCoolingDXCurveFitPerformancesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance,std::allocator< openstudio::model::CoilCoolingDXCurveFitPerformance > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformancesByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitPerformance(self) -> OptionalCoilCoolingDXCurveFitPerformance:
    return toCoilCoolingDXCurveFitPerformance(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitPerformance = _to_CoilCoolingDXCurveFitPerformance

def _getCoilCoolingDXCurveFitPerformance(self, t_handle: "UUID") -> OptionalCoilCoolingDXCurveFitPerformance:
    return getCoilCoolingDXCurveFitPerformance(self, t_handle)
Model.getCoilCoolingDXCurveFitPerformance = _getCoilCoolingDXCurveFitPerformance

def _getCoilCoolingDXCurveFitPerformance(self, t_handle_str: str) -> OptionalCoilCoolingDXCurveFitPerformance:
    return getCoilCoolingDXCurveFitPerformance(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXCurveFitPerformance = _getCoilCoolingDXCurveFitPerformance

def _getCoilCoolingDXCurveFitPerformances(self) -> CoilCoolingDXCurveFitPerformanceVector:
    return getCoilCoolingDXCurveFitPerformances(self)
Model.getCoilCoolingDXCurveFitPerformances = _getCoilCoolingDXCurveFitPerformances

def _getCoilCoolingDXCurveFitPerformanceByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitPerformance:
    return getCoilCoolingDXCurveFitPerformanceByName(self, t_name)
Model.getCoilCoolingDXCurveFitPerformanceByName = _getCoilCoolingDXCurveFitPerformanceByName

def _getCoilCoolingDXCurveFitPerformancesByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitPerformanceVector:
    return getCoilCoolingDXCurveFitPerformancesByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitPerformancesByName = _getCoilCoolingDXCurveFitPerformancesByName

class CoilCoolingDXCurveFitOperatingMode(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitOperatingMode(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitOperatingMode

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_iddObjectType()

    @staticmethod
    def condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_condenserTypeValues()

    def ratedGrossTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedGrossTotalCoolingCapacity(self)

    def isRatedGrossTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedGrossTotalCoolingCapacityAutosized(self)

    def ratedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedEvaporatorAirFlowRate(self)

    def isRatedEvaporatorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedEvaporatorAirFlowRateAutosized(self)

    def ratedCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedCondenserAirFlowRate(self)

    def isRatedCondenserAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedCondenserAirFlowRateAutosized(self)

    def maximumCyclingRate(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_maximumCyclingRate(self)

    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def latentCapacityTimeConstant(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_latentCapacityTimeConstant(self)

    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalTimeforCondensateRemovaltoBegin(self)

    def applyLatentDegradationtoSpeedsGreaterthan1(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_applyLatentDegradationtoSpeedsGreaterthan1(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_condenserType(self)

    def nominalEvaporativeCondenserPumpPower(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalEvaporativeCondenserPumpPower(self)

    def isNominalEvaporativeCondenserPumpPowerAutosized(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isNominalEvaporativeCondenserPumpPowerAutosized(self)

    def nominalSpeedNumber(self) -> "unsigned int":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalSpeedNumber(self)

    def isNominalSpeedNumberDefaulted(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isNominalSpeedNumberDefaulted(self)

    def setRatedGrossTotalCoolingCapacity(self, ratedGrossTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedGrossTotalCoolingCapacity(self, ratedGrossTotalCoolingCapacity)

    def autosizeRatedGrossTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedGrossTotalCoolingCapacity(self)

    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)

    def autosizeRatedEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedEvaporatorAirFlowRate(self)

    def setRatedCondenserAirFlowRate(self, ratedCondenserAirFlowRate: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedCondenserAirFlowRate(self, ratedCondenserAirFlowRate)

    def autosizeRatedCondenserAirFlowRate(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedCondenserAirFlowRate(self)

    def setMaximumCyclingRate(self, maximumCyclingRate: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setMaximumCyclingRate(self, maximumCyclingRate)

    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)

    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)

    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)

    def setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1: "bool") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1)

    def setCondenserType(self, condenserType: "std::string const &") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setCondenserType(self, condenserType)

    def setNominalEvaporativeCondenserPumpPower(self, nominalEvaporativeCondenserPumpPower: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalEvaporativeCondenserPumpPower(self, nominalEvaporativeCondenserPumpPower)

    def autosizeNominalEvaporativeCondenserPumpPower(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeNominalEvaporativeCondenserPumpPower(self)

    def setNominalSpeedNumber(self, nominalSpeedNumber: "unsigned int") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalSpeedNumber(self, nominalSpeedNumber)

    def resetNominalSpeedNumber(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_resetNominalSpeedNumber(self)

    def autosizedRatedGrossTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedGrossTotalCoolingCapacity(self)

    def autosizedRatedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedEvaporatorAirFlowRate(self)

    def autosizedRatedCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedCondenserAirFlowRate(self)

    def autosizedNominalEvaporativeCondenserPumpPower(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedNominalEvaporativeCondenserPumpPower(self)

    def autosize(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_applySizingValues(self)

    def coilCoolingDXCurveFitPerformances(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitPerformance,std::allocator< openstudio::model::CoilCoolingDXCurveFitPerformance > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_coilCoolingDXCurveFitPerformances(self)

    def speeds(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed,std::allocator< openstudio::model::CoilCoolingDXCurveFitSpeed > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_speeds(self)

    def numberOfSpeeds(self) -> "unsigned int":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_numberOfSpeeds(self)

    def speedIndex(self, speed: "CoilCoolingDXCurveFitSpeed") -> "boost::optional< unsigned int >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_speedIndex(self, speed)

    def addSpeed(self, *args) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_addSpeed(self, *args)

    def setSpeedIndex(self, speed: "CoilCoolingDXCurveFitSpeed", index: "unsigned int") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setSpeedIndex(self, speed, index)

    def setSpeeds(self, speeds: "CoilCoolingDXCurveFitSpeedVector") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setSpeeds(self, speeds)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_removeAllSpeeds(self)

    def removeSpeed(self, *args) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_removeSpeed(self, *args)

# Register CoilCoolingDXCurveFitOperatingMode in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_swigregister(CoilCoolingDXCurveFitOperatingMode)

def CoilCoolingDXCurveFitOperatingMode_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_iddObjectType()

def CoilCoolingDXCurveFitOperatingMode_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_condenserTypeValues()


def toCoilCoolingDXCurveFitOperatingMode(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitOperatingMode >":
    return _openstudiomodelresources.toCoilCoolingDXCurveFitOperatingMode(idfObject)

def getCoilCoolingDXCurveFitOperatingMode(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitOperatingMode >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingMode(t_model, t_handle)

def getCoilCoolingDXCurveFitOperatingModes(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode,std::allocator< openstudio::model::CoilCoolingDXCurveFitOperatingMode > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModes(t_model)

def getCoilCoolingDXCurveFitOperatingModeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitOperatingMode >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModeByName(t_model, t_name)

def getCoilCoolingDXCurveFitOperatingModesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode,std::allocator< openstudio::model::CoilCoolingDXCurveFitOperatingMode > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModesByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitOperatingMode(self) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    return toCoilCoolingDXCurveFitOperatingMode(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitOperatingMode = _to_CoilCoolingDXCurveFitOperatingMode

def _getCoilCoolingDXCurveFitOperatingMode(self, t_handle: "UUID") -> OptionalCoilCoolingDXCurveFitOperatingMode:
    return getCoilCoolingDXCurveFitOperatingMode(self, t_handle)
Model.getCoilCoolingDXCurveFitOperatingMode = _getCoilCoolingDXCurveFitOperatingMode

def _getCoilCoolingDXCurveFitOperatingMode(self, t_handle_str: str) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    return getCoilCoolingDXCurveFitOperatingMode(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXCurveFitOperatingMode = _getCoilCoolingDXCurveFitOperatingMode

def _getCoilCoolingDXCurveFitOperatingModes(self) -> CoilCoolingDXCurveFitOperatingModeVector:
    return getCoilCoolingDXCurveFitOperatingModes(self)
Model.getCoilCoolingDXCurveFitOperatingModes = _getCoilCoolingDXCurveFitOperatingModes

def _getCoilCoolingDXCurveFitOperatingModeByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    return getCoilCoolingDXCurveFitOperatingModeByName(self, t_name)
Model.getCoilCoolingDXCurveFitOperatingModeByName = _getCoilCoolingDXCurveFitOperatingModeByName

def _getCoilCoolingDXCurveFitOperatingModesByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitOperatingModeVector:
    return getCoilCoolingDXCurveFitOperatingModesByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitOperatingModesByName = _getCoilCoolingDXCurveFitOperatingModesByName

class CoilCoolingDXCurveFitSpeed(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitSpeed(model))
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_iddObjectType()

    def grossTotalCoolingCapacityFraction(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossTotalCoolingCapacityFraction(self)

    def evaporatorAirFlowRateFraction(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporatorAirFlowRateFraction(self)

    def condenserAirFlowRateFraction(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_condenserAirFlowRateFraction(self)

    def grossSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossSensibleHeatRatio(self)

    def isGrossSensibleHeatRatioAutosized(self) -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_isGrossSensibleHeatRatioAutosized(self)

    def grossCoolingCOP(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossCoolingCOP(self)

    def activeFractionofCoilFaceArea(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_activeFractionofCoilFaceArea(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedEvaporatorFanPowerPerVolumeFlowRate(self)

    def evaporativeCondenserPumpPowerFraction(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporativeCondenserPumpPowerFraction(self)

    def evaporativeCondenserEffectiveness(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporativeCondenserEffectiveness(self)

    def totalCoolingCapacityModifierFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_totalCoolingCapacityModifierFunctionofTemperatureCurve(self)

    def totalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_totalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self)

    def energyInputRatioModifierFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_energyInputRatioModifierFunctionofTemperatureCurve(self)

    def energyInputRatioModifierFunctionofAirFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_energyInputRatioModifierFunctionofAirFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_partLoadFractionCorrelationCurve(self)

    def wasteHeatModifierFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_wasteHeatModifierFunctionofTemperatureCurve(self)

    def ratedWasteHeatFractionofPowerInput(self) -> "double":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedWasteHeatFractionofPowerInput(self)

    def sensibleHeatRatioModifierFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_sensibleHeatRatioModifierFunctionofTemperatureCurve(self)

    def sensibleHeatRatioModifierFunctionofFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_sensibleHeatRatioModifierFunctionofFlowFractionCurve(self)

    def coilCoolingDXCurveFitOperatingModes(self) -> "std::vector< openstudio::model::CoilCoolingDXCurveFitOperatingMode,std::allocator< openstudio::model::CoilCoolingDXCurveFitOperatingMode > >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_coilCoolingDXCurveFitOperatingModes(self)

    def setGrossTotalCoolingCapacityFraction(self, grossTotalCoolingCapacityFraction: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossTotalCoolingCapacityFraction(self, grossTotalCoolingCapacityFraction)

    def setEvaporatorAirFlowRateFraction(self, evaporatorAirFlowRateFraction: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporatorAirFlowRateFraction(self, evaporatorAirFlowRateFraction)

    def setCondenserAirFlowRateFraction(self, condenserAirFlowRateFraction: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setCondenserAirFlowRateFraction(self, condenserAirFlowRateFraction)

    def setGrossSensibleHeatRatio(self, grossSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossSensibleHeatRatio(self, grossSensibleHeatRatio)

    def autosizeGrossSensibleHeatRatio(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosizeGrossSensibleHeatRatio(self)

    def setGrossCoolingCOP(self, grossCoolingCOP: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossCoolingCOP(self, grossCoolingCOP)

    def setActiveFractionofCoilFaceArea(self, activeFractionofCoilFaceArea: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setActiveFractionofCoilFaceArea(self, activeFractionofCoilFaceArea)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate)

    def setEvaporativeCondenserPumpPowerFraction(self, evaporativeCondenserPumpPowerFraction: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporativeCondenserPumpPowerFraction(self, evaporativeCondenserPumpPowerFraction)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def setTotalCoolingCapacityModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setTotalCoolingCapacityModifierFunctionofTemperatureCurve(self, curve)

    def resetTotalCoolingCapacityModifierFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetTotalCoolingCapacityModifierFunctionofTemperatureCurve(self)

    def setTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self, curve)

    def resetTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self)

    def setEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve)

    def resetEnergyInputRatioModifierFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetEnergyInputRatioModifierFunctionofTemperatureCurve(self)

    def setEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self, curve)

    def resetEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setPartLoadFractionCorrelationCurve(self, curve)

    def resetPartLoadFractionCorrelationCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetPartLoadFractionCorrelationCurve(self)

    def setWasteHeatModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setWasteHeatModifierFunctionofTemperatureCurve(self, curve)

    def resetWasteHeatModifierFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetWasteHeatModifierFunctionofTemperatureCurve(self)

    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput: "double") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)

    def setSensibleHeatRatioModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setSensibleHeatRatioModifierFunctionofTemperatureCurve(self, curve)

    def resetSensibleHeatRatioModifierFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetSensibleHeatRatioModifierFunctionofTemperatureCurve(self)

    def setSensibleHeatRatioModifierFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setSensibleHeatRatioModifierFunctionofFlowFractionCurve(self, curve)

    def resetSensibleHeatRatioModifierFunctionofFlowFractionCurve(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetSensibleHeatRatioModifierFunctionofFlowFractionCurve(self)

    def autosizedGrossSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosizedGrossSensibleHeatRatio(self)

    def autosize(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_applySizingValues(self)

# Register CoilCoolingDXCurveFitSpeed in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitSpeed_swigregister(CoilCoolingDXCurveFitSpeed)

def CoilCoolingDXCurveFitSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_iddObjectType()


def toCoilCoolingDXCurveFitSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitSpeed >":
    return _openstudiomodelresources.toCoilCoolingDXCurveFitSpeed(idfObject)

def getCoilCoolingDXCurveFitSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitSpeed >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeed(t_model, t_handle)

def getCoilCoolingDXCurveFitSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed,std::allocator< openstudio::model::CoilCoolingDXCurveFitSpeed > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeeds(t_model)

def getCoilCoolingDXCurveFitSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXCurveFitSpeed >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeedByName(t_model, t_name)

def getCoilCoolingDXCurveFitSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXCurveFitSpeed,std::allocator< openstudio::model::CoilCoolingDXCurveFitSpeed > >":
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitSpeed(self) -> OptionalCoilCoolingDXCurveFitSpeed:
    return toCoilCoolingDXCurveFitSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitSpeed = _to_CoilCoolingDXCurveFitSpeed

def _getCoilCoolingDXCurveFitSpeed(self, t_handle: "UUID") -> OptionalCoilCoolingDXCurveFitSpeed:
    return getCoilCoolingDXCurveFitSpeed(self, t_handle)
Model.getCoilCoolingDXCurveFitSpeed = _getCoilCoolingDXCurveFitSpeed

def _getCoilCoolingDXCurveFitSpeed(self, t_handle_str: str) -> OptionalCoilCoolingDXCurveFitSpeed:
    return getCoilCoolingDXCurveFitSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXCurveFitSpeed = _getCoilCoolingDXCurveFitSpeed

def _getCoilCoolingDXCurveFitSpeeds(self) -> CoilCoolingDXCurveFitSpeedVector:
    return getCoilCoolingDXCurveFitSpeeds(self)
Model.getCoilCoolingDXCurveFitSpeeds = _getCoilCoolingDXCurveFitSpeeds

def _getCoilCoolingDXCurveFitSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitSpeed:
    return getCoilCoolingDXCurveFitSpeedByName(self, t_name)
Model.getCoilCoolingDXCurveFitSpeedByName = _getCoilCoolingDXCurveFitSpeedByName

def _getCoilCoolingDXCurveFitSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitSpeedVector:
    return getCoilCoolingDXCurveFitSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitSpeedsByName = _getCoilCoolingDXCurveFitSpeedsByName

class ScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    className = property(_openstudiomodelresources.ScheduleType_className_get, _openstudiomodelresources.ScheduleType_className_set)
    scheduleDisplayName = property(_openstudiomodelresources.ScheduleType_scheduleDisplayName_get, _openstudiomodelresources.ScheduleType_scheduleDisplayName_set)
    scheduleRelationshipName = property(_openstudiomodelresources.ScheduleType_scheduleRelationshipName_get, _openstudiomodelresources.ScheduleType_scheduleRelationshipName_set)
    isContinuous = property(_openstudiomodelresources.ScheduleType_isContinuous_get, _openstudiomodelresources.ScheduleType_isContinuous_set)
    unitType = property(_openstudiomodelresources.ScheduleType_unitType_get, _openstudiomodelresources.ScheduleType_unitType_set)
    lowerLimitValue = property(_openstudiomodelresources.ScheduleType_lowerLimitValue_get, _openstudiomodelresources.ScheduleType_lowerLimitValue_set)
    upperLimitValue = property(_openstudiomodelresources.ScheduleType_upperLimitValue_get, _openstudiomodelresources.ScheduleType_upperLimitValue_set)

    def __init__(self):
        _openstudiomodelresources.ScheduleType_swiginit(self, _openstudiomodelresources.new_ScheduleType())
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleType

# Register ScheduleType in _openstudiomodelresources:
_openstudiomodelresources.ScheduleType_swigregister(ScheduleType)

class ScheduleTypeRegistrySingleton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def classNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_classNames(self)

    def getScheduleTypesByClassName(self, className: "std::string const &") -> "std::vector< openstudio::model::ScheduleType,std::allocator< openstudio::model::ScheduleType > >":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleTypesByClassName(self, className)

    def getScheduleType(self, className: "std::string const &", scheduleDisplayName: "std::string const &") -> "openstudio::model::ScheduleType":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleType(self, className, scheduleDisplayName)

    def getOrCreateScheduleTypeLimits(self, scheduleType: "ScheduleType", model: "Model") -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getOrCreateScheduleTypeLimits(self, scheduleType, model)

    def getDefaultName(self, scheduleType: "ScheduleType") -> "std::string":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getDefaultName(self, scheduleType)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleTypeRegistrySingleton

# Register ScheduleTypeRegistrySingleton in _openstudiomodelresources:
_openstudiomodelresources.ScheduleTypeRegistrySingleton_swigregister(ScheduleTypeRegistrySingleton)


def isCompatible(*args) -> "bool":
    return _openstudiomodelresources.isCompatible(*args)

def checkOrAssignScheduleTypeLimits(className: "std::string const &", scheduleDisplayName: "std::string const &", schedule: "Schedule") -> "bool":
    return _openstudiomodelresources.checkOrAssignScheduleTypeLimits(className, scheduleDisplayName, schedule)

def getCompatibleScheduleTypeLimits(model: "Model", className: "std::string const &", scheduleDisplayName: "std::string const &") -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelresources.getCompatibleScheduleTypeLimits(model, className, scheduleDisplayName)

def getCompatibleSchedules(model: "Model", className: "std::string const &", scheduleDisplayName: "std::string const &") -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelresources.getCompatibleSchedules(model, className, scheduleDisplayName)


