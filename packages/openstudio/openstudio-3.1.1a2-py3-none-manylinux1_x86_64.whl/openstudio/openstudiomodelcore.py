# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelcore
else:
    import _openstudiomodelcore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelcore.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelcore.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelcore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelcore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelcore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelcore.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelcore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelcore:
_openstudiomodelcore.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelcore.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
class ModelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Model >::difference_type", j: "std::vector< openstudio::model::Model >::difference_type") -> "std::vector< openstudio::model::Model,std::allocator< openstudio::model::Model > > *":
        return _openstudiomodelcore.ModelVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Model >::difference_type", j: "std::vector< openstudio::model::Model >::difference_type") -> "void":
        return _openstudiomodelcore.ModelVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Model >::value_type":
        return _openstudiomodelcore.ModelVector_pop(self)

    def append(self, x: "Model") -> "void":
        return _openstudiomodelcore.ModelVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector_size(self)

    def swap(self, v: "ModelVector") -> "void":
        return _openstudiomodelcore.ModelVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Model >::reverse_iterator":
        return _openstudiomodelcore.ModelVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Model >::reverse_iterator":
        return _openstudiomodelcore.ModelVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Model >::allocator_type":
        return _openstudiomodelcore.ModelVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelVector_swiginit(self, _openstudiomodelcore.new_ModelVector(*args))

    def push_back(self, x: "Model") -> "void":
        return _openstudiomodelcore.ModelVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Model >::size_type", x: "Model") -> "void":
        return _openstudiomodelcore.ModelVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Model >::size_type") -> "void":
        return _openstudiomodelcore.ModelVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelVector

# Register ModelVector in _openstudiomodelcore:
_openstudiomodelcore.ModelVector_swigregister(ModelVector)

class OptionalModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModel_swiginit(self, _openstudiomodelcore.new_OptionalModel(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModel_reset(self)

    def __ref__(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.OptionalModel___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModel_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModel_isNull(self)

    def get(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.OptionalModel_get(self)

    def set(self, t: "Model") -> "void":
        return _openstudiomodelcore.OptionalModel_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModel

# Register OptionalModel in _openstudiomodelcore:
_openstudiomodelcore.OptionalModel_swigregister(OptionalModel)

class ComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Component >::difference_type", j: "std::vector< openstudio::model::Component >::difference_type") -> "std::vector< openstudio::model::Component,std::allocator< openstudio::model::Component > > *":
        return _openstudiomodelcore.ComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Component >::difference_type", j: "std::vector< openstudio::model::Component >::difference_type") -> "void":
        return _openstudiomodelcore.ComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Component >::value_type":
        return _openstudiomodelcore.ComponentVector_pop(self)

    def append(self, x: "Component") -> "void":
        return _openstudiomodelcore.ComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector_size(self)

    def swap(self, v: "ComponentVector") -> "void":
        return _openstudiomodelcore.ComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Component >::reverse_iterator":
        return _openstudiomodelcore.ComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Component >::reverse_iterator":
        return _openstudiomodelcore.ComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Component >::allocator_type":
        return _openstudiomodelcore.ComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ComponentVector_swiginit(self, _openstudiomodelcore.new_ComponentVector(*args))

    def push_back(self, x: "Component") -> "void":
        return _openstudiomodelcore.ComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Component >::size_type", x: "Component") -> "void":
        return _openstudiomodelcore.ComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Component >::size_type", x: "Component") -> "void":
        return _openstudiomodelcore.ComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Component >::size_type") -> "void":
        return _openstudiomodelcore.ComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentVector

# Register ComponentVector in _openstudiomodelcore:
_openstudiomodelcore.ComponentVector_swigregister(ComponentVector)

class OptionalComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalComponent_swiginit(self, _openstudiomodelcore.new_OptionalComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalComponent_reset(self)

    def __ref__(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.OptionalComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalComponent_isNull(self)

    def get(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.OptionalComponent_get(self)

    def set(self, t: "Component") -> "void":
        return _openstudiomodelcore.OptionalComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponent

# Register OptionalComponent in _openstudiomodelcore:
_openstudiomodelcore.OptionalComponent_swigregister(OptionalComponent)

class ModelObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ModelObject >::difference_type", j: "std::vector< openstudio::model::ModelObject >::difference_type") -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > *":
        return _openstudiomodelcore.ModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ModelObject >::difference_type", j: "std::vector< openstudio::model::ModelObject >::difference_type") -> "void":
        return _openstudiomodelcore.ModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ModelObject >::value_type":
        return _openstudiomodelcore.ModelObjectVector_pop(self)

    def append(self, x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector_size(self)

    def swap(self, v: "ModelObjectVector") -> "void":
        return _openstudiomodelcore.ModelObjectVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelObject >::allocator_type":
        return _openstudiomodelcore.ModelObjectVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectVector_swiginit(self, _openstudiomodelcore.new_ModelObjectVector(*args))

    def push_back(self, x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ModelObject >::size_type", x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ModelObject >::size_type", x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ModelObject >::size_type") -> "void":
        return _openstudiomodelcore.ModelObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVector

# Register ModelObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectVector_swigregister(ModelObjectVector)

class ModelObjectVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< openstudio::model::ModelObject > >::difference_type", j: "std::vector< std::vector< openstudio::model::ModelObject > >::difference_type") -> "std::vector< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >,std::allocator< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > > > *":
        return _openstudiomodelcore.ModelObjectVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< openstudio::model::ModelObject > >::difference_type", j: "std::vector< std::vector< openstudio::model::ModelObject > >::difference_type") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type":
        return _openstudiomodelcore.ModelObjectVectorVector_pop(self)

    def append(self, x: "ModelObjectVector") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector_size(self)

    def swap(self, v: "ModelObjectVectorVector") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::allocator_type":
        return _openstudiomodelcore.ModelObjectVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectVectorVector_swiginit(self, _openstudiomodelcore.new_ModelObjectVectorVector(*args))

    def push_back(self, x: "ModelObjectVector") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< openstudio::model::ModelObject > >::size_type", x: "ModelObjectVector") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< openstudio::model::ModelObject > >::size_type") -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVectorVector

# Register ModelObjectVectorVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectVectorVector_swigregister(ModelObjectVectorVector)

class ModelObjectSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet___bool__(self)

    def __len__(self) -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet___len__(self)

    def append(self, x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectSet_append(self, x)

    def __contains__(self, x: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObjectSet___contains__(self, x)

    def __getitem__(self, i: "std::set< openstudio::model::ModelObject >::difference_type") -> "std::set< openstudio::model::ModelObject >::value_type":
        return _openstudiomodelcore.ModelObjectSet___getitem__(self, i)

    def add(self, x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectSet_add(self, x)

    def discard(self, x: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectSet_discard(self, x)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectSet_swiginit(self, _openstudiomodelcore.new_ModelObjectSet(*args))

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet_empty(self)

    def size(self) -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectSet_clear(self)

    def swap(self, v: "ModelObjectSet") -> "void":
        return _openstudiomodelcore.ModelObjectSet_swap(self, v)

    def count(self, x: "ModelObject") -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet_count(self, x)

    def begin(self) -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_begin(self)

    def end(self) -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_end(self)

    def rbegin(self) -> "std::set< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectSet_rbegin(self)

    def rend(self) -> "std::set< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectSet_erase(self, *args)

    def find(self, x: "ModelObject") -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_find(self, x)

    def lower_bound(self, x: "ModelObject") -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_lower_bound(self, x)

    def upper_bound(self, x: "ModelObject") -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_upper_bound(self, x)

    def equal_range(self, x: "ModelObject") -> "std::pair< std::set< openstudio::model::ModelObject >::iterator,std::set< openstudio::model::ModelObject >::iterator >":
        return _openstudiomodelcore.ModelObjectSet_equal_range(self, x)

    def insert(self, __x: "ModelObject") -> "std::pair< std::set< openstudio::model::ModelObject >::iterator,bool >":
        return _openstudiomodelcore.ModelObjectSet_insert(self, __x)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectSet

# Register ModelObjectSet in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectSet_swigregister(ModelObjectSet)

class OptionalModelObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelObject_swiginit(self, _openstudiomodelcore.new_OptionalModelObject(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelObject_reset(self)

    def __ref__(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.OptionalModelObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObject_isNull(self)

    def get(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.OptionalModelObject_get(self)

    def set(self, t: "ModelObject") -> "void":
        return _openstudiomodelcore.OptionalModelObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObject

# Register OptionalModelObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelObject_swigregister(OptionalModelObject)


def getModelObjectHandles(objects: "ModelObjectVector") -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":
    return _openstudiomodelcore.getModelObjectHandles(objects)
class ModelObject(openstudioutilitiesidf.WorkspaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObject

    def clone(self, *args) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ModelObject_clone(self, *args)

    def createComponent(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.ModelObject_createComponent(self)

    def model(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.ModelObject_model(self)

    def parent(self) -> "boost::optional< openstudio::model::ParentObject >":
        return _openstudiomodelcore.ModelObject_parent(self)

    def resources(self) -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
        return _openstudiomodelcore.ModelObject_resources(self)

    def outputVariableNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _openstudiomodelcore.ModelObject_outputVariableNames(self)

    def outputVariables(self) -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
        return _openstudiomodelcore.ModelObject_outputVariables(self)

    def getData(self, variable: "OutputVariable", envPeriod: "std::string const &") -> "boost::optional< openstudio::TimeSeries >":
        return _openstudiomodelcore.ModelObject_getData(self, variable, envPeriod)

    def lifeCycleCosts(self) -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
        return _openstudiomodelcore.ModelObject_lifeCycleCosts(self)

    def removeLifeCycleCosts(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObject_removeLifeCycleCosts(self)

    def iddObjectType(self) -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ModelObject_iddObjectType(self)

    def additionalProperties(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.ModelObject_additionalProperties(self)

    def hasAdditionalProperties(self) -> "bool":
        return _openstudiomodelcore.ModelObject_hasAdditionalProperties(self)

    def removeAdditionalProperties(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObject_removeAdditionalProperties(self)

    def setParent(self, newParent: "ParentObject") -> "bool":
        return _openstudiomodelcore.ModelObject_setParent(self, newParent)

    def __lt__(self, right: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObject___lt__(self, right)

    def __eq__(self, other: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObject___eq__(self, other)

    def __ne__(self, other: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObject___ne__(self, other)

    def getScheduleTypeKeys(self, schedule: "Schedule") -> "std::vector< openstudio::model::ScheduleTypeKey,std::allocator< openstudio::model::ScheduleTypeKey > >":
        return _openstudiomodelcore.ModelObject_getScheduleTypeKeys(self, schedule)

    def getAutosizedValue(self, valueName: "std::string", unitString: "std::string") -> "boost::optional< double >":
        return _openstudiomodelcore.ModelObject_getAutosizedValue(self, valueName, unitString)

    def emsActuatorNames(self) -> "std::vector< openstudio::model::EMSActuatorNames,std::allocator< openstudio::model::EMSActuatorNames > >":
        return _openstudiomodelcore.ModelObject_emsActuatorNames(self)

    def emsInternalVariableNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ModelObject_emsInternalVariableNames(self)

    def connectedObject(self, port: "unsigned int") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.ModelObject_connectedObject(self, port)

    def connectedObjectPort(self, port: "unsigned int") -> "boost::optional< unsigned int >":
        return _openstudiomodelcore.ModelObject_connectedObjectPort(self, port)

    def __str__(self) -> "std::string":
        return _openstudiomodelcore.ModelObject___str__(self)

    def toIdfObject(self) -> "openstudio::IdfObject":
        return _openstudiomodelcore.ModelObject_toIdfObject(self)

# Register ModelObject in _openstudiomodelcore:
_openstudiomodelcore.ModelObject_swigregister(ModelObject)

class EMSActuatorNames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, componentTypeName: "std::string const &", controlTypeName: "std::string const &"):
        _openstudiomodelcore.EMSActuatorNames_swiginit(self, _openstudiomodelcore.new_EMSActuatorNames(componentTypeName, controlTypeName))

    def controlTypeName(self) -> "std::string":
        return _openstudiomodelcore.EMSActuatorNames_controlTypeName(self)

    def componentTypeName(self) -> "std::string":
        return _openstudiomodelcore.EMSActuatorNames_componentTypeName(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EMSActuatorNames

# Register EMSActuatorNames in _openstudiomodelcore:
_openstudiomodelcore.EMSActuatorNames_swigregister(EMSActuatorNames)

class ScheduleTypeKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, className: "std::string const &", scheduleDisplayName: "std::string const &"):
        _openstudiomodelcore.ScheduleTypeKey_swiginit(self, _openstudiomodelcore.new_ScheduleTypeKey(className, scheduleDisplayName))

    def className(self) -> "std::string":
        return _openstudiomodelcore.ScheduleTypeKey_className(self)

    def scheduleDisplayName(self) -> "std::string":
        return _openstudiomodelcore.ScheduleTypeKey_scheduleDisplayName(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKey

# Register ScheduleTypeKey in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeKey_swigregister(ScheduleTypeKey)

class Model(openstudioutilitiesidf.Workspace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.Model_swiginit(self, _openstudiomodelcore.new_Model(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_Model

    def workflowJSON(self) -> "openstudio::WorkflowJSON":
        return _openstudiomodelcore.Model_workflowJSON(self)

    def sqlFile(self) -> "boost::optional< openstudio::SqlFile >":
        return _openstudiomodelcore.Model_sqlFile(self)

    def building(self) -> "boost::optional< openstudio::model::Building >":
        return _openstudiomodelcore.Model_building(self)

    def foundationKivaSettings(self) -> "boost::optional< openstudio::model::FoundationKivaSettings >":
        return _openstudiomodelcore.Model_foundationKivaSettings(self)

    def outputControlFiles(self) -> "boost::optional< openstudio::model::OutputControlFiles >":
        return _openstudiomodelcore.Model_outputControlFiles(self)

    def outputTableSummaryReports(self) -> "boost::optional< openstudio::model::OutputTableSummaryReports >":
        return _openstudiomodelcore.Model_outputTableSummaryReports(self)

    def performancePrecisionTradeoffs(self) -> "boost::optional< openstudio::model::PerformancePrecisionTradeoffs >":
        return _openstudiomodelcore.Model_performancePrecisionTradeoffs(self)

    def lifeCycleCostParameters(self) -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
        return _openstudiomodelcore.Model_lifeCycleCostParameters(self)

    def runPeriod(self) -> "boost::optional< openstudio::model::RunPeriod >":
        return _openstudiomodelcore.Model_runPeriod(self)

    def yearDescription(self) -> "boost::optional< openstudio::model::YearDescription >":
        return _openstudiomodelcore.Model_yearDescription(self)

    def calendarYear(self) -> "boost::optional< int >":
        return _openstudiomodelcore.Model_calendarYear(self)

    def dayofWeekforStartDay(self) -> "std::string":
        return _openstudiomodelcore.Model_dayofWeekforStartDay(self)

    def isDayofWeekforStartDayDefaulted(self) -> "bool":
        return _openstudiomodelcore.Model_isDayofWeekforStartDayDefaulted(self)

    def isLeapYear(self) -> "bool":
        return _openstudiomodelcore.Model_isLeapYear(self)

    def isIsLeapYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.Model_isIsLeapYearDefaulted(self)

    def setCalendarYear(self, calendarYear: "int") -> "bool":
        return _openstudiomodelcore.Model_setCalendarYear(self, calendarYear)

    def resetCalendarYear(self) -> "void":
        return _openstudiomodelcore.Model_resetCalendarYear(self)

    def setDayofWeekforStartDay(self, dayofWeekforStartDay: "std::string") -> "bool":
        return _openstudiomodelcore.Model_setDayofWeekforStartDay(self, dayofWeekforStartDay)

    def resetDayofWeekforStartDay(self) -> "void":
        return _openstudiomodelcore.Model_resetDayofWeekforStartDay(self)

    def setIsLeapYear(self, isLeapYear: "bool") -> "bool":
        return _openstudiomodelcore.Model_setIsLeapYear(self, isLeapYear)

    def resetIsLeapYear(self) -> "void":
        return _openstudiomodelcore.Model_resetIsLeapYear(self)

    def assumedYear(self) -> "int":
        return _openstudiomodelcore.Model_assumedYear(self)

    def makeDate(self, *args) -> "openstudio::Date":
        return _openstudiomodelcore.Model_makeDate(self, *args)

    def weatherFile(self) -> "boost::optional< openstudio::model::WeatherFile >":
        return _openstudiomodelcore.Model_weatherFile(self)

    def alwaysOnDiscreteSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOnDiscreteSchedule(self)

    def alwaysOnDiscreteScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOnDiscreteScheduleName(self)

    def alwaysOffDiscreteSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOffDiscreteSchedule(self)

    def alwaysOffDiscreteScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOffDiscreteScheduleName(self)

    def alwaysOnContinuousSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOnContinuousSchedule(self)

    def alwaysOnContinuousScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOnContinuousScheduleName(self)

    def outdoorAirNode(self) -> "openstudio::model::Node":
        return _openstudiomodelcore.Model_outdoorAirNode(self)

    def plenumSpaceType(self) -> "openstudio::model::SpaceType":
        return _openstudiomodelcore.Model_plenumSpaceType(self)

    def plenumSpaceTypeName(self) -> "std::string":
        return _openstudiomodelcore.Model_plenumSpaceTypeName(self)

    def setWorkflowJSON(self, workflowJSON: "WorkflowJSON") -> "bool":
        return _openstudiomodelcore.Model_setWorkflowJSON(self, workflowJSON)

    def resetWorkflowJSON(self) -> "void":
        return _openstudiomodelcore.Model_resetWorkflowJSON(self)

    def setSqlFile(self, sqlFile: "SqlFile") -> "bool":
        return _openstudiomodelcore.Model_setSqlFile(self, sqlFile)

    def resetSqlFile(self) -> "bool":
        return _openstudiomodelcore.Model_resetSqlFile(self)

    @staticmethod
    def load(*args) -> "boost::optional< openstudio::model::Model >":
        return _openstudiomodelcore.Model_load(*args)

    def __eq__(self, other: "Model") -> "bool":
        return _openstudiomodelcore.Model___eq__(self, other)

    def modelObjects(self, sorted: "bool"=False) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.Model_modelObjects(self, sorted)

    def insertComponent(self, component: "Component") -> "boost::optional< openstudio::model::ComponentData >":
        return _openstudiomodelcore.Model_insertComponent(self, component)

    def purgeUnusedResourceObjects(self, *args) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.Model_purgeUnusedResourceObjects(self, *args)

    def connect(self, sourceObject: "ModelObject", sourcePort: "unsigned int", targetObject: "ModelObject", targetPort: "unsigned int") -> "void":
        return _openstudiomodelcore.Model_connect(self, sourceObject, sourcePort, targetObject, targetPort)

    def disconnect(self, object: "ModelObject", port: "unsigned int") -> "void":
        return _openstudiomodelcore.Model_disconnect(self, object, port)

    def autosize(self) -> "void":
        return _openstudiomodelcore.Model_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelcore.Model_applySizingValues(self)

# Register Model in _openstudiomodelcore:
_openstudiomodelcore.Model_swigregister(Model)

def Model_load(*args) -> "boost::optional< openstudio::model::Model >":
    return _openstudiomodelcore.Model_load(*args)


def compareInputAndOutput(*args) -> "bool":
    return _openstudiomodelcore.compareInputAndOutput(*args)

def exampleModel() -> "openstudio::model::Model":
    return _openstudiomodelcore.exampleModel()

def addExampleModelObjects(model: "Model") -> "void":
    return _openstudiomodelcore.addExampleModelObjects(model)
class ModelExtensibleGroup(openstudioutilitiesidf.WorkspaceExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroup

    def setSchedule(self, index: "unsigned int", className: "std::string const &", scheduleDisplayName: "std::string const &", schedule: "Schedule") -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroup_setSchedule(self, index, className, scheduleDisplayName, schedule)

# Register ModelExtensibleGroup in _openstudiomodelcore:
_openstudiomodelcore.ModelExtensibleGroup_swigregister(ModelExtensibleGroup)

class Component(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, idfFile: "IdfFile"):
        _openstudiomodelcore.Component_swiginit(self, _openstudiomodelcore.new_Component(idfFile))
    __swig_destroy__ = _openstudiomodelcore.delete_Component

    def componentData(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.Component_componentData(self)

    def primaryObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.Component_primaryObject(self)

    @staticmethod
    def load(p: "path") -> "boost::optional< openstudio::model::Component >":
        return _openstudiomodelcore.Component_load(p)

    def save(self, p: "path", overwrite: "bool"=False) -> "bool":
        return _openstudiomodelcore.Component_save(self, p, overwrite)

# Register Component in _openstudiomodelcore:
_openstudiomodelcore.Component_swigregister(Component)

def Component_load(p: "path") -> "boost::optional< openstudio::model::Component >":
    return _openstudiomodelcore.Component_load(p)


def initializeModel(*args) -> "openstudio::path":
    return _openstudiomodelcore.initializeModel(*args)

def initializeModelObjects(model: "Model") -> "void":
    return _openstudiomodelcore.initializeModelObjects(model)

def saveModel(model: "Model", osmPath: "path", modelTempDir: "path") -> "bool":
    return _openstudiomodelcore.saveModel(model, osmPath, modelTempDir)

def removeModelTempDir(modelTempDir: "path") -> "void":
    return _openstudiomodelcore.removeModelTempDir(modelTempDir)

def toModel(workspace: "Workspace") -> "openstudio::model::Model":
    return _openstudiomodelcore.toModel(workspace)

def toOptionalModel(workspace: "Workspace") -> "boost::optional< openstudio::model::Model >":
    return _openstudiomodelcore.toOptionalModel(workspace)

def toComponent(workspace: "Workspace") -> "openstudio::model::Component":
    return _openstudiomodelcore.toComponent(workspace)

def toOptionalComponent(workspace: "Workspace") -> "boost::optional< openstudio::model::Component >":
    return _openstudiomodelcore.toOptionalComponent(workspace)
class ScheduleTypeKeyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleTypeKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleTypeKey >::difference_type", j: "std::vector< openstudio::model::ScheduleTypeKey >::difference_type") -> "std::vector< openstudio::model::ScheduleTypeKey,std::allocator< openstudio::model::ScheduleTypeKey > > *":
        return _openstudiomodelcore.ScheduleTypeKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleTypeKey >::difference_type", j: "std::vector< openstudio::model::ScheduleTypeKey >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleTypeKey >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::value_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop(self)

    def append(self, x: "ScheduleTypeKey") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_size(self)

    def swap(self, v: "ScheduleTypeKeyVector") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::allocator_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleTypeKey >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleTypeKeyVector_swiginit(self, _openstudiomodelcore.new_ScheduleTypeKeyVector(*args))

    def push_back(self, x: "ScheduleTypeKey") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleTypeKey >::size_type", x: "ScheduleTypeKey") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleTypeKey >::size_type", x: "ScheduleTypeKey") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleTypeKey >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleTypeKey >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKeyVector

# Register ScheduleTypeKeyVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeKeyVector_swigregister(ScheduleTypeKeyVector)

class OptionalScheduleTypeKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleTypeKey_swiginit(self, _openstudiomodelcore.new_OptionalScheduleTypeKey(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeKey_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleTypeKey":
        return _openstudiomodelcore.OptionalScheduleTypeKey___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeKey_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeKey_isNull(self)

    def get(self) -> "openstudio::model::ScheduleTypeKey":
        return _openstudiomodelcore.OptionalScheduleTypeKey_get(self)

    def set(self, t: "ScheduleTypeKey") -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeKey_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleTypeKey

# Register OptionalScheduleTypeKey in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleTypeKey_swigregister(OptionalScheduleTypeKey)

class EMSActuatorNamesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EMSActuatorNamesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EMSActuatorNamesVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EMSActuatorNamesVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EMSActuatorNames >::size_type":
        return _openstudiomodelcore.EMSActuatorNamesVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EMSActuatorNames >::difference_type", j: "std::vector< openstudio::model::EMSActuatorNames >::difference_type") -> "std::vector< openstudio::model::EMSActuatorNames,std::allocator< openstudio::model::EMSActuatorNames > > *":
        return _openstudiomodelcore.EMSActuatorNamesVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EMSActuatorNames >::difference_type", j: "std::vector< openstudio::model::EMSActuatorNames >::difference_type") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EMSActuatorNames >::value_type const &":
        return _openstudiomodelcore.EMSActuatorNamesVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EMSActuatorNames >::value_type":
        return _openstudiomodelcore.EMSActuatorNamesVector_pop(self)

    def append(self, x: "EMSActuatorNames") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EMSActuatorNamesVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EMSActuatorNames >::size_type":
        return _openstudiomodelcore.EMSActuatorNamesVector_size(self)

    def swap(self, v: "EMSActuatorNamesVector") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EMSActuatorNames >::iterator":
        return _openstudiomodelcore.EMSActuatorNamesVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EMSActuatorNames >::iterator":
        return _openstudiomodelcore.EMSActuatorNamesVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EMSActuatorNames >::reverse_iterator":
        return _openstudiomodelcore.EMSActuatorNamesVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EMSActuatorNames >::reverse_iterator":
        return _openstudiomodelcore.EMSActuatorNamesVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EMSActuatorNames >::allocator_type":
        return _openstudiomodelcore.EMSActuatorNamesVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EMSActuatorNames >::iterator":
        return _openstudiomodelcore.EMSActuatorNamesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EMSActuatorNamesVector_swiginit(self, _openstudiomodelcore.new_EMSActuatorNamesVector(*args))

    def push_back(self, x: "EMSActuatorNames") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EMSActuatorNames >::value_type const &":
        return _openstudiomodelcore.EMSActuatorNamesVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EMSActuatorNames >::value_type const &":
        return _openstudiomodelcore.EMSActuatorNamesVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EMSActuatorNames >::size_type", x: "EMSActuatorNames") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EMSActuatorNames >::size_type", x: "EMSActuatorNames") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EMSActuatorNames >::size_type") -> "void":
        return _openstudiomodelcore.EMSActuatorNamesVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EMSActuatorNames >::size_type":
        return _openstudiomodelcore.EMSActuatorNamesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EMSActuatorNamesVector

# Register EMSActuatorNamesVector in _openstudiomodelcore:
_openstudiomodelcore.EMSActuatorNamesVector_swigregister(EMSActuatorNamesVector)

class OptionalEMSActuatorNames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEMSActuatorNames_swiginit(self, _openstudiomodelcore.new_OptionalEMSActuatorNames(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEMSActuatorNames_reset(self)

    def __ref__(self) -> "openstudio::model::EMSActuatorNames":
        return _openstudiomodelcore.OptionalEMSActuatorNames___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEMSActuatorNames_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEMSActuatorNames_isNull(self)

    def get(self) -> "openstudio::model::EMSActuatorNames":
        return _openstudiomodelcore.OptionalEMSActuatorNames_get(self)

    def set(self, t: "EMSActuatorNames") -> "void":
        return _openstudiomodelcore.OptionalEMSActuatorNames_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEMSActuatorNames

# Register OptionalEMSActuatorNames in _openstudiomodelcore:
_openstudiomodelcore.OptionalEMSActuatorNames_swigregister(OptionalEMSActuatorNames)

class ModelExtensibleGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelExtensibleGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ModelExtensibleGroup >::difference_type", j: "std::vector< openstudio::model::ModelExtensibleGroup >::difference_type") -> "std::vector< openstudio::model::ModelExtensibleGroup,std::allocator< openstudio::model::ModelExtensibleGroup > > *":
        return _openstudiomodelcore.ModelExtensibleGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ModelExtensibleGroup >::difference_type", j: "std::vector< openstudio::model::ModelExtensibleGroup >::difference_type") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop(self)

    def append(self, x: "ModelExtensibleGroup") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_size(self)

    def swap(self, v: "ModelExtensibleGroupVector") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::reverse_iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::reverse_iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::allocator_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelExtensibleGroupVector_swiginit(self, _openstudiomodelcore.new_ModelExtensibleGroupVector(*args))

    def push_back(self, x: "ModelExtensibleGroup") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ModelExtensibleGroup >::size_type", x: "ModelExtensibleGroup") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ModelExtensibleGroup >::size_type", x: "ModelExtensibleGroup") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ModelExtensibleGroup >::size_type") -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroupVector

# Register ModelExtensibleGroupVector in _openstudiomodelcore:
_openstudiomodelcore.ModelExtensibleGroupVector_swigregister(ModelExtensibleGroupVector)

class OptionalModelExtensibleGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelExtensibleGroup_swiginit(self, _openstudiomodelcore.new_OptionalModelExtensibleGroup(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_reset(self)

    def __ref__(self) -> "openstudio::model::ModelExtensibleGroup":
        return _openstudiomodelcore.OptionalModelExtensibleGroup___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_isNull(self)

    def get(self) -> "openstudio::model::ModelExtensibleGroup":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_get(self)

    def set(self, t: "ModelExtensibleGroup") -> "void":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelExtensibleGroup

# Register OptionalModelExtensibleGroup in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelExtensibleGroup_swigregister(OptionalModelExtensibleGroup)

class ParentObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ParentObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ParentObject >::difference_type", j: "std::vector< openstudio::model::ParentObject >::difference_type") -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > > *":
        return _openstudiomodelcore.ParentObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ParentObject >::difference_type", j: "std::vector< openstudio::model::ParentObject >::difference_type") -> "void":
        return _openstudiomodelcore.ParentObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ParentObject >::value_type":
        return _openstudiomodelcore.ParentObjectVector_pop(self)

    def append(self, x: "ParentObject") -> "void":
        return _openstudiomodelcore.ParentObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector_size(self)

    def swap(self, v: "ParentObjectVector") -> "void":
        return _openstudiomodelcore.ParentObjectVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ParentObject >::reverse_iterator":
        return _openstudiomodelcore.ParentObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ParentObject >::reverse_iterator":
        return _openstudiomodelcore.ParentObjectVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ParentObjectVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ParentObject >::allocator_type":
        return _openstudiomodelcore.ParentObjectVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ParentObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ParentObjectVector_swiginit(self, _openstudiomodelcore.new_ParentObjectVector(*args))

    def push_back(self, x: "ParentObject") -> "void":
        return _openstudiomodelcore.ParentObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ParentObject >::size_type", x: "ParentObject") -> "void":
        return _openstudiomodelcore.ParentObjectVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ParentObject >::size_type", x: "ParentObject") -> "void":
        return _openstudiomodelcore.ParentObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ParentObject >::size_type") -> "void":
        return _openstudiomodelcore.ParentObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObjectVector

# Register ParentObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ParentObjectVector_swigregister(ParentObjectVector)

class OptionalParentObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalParentObject_swiginit(self, _openstudiomodelcore.new_OptionalParentObject(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalParentObject_reset(self)

    def __ref__(self) -> "openstudio::model::ParentObject":
        return _openstudiomodelcore.OptionalParentObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalParentObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalParentObject_isNull(self)

    def get(self) -> "openstudio::model::ParentObject":
        return _openstudiomodelcore.OptionalParentObject_get(self)

    def set(self, t: "ParentObject") -> "void":
        return _openstudiomodelcore.OptionalParentObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalParentObject

# Register OptionalParentObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalParentObject_swigregister(OptionalParentObject)

class ResourceObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ResourceObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ResourceObject >::difference_type", j: "std::vector< openstudio::model::ResourceObject >::difference_type") -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > > *":
        return _openstudiomodelcore.ResourceObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ResourceObject >::difference_type", j: "std::vector< openstudio::model::ResourceObject >::difference_type") -> "void":
        return _openstudiomodelcore.ResourceObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ResourceObject >::value_type":
        return _openstudiomodelcore.ResourceObjectVector_pop(self)

    def append(self, x: "ResourceObject") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector_size(self)

    def swap(self, v: "ResourceObjectVector") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ResourceObject >::reverse_iterator":
        return _openstudiomodelcore.ResourceObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ResourceObject >::reverse_iterator":
        return _openstudiomodelcore.ResourceObjectVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ResourceObject >::allocator_type":
        return _openstudiomodelcore.ResourceObjectVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ResourceObjectVector_swiginit(self, _openstudiomodelcore.new_ResourceObjectVector(*args))

    def push_back(self, x: "ResourceObject") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ResourceObject >::size_type", x: "ResourceObject") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ResourceObject >::size_type", x: "ResourceObject") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ResourceObject >::size_type") -> "void":
        return _openstudiomodelcore.ResourceObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObjectVector

# Register ResourceObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ResourceObjectVector_swigregister(ResourceObjectVector)

class OptionalResourceObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalResourceObject_swiginit(self, _openstudiomodelcore.new_OptionalResourceObject(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalResourceObject_reset(self)

    def __ref__(self) -> "openstudio::model::ResourceObject":
        return _openstudiomodelcore.OptionalResourceObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalResourceObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalResourceObject_isNull(self)

    def get(self) -> "openstudio::model::ResourceObject":
        return _openstudiomodelcore.OptionalResourceObject_get(self)

    def set(self, t: "ResourceObject") -> "void":
        return _openstudiomodelcore.OptionalResourceObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalResourceObject

# Register OptionalResourceObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalResourceObject_swigregister(OptionalResourceObject)

class OptionalVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalVersion_swiginit(self, _openstudiomodelcore.new_OptionalVersion(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalVersion_reset(self)

    def __ref__(self) -> "openstudio::model::Version":
        return _openstudiomodelcore.OptionalVersion___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalVersion_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalVersion_isNull(self)

    def get(self) -> "openstudio::model::Version":
        return _openstudiomodelcore.OptionalVersion_get(self)

    def set(self, t: "Version") -> "void":
        return _openstudiomodelcore.OptionalVersion_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalVersion

# Register OptionalVersion in _openstudiomodelcore:
_openstudiomodelcore.OptionalVersion_swigregister(OptionalVersion)

class OptionalLifeCycleCostParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalLifeCycleCostParameters_swiginit(self, _openstudiomodelcore.new_OptionalLifeCycleCostParameters(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_reset(self)

    def __ref__(self) -> "openstudio::model::LifeCycleCostParameters":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_isNull(self)

    def get(self) -> "openstudio::model::LifeCycleCostParameters":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_get(self)

    def set(self, t: "LifeCycleCostParameters") -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCostParameters

# Register OptionalLifeCycleCostParameters in _openstudiomodelcore:
_openstudiomodelcore.OptionalLifeCycleCostParameters_swigregister(OptionalLifeCycleCostParameters)

class OptionalRadianceParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalRadianceParameters_swiginit(self, _openstudiomodelcore.new_OptionalRadianceParameters(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalRadianceParameters_reset(self)

    def __ref__(self) -> "openstudio::model::RadianceParameters":
        return _openstudiomodelcore.OptionalRadianceParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalRadianceParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalRadianceParameters_isNull(self)

    def get(self) -> "openstudio::model::RadianceParameters":
        return _openstudiomodelcore.OptionalRadianceParameters_get(self)

    def set(self, t: "RadianceParameters") -> "void":
        return _openstudiomodelcore.OptionalRadianceParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalRadianceParameters

# Register OptionalRadianceParameters in _openstudiomodelcore:
_openstudiomodelcore.OptionalRadianceParameters_swigregister(OptionalRadianceParameters)

class OutputMeterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.OutputMeterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::OutputMeter >::difference_type", j: "std::vector< openstudio::model::OutputMeter >::difference_type") -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > > *":
        return _openstudiomodelcore.OutputMeterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::OutputMeter >::difference_type", j: "std::vector< openstudio::model::OutputMeter >::difference_type") -> "void":
        return _openstudiomodelcore.OutputMeterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::OutputMeter >::value_type":
        return _openstudiomodelcore.OutputMeterVector_pop(self)

    def append(self, x: "OutputMeter") -> "void":
        return _openstudiomodelcore.OutputMeterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector_size(self)

    def swap(self, v: "OutputMeterVector") -> "void":
        return _openstudiomodelcore.OutputMeterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OutputMeter >::reverse_iterator":
        return _openstudiomodelcore.OutputMeterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OutputMeter >::reverse_iterator":
        return _openstudiomodelcore.OutputMeterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.OutputMeterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::OutputMeter >::allocator_type":
        return _openstudiomodelcore.OutputMeterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.OutputMeterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.OutputMeterVector_swiginit(self, _openstudiomodelcore.new_OutputMeterVector(*args))

    def push_back(self, x: "OutputMeter") -> "void":
        return _openstudiomodelcore.OutputMeterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::OutputMeter >::size_type", x: "OutputMeter") -> "void":
        return _openstudiomodelcore.OutputMeterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::OutputMeter >::size_type", x: "OutputMeter") -> "void":
        return _openstudiomodelcore.OutputMeterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::OutputMeter >::size_type") -> "void":
        return _openstudiomodelcore.OutputMeterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeterVector

# Register OutputMeterVector in _openstudiomodelcore:
_openstudiomodelcore.OutputMeterVector_swigregister(OutputMeterVector)

class OptionalOutputMeter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputMeter_swiginit(self, _openstudiomodelcore.new_OptionalOutputMeter(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputMeter_reset(self)

    def __ref__(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.OptionalOutputMeter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputMeter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputMeter_isNull(self)

    def get(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.OptionalOutputMeter_get(self)

    def set(self, t: "OutputMeter") -> "void":
        return _openstudiomodelcore.OptionalOutputMeter_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputMeter

# Register OptionalOutputMeter in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputMeter_swigregister(OptionalOutputMeter)

class MeterCustomVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.MeterCustomVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::MeterCustom >::difference_type", j: "std::vector< openstudio::model::MeterCustom >::difference_type") -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > > *":
        return _openstudiomodelcore.MeterCustomVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::MeterCustom >::difference_type", j: "std::vector< openstudio::model::MeterCustom >::difference_type") -> "void":
        return _openstudiomodelcore.MeterCustomVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::MeterCustom >::value_type":
        return _openstudiomodelcore.MeterCustomVector_pop(self)

    def append(self, x: "MeterCustom") -> "void":
        return _openstudiomodelcore.MeterCustomVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector_size(self)

    def swap(self, v: "MeterCustomVector") -> "void":
        return _openstudiomodelcore.MeterCustomVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MeterCustom >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MeterCustom >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.MeterCustomVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::MeterCustom >::allocator_type":
        return _openstudiomodelcore.MeterCustomVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.MeterCustomVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustomVector_swiginit(self, _openstudiomodelcore.new_MeterCustomVector(*args))

    def push_back(self, x: "MeterCustom") -> "void":
        return _openstudiomodelcore.MeterCustomVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::MeterCustom >::size_type", x: "MeterCustom") -> "void":
        return _openstudiomodelcore.MeterCustomVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::MeterCustom >::size_type", x: "MeterCustom") -> "void":
        return _openstudiomodelcore.MeterCustomVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::MeterCustom >::size_type") -> "void":
        return _openstudiomodelcore.MeterCustomVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomVector

# Register MeterCustomVector in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomVector_swigregister(MeterCustomVector)

class OptionalMeterCustom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalMeterCustom_swiginit(self, _openstudiomodelcore.new_OptionalMeterCustom(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalMeterCustom_reset(self)

    def __ref__(self) -> "openstudio::model::MeterCustom":
        return _openstudiomodelcore.OptionalMeterCustom___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustom_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustom_isNull(self)

    def get(self) -> "openstudio::model::MeterCustom":
        return _openstudiomodelcore.OptionalMeterCustom_get(self)

    def set(self, t: "MeterCustom") -> "void":
        return _openstudiomodelcore.OptionalMeterCustom_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustom

# Register OptionalMeterCustom in _openstudiomodelcore:
_openstudiomodelcore.OptionalMeterCustom_swigregister(OptionalMeterCustom)

class MeterCustomDecrementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.MeterCustomDecrementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::MeterCustomDecrement >::difference_type", j: "std::vector< openstudio::model::MeterCustomDecrement >::difference_type") -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > > *":
        return _openstudiomodelcore.MeterCustomDecrementVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::MeterCustomDecrement >::difference_type", j: "std::vector< openstudio::model::MeterCustomDecrement >::difference_type") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_pop(self)

    def append(self, x: "MeterCustomDecrement") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_size(self)

    def swap(self, v: "MeterCustomDecrementVector") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::allocator_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustomDecrementVector_swiginit(self, _openstudiomodelcore.new_MeterCustomDecrementVector(*args))

    def push_back(self, x: "MeterCustomDecrement") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::MeterCustomDecrement >::size_type", x: "MeterCustomDecrement") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::MeterCustomDecrement >::size_type", x: "MeterCustomDecrement") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::MeterCustomDecrement >::size_type") -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrementVector

# Register MeterCustomDecrementVector in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomDecrementVector_swigregister(MeterCustomDecrementVector)

class OptionalMeterCustomDecrement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalMeterCustomDecrement_swiginit(self, _openstudiomodelcore.new_OptionalMeterCustomDecrement(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_reset(self)

    def __ref__(self) -> "openstudio::model::MeterCustomDecrement":
        return _openstudiomodelcore.OptionalMeterCustomDecrement___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_isNull(self)

    def get(self) -> "openstudio::model::MeterCustomDecrement":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_get(self)

    def set(self, t: "MeterCustomDecrement") -> "void":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustomDecrement

# Register OptionalMeterCustomDecrement in _openstudiomodelcore:
_openstudiomodelcore.OptionalMeterCustomDecrement_swigregister(OptionalMeterCustomDecrement)

class LifeCycleCostVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.LifeCycleCostVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LifeCycleCost >::difference_type", j: "std::vector< openstudio::model::LifeCycleCost >::difference_type") -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > > *":
        return _openstudiomodelcore.LifeCycleCostVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LifeCycleCost >::difference_type", j: "std::vector< openstudio::model::LifeCycleCost >::difference_type") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type":
        return _openstudiomodelcore.LifeCycleCostVector_pop(self)

    def append(self, x: "LifeCycleCost") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector_size(self)

    def swap(self, v: "LifeCycleCostVector") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LifeCycleCost >::reverse_iterator":
        return _openstudiomodelcore.LifeCycleCostVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LifeCycleCost >::reverse_iterator":
        return _openstudiomodelcore.LifeCycleCostVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LifeCycleCost >::allocator_type":
        return _openstudiomodelcore.LifeCycleCostVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.LifeCycleCostVector_swiginit(self, _openstudiomodelcore.new_LifeCycleCostVector(*args))

    def push_back(self, x: "LifeCycleCost") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LifeCycleCost >::size_type", x: "LifeCycleCost") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LifeCycleCost >::size_type", x: "LifeCycleCost") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LifeCycleCost >::size_type") -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostVector

# Register LifeCycleCostVector in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCostVector_swigregister(LifeCycleCostVector)

class OptionalLifeCycleCost(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalLifeCycleCost_swiginit(self, _openstudiomodelcore.new_OptionalLifeCycleCost(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCost_reset(self)

    def __ref__(self) -> "openstudio::model::LifeCycleCost":
        return _openstudiomodelcore.OptionalLifeCycleCost___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCost_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCost_isNull(self)

    def get(self) -> "openstudio::model::LifeCycleCost":
        return _openstudiomodelcore.OptionalLifeCycleCost_get(self)

    def set(self, t: "LifeCycleCost") -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCost_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCost

# Register OptionalLifeCycleCost in _openstudiomodelcore:
_openstudiomodelcore.OptionalLifeCycleCost_swigregister(OptionalLifeCycleCost)

class UtilityBillVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.UtilityBillVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::UtilityBill >::difference_type", j: "std::vector< openstudio::model::UtilityBill >::difference_type") -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > > *":
        return _openstudiomodelcore.UtilityBillVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::UtilityBill >::difference_type", j: "std::vector< openstudio::model::UtilityBill >::difference_type") -> "void":
        return _openstudiomodelcore.UtilityBillVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::UtilityBill >::value_type":
        return _openstudiomodelcore.UtilityBillVector_pop(self)

    def append(self, x: "UtilityBill") -> "void":
        return _openstudiomodelcore.UtilityBillVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector_size(self)

    def swap(self, v: "UtilityBillVector") -> "void":
        return _openstudiomodelcore.UtilityBillVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::UtilityBill >::reverse_iterator":
        return _openstudiomodelcore.UtilityBillVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::UtilityBill >::reverse_iterator":
        return _openstudiomodelcore.UtilityBillVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.UtilityBillVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::UtilityBill >::allocator_type":
        return _openstudiomodelcore.UtilityBillVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.UtilityBillVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.UtilityBillVector_swiginit(self, _openstudiomodelcore.new_UtilityBillVector(*args))

    def push_back(self, x: "UtilityBill") -> "void":
        return _openstudiomodelcore.UtilityBillVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector_front(self)

    def back(self) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::UtilityBill >::size_type", x: "UtilityBill") -> "void":
        return _openstudiomodelcore.UtilityBillVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::UtilityBill >::size_type", x: "UtilityBill") -> "void":
        return _openstudiomodelcore.UtilityBillVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::UtilityBill >::size_type") -> "void":
        return _openstudiomodelcore.UtilityBillVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBillVector

# Register UtilityBillVector in _openstudiomodelcore:
_openstudiomodelcore.UtilityBillVector_swigregister(UtilityBillVector)

class OptionalUtilityBill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalUtilityBill_swiginit(self, _openstudiomodelcore.new_OptionalUtilityBill(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalUtilityBill_reset(self)

    def __ref__(self) -> "openstudio::model::UtilityBill":
        return _openstudiomodelcore.OptionalUtilityBill___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalUtilityBill_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalUtilityBill_isNull(self)

    def get(self) -> "openstudio::model::UtilityBill":
        return _openstudiomodelcore.OptionalUtilityBill_get(self)

    def set(self, t: "UtilityBill") -> "void":
        return _openstudiomodelcore.OptionalUtilityBill_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalUtilityBill

# Register OptionalUtilityBill in _openstudiomodelcore:
_openstudiomodelcore.OptionalUtilityBill_swigregister(OptionalUtilityBill)

class BillingPeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.BillingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::BillingPeriod >::difference_type", j: "std::vector< openstudio::model::BillingPeriod >::difference_type") -> "std::vector< openstudio::model::BillingPeriod,std::allocator< openstudio::model::BillingPeriod > > *":
        return _openstudiomodelcore.BillingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::BillingPeriod >::difference_type", j: "std::vector< openstudio::model::BillingPeriod >::difference_type") -> "void":
        return _openstudiomodelcore.BillingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type":
        return _openstudiomodelcore.BillingPeriodVector_pop(self)

    def append(self, x: "BillingPeriod") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector_size(self)

    def swap(self, v: "BillingPeriodVector") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::BillingPeriod >::reverse_iterator":
        return _openstudiomodelcore.BillingPeriodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::BillingPeriod >::reverse_iterator":
        return _openstudiomodelcore.BillingPeriodVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::BillingPeriod >::allocator_type":
        return _openstudiomodelcore.BillingPeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.BillingPeriodVector_swiginit(self, _openstudiomodelcore.new_BillingPeriodVector(*args))

    def push_back(self, x: "BillingPeriod") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::BillingPeriod >::size_type", x: "BillingPeriod") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::BillingPeriod >::size_type", x: "BillingPeriod") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::BillingPeriod >::size_type") -> "void":
        return _openstudiomodelcore.BillingPeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriodVector

# Register BillingPeriodVector in _openstudiomodelcore:
_openstudiomodelcore.BillingPeriodVector_swigregister(BillingPeriodVector)

class OptionalBillingPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalBillingPeriod_swiginit(self, _openstudiomodelcore.new_OptionalBillingPeriod(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalBillingPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.OptionalBillingPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalBillingPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalBillingPeriod_isNull(self)

    def get(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.OptionalBillingPeriod_get(self)

    def set(self, t: "BillingPeriod") -> "void":
        return _openstudiomodelcore.OptionalBillingPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalBillingPeriod

# Register OptionalBillingPeriod in _openstudiomodelcore:
_openstudiomodelcore.OptionalBillingPeriod_swigregister(OptionalBillingPeriod)

class ComponentDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ComponentDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ComponentData >::difference_type", j: "std::vector< openstudio::model::ComponentData >::difference_type") -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > > *":
        return _openstudiomodelcore.ComponentDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ComponentData >::difference_type", j: "std::vector< openstudio::model::ComponentData >::difference_type") -> "void":
        return _openstudiomodelcore.ComponentDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ComponentData >::value_type":
        return _openstudiomodelcore.ComponentDataVector_pop(self)

    def append(self, x: "ComponentData") -> "void":
        return _openstudiomodelcore.ComponentDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector_size(self)

    def swap(self, v: "ComponentDataVector") -> "void":
        return _openstudiomodelcore.ComponentDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ComponentData >::reverse_iterator":
        return _openstudiomodelcore.ComponentDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ComponentData >::reverse_iterator":
        return _openstudiomodelcore.ComponentDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ComponentDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ComponentData >::allocator_type":
        return _openstudiomodelcore.ComponentDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ComponentDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ComponentDataVector_swiginit(self, _openstudiomodelcore.new_ComponentDataVector(*args))

    def push_back(self, x: "ComponentData") -> "void":
        return _openstudiomodelcore.ComponentDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ComponentData >::size_type", x: "ComponentData") -> "void":
        return _openstudiomodelcore.ComponentDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ComponentData >::size_type", x: "ComponentData") -> "void":
        return _openstudiomodelcore.ComponentDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ComponentData >::size_type") -> "void":
        return _openstudiomodelcore.ComponentDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentDataVector

# Register ComponentDataVector in _openstudiomodelcore:
_openstudiomodelcore.ComponentDataVector_swigregister(ComponentDataVector)

class OptionalComponentData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalComponentData_swiginit(self, _openstudiomodelcore.new_OptionalComponentData(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalComponentData_reset(self)

    def __ref__(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.OptionalComponentData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalComponentData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalComponentData_isNull(self)

    def get(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.OptionalComponentData_get(self)

    def set(self, t: "ComponentData") -> "void":
        return _openstudiomodelcore.OptionalComponentData_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponentData

# Register OptionalComponentData in _openstudiomodelcore:
_openstudiomodelcore.OptionalComponentData_swigregister(OptionalComponentData)

class ScheduleTypeLimitsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleTypeLimits >::difference_type", j: "std::vector< openstudio::model::ScheduleTypeLimits >::difference_type") -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > > *":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleTypeLimits >::difference_type", j: "std::vector< openstudio::model::ScheduleTypeLimits >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop(self)

    def append(self, x: "ScheduleTypeLimits") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_size(self)

    def swap(self, v: "ScheduleTypeLimitsVector") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::allocator_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleTypeLimitsVector_swiginit(self, _openstudiomodelcore.new_ScheduleTypeLimitsVector(*args))

    def push_back(self, x: "ScheduleTypeLimits") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleTypeLimits >::size_type", x: "ScheduleTypeLimits") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleTypeLimits >::size_type", x: "ScheduleTypeLimits") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleTypeLimits >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimitsVector

# Register ScheduleTypeLimitsVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeLimitsVector_swigregister(ScheduleTypeLimitsVector)

class OptionalScheduleTypeLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleTypeLimits_swiginit(self, _openstudiomodelcore.new_OptionalScheduleTypeLimits(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelcore.OptionalScheduleTypeLimits___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_isNull(self)

    def get(self) -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_get(self)

    def set(self, t: "ScheduleTypeLimits") -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleTypeLimits

# Register OptionalScheduleTypeLimits in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleTypeLimits_swigregister(OptionalScheduleTypeLimits)

class ScheduleBaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleBase >::difference_type", j: "std::vector< openstudio::model::ScheduleBase >::difference_type") -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > > *":
        return _openstudiomodelcore.ScheduleBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleBase >::difference_type", j: "std::vector< openstudio::model::ScheduleBase >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type":
        return _openstudiomodelcore.ScheduleBaseVector_pop(self)

    def append(self, x: "ScheduleBase") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector_size(self)

    def swap(self, v: "ScheduleBaseVector") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleBase >::reverse_iterator":
        return _openstudiomodelcore.ScheduleBaseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleBase >::reverse_iterator":
        return _openstudiomodelcore.ScheduleBaseVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleBase >::allocator_type":
        return _openstudiomodelcore.ScheduleBaseVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleBaseVector_swiginit(self, _openstudiomodelcore.new_ScheduleBaseVector(*args))

    def push_back(self, x: "ScheduleBase") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleBase >::size_type", x: "ScheduleBase") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleBase >::size_type", x: "ScheduleBase") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleBase >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBaseVector

# Register ScheduleBaseVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleBaseVector_swigregister(ScheduleBaseVector)

class OptionalScheduleBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleBase_swiginit(self, _openstudiomodelcore.new_OptionalScheduleBase(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleBase_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleBase":
        return _openstudiomodelcore.OptionalScheduleBase___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleBase_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleBase_isNull(self)

    def get(self) -> "openstudio::model::ScheduleBase":
        return _openstudiomodelcore.OptionalScheduleBase_get(self)

    def set(self, t: "ScheduleBase") -> "void":
        return _openstudiomodelcore.OptionalScheduleBase_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleBase

# Register OptionalScheduleBase in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleBase_swigregister(OptionalScheduleBase)

class ScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Schedule >::difference_type", j: "std::vector< openstudio::model::Schedule >::difference_type") -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > > *":
        return _openstudiomodelcore.ScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Schedule >::difference_type", j: "std::vector< openstudio::model::Schedule >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Schedule >::value_type":
        return _openstudiomodelcore.ScheduleVector_pop(self)

    def append(self, x: "Schedule") -> "void":
        return _openstudiomodelcore.ScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector_size(self)

    def swap(self, v: "ScheduleVector") -> "void":
        return _openstudiomodelcore.ScheduleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Schedule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Schedule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Schedule >::allocator_type":
        return _openstudiomodelcore.ScheduleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleVector_swiginit(self, _openstudiomodelcore.new_ScheduleVector(*args))

    def push_back(self, x: "Schedule") -> "void":
        return _openstudiomodelcore.ScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Schedule >::size_type", x: "Schedule") -> "void":
        return _openstudiomodelcore.ScheduleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Schedule >::size_type", x: "Schedule") -> "void":
        return _openstudiomodelcore.ScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Schedule >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleVector

# Register ScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleVector_swigregister(ScheduleVector)

class OptionalSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalSchedule_swiginit(self, _openstudiomodelcore.new_OptionalSchedule(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.OptionalSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalSchedule_isNull(self)

    def get(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.OptionalSchedule_get(self)

    def set(self, t: "Schedule") -> "void":
        return _openstudiomodelcore.OptionalSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalSchedule

# Register OptionalSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalSchedule_swigregister(OptionalSchedule)

class ScheduleDayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleDay >::difference_type", j: "std::vector< openstudio::model::ScheduleDay >::difference_type") -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > > *":
        return _openstudiomodelcore.ScheduleDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleDay >::difference_type", j: "std::vector< openstudio::model::ScheduleDay >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type":
        return _openstudiomodelcore.ScheduleDayVector_pop(self)

    def append(self, x: "ScheduleDay") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector_size(self)

    def swap(self, v: "ScheduleDayVector") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleDay >::reverse_iterator":
        return _openstudiomodelcore.ScheduleDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleDay >::reverse_iterator":
        return _openstudiomodelcore.ScheduleDayVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleDay >::allocator_type":
        return _openstudiomodelcore.ScheduleDayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleDayVector_swiginit(self, _openstudiomodelcore.new_ScheduleDayVector(*args))

    def push_back(self, x: "ScheduleDay") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleDay >::size_type", x: "ScheduleDay") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleDay >::size_type", x: "ScheduleDay") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleDay >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDayVector

# Register ScheduleDayVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleDayVector_swigregister(ScheduleDayVector)

class OptionalScheduleDay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleDay_swiginit(self, _openstudiomodelcore.new_OptionalScheduleDay(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleDay_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.OptionalScheduleDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleDay_isNull(self)

    def get(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.OptionalScheduleDay_get(self)

    def set(self, t: "ScheduleDay") -> "void":
        return _openstudiomodelcore.OptionalScheduleDay_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleDay

# Register OptionalScheduleDay in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleDay_swigregister(OptionalScheduleDay)

class ScheduleWeekVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleWeekVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleWeek >::difference_type", j: "std::vector< openstudio::model::ScheduleWeek >::difference_type") -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > > *":
        return _openstudiomodelcore.ScheduleWeekVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleWeek >::difference_type", j: "std::vector< openstudio::model::ScheduleWeek >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type":
        return _openstudiomodelcore.ScheduleWeekVector_pop(self)

    def append(self, x: "ScheduleWeek") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector_size(self)

    def swap(self, v: "ScheduleWeekVector") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleWeek >::reverse_iterator":
        return _openstudiomodelcore.ScheduleWeekVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleWeek >::reverse_iterator":
        return _openstudiomodelcore.ScheduleWeekVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleWeek >::allocator_type":
        return _openstudiomodelcore.ScheduleWeekVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleWeekVector_swiginit(self, _openstudiomodelcore.new_ScheduleWeekVector(*args))

    def push_back(self, x: "ScheduleWeek") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleWeek >::size_type", x: "ScheduleWeek") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleWeek >::size_type", x: "ScheduleWeek") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleWeek >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeekVector

# Register ScheduleWeekVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleWeekVector_swigregister(ScheduleWeekVector)

class OptionalScheduleWeek(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleWeek_swiginit(self, _openstudiomodelcore.new_OptionalScheduleWeek(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleWeek_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleWeek":
        return _openstudiomodelcore.OptionalScheduleWeek___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleWeek_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleWeek_isNull(self)

    def get(self) -> "openstudio::model::ScheduleWeek":
        return _openstudiomodelcore.OptionalScheduleWeek_get(self)

    def set(self, t: "ScheduleWeek") -> "void":
        return _openstudiomodelcore.OptionalScheduleWeek_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleWeek

# Register OptionalScheduleWeek in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleWeek_swigregister(OptionalScheduleWeek)

class ScheduleYearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleYearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleYear >::difference_type", j: "std::vector< openstudio::model::ScheduleYear >::difference_type") -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > > *":
        return _openstudiomodelcore.ScheduleYearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleYear >::difference_type", j: "std::vector< openstudio::model::ScheduleYear >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleYearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type":
        return _openstudiomodelcore.ScheduleYearVector_pop(self)

    def append(self, x: "ScheduleYear") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector_size(self)

    def swap(self, v: "ScheduleYearVector") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleYear >::reverse_iterator":
        return _openstudiomodelcore.ScheduleYearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleYear >::reverse_iterator":
        return _openstudiomodelcore.ScheduleYearVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleYear >::allocator_type":
        return _openstudiomodelcore.ScheduleYearVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleYearVector_swiginit(self, _openstudiomodelcore.new_ScheduleYearVector(*args))

    def push_back(self, x: "ScheduleYear") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleYear >::size_type", x: "ScheduleYear") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleYear >::size_type", x: "ScheduleYear") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleYear >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleYearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYearVector

# Register ScheduleYearVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleYearVector_swigregister(ScheduleYearVector)

class OptionalScheduleYear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleYear_swiginit(self, _openstudiomodelcore.new_OptionalScheduleYear(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleYear_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleYear":
        return _openstudiomodelcore.OptionalScheduleYear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleYear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleYear_isNull(self)

    def get(self) -> "openstudio::model::ScheduleYear":
        return _openstudiomodelcore.OptionalScheduleYear_get(self)

    def set(self, t: "ScheduleYear") -> "void":
        return _openstudiomodelcore.OptionalScheduleYear_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleYear

# Register OptionalScheduleYear in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleYear_swigregister(OptionalScheduleYear)

class ScheduleRuleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleRuleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleRule >::difference_type", j: "std::vector< openstudio::model::ScheduleRule >::difference_type") -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > > *":
        return _openstudiomodelcore.ScheduleRuleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleRule >::difference_type", j: "std::vector< openstudio::model::ScheduleRule >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type":
        return _openstudiomodelcore.ScheduleRuleVector_pop(self)

    def append(self, x: "ScheduleRule") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector_size(self)

    def swap(self, v: "ScheduleRuleVector") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleRule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRuleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleRule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRuleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleRule >::allocator_type":
        return _openstudiomodelcore.ScheduleRuleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRuleVector_swiginit(self, _openstudiomodelcore.new_ScheduleRuleVector(*args))

    def push_back(self, x: "ScheduleRule") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleRule >::size_type", x: "ScheduleRule") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleRule >::size_type", x: "ScheduleRule") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleRule >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleVector

# Register ScheduleRuleVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRuleVector_swigregister(ScheduleRuleVector)

class OptionalScheduleRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleRule_swiginit(self, _openstudiomodelcore.new_OptionalScheduleRule(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleRule_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleRule":
        return _openstudiomodelcore.OptionalScheduleRule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRule_isNull(self)

    def get(self) -> "openstudio::model::ScheduleRule":
        return _openstudiomodelcore.OptionalScheduleRule_get(self)

    def set(self, t: "ScheduleRule") -> "void":
        return _openstudiomodelcore.OptionalScheduleRule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRule

# Register OptionalScheduleRule in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleRule_swigregister(OptionalScheduleRule)

class ScheduleRulesetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleRulesetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ScheduleRuleset >::difference_type", j: "std::vector< openstudio::model::ScheduleRuleset >::difference_type") -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > > *":
        return _openstudiomodelcore.ScheduleRulesetVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ScheduleRuleset >::difference_type", j: "std::vector< openstudio::model::ScheduleRuleset >::difference_type") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type":
        return _openstudiomodelcore.ScheduleRulesetVector_pop(self)

    def append(self, x: "ScheduleRuleset") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector_size(self)

    def swap(self, v: "ScheduleRulesetVector") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleRuleset >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleRuleset >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleRuleset >::allocator_type":
        return _openstudiomodelcore.ScheduleRulesetVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRulesetVector_swiginit(self, _openstudiomodelcore.new_ScheduleRulesetVector(*args))

    def push_back(self, x: "ScheduleRuleset") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ScheduleRuleset >::size_type", x: "ScheduleRuleset") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ScheduleRuleset >::size_type", x: "ScheduleRuleset") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ScheduleRuleset >::size_type") -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRulesetVector

# Register ScheduleRulesetVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRulesetVector_swigregister(ScheduleRulesetVector)

class OptionalScheduleRuleset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleRuleset_swiginit(self, _openstudiomodelcore.new_OptionalScheduleRuleset(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleRuleset_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.OptionalScheduleRuleset___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRuleset_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRuleset_isNull(self)

    def get(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.OptionalScheduleRuleset_get(self)

    def set(self, t: "ScheduleRuleset") -> "void":
        return _openstudiomodelcore.OptionalScheduleRuleset_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRuleset

# Register OptionalScheduleRuleset in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleRuleset_swigregister(OptionalScheduleRuleset)

class OutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.OutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::OutputVariable >::difference_type", j: "std::vector< openstudio::model::OutputVariable >::difference_type") -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > > *":
        return _openstudiomodelcore.OutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::OutputVariable >::difference_type", j: "std::vector< openstudio::model::OutputVariable >::difference_type") -> "void":
        return _openstudiomodelcore.OutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::OutputVariable >::value_type":
        return _openstudiomodelcore.OutputVariableVector_pop(self)

    def append(self, x: "OutputVariable") -> "void":
        return _openstudiomodelcore.OutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector_size(self)

    def swap(self, v: "OutputVariableVector") -> "void":
        return _openstudiomodelcore.OutputVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OutputVariable >::reverse_iterator":
        return _openstudiomodelcore.OutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OutputVariable >::reverse_iterator":
        return _openstudiomodelcore.OutputVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.OutputVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::OutputVariable >::allocator_type":
        return _openstudiomodelcore.OutputVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.OutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.OutputVariableVector_swiginit(self, _openstudiomodelcore.new_OutputVariableVector(*args))

    def push_back(self, x: "OutputVariable") -> "void":
        return _openstudiomodelcore.OutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::OutputVariable >::size_type", x: "OutputVariable") -> "void":
        return _openstudiomodelcore.OutputVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::OutputVariable >::size_type", x: "OutputVariable") -> "void":
        return _openstudiomodelcore.OutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::OutputVariable >::size_type") -> "void":
        return _openstudiomodelcore.OutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariableVector

# Register OutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.OutputVariableVector_swigregister(OutputVariableVector)

class OptionalOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalOutputVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::OutputVariable":
        return _openstudiomodelcore.OptionalOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::OutputVariable":
        return _openstudiomodelcore.OptionalOutputVariable_get(self)

    def set(self, t: "OutputVariable") -> "void":
        return _openstudiomodelcore.OptionalOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputVariable

# Register OptionalOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputVariable_swigregister(OptionalOutputVariable)

class AdditionalPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.AdditionalPropertiesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AdditionalProperties >::difference_type", j: "std::vector< openstudio::model::AdditionalProperties >::difference_type") -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > > *":
        return _openstudiomodelcore.AdditionalPropertiesVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AdditionalProperties >::difference_type", j: "std::vector< openstudio::model::AdditionalProperties >::difference_type") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_pop(self)

    def append(self, x: "AdditionalProperties") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_size(self)

    def swap(self, v: "AdditionalPropertiesVector") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AdditionalProperties >::reverse_iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AdditionalProperties >::reverse_iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AdditionalProperties >::allocator_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.AdditionalPropertiesVector_swiginit(self, _openstudiomodelcore.new_AdditionalPropertiesVector(*args))

    def push_back(self, x: "AdditionalProperties") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AdditionalProperties >::size_type", x: "AdditionalProperties") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AdditionalProperties >::size_type", x: "AdditionalProperties") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AdditionalProperties >::size_type") -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalPropertiesVector

# Register AdditionalPropertiesVector in _openstudiomodelcore:
_openstudiomodelcore.AdditionalPropertiesVector_swigregister(AdditionalPropertiesVector)

class OptionalAdditionalProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalAdditionalProperties_swiginit(self, _openstudiomodelcore.new_OptionalAdditionalProperties(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalAdditionalProperties_reset(self)

    def __ref__(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.OptionalAdditionalProperties___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalAdditionalProperties_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalAdditionalProperties_isNull(self)

    def get(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.OptionalAdditionalProperties_get(self)

    def set(self, t: "AdditionalProperties") -> "void":
        return _openstudiomodelcore.OptionalAdditionalProperties_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalAdditionalProperties

# Register OptionalAdditionalProperties in _openstudiomodelcore:
_openstudiomodelcore.OptionalAdditionalProperties_swigregister(OptionalAdditionalProperties)

class GenericModelObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.GenericModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GenericModelObject >::difference_type", j: "std::vector< openstudio::model::GenericModelObject >::difference_type") -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > > *":
        return _openstudiomodelcore.GenericModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GenericModelObject >::difference_type", j: "std::vector< openstudio::model::GenericModelObject >::difference_type") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type":
        return _openstudiomodelcore.GenericModelObjectVector_pop(self)

    def append(self, x: "GenericModelObject") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector_size(self)

    def swap(self, v: "GenericModelObjectVector") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GenericModelObject >::reverse_iterator":
        return _openstudiomodelcore.GenericModelObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GenericModelObject >::reverse_iterator":
        return _openstudiomodelcore.GenericModelObjectVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GenericModelObject >::allocator_type":
        return _openstudiomodelcore.GenericModelObjectVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.GenericModelObjectVector_swiginit(self, _openstudiomodelcore.new_GenericModelObjectVector(*args))

    def push_back(self, x: "GenericModelObject") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GenericModelObject >::size_type", x: "GenericModelObject") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GenericModelObject >::size_type", x: "GenericModelObject") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GenericModelObject >::size_type") -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObjectVector

# Register GenericModelObjectVector in _openstudiomodelcore:
_openstudiomodelcore.GenericModelObjectVector_swigregister(GenericModelObjectVector)

class OptionalGenericModelObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalGenericModelObject_swiginit(self, _openstudiomodelcore.new_OptionalGenericModelObject(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalGenericModelObject_reset(self)

    def __ref__(self) -> "openstudio::model::GenericModelObject":
        return _openstudiomodelcore.OptionalGenericModelObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalGenericModelObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalGenericModelObject_isNull(self)

    def get(self) -> "openstudio::model::GenericModelObject":
        return _openstudiomodelcore.OptionalGenericModelObject_get(self)

    def set(self, t: "GenericModelObject") -> "void":
        return _openstudiomodelcore.OptionalGenericModelObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalGenericModelObject

# Register OptionalGenericModelObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalGenericModelObject_swigregister(OptionalGenericModelObject)

class ModelObjectListVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ModelObjectList >::difference_type", j: "std::vector< openstudio::model::ModelObjectList >::difference_type") -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > > *":
        return _openstudiomodelcore.ModelObjectListVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ModelObjectList >::difference_type", j: "std::vector< openstudio::model::ModelObjectList >::difference_type") -> "void":
        return _openstudiomodelcore.ModelObjectListVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type":
        return _openstudiomodelcore.ModelObjectListVector_pop(self)

    def append(self, x: "ModelObjectList") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector_size(self)

    def swap(self, v: "ModelObjectListVector") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelObjectList >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectListVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelObjectList >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectListVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelObjectList >::allocator_type":
        return _openstudiomodelcore.ModelObjectListVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectListVector_swiginit(self, _openstudiomodelcore.new_ModelObjectListVector(*args))

    def push_back(self, x: "ModelObjectList") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ModelObjectList >::size_type", x: "ModelObjectList") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ModelObjectList >::size_type", x: "ModelObjectList") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ModelObjectList >::size_type") -> "void":
        return _openstudiomodelcore.ModelObjectListVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectListVector

# Register ModelObjectListVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectListVector_swigregister(ModelObjectListVector)

class OptionalModelObjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelObjectList_swiginit(self, _openstudiomodelcore.new_OptionalModelObjectList(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelObjectList_reset(self)

    def __ref__(self) -> "openstudio::model::ModelObjectList":
        return _openstudiomodelcore.OptionalModelObjectList___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObjectList_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObjectList_isNull(self)

    def get(self) -> "openstudio::model::ModelObjectList":
        return _openstudiomodelcore.OptionalModelObjectList_get(self)

    def set(self, t: "ModelObjectList") -> "void":
        return _openstudiomodelcore.OptionalModelObjectList_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObjectList

# Register OptionalModelObjectList in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelObjectList_swigregister(OptionalModelObjectList)

class EnergyManagementSystemSensorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > > *":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop(self)

    def append(self, x: "EnergyManagementSystemSensor") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_size(self)

    def swap(self, v: "EnergyManagementSystemSensorVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSensorVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSensorVector(*args))

    def push_back(self, x: "EnergyManagementSystemSensor") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type", x: "EnergyManagementSystemSensor") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type", x: "EnergyManagementSystemSensor") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensorVector

# Register EnergyManagementSystemSensorVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSensorVector_swigregister(EnergyManagementSystemSensorVector)

class OptionalEnergyManagementSystemSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemSensor_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemSensor(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemSensor":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemSensor":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_get(self)

    def set(self, t: "EnergyManagementSystemSensor") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSensor

# Register OptionalEnergyManagementSystemSensor in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemSensor_swigregister(OptionalEnergyManagementSystemSensor)

class EnergyManagementSystemActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > > *":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop(self)

    def append(self, x: "EnergyManagementSystemActuator") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_size(self)

    def swap(self, v: "EnergyManagementSystemActuatorVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemActuatorVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemActuatorVector(*args))

    def push_back(self, x: "EnergyManagementSystemActuator") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type", x: "EnergyManagementSystemActuator") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type", x: "EnergyManagementSystemActuator") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuatorVector

# Register EnergyManagementSystemActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemActuatorVector_swigregister(EnergyManagementSystemActuatorVector)

class OptionalEnergyManagementSystemActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemActuator_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemActuator(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemActuator":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemActuator":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_get(self)

    def set(self, t: "EnergyManagementSystemActuator") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemActuator

# Register OptionalEnergyManagementSystemActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemActuator_swigregister(OptionalEnergyManagementSystemActuator)

class EnergyManagementSystemConstructionIndexVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemConstructionIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemConstructionIndexVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemConstructionIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type", x: "EnergyManagementSystemConstructionIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type", x: "EnergyManagementSystemConstructionIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariableVector

# Register EnergyManagementSystemConstructionIndexVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swigregister(EnergyManagementSystemConstructionIndexVariableVector)

class OptionalEnergyManagementSystemConstructionIndexVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemConstructionIndexVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemConstructionIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemConstructionIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_get(self)

    def set(self, t: "EnergyManagementSystemConstructionIndexVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemConstructionIndexVariable

# Register OptionalEnergyManagementSystemConstructionIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_swigregister(OptionalEnergyManagementSystemConstructionIndexVariable)

class EnergyManagementSystemCurveOrTableIndexVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemCurveOrTableIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemCurveOrTableIndexVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemCurveOrTableIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type", x: "EnergyManagementSystemCurveOrTableIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type", x: "EnergyManagementSystemCurveOrTableIndexVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariableVector

# Register EnergyManagementSystemCurveOrTableIndexVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swigregister(EnergyManagementSystemCurveOrTableIndexVariableVector)

class OptionalEnergyManagementSystemCurveOrTableIndexVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemCurveOrTableIndexVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_get(self)

    def set(self, t: "EnergyManagementSystemCurveOrTableIndexVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemCurveOrTableIndexVariable

# Register OptionalEnergyManagementSystemCurveOrTableIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_swigregister(OptionalEnergyManagementSystemCurveOrTableIndexVariable)

class EnergyManagementSystemGlobalVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemGlobalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemGlobalVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemGlobalVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemGlobalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type", x: "EnergyManagementSystemGlobalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type", x: "EnergyManagementSystemGlobalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariableVector

# Register EnergyManagementSystemGlobalVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swigregister(EnergyManagementSystemGlobalVariableVector)

class OptionalEnergyManagementSystemGlobalVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemGlobalVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemGlobalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemGlobalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_get(self)

    def set(self, t: "EnergyManagementSystemGlobalVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemGlobalVariable

# Register OptionalEnergyManagementSystemGlobalVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_swigregister(OptionalEnergyManagementSystemGlobalVariable)

class EnergyManagementSystemInternalVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemInternalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemInternalVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemInternalVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemInternalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type", x: "EnergyManagementSystemInternalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type", x: "EnergyManagementSystemInternalVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariableVector

# Register EnergyManagementSystemInternalVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swigregister(EnergyManagementSystemInternalVariableVector)

class OptionalEnergyManagementSystemInternalVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemInternalVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemInternalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemInternalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_get(self)

    def set(self, t: "EnergyManagementSystemInternalVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemInternalVariable

# Register OptionalEnergyManagementSystemInternalVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_swigregister(OptionalEnergyManagementSystemInternalVariable)

class EnergyManagementSystemTrendVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemTrendVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemTrendVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemTrendVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemTrendVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type", x: "EnergyManagementSystemTrendVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type", x: "EnergyManagementSystemTrendVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariableVector

# Register EnergyManagementSystemTrendVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swigregister(EnergyManagementSystemTrendVariableVector)

class OptionalEnergyManagementSystemTrendVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemTrendVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemTrendVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemTrendVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_get(self)

    def set(self, t: "EnergyManagementSystemTrendVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemTrendVariable

# Register OptionalEnergyManagementSystemTrendVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_swigregister(OptionalEnergyManagementSystemTrendVariable)

class EnergyManagementSystemSubroutineVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > > *":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop(self)

    def append(self, x: "EnergyManagementSystemSubroutine") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_size(self)

    def swap(self, v: "EnergyManagementSystemSubroutineVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSubroutineVector(*args))

    def push_back(self, x: "EnergyManagementSystemSubroutine") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type", x: "EnergyManagementSystemSubroutine") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type", x: "EnergyManagementSystemSubroutine") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutineVector

# Register EnergyManagementSystemSubroutineVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSubroutineVector_swigregister(EnergyManagementSystemSubroutineVector)

class OptionalEnergyManagementSystemSubroutine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemSubroutine(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemSubroutine":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemSubroutine":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_get(self)

    def set(self, t: "EnergyManagementSystemSubroutine") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSubroutine

# Register OptionalEnergyManagementSystemSubroutine in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_swigregister(OptionalEnergyManagementSystemSubroutine)

class EnergyManagementSystemProgramVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > > *":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop(self)

    def append(self, x: "EnergyManagementSystemProgram") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_size(self)

    def swap(self, v: "EnergyManagementSystemProgramVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgramVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramVector(*args))

    def push_back(self, x: "EnergyManagementSystemProgram") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type", x: "EnergyManagementSystemProgram") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type", x: "EnergyManagementSystemProgram") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramVector

# Register EnergyManagementSystemProgramVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramVector_swigregister(EnergyManagementSystemProgramVector)

class OptionalEnergyManagementSystemProgram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemProgram_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemProgram(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_get(self)

    def set(self, t: "EnergyManagementSystemProgram") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgram

# Register OptionalEnergyManagementSystemProgram in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemProgram_swigregister(OptionalEnergyManagementSystemProgram)

class EnergyManagementSystemProgramCallingManagerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > > *":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop(self)

    def append(self, x: "EnergyManagementSystemProgramCallingManager") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_size(self)

    def swap(self, v: "EnergyManagementSystemProgramCallingManagerVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManagerVector(*args))

    def push_back(self, x: "EnergyManagementSystemProgramCallingManager") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type", x: "EnergyManagementSystemProgramCallingManager") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type", x: "EnergyManagementSystemProgramCallingManager") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManagerVector

# Register EnergyManagementSystemProgramCallingManagerVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swigregister(EnergyManagementSystemProgramCallingManagerVector)

class OptionalEnergyManagementSystemProgramCallingManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemProgramCallingManager(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemProgramCallingManager":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemProgramCallingManager":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_get(self)

    def set(self, t: "EnergyManagementSystemProgramCallingManager") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgramCallingManager

# Register OptionalEnergyManagementSystemProgramCallingManager in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_swigregister(OptionalEnergyManagementSystemProgramCallingManager)

class EnergyManagementSystemOutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemOutputVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemOutputVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type", x: "EnergyManagementSystemOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type", x: "EnergyManagementSystemOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariableVector

# Register EnergyManagementSystemOutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swigregister(EnergyManagementSystemOutputVariableVector)

class OptionalEnergyManagementSystemOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemOutputVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_get(self)

    def set(self, t: "EnergyManagementSystemOutputVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemOutputVariable

# Register OptionalEnergyManagementSystemOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_swigregister(OptionalEnergyManagementSystemOutputVariable)

class EnergyManagementSystemMeteredOutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type") -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type", j: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop(self)

    def append(self, x: "EnergyManagementSystemMeteredOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_size(self)

    def swap(self, v: "EnergyManagementSystemMeteredOutputVariableVector") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariableVector(*args))

    def push_back(self, x: "EnergyManagementSystemMeteredOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type", x: "EnergyManagementSystemMeteredOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type", x: "EnergyManagementSystemMeteredOutputVariable") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type") -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariableVector

# Register EnergyManagementSystemMeteredOutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swigregister(EnergyManagementSystemMeteredOutputVariableVector)

class OptionalEnergyManagementSystemMeteredOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemMeteredOutputVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemMeteredOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemMeteredOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_get(self)

    def set(self, t: "EnergyManagementSystemMeteredOutputVariable") -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemMeteredOutputVariable

# Register OptionalEnergyManagementSystemMeteredOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_swigregister(OptionalEnergyManagementSystemMeteredOutputVariable)

class OptionalOutputEnergyManagementSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputEnergyManagementSystem_swiginit(self, _openstudiomodelcore.new_OptionalOutputEnergyManagementSystem(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_reset(self)

    def __ref__(self) -> "openstudio::model::OutputEnergyManagementSystem":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_isNull(self)

    def get(self) -> "openstudio::model::OutputEnergyManagementSystem":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_get(self)

    def set(self, t: "OutputEnergyManagementSystem") -> "void":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputEnergyManagementSystem

# Register OptionalOutputEnergyManagementSystem in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputEnergyManagementSystem_swigregister(OptionalOutputEnergyManagementSystem)

class OptionalExternalInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterface_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterface(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterface_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterface":
        return _openstudiomodelcore.OptionalExternalInterface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterface_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterface":
        return _openstudiomodelcore.OptionalExternalInterface_get(self)

    def set(self, t: "ExternalInterface") -> "void":
        return _openstudiomodelcore.OptionalExternalInterface_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterface

# Register OptionalExternalInterface in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterface_swigregister(OptionalExternalInterface)

class ExternalInterfaceActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop(self)

    def append(self, x: "ExternalInterfaceActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_size(self)

    def swap(self, v: "ExternalInterfaceActuatorVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceActuatorVector(*args))

    def push_back(self, x: "ExternalInterfaceActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type", x: "ExternalInterfaceActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type", x: "ExternalInterfaceActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuatorVector

# Register ExternalInterfaceActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceActuatorVector_swigregister(ExternalInterfaceActuatorVector)

class OptionalExternalInterfaceActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceActuator(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_get(self)

    def set(self, t: "ExternalInterfaceActuator") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceActuator

# Register OptionalExternalInterfaceActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceActuator_swigregister(OptionalExternalInterfaceActuator)

class ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitExportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitExportFromVariableVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitExportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector

# Register ExternalInterfaceFunctionalMockupUnitExportFromVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitExportFromVariable") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable)

class ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitExportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitExportToActuatorVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitExportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector

# Register ExternalInterfaceFunctionalMockupUnitExportToActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuatorVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitExportToActuator") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToActuator)

class ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitExportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitExportToScheduleVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitExportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector

# Register ExternalInterfaceFunctionalMockupUnitExportToScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToScheduleVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitExportToSchedule") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule)

class ExternalInterfaceFunctionalMockupUnitExportToVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitExportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitExportToVariableVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariableVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitExportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitExportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariableVector

# Register ExternalInterfaceFunctionalMockupUnitExportToVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitExportToVariable") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToVariable)

class ExternalInterfaceFunctionalMockupUnitImportVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitImport") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitImportVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitImport") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImport") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImport") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportVector

# Register ExternalInterfaceFunctionalMockupUnitImportVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportVector)

class OptionalExternalInterfaceFunctionalMockupUnitImport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImport(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitImport") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImport

# Register OptionalExternalInterfaceFunctionalMockupUnitImport in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImport)

class ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitImportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitImportFromVariableVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitImportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportFromVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector

# Register ExternalInterfaceFunctionalMockupUnitImportFromVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitImportFromVariable") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable)

class ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitImportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitImportToActuatorVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitImportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToActuator") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector

# Register ExternalInterfaceFunctionalMockupUnitImportToActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuatorVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitImportToActuator") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToActuator)

class ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitImportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitImportToScheduleVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitImportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector

# Register ExternalInterfaceFunctionalMockupUnitImportToScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToScheduleVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitImportToSchedule") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule)

class ExternalInterfaceFunctionalMockupUnitImportToVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop(self)

    def append(self, x: "ExternalInterfaceFunctionalMockupUnitImportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_size(self)

    def swap(self, v: "ExternalInterfaceFunctionalMockupUnitImportToVariableVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariableVector(*args))

    def push_back(self, x: "ExternalInterfaceFunctionalMockupUnitImportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type", x: "ExternalInterfaceFunctionalMockupUnitImportToVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariableVector

# Register ExternalInterfaceFunctionalMockupUnitImportToVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_get(self)

    def set(self, t: "ExternalInterfaceFunctionalMockupUnitImportToVariable") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToVariable)

class ExternalInterfaceScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop(self)

    def append(self, x: "ExternalInterfaceSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_size(self)

    def swap(self, v: "ExternalInterfaceScheduleVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceScheduleVector(*args))

    def push_back(self, x: "ExternalInterfaceSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type", x: "ExternalInterfaceSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type", x: "ExternalInterfaceSchedule") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceScheduleVector

# Register ExternalInterfaceScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceScheduleVector_swigregister(ExternalInterfaceScheduleVector)

class OptionalExternalInterfaceSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceSchedule(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_get(self)

    def set(self, t: "ExternalInterfaceSchedule") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceSchedule

# Register OptionalExternalInterfaceSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceSchedule_swigregister(OptionalExternalInterfaceSchedule)

class ExternalInterfaceVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type") -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type", j: "std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop(self)

    def append(self, x: "ExternalInterfaceVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_size(self)

    def swap(self, v: "ExternalInterfaceVariableVector") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceVariableVector(*args))

    def push_back(self, x: "ExternalInterfaceVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type", x: "ExternalInterfaceVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type", x: "ExternalInterfaceVariable") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type") -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariableVector

# Register ExternalInterfaceVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceVariableVector_swigregister(ExternalInterfaceVariableVector)

class OptionalExternalInterfaceVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceVariable(*args))

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_get(self)

    def set(self, t: "ExternalInterfaceVariable") -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceVariable

# Register OptionalExternalInterfaceVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceVariable_swigregister(OptionalExternalInterfaceVariable)


def toModelObject(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.toModelObject(idfObject)

def getModelObject(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.getModelObject(t_model, t_handle)

def getModelObjects(t_model: "Model") -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getModelObjects(t_model)

def getModelObjectByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.getModelObjectByName(t_model, t_name)

def getModelObjectsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getModelObjectsByName(t_model, t_name, t_exactMatch)

def _to_ModelObject(self) -> OptionalModelObject:
    return toModelObject(self)
openstudioutilitiesidf.IdfObject.to_ModelObject = _to_ModelObject

def _getModelObject(self, t_handle: "UUID") -> OptionalModelObject:
    return getModelObject(self, t_handle)
Model.getModelObject = _getModelObject

def _getModelObject(self, t_handle_str: str) -> OptionalModelObject:
    return getModelObject(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getModelObject = _getModelObject

def _getModelObjects(self) -> ModelObjectVector:
    return getModelObjects(self)
Model.getModelObjects = _getModelObjects

def _getModelObjectByName(self, t_name: str) -> OptionalModelObject:
    return getModelObjectByName(self, t_name)
Model.getModelObjectByName = _getModelObjectByName

def _getModelObjectsByName(self, t_name: str, t_exactMatch: bool) -> ModelObjectVector:
    return getModelObjectsByName(self, t_name, t_exactMatch)
Model.getModelObjectsByName = _getModelObjectsByName


def toModelExtensibleGroup(extensibleGroup: "IdfExtensibleGroup") -> "boost::optional< openstudio::model::ModelExtensibleGroup >":
    return _openstudiomodelcore.toModelExtensibleGroup(extensibleGroup)

def _to_ModelExtensibleGroup(self) -> OptionalModelExtensibleGroup:
    return toModelExtensibleGroup(self)
openstudioutilitiesidf.IdfExtensibleGroup.to_ModelExtensibleGroup = _to_ModelExtensibleGroup

class ParentObject(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObject

    def children(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ParentObject_children(self)

    def allowableChildTypes(self) -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":
        return _openstudiomodelcore.ParentObject_allowableChildTypes(self)

# Register ParentObject in _openstudiomodelcore:
_openstudiomodelcore.ParentObject_swigregister(ParentObject)


def getRecursiveChildren(object: "ParentObject", includeLifeCycleCostsAndAdditionalProperties: "bool"=False, includeUsedResources: "bool"=True) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getRecursiveChildren(object, includeLifeCycleCostsAndAdditionalProperties, includeUsedResources)

def getRecursiveChildrenAndResources(object: "ModelObject") -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getRecursiveChildrenAndResources(object)

def toParentObject(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.toParentObject(idfObject)

def getParentObject(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.getParentObject(t_model, t_handle)

def getParentObjects(t_model: "Model") -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > >":
    return _openstudiomodelcore.getParentObjects(t_model)

def getParentObjectByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.getParentObjectByName(t_model, t_name)

def getParentObjectsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > >":
    return _openstudiomodelcore.getParentObjectsByName(t_model, t_name, t_exactMatch)

def _to_ParentObject(self) -> OptionalParentObject:
    return toParentObject(self)
openstudioutilitiesidf.IdfObject.to_ParentObject = _to_ParentObject

def _getParentObject(self, t_handle: "UUID") -> OptionalParentObject:
    return getParentObject(self, t_handle)
Model.getParentObject = _getParentObject

def _getParentObject(self, t_handle_str: str) -> OptionalParentObject:
    return getParentObject(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getParentObject = _getParentObject

def _getParentObjects(self) -> ParentObjectVector:
    return getParentObjects(self)
Model.getParentObjects = _getParentObjects

def _getParentObjectByName(self, t_name: str) -> OptionalParentObject:
    return getParentObjectByName(self, t_name)
Model.getParentObjectByName = _getParentObjectByName

def _getParentObjectsByName(self, t_name: str, t_exactMatch: bool) -> ParentObjectVector:
    return getParentObjectsByName(self, t_name, t_exactMatch)
Model.getParentObjectsByName = _getParentObjectsByName

class ResourceObject(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def directUseCount(self, excludeChildren: "bool"=False) -> "unsigned int":
        return _openstudiomodelcore.ResourceObject_directUseCount(self, excludeChildren)

    def nonResourceObjectUseCount(self, excludeChildren: "bool"=False) -> "unsigned int":
        return _openstudiomodelcore.ResourceObject_nonResourceObjectUseCount(self, excludeChildren)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObject

# Register ResourceObject in _openstudiomodelcore:
_openstudiomodelcore.ResourceObject_swigregister(ResourceObject)


def getRecursiveResources(object: "ModelObject") -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getRecursiveResources(object)

def getRecursiveResourceSubTrees(object: "ModelObject", includeComponentCostLineItems: "bool"=False) -> "std::vector< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >,std::allocator< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > > >":
    return _openstudiomodelcore.getRecursiveResourceSubTrees(object, includeComponentCostLineItems)

def toResourceObject(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.toResourceObject(idfObject)

def getResourceObject(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.getResourceObject(t_model, t_handle)

def getResourceObjects(t_model: "Model") -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getResourceObjects(t_model)

def getResourceObjectByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.getResourceObjectByName(t_model, t_name)

def getResourceObjectsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getResourceObjectsByName(t_model, t_name, t_exactMatch)

def _to_ResourceObject(self) -> OptionalResourceObject:
    return toResourceObject(self)
openstudioutilitiesidf.IdfObject.to_ResourceObject = _to_ResourceObject

def _getResourceObject(self, t_handle: "UUID") -> OptionalResourceObject:
    return getResourceObject(self, t_handle)
Model.getResourceObject = _getResourceObject

def _getResourceObject(self, t_handle_str: str) -> OptionalResourceObject:
    return getResourceObject(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getResourceObject = _getResourceObject

def _getResourceObjects(self) -> ResourceObjectVector:
    return getResourceObjects(self)
Model.getResourceObjects = _getResourceObjects

def _getResourceObjectByName(self, t_name: str) -> OptionalResourceObject:
    return getResourceObjectByName(self, t_name)
Model.getResourceObjectByName = _getResourceObjectByName

def _getResourceObjectsByName(self, t_name: str, t_exactMatch: bool) -> ResourceObjectVector:
    return getResourceObjectsByName(self, t_name, t_exactMatch)
Model.getResourceObjectsByName = _getResourceObjectsByName

class Version(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Version

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.Version_iddObjectType()

    def versionIdentifier(self) -> "std::string":
        return _openstudiomodelcore.Version_versionIdentifier(self)

    def prereleaseIdentifier(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.Version_prereleaseIdentifier(self)

# Register Version in _openstudiomodelcore:
_openstudiomodelcore.Version_swigregister(Version)

def Version_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.Version_iddObjectType()


def toVersion(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Version >":
    return _openstudiomodelcore.toVersion(idfObject)

def getVersion(t_model: "Model") -> "openstudio::model::Version":
    return _openstudiomodelcore.getVersion(t_model)

def getOptionalVersion(t_model: "Model") -> "boost::optional< openstudio::model::Version >":
    return _openstudiomodelcore.getOptionalVersion(t_model)

def _to_Version(self) -> OptionalVersion:
    return toVersion(self)
openstudioutilitiesidf.IdfObject.to_Version = _to_Version

def _getVersion(self) -> Version:
    return getVersion(self)
Model.getVersion = _getVersion

def _getOptionalVersion(self) -> OptionalVersion:
    return getOptionalVersion(self)
Model.getOptionalVersion = _getOptionalVersion

class LifeCycleCostParameters(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostParameters

    @staticmethod
    def nistYear() -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_nistYear()

    @staticmethod
    def fempRealDiscountRate() -> "double":
        return _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate()

    @staticmethod
    def fempNominalDiscountRate() -> "double":
        return _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate()

    @staticmethod
    def fempInflation() -> "double":
        return _openstudiomodelcore.LifeCycleCostParameters_fempInflation()

    def analysisType(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_analysisType(self)

    def isAnalysisTypeDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isAnalysisTypeDefaulted(self)

    def isFEMPAnalysis(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isFEMPAnalysis(self)

    def discountingConvention(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_discountingConvention(self)

    def isDiscountingConventionDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isDiscountingConventionDefaulted(self)

    def inflationApproach(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_inflationApproach(self)

    def isInflationApproachDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isInflationApproachDefaulted(self)

    def isConstantDollarAnalysis(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isConstantDollarAnalysis(self)

    def realDiscountRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_realDiscountRate(self)

    def nominalDiscountRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_nominalDiscountRate(self)

    def inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_inflation(self)

    def baseDateMonth(self) -> "openstudio::MonthOfYear":
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateMonth(self)

    def isBaseDateMonthDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateMonthDefaulted(self)

    def baseDateYear(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateYear(self)

    def isBaseDateYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateYearDefaulted(self)

    def serviceDateMonth(self) -> "openstudio::MonthOfYear":
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateMonth(self)

    def isServiceDateMonthDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateMonthDefaulted(self)

    def serviceDateYear(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateYear(self)

    def isServiceDateYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateYearDefaulted(self)

    def lengthOfStudyPeriodInYears(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_lengthOfStudyPeriodInYears(self)

    def isLengthOfStudyPeriodInYearsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isLengthOfStudyPeriodInYearsDefaulted(self)

    def taxRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_taxRate(self)

    def depreciationMethod(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_depreciationMethod(self)

    def isDepreciationMethodDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isDepreciationMethodDefaulted(self)

    def useNISTFuelEscalationRates(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_useNISTFuelEscalationRates(self)

    def isUseNISTFuelEscalationRatesDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isUseNISTFuelEscalationRatesDefaulted(self)

    def nistRegion(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.LifeCycleCostParameters_nistRegion(self)

    def validNistRegionValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validNistRegionValues(self)

    def isNISTRegionDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTRegionDefaulted(self)

    def nistSector(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.LifeCycleCostParameters_nistSector(self)

    def validNistSectorValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validNistSectorValues(self)

    def isNISTSectorDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTSectorDefaulted(self)

    def electricityInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_electricityInflation(self)

    def naturalGasInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_naturalGasInflation(self)

    def steamInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_steamInflation(self)

    def gasolineInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_gasolineInflation(self)

    def dieselInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_dieselInflation(self)

    def coalInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_coalInflation(self)

    def fuelOil1Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil1Inflation(self)

    def fuelOil2Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil2Inflation(self)

    def propaneInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_propaneInflation(self)

    def waterInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_waterInflation(self)

    def otherFuel1Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_otherFuel1Inflation(self)

    def otherFuel2Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_otherFuel2Inflation(self)

    def setAnalysisType(self, analysisType: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setAnalysisType(self, analysisType)

    def resetAnalysisType(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetAnalysisType(self)

    def setDiscountingConvention(self, discountingConvention: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDiscountingConvention(self, discountingConvention)

    def resetDiscountingConvention(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDiscountingConvention(self)

    def setInflationApproach(self, inflationApproach: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setInflationApproach(self, inflationApproach)

    def resetInflationApproach(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetInflationApproach(self)

    def setRealDiscountRate(self, realDiscountRate: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setRealDiscountRate(self, realDiscountRate)

    def setNominalDiscountRate(self, nominalDiscountRate: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNominalDiscountRate(self, nominalDiscountRate)

    def setInflation(self, inflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setInflation(self, inflation)

    def setBaseDateMonth(self, baseDateMonth: "MonthOfYear") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateMonth(self, baseDateMonth)

    def resetBaseDateMonth(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateMonth(self)

    def setBaseDateYear(self, baseDateYear: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateYear(self, baseDateYear)

    def resetBaseDateYear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateYear(self)

    def setServiceDateMonth(self, serviceDateMonth: "MonthOfYear") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateMonth(self, serviceDateMonth)

    def resetServiceDateMonth(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateMonth(self)

    def setServiceDateYear(self, serviceDateYear: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateYear(self, serviceDateYear)

    def resetServiceDateYear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateYear(self)

    def setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears)

    def resetLengthOfStudyPeriodInYears(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetLengthOfStudyPeriodInYears(self)

    def setTaxRate(self, taxRate: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setTaxRate(self, taxRate)

    def resetTaxRate(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetTaxRate(self)

    def setDepreciationMethod(self, depreciationMethod: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDepreciationMethod(self, depreciationMethod)

    def resetDepreciationMethod(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDepreciationMethod(self)

    def setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates: "bool") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates)

    def resetUseNISTFuelEscalationRates(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetUseNISTFuelEscalationRates(self)

    def setNISTRegion(self, nistRegion: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTRegion(self, nistRegion)

    def resetNISTRegion(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTRegion(self)

    def setNISTSector(self, nistSector: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTSector(self, nistSector)

    def resetNISTSector(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTSector(self)

    def setElectricityInflation(self, electricityInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setElectricityInflation(self, electricityInflation)

    def resetElectricityInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetElectricityInflation(self)

    def setNaturalGasInflation(self, naturalGasInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNaturalGasInflation(self, naturalGasInflation)

    def resetNaturalGasInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNaturalGasInflation(self)

    def setSteamInflation(self, steamInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setSteamInflation(self, steamInflation)

    def resetSteamInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetSteamInflation(self)

    def setGasolineInflation(self, gasolineInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setGasolineInflation(self, gasolineInflation)

    def resetGasolineInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetGasolineInflation(self)

    def setDieselInflation(self, dieselInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDieselInflation(self, dieselInflation)

    def resetDieselInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDieselInflation(self)

    def setCoalInflation(self, coalInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setCoalInflation(self, coalInflation)

    def resetCoalInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetCoalInflation(self)

    def setFuelOil1Inflation(self, fuelOil1Inflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil1Inflation(self, fuelOil1Inflation)

    def resetFuelOil1Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil1Inflation(self)

    def setFuelOil2Inflation(self, fuelOil2Inflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil2Inflation(self, fuelOil2Inflation)

    def resetFuelOil2Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil2Inflation(self)

    def setPropaneInflation(self, propaneInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setPropaneInflation(self, propaneInflation)

    def resetPropaneInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetPropaneInflation(self)

    def setWaterInflation(self, waterInflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setWaterInflation(self, waterInflation)

    def resetWaterInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetWaterInflation(self)

    def setOtherFuel1Inflation(self, otherFuel1Inflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setOtherFuel1Inflation(self, otherFuel1Inflation)

    def resetOtherFuel1Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetOtherFuel1Inflation(self)

    def setOtherFuel2Inflation(self, otherFuel2Inflation: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setOtherFuel2Inflation(self, otherFuel2Inflation)

    def resetOtherFuel2Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetOtherFuel2Inflation(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.LifeCycleCostParameters_iddObjectType()

    @staticmethod
    def validAnalysisTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues()

    @staticmethod
    def validDiscountingConventionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues()

    @staticmethod
    def validInflationApproachValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues()

    @staticmethod
    def validDepreciationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues()

# Register LifeCycleCostParameters in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCostParameters_swigregister(LifeCycleCostParameters)

def LifeCycleCostParameters_nistYear() -> "int":
    return _openstudiomodelcore.LifeCycleCostParameters_nistYear()

def LifeCycleCostParameters_fempRealDiscountRate() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate()

def LifeCycleCostParameters_fempNominalDiscountRate() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate()

def LifeCycleCostParameters_fempInflation() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempInflation()

def LifeCycleCostParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.LifeCycleCostParameters_iddObjectType()

def LifeCycleCostParameters_validAnalysisTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues()

def LifeCycleCostParameters_validDiscountingConventionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues()

def LifeCycleCostParameters_validInflationApproachValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues()

def LifeCycleCostParameters_validDepreciationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues()


def toLifeCycleCostParameters(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
    return _openstudiomodelcore.toLifeCycleCostParameters(idfObject)

def getLifeCycleCostParameters(t_model: "Model") -> "openstudio::model::LifeCycleCostParameters":
    return _openstudiomodelcore.getLifeCycleCostParameters(t_model)

def getOptionalLifeCycleCostParameters(t_model: "Model") -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
    return _openstudiomodelcore.getOptionalLifeCycleCostParameters(t_model)

def _to_LifeCycleCostParameters(self) -> OptionalLifeCycleCostParameters:
    return toLifeCycleCostParameters(self)
openstudioutilitiesidf.IdfObject.to_LifeCycleCostParameters = _to_LifeCycleCostParameters

def _getLifeCycleCostParameters(self) -> LifeCycleCostParameters:
    return getLifeCycleCostParameters(self)
Model.getLifeCycleCostParameters = _getLifeCycleCostParameters

def _getOptionalLifeCycleCostParameters(self) -> OptionalLifeCycleCostParameters:
    return getOptionalLifeCycleCostParameters(self)
Model.getOptionalLifeCycleCostParameters = _getOptionalLifeCycleCostParameters

class RadianceParameters(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_RadianceParameters

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.RadianceParameters_iddObjectType()

    @staticmethod
    def skyDiscretizationResolutionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues()

    def accumulatedRaysperRecord(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_accumulatedRaysperRecord(self)

    def isAccumulatedRaysperRecordDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAccumulatedRaysperRecordDefaulted(self)

    def directThreshold(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directThreshold(self)

    def isDirectThresholdDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectThresholdDefaulted(self)

    def directCertainty(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directCertainty(self)

    def isDirectCertaintyDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectCertaintyDefaulted(self)

    def directJitter(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directJitter(self)

    def isDirectJitterDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectJitterDefaulted(self)

    def directPretest(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directPretest(self)

    def isDirectPretestDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectPretestDefaulted(self)

    def ambientBouncesVMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientBouncesVMX(self)

    def isAmbientBouncesVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesVMXDefaulted(self)

    def ambientBouncesDMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientBouncesDMX(self)

    def isAmbientBouncesDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesDMXDefaulted(self)

    def ambientDivisionsVMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsVMX(self)

    def isAmbientDivisionsVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsVMXDefaulted(self)

    def ambientDivisionsDMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsDMX(self)

    def isAmbientDivisionsDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsDMXDefaulted(self)

    def ambientSupersamples(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientSupersamples(self)

    def isAmbientSupersamplesDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientSupersamplesDefaulted(self)

    def limitWeightVMX(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_limitWeightVMX(self)

    def isLimitWeightVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isLimitWeightVMXDefaulted(self)

    def limitWeightDMX(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_limitWeightDMX(self)

    def isLimitWeightDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isLimitWeightDMXDefaulted(self)

    def klemsSamplingDensity(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_klemsSamplingDensity(self)

    def isKlemsSamplingDensityDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isKlemsSamplingDensityDefaulted(self)

    def skyDiscretizationResolution(self) -> "std::string":
        return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolution(self)

    def isCoarseSettings(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isCoarseSettings(self)

    def isFineSettings(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isFineSettings(self)

    def setAccumulatedRaysperRecord(self, accumulatedRaysperRecord: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAccumulatedRaysperRecord(self, accumulatedRaysperRecord)

    def resetAccumulatedRaysperRecord(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAccumulatedRaysperRecord(self)

    def setDirectThreshold(self, directThreshold: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectThreshold(self, directThreshold)

    def resetDirectThreshold(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectThreshold(self)

    def setDirectCertainty(self, directCertainty: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectCertainty(self, directCertainty)

    def resetDirectCertainty(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectCertainty(self)

    def setDirectJitter(self, directJitter: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectJitter(self, directJitter)

    def resetDirectJitter(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectJitter(self)

    def setDirectPretest(self, directPretest: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectPretest(self, directPretest)

    def resetDirectPretest(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectPretest(self)

    def setAmbientBouncesVMX(self, ambientBouncesVMX: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesVMX(self, ambientBouncesVMX)

    def resetAmbientBouncesVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesVMX(self)

    def setAmbientBouncesDMX(self, ambientBouncesDMX: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesDMX(self, ambientBouncesDMX)

    def resetAmbientBouncesDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesDMX(self)

    def setAmbientDivisionsVMX(self, ambientDivisionsVMX: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsVMX(self, ambientDivisionsVMX)

    def resetAmbientDivisionsVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsVMX(self)

    def setAmbientDivisionsDMX(self, ambientDivisionsDMX: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsDMX(self, ambientDivisionsDMX)

    def resetAmbientDivisionsDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsDMX(self)

    def setAmbientSupersamples(self, ambientSupersamples: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientSupersamples(self, ambientSupersamples)

    def resetAmbientSupersamples(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientSupersamples(self)

    def setLimitWeightVMX(self, limitWeightVMX: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setLimitWeightVMX(self, limitWeightVMX)

    def resetLimitWeightVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightVMX(self)

    def setLimitWeightDMX(self, limitWeightDMX: "double") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setLimitWeightDMX(self, limitWeightDMX)

    def resetLimitWeightDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightDMX(self)

    def setKlemsSamplingDensity(self, klemsSamplingDensity: "int") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setKlemsSamplingDensity(self, klemsSamplingDensity)

    def resetKlemsSamplingDensity(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetKlemsSamplingDensity(self)

    def setSkyDiscretizationResolution(self, skyDiscretizationResolution: "std::string") -> "bool":
        return _openstudiomodelcore.RadianceParameters_setSkyDiscretizationResolution(self, skyDiscretizationResolution)

    def resetSkyDiscretizationResolution(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetSkyDiscretizationResolution(self)

    def applyCoarseSettings(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_applyCoarseSettings(self)

    def applyFineSettings(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_applyFineSettings(self)

# Register RadianceParameters in _openstudiomodelcore:
_openstudiomodelcore.RadianceParameters_swigregister(RadianceParameters)

def RadianceParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.RadianceParameters_iddObjectType()

def RadianceParameters_skyDiscretizationResolutionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues()


def toRadianceParameters(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RadianceParameters >":
    return _openstudiomodelcore.toRadianceParameters(idfObject)

def getRadianceParameters(t_model: "Model") -> "openstudio::model::RadianceParameters":
    return _openstudiomodelcore.getRadianceParameters(t_model)

def getOptionalRadianceParameters(t_model: "Model") -> "boost::optional< openstudio::model::RadianceParameters >":
    return _openstudiomodelcore.getOptionalRadianceParameters(t_model)

def _to_RadianceParameters(self) -> OptionalRadianceParameters:
    return toRadianceParameters(self)
openstudioutilitiesidf.IdfObject.to_RadianceParameters = _to_RadianceParameters

def _getRadianceParameters(self) -> RadianceParameters:
    return getRadianceParameters(self)
Model.getRadianceParameters = _getRadianceParameters

def _getOptionalRadianceParameters(self) -> OptionalRadianceParameters:
    return getOptionalRadianceParameters(self)
Model.getOptionalRadianceParameters = _getOptionalRadianceParameters

class OutputMeter(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.OutputMeter_swiginit(self, _openstudiomodelcore.new_OutputMeter(model))
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeter

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.OutputMeter_remove(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.OutputMeter_iddObjectType()

    @staticmethod
    def meterRegex() -> "boost::regex":
        return _openstudiomodelcore.OutputMeter_meterRegex()

    @staticmethod
    def getName(specificEndUseType: "OptionalString", endUseType: "OptionalEndUseType", fuelType: "OptionalFuelType", installLocationType: "OptionalInstallLocationType", specificInstallLocation: "OptionalString") -> "std::string":
        return _openstudiomodelcore.OutputMeter_getName(specificEndUseType, endUseType, fuelType, installLocationType, specificInstallLocation)

    def name(self) -> "std::string":
        return _openstudiomodelcore.OutputMeter_name(self)

    def reportingFrequency(self) -> "std::string":
        return _openstudiomodelcore.OutputMeter_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isReportingFrequencyDefaulted(self)

    def meterFileOnly(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_meterFileOnly(self)

    def isMeterFileOnlyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isMeterFileOnlyDefaulted(self)

    def cumulative(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_cumulative(self)

    def isCumulativeDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isCumulativeDefaulted(self)

    def specificEndUse(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.OutputMeter_specificEndUse(self)

    def endUseType(self) -> "boost::optional< openstudio::EndUseType >":
        return _openstudiomodelcore.OutputMeter_endUseType(self)

    def fuelType(self) -> "boost::optional< openstudio::FuelType >":
        return _openstudiomodelcore.OutputMeter_fuelType(self)

    def installLocationType(self) -> "boost::optional< openstudio::InstallLocationType >":
        return _openstudiomodelcore.OutputMeter_installLocationType(self)

    def specificInstallLocation(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.OutputMeter_specificInstallLocation(self)

    def setName(self, name: "std::string") -> "bool":
        return _openstudiomodelcore.OutputMeter_setName(self, name)

    def setReportingFrequency(self, reportingFrequency: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputMeter_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetReportingFrequency(self)

    def setMeterFileOnly(self, meterFileOnly: "bool") -> "bool":
        return _openstudiomodelcore.OutputMeter_setMeterFileOnly(self, meterFileOnly)

    def resetMeterFileOnly(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetMeterFileOnly(self)

    def setCumulative(self, cumulative: "bool") -> "bool":
        return _openstudiomodelcore.OutputMeter_setCumulative(self, cumulative)

    def resetCumulative(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetCumulative(self)

    def setSpecificEndUse(self, specifcEndUse: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputMeter_setSpecificEndUse(self, specifcEndUse)

    def resetSpecificEndUse(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetSpecificEndUse(self)

    def setEndUseType(self, type: "EndUseType") -> "bool":
        return _openstudiomodelcore.OutputMeter_setEndUseType(self, type)

    def resetEndUseType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetEndUseType(self)

    def setFuelType(self, type: "FuelType") -> "bool":
        return _openstudiomodelcore.OutputMeter_setFuelType(self, type)

    def resetFuelType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetFuelType(self)

    def setInstallLocationType(self, type: "InstallLocationType") -> "bool":
        return _openstudiomodelcore.OutputMeter_setInstallLocationType(self, type)

    def resetInstallLocationType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetInstallLocationType(self)

    def setSpecificInstallLocation(self, locationName: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputMeter_setSpecificInstallLocation(self, locationName)

    def resetSpecificInstallLocation(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetSpecificInstallLocation(self)

    def getData(self, *args) -> "boost::optional< openstudio::TimeSeries >":
        return _openstudiomodelcore.OutputMeter_getData(self, *args)

# Register OutputMeter in _openstudiomodelcore:
_openstudiomodelcore.OutputMeter_swigregister(OutputMeter)

def OutputMeter_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputMeter_iddObjectType()

def OutputMeter_meterRegex() -> "boost::regex":
    return _openstudiomodelcore.OutputMeter_meterRegex()

def OutputMeter_getName(specificEndUseType: "OptionalString", endUseType: "OptionalEndUseType", fuelType: "OptionalFuelType", installLocationType: "OptionalInstallLocationType", specificInstallLocation: "OptionalString") -> "std::string":
    return _openstudiomodelcore.OutputMeter_getName(specificEndUseType, endUseType, fuelType, installLocationType, specificInstallLocation)


def MeterFuelTypeEquals(meter: "OutputMeter", ft: "FuelType") -> "bool":
    return _openstudiomodelcore.MeterFuelTypeEquals(meter, ft)

def toOutputMeter(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.toOutputMeter(idfObject)

def getOutputMeter(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.getOutputMeter(t_model, t_handle)

def getOutputMeters(t_model: "Model") -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > >":
    return _openstudiomodelcore.getOutputMeters(t_model)

def getOutputMeterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.getOutputMeterByName(t_model, t_name)

def getOutputMetersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > >":
    return _openstudiomodelcore.getOutputMetersByName(t_model, t_name, t_exactMatch)

def _to_OutputMeter(self) -> OptionalOutputMeter:
    return toOutputMeter(self)
openstudioutilitiesidf.IdfObject.to_OutputMeter = _to_OutputMeter

def _getOutputMeter(self, t_handle: "UUID") -> OptionalOutputMeter:
    return getOutputMeter(self, t_handle)
Model.getOutputMeter = _getOutputMeter

def _getOutputMeter(self, t_handle_str: str) -> OptionalOutputMeter:
    return getOutputMeter(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getOutputMeter = _getOutputMeter

def _getOutputMeters(self) -> OutputMeterVector:
    return getOutputMeters(self)
Model.getOutputMeters = _getOutputMeters

def _getOutputMeterByName(self, t_name: str) -> OptionalOutputMeter:
    return getOutputMeterByName(self, t_name)
Model.getOutputMeterByName = _getOutputMeterByName

def _getOutputMetersByName(self, t_name: str, t_exactMatch: bool) -> OutputMeterVector:
    return getOutputMetersByName(self, t_name, t_exactMatch)
Model.getOutputMetersByName = _getOutputMetersByName

class MeterCustom(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.MeterCustom_swiginit(self, _openstudiomodelcore.new_MeterCustom(model))
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustom

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.MeterCustom_iddObjectType()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.MeterCustom_fuelTypeValues()

    def fuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_fuelType(self)

    def keyVarGroups(self) -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >":
        return _openstudiomodelcore.MeterCustom_keyVarGroups(self)

    def numKeyVarGroups(self) -> "unsigned int":
        return _openstudiomodelcore.MeterCustom_numKeyVarGroups(self)

    def keyName(self, index: "unsigned int") -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_keyName(self, index)

    def outputVariableorMeterName(self, index: "unsigned int") -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_outputVariableorMeterName(self, index)

    def setFuelType(self, fuelType: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustom_setFuelType(self, fuelType)

    def resetFuelType(self) -> "void":
        return _openstudiomodelcore.MeterCustom_resetFuelType(self)

    def addKeyVarGroup(self, keyName: "std::string const &", outputVariableorMeterName: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustom_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex: "unsigned int") -> "bool":
        return _openstudiomodelcore.MeterCustom_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self) -> "void":
        return _openstudiomodelcore.MeterCustom_removeAllKeyVarGroups(self)

    def setKeyName(self, index: "unsigned int", str: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustom_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index: "unsigned int", str: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustom_setOutputVariableorMeterName(self, index, str)

# Register MeterCustom in _openstudiomodelcore:
_openstudiomodelcore.MeterCustom_swigregister(MeterCustom)

def MeterCustom_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.MeterCustom_iddObjectType()

def MeterCustom_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.MeterCustom_fuelTypeValues()


def toMeterCustom(idfObject: "IdfObject") -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.toMeterCustom(idfObject)

def getMeterCustom(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.getMeterCustom(t_model, t_handle)

def getMeterCustoms(t_model: "Model") -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > >":
    return _openstudiomodelcore.getMeterCustoms(t_model)

def getMeterCustomByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.getMeterCustomByName(t_model, t_name)

def getMeterCustomsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > >":
    return _openstudiomodelcore.getMeterCustomsByName(t_model, t_name, t_exactMatch)

def _to_MeterCustom(self) -> OptionalMeterCustom:
    return toMeterCustom(self)
openstudioutilitiesidf.IdfObject.to_MeterCustom = _to_MeterCustom

def _getMeterCustom(self, t_handle: "UUID") -> OptionalMeterCustom:
    return getMeterCustom(self, t_handle)
Model.getMeterCustom = _getMeterCustom

def _getMeterCustom(self, t_handle_str: str) -> OptionalMeterCustom:
    return getMeterCustom(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMeterCustom = _getMeterCustom

def _getMeterCustoms(self) -> MeterCustomVector:
    return getMeterCustoms(self)
Model.getMeterCustoms = _getMeterCustoms

def _getMeterCustomByName(self, t_name: str) -> OptionalMeterCustom:
    return getMeterCustomByName(self, t_name)
Model.getMeterCustomByName = _getMeterCustomByName

def _getMeterCustomsByName(self, t_name: str, t_exactMatch: bool) -> MeterCustomVector:
    return getMeterCustomsByName(self, t_name, t_exactMatch)
Model.getMeterCustomsByName = _getMeterCustomsByName

class MeterCustomDecrement(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", sourceMeterName: "std::string const &"):
        _openstudiomodelcore.MeterCustomDecrement_swiginit(self, _openstudiomodelcore.new_MeterCustomDecrement(model, sourceMeterName))
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrement

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.MeterCustomDecrement_iddObjectType()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues()

    def fuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_fuelType(self)

    def sourceMeterName(self) -> "std::string":
        return _openstudiomodelcore.MeterCustomDecrement_sourceMeterName(self)

    def keyVarGroups(self) -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >":
        return _openstudiomodelcore.MeterCustomDecrement_keyVarGroups(self)

    def numKeyVarGroups(self) -> "unsigned int":
        return _openstudiomodelcore.MeterCustomDecrement_numKeyVarGroups(self)

    def keyName(self, index: "unsigned int") -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_keyName(self, index)

    def outputVariableorMeterName(self, index: "unsigned int") -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_outputVariableorMeterName(self, index)

    def setFuelType(self, fuelType: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setFuelType(self, fuelType)

    def resetFuelType(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrement_resetFuelType(self)

    def setSourceMeterName(self, sourceMeterName: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setSourceMeterName(self, sourceMeterName)

    def addKeyVarGroup(self, keyName: "std::string const &", outputVariableorMeterName: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex: "unsigned int") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrement_removeAllKeyVarGroups(self)

    def setKeyName(self, index: "unsigned int", str: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index: "unsigned int", str: "std::string const &") -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setOutputVariableorMeterName(self, index, str)

# Register MeterCustomDecrement in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomDecrement_swigregister(MeterCustomDecrement)

def MeterCustomDecrement_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.MeterCustomDecrement_iddObjectType()

def MeterCustomDecrement_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues()


def toMeterCustomDecrement(idfObject: "IdfObject") -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.toMeterCustomDecrement(idfObject)

def getMeterCustomDecrement(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.getMeterCustomDecrement(t_model, t_handle)

def getMeterCustomDecrements(t_model: "Model") -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > >":
    return _openstudiomodelcore.getMeterCustomDecrements(t_model)

def getMeterCustomDecrementByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.getMeterCustomDecrementByName(t_model, t_name)

def getMeterCustomDecrementsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > >":
    return _openstudiomodelcore.getMeterCustomDecrementsByName(t_model, t_name, t_exactMatch)

def _to_MeterCustomDecrement(self) -> OptionalMeterCustomDecrement:
    return toMeterCustomDecrement(self)
openstudioutilitiesidf.IdfObject.to_MeterCustomDecrement = _to_MeterCustomDecrement

def _getMeterCustomDecrement(self, t_handle: "UUID") -> OptionalMeterCustomDecrement:
    return getMeterCustomDecrement(self, t_handle)
Model.getMeterCustomDecrement = _getMeterCustomDecrement

def _getMeterCustomDecrement(self, t_handle_str: str) -> OptionalMeterCustomDecrement:
    return getMeterCustomDecrement(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMeterCustomDecrement = _getMeterCustomDecrement

def _getMeterCustomDecrements(self) -> MeterCustomDecrementVector:
    return getMeterCustomDecrements(self)
Model.getMeterCustomDecrements = _getMeterCustomDecrements

def _getMeterCustomDecrementByName(self, t_name: str) -> OptionalMeterCustomDecrement:
    return getMeterCustomDecrementByName(self, t_name)
Model.getMeterCustomDecrementByName = _getMeterCustomDecrementByName

def _getMeterCustomDecrementsByName(self, t_name: str, t_exactMatch: bool) -> MeterCustomDecrementVector:
    return getMeterCustomDecrementsByName(self, t_name, t_exactMatch)
Model.getMeterCustomDecrementsByName = _getMeterCustomDecrementsByName

class LifeCycleCost(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelObject: "ModelObject"):
        _openstudiomodelcore.LifeCycleCost_swiginit(self, _openstudiomodelcore.new_LifeCycleCost(modelObject))
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCost

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.LifeCycleCost_iddObjectType()

    @staticmethod
    def validCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCost_validCategoryValues()

    @staticmethod
    def validItemTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCost_validItemTypeValues()

    @staticmethod
    def validStartOfCostsValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCost_validStartOfCostsValues()

    @staticmethod
    def createLifeCycleCost(name: "std::string const &", modelObject: "ModelObject", cost: "double", costUnits: "std::string const &", category: "std::string const &", repeatPeriodYears: "int"=0, yearsFromStart: "int"=0) -> "boost::optional< openstudio::model::LifeCycleCost >":
        return _openstudiomodelcore.LifeCycleCost_createLifeCycleCost(name, modelObject, cost, costUnits, category, repeatPeriodYears, yearsFromStart)

    def category(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_category(self)

    def itemType(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_itemType(self)

    def item(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.LifeCycleCost_item(self)

    def cost(self) -> "double":
        return _openstudiomodelcore.LifeCycleCost_cost(self)

    def validCostUnitsValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCost_validCostUnitsValues(self)

    def costUnits(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_costUnits(self)

    def startOfCosts(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_startOfCosts(self)

    def isStartOfCostsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isStartOfCostsDefaulted(self)

    def yearsFromStart(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_yearsFromStart(self)

    def isYearsFromStartDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isYearsFromStartDefaulted(self)

    def monthsFromStart(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_monthsFromStart(self)

    def isMonthsFromStartDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isMonthsFromStartDefaulted(self)

    def repeatPeriodYears(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodYears(self)

    def isRepeatPeriodYearsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodYearsDefaulted(self)

    def repeatPeriodMonths(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodMonths(self)

    def isRepeatPeriodMonthsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodMonthsDefaulted(self)

    def setCategory(self, category: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCategory(self, category)

    def setCost(self, cost: "double") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCost(self, cost)

    def setCostUnits(self, costUnits: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCostUnits(self, costUnits)

    def setStartOfCosts(self, startOfCosts: "std::string const &") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setStartOfCosts(self, startOfCosts)

    def resetStartOfCosts(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetStartOfCosts(self)

    def setYearsFromStart(self, yearsFromStart: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setYearsFromStart(self, yearsFromStart)

    def resetYearsFromStart(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetYearsFromStart(self)

    def setMonthsFromStart(self, monthsFromStart: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setMonthsFromStart(self, monthsFromStart)

    def resetMonthsFromStart(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetMonthsFromStart(self)

    def setRepeatPeriodYears(self, repeatPeriodYears: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodYears(self, repeatPeriodYears)

    def resetRepeatPeriodYears(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodYears(self)

    def setRepeatPeriodMonths(self, repeatPeriodMonths: "int") -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodMonths(self, repeatPeriodMonths)

    def resetRepeatPeriodMonths(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodMonths(self)

    def totalCost(self) -> "double":
        return _openstudiomodelcore.LifeCycleCost_totalCost(self)

    def convertToCostPerEach(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_convertToCostPerEach(self)

    def costedQuantity(self) -> "boost::optional< int >":
        return _openstudiomodelcore.LifeCycleCost_costedQuantity(self)

    def costedArea(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCost_costedArea(self)

    def costedThermalZones(self) -> "boost::optional< int >":
        return _openstudiomodelcore.LifeCycleCost_costedThermalZones(self)

# Register LifeCycleCost in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCost_swigregister(LifeCycleCost)

def LifeCycleCost_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.LifeCycleCost_iddObjectType()

def LifeCycleCost_validCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCost_validCategoryValues()

def LifeCycleCost_validItemTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCost_validItemTypeValues()

def LifeCycleCost_validStartOfCostsValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCost_validStartOfCostsValues()

def LifeCycleCost_createLifeCycleCost(name: "std::string const &", modelObject: "ModelObject", cost: "double", costUnits: "std::string const &", category: "std::string const &", repeatPeriodYears: "int"=0, yearsFromStart: "int"=0) -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.LifeCycleCost_createLifeCycleCost(name, modelObject, cost, costUnits, category, repeatPeriodYears, yearsFromStart)


def toLifeCycleCost(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.toLifeCycleCost(idfObject)

def getLifeCycleCost(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.getLifeCycleCost(t_model, t_handle)

def getLifeCycleCosts(t_model: "Model") -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
    return _openstudiomodelcore.getLifeCycleCosts(t_model)

def getLifeCycleCostByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.getLifeCycleCostByName(t_model, t_name)

def getLifeCycleCostsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
    return _openstudiomodelcore.getLifeCycleCostsByName(t_model, t_name, t_exactMatch)

def _to_LifeCycleCost(self) -> OptionalLifeCycleCost:
    return toLifeCycleCost(self)
openstudioutilitiesidf.IdfObject.to_LifeCycleCost = _to_LifeCycleCost

def _getLifeCycleCost(self, t_handle: "UUID") -> OptionalLifeCycleCost:
    return getLifeCycleCost(self, t_handle)
Model.getLifeCycleCost = _getLifeCycleCost

def _getLifeCycleCost(self, t_handle_str: str) -> OptionalLifeCycleCost:
    return getLifeCycleCost(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLifeCycleCost = _getLifeCycleCost

def _getLifeCycleCosts(self) -> LifeCycleCostVector:
    return getLifeCycleCosts(self)
Model.getLifeCycleCosts = _getLifeCycleCosts

def _getLifeCycleCostByName(self, t_name: str) -> OptionalLifeCycleCost:
    return getLifeCycleCostByName(self, t_name)
Model.getLifeCycleCostByName = _getLifeCycleCostByName

def _getLifeCycleCostsByName(self, t_name: str, t_exactMatch: bool) -> LifeCycleCostVector:
    return getLifeCycleCostsByName(self, t_name, t_exactMatch)
Model.getLifeCycleCostsByName = _getLifeCycleCostsByName

class BillingPeriod(ModelExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelcore.BillingPeriod_startDate(self)

    def endDate(self) -> "openstudio::Date":
        return _openstudiomodelcore.BillingPeriod_endDate(self)

    def numberOfDays(self) -> "unsigned int":
        return _openstudiomodelcore.BillingPeriod_numberOfDays(self)

    def consumption(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_consumption(self)

    def peakDemand(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_peakDemand(self)

    def totalCost(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_totalCost(self)

    def setStartDate(self, startDate: "Date") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setStartDate(self, startDate)

    def setEndDate(self, endDate: "Date") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setEndDate(self, endDate)

    def setNumberOfDays(self, numberOfDays: "unsigned int") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setNumberOfDays(self, numberOfDays)

    def setConsumption(self, consumption: "double") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setConsumption(self, consumption)

    def resetConsumption(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetConsumption(self)

    def setPeakDemand(self, peakDemand: "double") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setPeakDemand(self, peakDemand)

    def resetPeakDemand(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetPeakDemand(self)

    def setTotalCost(self, totalCost: "double") -> "bool":
        return _openstudiomodelcore.BillingPeriod_setTotalCost(self, totalCost)

    def resetTotalCost(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetTotalCost(self)

    def withinRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_withinRunPeriod(self)

    def withinPeriodicRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_withinPeriodicRunPeriod(self)

    def overlapsRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_overlapsRunPeriod(self)

    def modelConsumptionValues(self) -> "openstudio::Vector":
        return _openstudiomodelcore.BillingPeriod_modelConsumptionValues(self)

    def modelConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelConsumption(self)

    def modelPeakDemand(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelPeakDemand(self)

    def modelTotalCost(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelTotalCost(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriod

# Register BillingPeriod in _openstudiomodelcore:
_openstudiomodelcore.BillingPeriod_swigregister(BillingPeriod)

class UtilityBill(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fuelType: "FuelType", model: "Model"):
        _openstudiomodelcore.UtilityBill_swiginit(self, _openstudiomodelcore.new_UtilityBill(fuelType, model))
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBill

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.UtilityBill_iddObjectType()

    def consumptionUnitValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.UtilityBill_consumptionUnitValues(self)

    def peakDemandUnitValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitValues(self)

    @staticmethod
    def calibrationGuidelines() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.UtilityBill_calibrationGuidelines()

    @staticmethod
    def maxNMBE(calibrationGuideline: "std::string const &") -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_maxNMBE(calibrationGuideline)

    @staticmethod
    def maxCVRMSE(calibrationGuideline: "std::string const &") -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_maxCVRMSE(calibrationGuideline)

    def fuelType(self) -> "openstudio::FuelType":
        return _openstudiomodelcore.UtilityBill_fuelType(self)

    def meterInstallLocation(self) -> "openstudio::InstallLocationType":
        return _openstudiomodelcore.UtilityBill_meterInstallLocation(self)

    def isMeterInstallLocationDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isMeterInstallLocationDefaulted(self)

    def meterSpecificInstallLocation(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_meterSpecificInstallLocation(self)

    def meterEndUseCategory(self) -> "boost::optional< openstudio::EndUseCategoryType >":
        return _openstudiomodelcore.UtilityBill_meterEndUseCategory(self)

    def meterSpecificEndUse(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_meterSpecificEndUse(self)

    def consumptionUnit(self) -> "std::string":
        return _openstudiomodelcore.UtilityBill_consumptionUnit(self)

    def consumptionUnitDescription(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_consumptionUnitDescription(self)

    def consumptionUnitConversionFactor(self) -> "double":
        return _openstudiomodelcore.UtilityBill_consumptionUnitConversionFactor(self)

    def isConsumptionUnitConversionFactorDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isConsumptionUnitConversionFactorDefaulted(self)

    def peakDemandUnit(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnit(self)

    def peakDemandUnitDescription(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitDescription(self)

    def peakDemandUnitConversionFactor(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitConversionFactor(self)

    def timestepsInPeakDemandWindow(self) -> "boost::optional< unsigned int >":
        return _openstudiomodelcore.UtilityBill_timestepsInPeakDemandWindow(self)

    def isTimestepsInPeakDemandWindowDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isTimestepsInPeakDemandWindowDefaulted(self)

    def minutesInPeakDemandWindow(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_minutesInPeakDemandWindow(self)

    def billingPeriods(self) -> "std::vector< openstudio::model::BillingPeriod,std::allocator< openstudio::model::BillingPeriod > >":
        return _openstudiomodelcore.UtilityBill_billingPeriods(self)

    def setMeterInstallLocation(self, meterInstallLocation: "InstallLocationType") -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterInstallLocation(self, meterInstallLocation)

    def resetMeterInstallLocation(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterInstallLocation(self)

    def setMeterSpecificInstallLocation(self, meterSpecificInstallLocation: "std::string const &") -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterSpecificInstallLocation(self, meterSpecificInstallLocation)

    def resetMeterSpecificInstallLocation(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificInstallLocation(self)

    def setMeterEndUseCategory(self, meterEndUseCategory: "EndUseCategoryType") -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterEndUseCategory(self, meterEndUseCategory)

    def resetMeterEndUseCategory(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterEndUseCategory(self)

    def setMeterSpecificEndUse(self, meterSpecificEndUse: "std::string const &") -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterSpecificEndUse(self, meterSpecificEndUse)

    def resetMeterSpecificEndUse(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificEndUse(self)

    def setConsumptionUnit(self, consumptionUnit: "std::string const &") -> "bool":
        return _openstudiomodelcore.UtilityBill_setConsumptionUnit(self, consumptionUnit)

    def setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor: "double") -> "bool":
        return _openstudiomodelcore.UtilityBill_setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor)

    def resetConsumptionUnitConversionFactor(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetConsumptionUnitConversionFactor(self)

    def setPeakDemandUnit(self, peakDemandUnit: "std::string const &") -> "bool":
        return _openstudiomodelcore.UtilityBill_setPeakDemandUnit(self, peakDemandUnit)

    def setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow: "unsigned int") -> "bool":
        return _openstudiomodelcore.UtilityBill_setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow)

    def resetTimestepsInPeakDemandWindow(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetTimestepsInPeakDemandWindow(self)

    def clearBillingPeriods(self) -> "void":
        return _openstudiomodelcore.UtilityBill_clearBillingPeriods(self)

    def addBillingPeriod(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.UtilityBill_addBillingPeriod(self)

    def consumptionMeter(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.UtilityBill_consumptionMeter(self)

    def peakDemandMeter(self) -> "boost::optional< openstudio::model::OutputMeter >":
        return _openstudiomodelcore.UtilityBill_peakDemandMeter(self)

    def numberBillingPeriodsInCalculations(self) -> "unsigned int":
        return _openstudiomodelcore.UtilityBill_numberBillingPeriodsInCalculations(self)

    def CVRMSE(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_CVRMSE(self)

    def NMBE(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_NMBE(self)

# Register UtilityBill in _openstudiomodelcore:
_openstudiomodelcore.UtilityBill_swigregister(UtilityBill)

def UtilityBill_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.UtilityBill_iddObjectType()

def UtilityBill_calibrationGuidelines() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.UtilityBill_calibrationGuidelines()

def UtilityBill_maxNMBE(calibrationGuideline: "std::string const &") -> "boost::optional< double >":
    return _openstudiomodelcore.UtilityBill_maxNMBE(calibrationGuideline)

def UtilityBill_maxCVRMSE(calibrationGuideline: "std::string const &") -> "boost::optional< double >":
    return _openstudiomodelcore.UtilityBill_maxCVRMSE(calibrationGuideline)


def toUtilityBill(idfObject: "IdfObject") -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.toUtilityBill(idfObject)

def getUtilityBill(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.getUtilityBill(t_model, t_handle)

def getUtilityBills(t_model: "Model") -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > >":
    return _openstudiomodelcore.getUtilityBills(t_model)

def getUtilityBillByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.getUtilityBillByName(t_model, t_name)

def getUtilityBillsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > >":
    return _openstudiomodelcore.getUtilityBillsByName(t_model, t_name, t_exactMatch)

def _to_UtilityBill(self) -> OptionalUtilityBill:
    return toUtilityBill(self)
openstudioutilitiesidf.IdfObject.to_UtilityBill = _to_UtilityBill

def _getUtilityBill(self, t_handle: "UUID") -> OptionalUtilityBill:
    return getUtilityBill(self, t_handle)
Model.getUtilityBill = _getUtilityBill

def _getUtilityBill(self, t_handle_str: str) -> OptionalUtilityBill:
    return getUtilityBill(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getUtilityBill = _getUtilityBill

def _getUtilityBills(self) -> UtilityBillVector:
    return getUtilityBills(self)
Model.getUtilityBills = _getUtilityBills

def _getUtilityBillByName(self, t_name: str) -> OptionalUtilityBill:
    return getUtilityBillByName(self, t_name)
Model.getUtilityBillByName = _getUtilityBillByName

def _getUtilityBillsByName(self, t_name: str, t_exactMatch: bool) -> UtilityBillVector:
    return getUtilityBillsByName(self, t_name, t_exactMatch)
Model.getUtilityBillsByName = _getUtilityBillsByName


def toBillingPeriod(extensibleGroup: "IdfExtensibleGroup") -> "boost::optional< openstudio::model::BillingPeriod >":
    return _openstudiomodelcore.toBillingPeriod(extensibleGroup)

def _to_BillingPeriod(self) -> OptionalBillingPeriod:
    return toBillingPeriod(self)
openstudioutilitiesidf.IdfExtensibleGroup.to_BillingPeriod = _to_BillingPeriod

class ComponentData(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ComponentData_iddObjectType()

    def uuid(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_uuid(self)

    def versionUUID(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_versionUUID(self)

    def creationTimestamp(self) -> "boost::optional< int >":
        return _openstudiomodelcore.ComponentData_creationTimestamp(self)

    def versionTimestamp(self) -> "boost::optional< int >":
        return _openstudiomodelcore.ComponentData_versionTimestamp(self)

    def primaryComponentObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ComponentData_primaryComponentObject(self)

    def componentObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ComponentData_componentObjects(self)

    def getComponentObject(self, objectIndex: "unsigned int") -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ComponentData_getComponentObject(self, objectIndex)

    def createVersionUUID(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_createVersionUUID(self)

    def numComponentObjects(self) -> "unsigned int":
        return _openstudiomodelcore.ComponentData_numComponentObjects(self)

# Register ComponentData in _openstudiomodelcore:
_openstudiomodelcore.ComponentData_swigregister(ComponentData)

def ComponentData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ComponentData_iddObjectType()


def toComponentData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.toComponentData(idfObject)

def getComponentData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.getComponentData(t_model, t_handle)

def getComponentDatas(t_model: "Model") -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > >":
    return _openstudiomodelcore.getComponentDatas(t_model)

def getComponentDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.getComponentDataByName(t_model, t_name)

def getComponentDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > >":
    return _openstudiomodelcore.getComponentDatasByName(t_model, t_name, t_exactMatch)

def _to_ComponentData(self) -> OptionalComponentData:
    return toComponentData(self)
openstudioutilitiesidf.IdfObject.to_ComponentData = _to_ComponentData

def _getComponentData(self, t_handle: "UUID") -> OptionalComponentData:
    return getComponentData(self, t_handle)
Model.getComponentData = _getComponentData

def _getComponentData(self, t_handle_str: str) -> OptionalComponentData:
    return getComponentData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getComponentData = _getComponentData

def _getComponentDatas(self) -> ComponentDataVector:
    return getComponentDatas(self)
Model.getComponentDatas = _getComponentDatas

def _getComponentDataByName(self, t_name: str) -> OptionalComponentData:
    return getComponentDataByName(self, t_name)
Model.getComponentDataByName = _getComponentDataByName

def _getComponentDatasByName(self, t_name: str, t_exactMatch: bool) -> ComponentDataVector:
    return getComponentDatasByName(self, t_name, t_exactMatch)
Model.getComponentDatasByName = _getComponentDatasByName

class ScheduleTypeLimits(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.ScheduleTypeLimits_swiginit(self, _openstudiomodelcore.new_ScheduleTypeLimits(model))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimits

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleTypeLimits_iddObjectType()

    @staticmethod
    def numericTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues()

    @staticmethod
    def unitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues()

    def lowerLimitValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleTypeLimits_lowerLimitValue(self)

    def upperLimitValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleTypeLimits_upperLimitValue(self)

    def numericType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.ScheduleTypeLimits_numericType(self)

    def unitType(self) -> "std::string":
        return _openstudiomodelcore.ScheduleTypeLimits_unitType(self)

    def isUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_isUnitTypeDefaulted(self)

    def units(self, *args) -> "boost::optional< openstudio::Unit >":
        return _openstudiomodelcore.ScheduleTypeLimits_units(self, *args)

    def setLowerLimitValue(self, lowerLimitValue: "double") -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setLowerLimitValue(self, lowerLimitValue)

    def resetLowerLimitValue(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetLowerLimitValue(self)

    def setUpperLimitValue(self, upperLimitValue: "double") -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setUpperLimitValue(self, upperLimitValue)

    def resetUpperLimitValue(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetUpperLimitValue(self)

    def setNumericType(self, numericType: "std::string") -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setNumericType(self, numericType)

    def resetNumericType(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetNumericType(self)

    def setUnitType(self, unitType: "std::string") -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setUnitType(self, unitType)

    def resetUnitType(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetUnitType(self)

# Register ScheduleTypeLimits in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeLimits_swigregister(ScheduleTypeLimits)

def ScheduleTypeLimits_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleTypeLimits_iddObjectType()

def ScheduleTypeLimits_numericTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues()

def ScheduleTypeLimits_unitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues()


def isCompatible(parentLimits: "ScheduleTypeLimits", candidate: "ScheduleTypeLimits") -> "bool":
    return _openstudiomodelcore.isCompatible(parentLimits, candidate)

def toScheduleTypeLimits(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.toScheduleTypeLimits(idfObject)

def getScheduleTypeLimits(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.getScheduleTypeLimits(t_model, t_handle)

def getScheduleTypeLimitss(t_model: "Model") -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelcore.getScheduleTypeLimitss(t_model)

def getScheduleTypeLimitsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.getScheduleTypeLimitsByName(t_model, t_name)

def getScheduleTypeLimitssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelcore.getScheduleTypeLimitssByName(t_model, t_name, t_exactMatch)

def _to_ScheduleTypeLimits(self) -> OptionalScheduleTypeLimits:
    return toScheduleTypeLimits(self)
openstudioutilitiesidf.IdfObject.to_ScheduleTypeLimits = _to_ScheduleTypeLimits

def _getScheduleTypeLimits(self, t_handle: "UUID") -> OptionalScheduleTypeLimits:
    return getScheduleTypeLimits(self, t_handle)
Model.getScheduleTypeLimits = _getScheduleTypeLimits

def _getScheduleTypeLimits(self, t_handle_str: str) -> OptionalScheduleTypeLimits:
    return getScheduleTypeLimits(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleTypeLimits = _getScheduleTypeLimits

def _getScheduleTypeLimitss(self) -> ScheduleTypeLimitsVector:
    return getScheduleTypeLimitss(self)
Model.getScheduleTypeLimitss = _getScheduleTypeLimitss

def _getScheduleTypeLimitsByName(self, t_name: str) -> OptionalScheduleTypeLimits:
    return getScheduleTypeLimitsByName(self, t_name)
Model.getScheduleTypeLimitsByName = _getScheduleTypeLimitsByName

def _getScheduleTypeLimitssByName(self, t_name: str, t_exactMatch: bool) -> ScheduleTypeLimitsVector:
    return getScheduleTypeLimitssByName(self, t_name, t_exactMatch)
Model.getScheduleTypeLimitssByName = _getScheduleTypeLimitssByName

class ScheduleBase(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBase

    def scheduleTypeLimits(self) -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
        return _openstudiomodelcore.ScheduleBase_scheduleTypeLimits(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits: "ScheduleTypeLimits") -> "bool":
        return _openstudiomodelcore.ScheduleBase_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self) -> "bool":
        return _openstudiomodelcore.ScheduleBase_resetScheduleTypeLimits(self)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelcore.ScheduleBase_ensureNoLeapDays(self)

# Register ScheduleBase in _openstudiomodelcore:
_openstudiomodelcore.ScheduleBase_swigregister(ScheduleBase)


def toScheduleBase(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.toScheduleBase(idfObject)

def getScheduleBase(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.getScheduleBase(t_model, t_handle)

def getScheduleBases(t_model: "Model") -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > >":
    return _openstudiomodelcore.getScheduleBases(t_model)

def getScheduleBaseByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.getScheduleBaseByName(t_model, t_name)

def getScheduleBasesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > >":
    return _openstudiomodelcore.getScheduleBasesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleBase(self) -> OptionalScheduleBase:
    return toScheduleBase(self)
openstudioutilitiesidf.IdfObject.to_ScheduleBase = _to_ScheduleBase

def _getScheduleBase(self, t_handle: "UUID") -> OptionalScheduleBase:
    return getScheduleBase(self, t_handle)
Model.getScheduleBase = _getScheduleBase

def _getScheduleBase(self, t_handle_str: str) -> OptionalScheduleBase:
    return getScheduleBase(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleBase = _getScheduleBase

def _getScheduleBases(self) -> ScheduleBaseVector:
    return getScheduleBases(self)
Model.getScheduleBases = _getScheduleBases

def _getScheduleBaseByName(self, t_name: str) -> OptionalScheduleBase:
    return getScheduleBaseByName(self, t_name)
Model.getScheduleBaseByName = _getScheduleBaseByName

def _getScheduleBasesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleBaseVector:
    return getScheduleBasesByName(self, t_name, t_exactMatch)
Model.getScheduleBasesByName = _getScheduleBasesByName

class Schedule(ScheduleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Schedule

# Register Schedule in _openstudiomodelcore:
_openstudiomodelcore.Schedule_swigregister(Schedule)


def toSchedule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.toSchedule(idfObject)

def getSchedule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.getSchedule(t_model, t_handle)

def getSchedules(t_model: "Model") -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelcore.getSchedules(t_model)

def getScheduleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.getScheduleByName(t_model, t_name)

def getSchedulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelcore.getSchedulesByName(t_model, t_name, t_exactMatch)

def _to_Schedule(self) -> OptionalSchedule:
    return toSchedule(self)
openstudioutilitiesidf.IdfObject.to_Schedule = _to_Schedule

def _getSchedule(self, t_handle: "UUID") -> OptionalSchedule:
    return getSchedule(self, t_handle)
Model.getSchedule = _getSchedule

def _getSchedule(self, t_handle_str: str) -> OptionalSchedule:
    return getSchedule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSchedule = _getSchedule

def _getSchedules(self) -> ScheduleVector:
    return getSchedules(self)
Model.getSchedules = _getSchedules

def _getScheduleByName(self, t_name: str) -> OptionalSchedule:
    return getScheduleByName(self, t_name)
Model.getScheduleByName = _getScheduleByName

def _getSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleVector:
    return getSchedulesByName(self, t_name, t_exactMatch)
Model.getSchedulesByName = _getSchedulesByName

class ScheduleDay(ScheduleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleDay_swiginit(self, _openstudiomodelcore.new_ScheduleDay(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDay

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleDay_iddObjectType()

    def isScheduleTypeLimitsDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_isScheduleTypeLimitsDefaulted(self)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_isInterpolatetoTimestepDefaulted(self)

    def times(self) -> "std::vector< openstudio::Time,std::allocator< openstudio::Time > >":
        return _openstudiomodelcore.ScheduleDay_times(self)

    def values(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelcore.ScheduleDay_values(self)

    def getValue(self, time: "Time") -> "double":
        return _openstudiomodelcore.ScheduleDay_getValue(self, time)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleDay_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelcore.ScheduleDay_resetInterpolatetoTimestep(self)

    def addValue(self, untilTime: "Time", value: "double") -> "bool":
        return _openstudiomodelcore.ScheduleDay_addValue(self, untilTime, value)

    def removeValue(self, time: "Time") -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleDay_removeValue(self, time)

    def clearValues(self) -> "void":
        return _openstudiomodelcore.ScheduleDay_clearValues(self)

# Register ScheduleDay in _openstudiomodelcore:
_openstudiomodelcore.ScheduleDay_swigregister(ScheduleDay)

def ScheduleDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleDay_iddObjectType()


def toScheduleDay(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.toScheduleDay(idfObject)

def getScheduleDay(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.getScheduleDay(t_model, t_handle)

def getScheduleDays(t_model: "Model") -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
    return _openstudiomodelcore.getScheduleDays(t_model)

def getScheduleDayByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.getScheduleDayByName(t_model, t_name)

def getScheduleDaysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
    return _openstudiomodelcore.getScheduleDaysByName(t_model, t_name, t_exactMatch)

def _to_ScheduleDay(self) -> OptionalScheduleDay:
    return toScheduleDay(self)
openstudioutilitiesidf.IdfObject.to_ScheduleDay = _to_ScheduleDay

def _getScheduleDay(self, t_handle: "UUID") -> OptionalScheduleDay:
    return getScheduleDay(self, t_handle)
Model.getScheduleDay = _getScheduleDay

def _getScheduleDay(self, t_handle_str: str) -> OptionalScheduleDay:
    return getScheduleDay(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleDay = _getScheduleDay

def _getScheduleDays(self) -> ScheduleDayVector:
    return getScheduleDays(self)
Model.getScheduleDays = _getScheduleDays

def _getScheduleDayByName(self, t_name: str) -> OptionalScheduleDay:
    return getScheduleDayByName(self, t_name)
Model.getScheduleDayByName = _getScheduleDayByName

def _getScheduleDaysByName(self, t_name: str, t_exactMatch: bool) -> ScheduleDayVector:
    return getScheduleDaysByName(self, t_name, t_exactMatch)
Model.getScheduleDaysByName = _getScheduleDaysByName

class ScheduleWeek(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.ScheduleWeek_swiginit(self, _openstudiomodelcore.new_ScheduleWeek(model))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeek

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleWeek_iddObjectType()

    def sundaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_sundaySchedule(self)

    def mondaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_mondaySchedule(self)

    def tuesdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_tuesdaySchedule(self)

    def wednesdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_wednesdaySchedule(self)

    def thursdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_thursdaySchedule(self)

    def fridaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_fridaySchedule(self)

    def saturdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_saturdaySchedule(self)

    def holidaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_holidaySchedule(self)

    def summerDesignDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_summerDesignDaySchedule(self)

    def winterDesignDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_winterDesignDaySchedule(self)

    def customDay1Schedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_customDay1Schedule(self)

    def customDay2Schedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_customDay2Schedule(self)

    def setSundaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSundaySchedule(self, schedule)

    def setMondaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setMondaySchedule(self, schedule)

    def setTuesdaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setTuesdaySchedule(self, schedule)

    def setWednesdaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWednesdaySchedule(self, schedule)

    def setThursdaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setThursdaySchedule(self, schedule)

    def setFridaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setFridaySchedule(self, schedule)

    def setSaturdaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSaturdaySchedule(self, schedule)

    def setHolidaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setHolidaySchedule(self, schedule)

    def setSummerDesignDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSummerDesignDaySchedule(self, schedule)

    def setWinterDesignDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWinterDesignDaySchedule(self, schedule)

    def setCustomDay1Schedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setCustomDay1Schedule(self, schedule)

    def setCustomDay2Schedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setCustomDay2Schedule(self, schedule)

    def setAllSchedules(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setAllSchedules(self, schedule)

    def setWeekdaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWeekdaySchedule(self, schedule)

    def setWeekendSchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWeekendSchedule(self, schedule)

# Register ScheduleWeek in _openstudiomodelcore:
_openstudiomodelcore.ScheduleWeek_swigregister(ScheduleWeek)

def ScheduleWeek_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleWeek_iddObjectType()


def toScheduleWeek(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.toScheduleWeek(idfObject)

def getScheduleWeek(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.getScheduleWeek(t_model, t_handle)

def getScheduleWeeks(t_model: "Model") -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
    return _openstudiomodelcore.getScheduleWeeks(t_model)

def getScheduleWeekByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.getScheduleWeekByName(t_model, t_name)

def getScheduleWeeksByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
    return _openstudiomodelcore.getScheduleWeeksByName(t_model, t_name, t_exactMatch)

def _to_ScheduleWeek(self) -> OptionalScheduleWeek:
    return toScheduleWeek(self)
openstudioutilitiesidf.IdfObject.to_ScheduleWeek = _to_ScheduleWeek

def _getScheduleWeek(self, t_handle: "UUID") -> OptionalScheduleWeek:
    return getScheduleWeek(self, t_handle)
Model.getScheduleWeek = _getScheduleWeek

def _getScheduleWeek(self, t_handle_str: str) -> OptionalScheduleWeek:
    return getScheduleWeek(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleWeek = _getScheduleWeek

def _getScheduleWeeks(self) -> ScheduleWeekVector:
    return getScheduleWeeks(self)
Model.getScheduleWeeks = _getScheduleWeeks

def _getScheduleWeekByName(self, t_name: str) -> OptionalScheduleWeek:
    return getScheduleWeekByName(self, t_name)
Model.getScheduleWeekByName = _getScheduleWeekByName

def _getScheduleWeeksByName(self, t_name: str, t_exactMatch: bool) -> ScheduleWeekVector:
    return getScheduleWeeksByName(self, t_name, t_exactMatch)
Model.getScheduleWeeksByName = _getScheduleWeeksByName

class ScheduleYear(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.ScheduleYear_swiginit(self, _openstudiomodelcore.new_ScheduleYear(model))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYear

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleYear_iddObjectType()

    def dates(self) -> "std::vector< openstudio::Date,std::allocator< openstudio::Date > >":
        return _openstudiomodelcore.ScheduleYear_dates(self)

    def scheduleWeeks(self) -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
        return _openstudiomodelcore.ScheduleYear_scheduleWeeks(self)

    def addScheduleWeek(self, untilDate: "Date", scheduleWeek: "ScheduleWeek") -> "bool":
        return _openstudiomodelcore.ScheduleYear_addScheduleWeek(self, untilDate, scheduleWeek)

    def clearScheduleWeeks(self) -> "void":
        return _openstudiomodelcore.ScheduleYear_clearScheduleWeeks(self)

    def getScheduleWeek(self, date: "Date") -> "boost::optional< openstudio::model::ScheduleWeek >":
        return _openstudiomodelcore.ScheduleYear_getScheduleWeek(self, date)

# Register ScheduleYear in _openstudiomodelcore:
_openstudiomodelcore.ScheduleYear_swigregister(ScheduleYear)

def ScheduleYear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleYear_iddObjectType()


def toScheduleYear(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.toScheduleYear(idfObject)

def getScheduleYear(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.getScheduleYear(t_model, t_handle)

def getScheduleYears(t_model: "Model") -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > >":
    return _openstudiomodelcore.getScheduleYears(t_model)

def getScheduleYearByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.getScheduleYearByName(t_model, t_name)

def getScheduleYearsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > >":
    return _openstudiomodelcore.getScheduleYearsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleYear(self) -> OptionalScheduleYear:
    return toScheduleYear(self)
openstudioutilitiesidf.IdfObject.to_ScheduleYear = _to_ScheduleYear

def _getScheduleYear(self, t_handle: "UUID") -> OptionalScheduleYear:
    return getScheduleYear(self, t_handle)
Model.getScheduleYear = _getScheduleYear

def _getScheduleYear(self, t_handle_str: str) -> OptionalScheduleYear:
    return getScheduleYear(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleYear = _getScheduleYear

def _getScheduleYears(self) -> ScheduleYearVector:
    return getScheduleYears(self)
Model.getScheduleYears = _getScheduleYears

def _getScheduleYearByName(self, t_name: str) -> OptionalScheduleYear:
    return getScheduleYearByName(self, t_name)
Model.getScheduleYearByName = _getScheduleYearByName

def _getScheduleYearsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleYearVector:
    return getScheduleYearsByName(self, t_name, t_exactMatch)
Model.getScheduleYearsByName = _getScheduleYearsByName

class ScheduleRule(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRule_swiginit(self, _openstudiomodelcore.new_ScheduleRule(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRule

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleRule_iddObjectType()

    @staticmethod
    def validDateSpecificationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues()

    def scheduleRuleset(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.ScheduleRule_scheduleRuleset(self)

    def ruleIndex(self) -> "int":
        return _openstudiomodelcore.ScheduleRule_ruleIndex(self)

    def daySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRule_daySchedule(self)

    def applySunday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applySunday(self)

    def applyMonday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyMonday(self)

    def applyTuesday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyTuesday(self)

    def applyWednesday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyWednesday(self)

    def applyThursday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyThursday(self)

    def applyFriday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyFriday(self)

    def applySaturday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applySaturday(self)

    def dateSpecificationType(self) -> "std::string":
        return _openstudiomodelcore.ScheduleRule_dateSpecificationType(self)

    def startDate(self) -> "boost::optional< openstudio::Date >":
        return _openstudiomodelcore.ScheduleRule_startDate(self)

    def endDate(self) -> "boost::optional< openstudio::Date >":
        return _openstudiomodelcore.ScheduleRule_endDate(self)

    def specificDates(self) -> "std::vector< openstudio::Date,std::allocator< openstudio::Date > >":
        return _openstudiomodelcore.ScheduleRule_specificDates(self)

    def setApplySunday(self, applySunday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplySunday(self, applySunday)

    def setApplySundayNoFail(self, applySunday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplySundayNoFail(self, applySunday)

    def setApplyMonday(self, applyMonday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyMonday(self, applyMonday)

    def setApplyMondayNoFail(self, applyMonday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyMondayNoFail(self, applyMonday)

    def setApplyTuesday(self, applyTuesday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyTuesday(self, applyTuesday)

    def setApplyTuesdayNoFail(self, applyTuesday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyTuesdayNoFail(self, applyTuesday)

    def setApplyWednesday(self, applyWednesday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyWednesday(self, applyWednesday)

    def setApplyWednesdayNoFail(self, applyWednesday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyWednesdayNoFail(self, applyWednesday)

    def setApplyThursday(self, applyThursday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyThursday(self, applyThursday)

    def setApplyThursdayNoFail(self, applyThursday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyThursdayNoFail(self, applyThursday)

    def setApplyFriday(self, applyFriday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyFriday(self, applyFriday)

    def setApplyFridayNoFail(self, applyFriday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyFridayNoFail(self, applyFriday)

    def setApplySaturday(self, applySaturday: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplySaturday(self, applySaturday)

    def setApplySaturdayNoFail(self, applySaturday: "bool") -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplySaturdayNoFail(self, applySaturday)

    def setStartDate(self, date: "Date") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setStartDate(self, date)

    def setEndDate(self, date: "Date") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setEndDate(self, date)

    def addSpecificDate(self, date: "Date") -> "bool":
        return _openstudiomodelcore.ScheduleRule_addSpecificDate(self, date)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelcore.ScheduleRule_ensureNoLeapDays(self)

    def containsDate(self, date: "Date") -> "bool":
        return _openstudiomodelcore.ScheduleRule_containsDate(self, date)

    def containsDates(self, dates: "DateVector") -> "std::vector< bool,std::allocator< bool > >":
        return _openstudiomodelcore.ScheduleRule_containsDates(self, dates)

    def applyAllDays(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyAllDays(self)

    def applyWeekdays(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyWeekdays(self)

    def applyWeekends(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyWeekends(self)

    def setApplyAllDays(self, applyAllDays: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyAllDays(self, applyAllDays)

    def setApplyWeekdays(self, applyWeekdays: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyWeekdays(self, applyWeekdays)

    def setApplyWeekends(self, applyWeekends: "bool") -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyWeekends(self, applyWeekends)

# Register ScheduleRule in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRule_swigregister(ScheduleRule)

def ScheduleRule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleRule_iddObjectType()

def ScheduleRule_validDateSpecificationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues()


def toScheduleRule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.toScheduleRule(idfObject)

def getScheduleRule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.getScheduleRule(t_model, t_handle)

def getScheduleRules(t_model: "Model") -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
    return _openstudiomodelcore.getScheduleRules(t_model)

def getScheduleRuleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.getScheduleRuleByName(t_model, t_name)

def getScheduleRulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
    return _openstudiomodelcore.getScheduleRulesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleRule(self) -> OptionalScheduleRule:
    return toScheduleRule(self)
openstudioutilitiesidf.IdfObject.to_ScheduleRule = _to_ScheduleRule

def _getScheduleRule(self, t_handle: "UUID") -> OptionalScheduleRule:
    return getScheduleRule(self, t_handle)
Model.getScheduleRule = _getScheduleRule

def _getScheduleRule(self, t_handle_str: str) -> OptionalScheduleRule:
    return getScheduleRule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleRule = _getScheduleRule

def _getScheduleRules(self) -> ScheduleRuleVector:
    return getScheduleRules(self)
Model.getScheduleRules = _getScheduleRules

def _getScheduleRuleByName(self, t_name: str) -> OptionalScheduleRule:
    return getScheduleRuleByName(self, t_name)
Model.getScheduleRuleByName = _getScheduleRuleByName

def _getScheduleRulesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleRuleVector:
    return getScheduleRulesByName(self, t_name, t_exactMatch)
Model.getScheduleRulesByName = _getScheduleRulesByName

class ScheduleRuleset(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRuleset_swiginit(self, _openstudiomodelcore.new_ScheduleRuleset(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleset

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ScheduleRuleset_iddObjectType()

    def defaultDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_defaultDaySchedule(self)

    def summerDesignDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_summerDesignDaySchedule(self)

    def isSummerDesignDayScheduleDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_isSummerDesignDayScheduleDefaulted(self)

    def winterDesignDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_winterDesignDaySchedule(self)

    def isWinterDesignDayScheduleDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_isWinterDesignDayScheduleDefaulted(self)

    def holidaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_holidaySchedule(self)

    def isHolidayScheduleDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_isHolidayScheduleDefaulted(self)

    def setSummerDesignDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setSummerDesignDaySchedule(self, schedule)

    def resetSummerDesignDaySchedule(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleset_resetSummerDesignDaySchedule(self)

    def setWinterDesignDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setWinterDesignDaySchedule(self, schedule)

    def resetWinterDesignDaySchedule(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleset_resetWinterDesignDaySchedule(self)

    def setHolidaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setHolidaySchedule(self, schedule)

    def resetHolidaySchedule(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleset_resetHolidaySchedule(self)

    def scheduleRules(self) -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
        return _openstudiomodelcore.ScheduleRuleset_scheduleRules(self)

    def setScheduleRuleIndex(self, scheduleRule: "ScheduleRule", index: "unsigned int") -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setScheduleRuleIndex(self, scheduleRule, index)

    def getActiveRuleIndices(self, startDate: "Date", endDate: "Date") -> "std::vector< int,std::allocator< int > >":
        return _openstudiomodelcore.ScheduleRuleset_getActiveRuleIndices(self, startDate, endDate)

    def getDaySchedules(self, startDate: "Date", endDate: "Date") -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
        return _openstudiomodelcore.ScheduleRuleset_getDaySchedules(self, startDate, endDate)

# Register ScheduleRuleset in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRuleset_swigregister(ScheduleRuleset)

def ScheduleRuleset_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleRuleset_iddObjectType()


def toScheduleRuleset(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.toScheduleRuleset(idfObject)

def getScheduleRuleset(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.getScheduleRuleset(t_model, t_handle)

def getScheduleRulesets(t_model: "Model") -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > >":
    return _openstudiomodelcore.getScheduleRulesets(t_model)

def getScheduleRulesetByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.getScheduleRulesetByName(t_model, t_name)

def getScheduleRulesetsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > >":
    return _openstudiomodelcore.getScheduleRulesetsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleRuleset(self) -> OptionalScheduleRuleset:
    return toScheduleRuleset(self)
openstudioutilitiesidf.IdfObject.to_ScheduleRuleset = _to_ScheduleRuleset

def _getScheduleRuleset(self, t_handle: "UUID") -> OptionalScheduleRuleset:
    return getScheduleRuleset(self, t_handle)
Model.getScheduleRuleset = _getScheduleRuleset

def _getScheduleRuleset(self, t_handle_str: str) -> OptionalScheduleRuleset:
    return getScheduleRuleset(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getScheduleRuleset = _getScheduleRuleset

def _getScheduleRulesets(self) -> ScheduleRulesetVector:
    return getScheduleRulesets(self)
Model.getScheduleRulesets = _getScheduleRulesets

def _getScheduleRulesetByName(self, t_name: str) -> OptionalScheduleRuleset:
    return getScheduleRulesetByName(self, t_name)
Model.getScheduleRulesetByName = _getScheduleRulesetByName

def _getScheduleRulesetsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleRulesetVector:
    return getScheduleRulesetsByName(self, t_name, t_exactMatch)
Model.getScheduleRulesetsByName = _getScheduleRulesetsByName

class OutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariable

    def __init__(self, variableName: "std::string const &", model: "Model"):
        _openstudiomodelcore.OutputVariable_swiginit(self, _openstudiomodelcore.new_OutputVariable(variableName, model))

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.OutputVariable_remove(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.OutputVariable_iddObjectType()

    @staticmethod
    def reportingFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.OutputVariable_reportingFrequencyValues()

    def keyValue(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_keyValue(self)

    def isKeyValueDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isKeyValueDefaulted(self)

    def variableName(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_variableName(self)

    def reportingFrequency(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isReportingFrequencyDefaulted(self)

    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelcore.OutputVariable_schedule(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isExportToBCVTBDefaulted(self)

    def setKeyValue(self, keyValue: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputVariable_setKeyValue(self, keyValue)

    def resetKeyValue(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetKeyValue(self)

    def setVariableName(self, variableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputVariable_setVariableName(self, variableName)

    def setReportingFrequency(self, reportingFrequency: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputVariable_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetReportingFrequency(self)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelcore.OutputVariable_setSchedule(self, schedule)

    def resetSchedule(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetSchedule(self)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.OutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetExportToBCVTB(self)

# Register OutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OutputVariable_swigregister(OutputVariable)

def OutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputVariable_iddObjectType()

def OutputVariable_reportingFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputVariable_reportingFrequencyValues()


def toOutputVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.toOutputVariable(idfObject)

def getOutputVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.getOutputVariable(t_model, t_handle)

def getOutputVariables(t_model: "Model") -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
    return _openstudiomodelcore.getOutputVariables(t_model)

def getOutputVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.getOutputVariableByName(t_model, t_name)

def getOutputVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
    return _openstudiomodelcore.getOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_OutputVariable(self) -> OptionalOutputVariable:
    return toOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_OutputVariable = _to_OutputVariable

def _getOutputVariable(self, t_handle: "UUID") -> OptionalOutputVariable:
    return getOutputVariable(self, t_handle)
Model.getOutputVariable = _getOutputVariable

def _getOutputVariable(self, t_handle_str: str) -> OptionalOutputVariable:
    return getOutputVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getOutputVariable = _getOutputVariable

def _getOutputVariables(self) -> OutputVariableVector:
    return getOutputVariables(self)
Model.getOutputVariables = _getOutputVariables

def _getOutputVariableByName(self, t_name: str) -> OptionalOutputVariable:
    return getOutputVariableByName(self, t_name)
Model.getOutputVariableByName = _getOutputVariableByName

def _getOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> OutputVariableVector:
    return getOutputVariablesByName(self, t_name, t_exactMatch)
Model.getOutputVariablesByName = _getOutputVariablesByName

class AdditionalProperties(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalProperties

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.AdditionalProperties_iddObjectType()

    def modelObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.AdditionalProperties_modelObject(self)

    def featureNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.AdditionalProperties_featureNames(self)

    def hasFeature(self, name: "std::string const &") -> "bool":
        return _openstudiomodelcore.AdditionalProperties_hasFeature(self, name)

    def getFeatureDataType(self, name: "std::string const &") -> "boost::optional< std::string >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureDataType(self, name)

    def getFeatureAsString(self, name: "std::string const &") -> "boost::optional< std::string >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsString(self, name)

    def getFeatureAsDouble(self, name: "std::string const &") -> "boost::optional< double >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsDouble(self, name)

    def getFeatureAsInteger(self, name: "std::string const &") -> "boost::optional< int >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsInteger(self, name)

    def getFeatureAsBoolean(self, name: "std::string const &") -> "boost::optional< bool >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsBoolean(self, name)

    def suggestedFeatureNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.AdditionalProperties_suggestedFeatureNames(self)

    def setFeature(self, *args) -> "bool":
        return _openstudiomodelcore.AdditionalProperties_setFeature(self, *args)

    def resetFeature(self, name: "std::string const &") -> "bool":
        return _openstudiomodelcore.AdditionalProperties_resetFeature(self, name)

    def merge(self, other: "AdditionalProperties", overwrite: "bool"=False) -> "void":
        return _openstudiomodelcore.AdditionalProperties_merge(self, other, overwrite)

# Register AdditionalProperties in _openstudiomodelcore:
_openstudiomodelcore.AdditionalProperties_swigregister(AdditionalProperties)

def AdditionalProperties_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.AdditionalProperties_iddObjectType()


def toAdditionalProperties(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.toAdditionalProperties(idfObject)

def getAdditionalProperties(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.getAdditionalProperties(t_model, t_handle)

def getAdditionalPropertiess(t_model: "Model") -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > >":
    return _openstudiomodelcore.getAdditionalPropertiess(t_model)

def getAdditionalPropertiesByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.getAdditionalPropertiesByName(t_model, t_name)

def getAdditionalPropertiessByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > >":
    return _openstudiomodelcore.getAdditionalPropertiessByName(t_model, t_name, t_exactMatch)

def _to_AdditionalProperties(self) -> OptionalAdditionalProperties:
    return toAdditionalProperties(self)
openstudioutilitiesidf.IdfObject.to_AdditionalProperties = _to_AdditionalProperties

def _getAdditionalProperties(self, t_handle: "UUID") -> OptionalAdditionalProperties:
    return getAdditionalProperties(self, t_handle)
Model.getAdditionalProperties = _getAdditionalProperties

def _getAdditionalProperties(self, t_handle_str: str) -> OptionalAdditionalProperties:
    return getAdditionalProperties(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAdditionalProperties = _getAdditionalProperties

def _getAdditionalPropertiess(self) -> AdditionalPropertiesVector:
    return getAdditionalPropertiess(self)
Model.getAdditionalPropertiess = _getAdditionalPropertiess

def _getAdditionalPropertiesByName(self, t_name: str) -> OptionalAdditionalProperties:
    return getAdditionalPropertiesByName(self, t_name)
Model.getAdditionalPropertiesByName = _getAdditionalPropertiesByName

def _getAdditionalPropertiessByName(self, t_name: str, t_exactMatch: bool) -> AdditionalPropertiesVector:
    return getAdditionalPropertiessByName(self, t_name, t_exactMatch)
Model.getAdditionalPropertiessByName = _getAdditionalPropertiessByName

class GenericModelObject(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObject

# Register GenericModelObject in _openstudiomodelcore:
_openstudiomodelcore.GenericModelObject_swigregister(GenericModelObject)


def toGenericModelObject(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.toGenericModelObject(idfObject)

def getGenericModelObject(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.getGenericModelObject(t_model, t_handle)

def getGenericModelObjects(t_model: "Model") -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > >":
    return _openstudiomodelcore.getGenericModelObjects(t_model)

def getGenericModelObjectByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.getGenericModelObjectByName(t_model, t_name)

def getGenericModelObjectsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > >":
    return _openstudiomodelcore.getGenericModelObjectsByName(t_model, t_name, t_exactMatch)

def _to_GenericModelObject(self) -> OptionalGenericModelObject:
    return toGenericModelObject(self)
openstudioutilitiesidf.IdfObject.to_GenericModelObject = _to_GenericModelObject

def _getGenericModelObject(self, t_handle: "UUID") -> OptionalGenericModelObject:
    return getGenericModelObject(self, t_handle)
Model.getGenericModelObject = _getGenericModelObject

def _getGenericModelObject(self, t_handle_str: str) -> OptionalGenericModelObject:
    return getGenericModelObject(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGenericModelObject = _getGenericModelObject

def _getGenericModelObjects(self) -> GenericModelObjectVector:
    return getGenericModelObjects(self)
Model.getGenericModelObjects = _getGenericModelObjects

def _getGenericModelObjectByName(self, t_name: str) -> OptionalGenericModelObject:
    return getGenericModelObjectByName(self, t_name)
Model.getGenericModelObjectByName = _getGenericModelObjectByName

def _getGenericModelObjectsByName(self, t_name: str, t_exactMatch: bool) -> GenericModelObjectVector:
    return getGenericModelObjectsByName(self, t_name, t_exactMatch)
Model.getGenericModelObjectsByName = _getGenericModelObjectsByName

class ModelObjectList(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.ModelObjectList_swiginit(self, _openstudiomodelcore.new_ModelObjectList(model))
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectList

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ModelObjectList_iddObjectType()

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObjectList_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ModelObjectList_clone(self, model)

    def size(self) -> "unsigned int":
        return _openstudiomodelcore.ModelObjectList_size(self)

    def addModelObject(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObjectList_addModelObject(self, modelObject)

    def hasModelObject(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.ModelObjectList_hasModelObject(self, modelObject)

    def removeModelObject(self, modelObject: "ModelObject") -> "void":
        return _openstudiomodelcore.ModelObjectList_removeModelObject(self, modelObject)

    def removeAllModelObjects(self) -> "void":
        return _openstudiomodelcore.ModelObjectList_removeAllModelObjects(self)

    def modelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ModelObjectList_modelObjects(self)

# Register ModelObjectList in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectList_swigregister(ModelObjectList)

def ModelObjectList_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ModelObjectList_iddObjectType()


def toModelObjectList(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.toModelObjectList(idfObject)

def getModelObjectList(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.getModelObjectList(t_model, t_handle)

def getModelObjectLists(t_model: "Model") -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > >":
    return _openstudiomodelcore.getModelObjectLists(t_model)

def getModelObjectListByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.getModelObjectListByName(t_model, t_name)

def getModelObjectListsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > >":
    return _openstudiomodelcore.getModelObjectListsByName(t_model, t_name, t_exactMatch)

def _to_ModelObjectList(self) -> OptionalModelObjectList:
    return toModelObjectList(self)
openstudioutilitiesidf.IdfObject.to_ModelObjectList = _to_ModelObjectList

def _getModelObjectList(self, t_handle: "UUID") -> OptionalModelObjectList:
    return getModelObjectList(self, t_handle)
Model.getModelObjectList = _getModelObjectList

def _getModelObjectList(self, t_handle_str: str) -> OptionalModelObjectList:
    return getModelObjectList(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getModelObjectList = _getModelObjectList

def _getModelObjectLists(self) -> ModelObjectListVector:
    return getModelObjectLists(self)
Model.getModelObjectLists = _getModelObjectLists

def _getModelObjectListByName(self, t_name: str) -> OptionalModelObjectList:
    return getModelObjectListByName(self, t_name)
Model.getModelObjectListByName = _getModelObjectListByName

def _getModelObjectListsByName(self, t_name: str, t_exactMatch: bool) -> ModelObjectListVector:
    return getModelObjectListsByName(self, t_name, t_exactMatch)
Model.getModelObjectListsByName = _getModelObjectListsByName

class EnergyManagementSystemSensor(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSensor_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSensor(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensor

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType()

    def keyName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSensor_keyName(self)

    def outputVariable(self) -> "boost::optional< openstudio::model::OutputVariable >":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariable(self)

    def outputMeter(self) -> "boost::optional< openstudio::model::OutputMeter >":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputMeter(self)

    def outputVariableOrMeterName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariableOrMeterName(self)

    def setKeyName(self, keyName: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setKeyName(self, keyName)

    def setOutputVariable(self, outputVariable: "OutputVariable") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariable(self, outputVariable)

    def setOutputMeter(self, outputMeter: "OutputMeter") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputMeter(self, outputMeter)

    def setOutputVariableOrMeterName(self, outputVariableOrMeterName: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariableOrMeterName(self, outputVariableOrMeterName)

# Register EnergyManagementSystemSensor in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSensor_swigregister(EnergyManagementSystemSensor)

def EnergyManagementSystemSensor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType()


def toEnergyManagementSystemSensor(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.toEnergyManagementSystemSensor(idfObject)

def getEnergyManagementSystemSensor(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.getEnergyManagementSystemSensor(t_model, t_handle)

def getEnergyManagementSystemSensors(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > >":
    return _openstudiomodelcore.getEnergyManagementSystemSensors(t_model)

def getEnergyManagementSystemSensorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.getEnergyManagementSystemSensorByName(t_model, t_name)

def getEnergyManagementSystemSensorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > >":
    return _openstudiomodelcore.getEnergyManagementSystemSensorsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemSensor(self) -> OptionalEnergyManagementSystemSensor:
    return toEnergyManagementSystemSensor(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemSensor = _to_EnergyManagementSystemSensor

def _getEnergyManagementSystemSensor(self, t_handle: "UUID") -> OptionalEnergyManagementSystemSensor:
    return getEnergyManagementSystemSensor(self, t_handle)
Model.getEnergyManagementSystemSensor = _getEnergyManagementSystemSensor

def _getEnergyManagementSystemSensor(self, t_handle_str: str) -> OptionalEnergyManagementSystemSensor:
    return getEnergyManagementSystemSensor(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemSensor = _getEnergyManagementSystemSensor

def _getEnergyManagementSystemSensors(self) -> EnergyManagementSystemSensorVector:
    return getEnergyManagementSystemSensors(self)
Model.getEnergyManagementSystemSensors = _getEnergyManagementSystemSensors

def _getEnergyManagementSystemSensorByName(self, t_name: str) -> OptionalEnergyManagementSystemSensor:
    return getEnergyManagementSystemSensorByName(self, t_name)
Model.getEnergyManagementSystemSensorByName = _getEnergyManagementSystemSensorByName

def _getEnergyManagementSystemSensorsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemSensorVector:
    return getEnergyManagementSystemSensorsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemSensorsByName = _getEnergyManagementSystemSensorsByName

class EnergyManagementSystemActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemActuator_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemActuator(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuator

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType()

    def actuatedComponent(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponent(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentControlType(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentType(self)

    def zoneName(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemActuator_zoneName(self)

    def setActuatedComponent(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponent(self, modelObject)

    def setActuatedComponentControlType(self, actuatedComponentControlType: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setActuatedComponentType(self, actuatedComponentType: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentType(self, actuatedComponentType)

    def setThermalZone(self, thermalZone: "openstudio::model::ThermalZone const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setThermalZone(self, thermalZone)

    def setSpace(self, space: "openstudio::model::Space const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setSpace(self, space)

    def resetZoneName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuator_resetZoneName(self)

# Register EnergyManagementSystemActuator in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemActuator_swigregister(EnergyManagementSystemActuator)

def EnergyManagementSystemActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType()


def toEnergyManagementSystemActuator(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.toEnergyManagementSystemActuator(idfObject)

def getEnergyManagementSystemActuator(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.getEnergyManagementSystemActuator(t_model, t_handle)

def getEnergyManagementSystemActuators(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > >":
    return _openstudiomodelcore.getEnergyManagementSystemActuators(t_model)

def getEnergyManagementSystemActuatorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.getEnergyManagementSystemActuatorByName(t_model, t_name)

def getEnergyManagementSystemActuatorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > >":
    return _openstudiomodelcore.getEnergyManagementSystemActuatorsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemActuator(self) -> OptionalEnergyManagementSystemActuator:
    return toEnergyManagementSystemActuator(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemActuator = _to_EnergyManagementSystemActuator

def _getEnergyManagementSystemActuator(self, t_handle: "UUID") -> OptionalEnergyManagementSystemActuator:
    return getEnergyManagementSystemActuator(self, t_handle)
Model.getEnergyManagementSystemActuator = _getEnergyManagementSystemActuator

def _getEnergyManagementSystemActuator(self, t_handle_str: str) -> OptionalEnergyManagementSystemActuator:
    return getEnergyManagementSystemActuator(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemActuator = _getEnergyManagementSystemActuator

def _getEnergyManagementSystemActuators(self) -> EnergyManagementSystemActuatorVector:
    return getEnergyManagementSystemActuators(self)
Model.getEnergyManagementSystemActuators = _getEnergyManagementSystemActuators

def _getEnergyManagementSystemActuatorByName(self, t_name: str) -> OptionalEnergyManagementSystemActuator:
    return getEnergyManagementSystemActuatorByName(self, t_name)
Model.getEnergyManagementSystemActuatorByName = _getEnergyManagementSystemActuatorByName

def _getEnergyManagementSystemActuatorsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemActuatorVector:
    return getEnergyManagementSystemActuatorsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemActuatorsByName = _getEnergyManagementSystemActuatorsByName

class EnergyManagementSystemConstructionIndexVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariable(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType()

    def constructionObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_constructionObject(self)

    def setConstructionObject(self, construction: "ModelObject") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_setConstructionObject(self, construction)

# Register EnergyManagementSystemConstructionIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_swigregister(EnergyManagementSystemConstructionIndexVariable)

def EnergyManagementSystemConstructionIndexVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType()


def toEnergyManagementSystemConstructionIndexVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemConstructionIndexVariable(idfObject)

def getEnergyManagementSystemConstructionIndexVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariable(t_model, t_handle)

def getEnergyManagementSystemConstructionIndexVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariables(t_model)

def getEnergyManagementSystemConstructionIndexVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariableByName(t_model, t_name)

def getEnergyManagementSystemConstructionIndexVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemConstructionIndexVariable(self) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    return toEnergyManagementSystemConstructionIndexVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemConstructionIndexVariable = _to_EnergyManagementSystemConstructionIndexVariable

def _getEnergyManagementSystemConstructionIndexVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemConstructionIndexVariable:
    return getEnergyManagementSystemConstructionIndexVariable(self, t_handle)
Model.getEnergyManagementSystemConstructionIndexVariable = _getEnergyManagementSystemConstructionIndexVariable

def _getEnergyManagementSystemConstructionIndexVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    return getEnergyManagementSystemConstructionIndexVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemConstructionIndexVariable = _getEnergyManagementSystemConstructionIndexVariable

def _getEnergyManagementSystemConstructionIndexVariables(self) -> EnergyManagementSystemConstructionIndexVariableVector:
    return getEnergyManagementSystemConstructionIndexVariables(self)
Model.getEnergyManagementSystemConstructionIndexVariables = _getEnergyManagementSystemConstructionIndexVariables

def _getEnergyManagementSystemConstructionIndexVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    return getEnergyManagementSystemConstructionIndexVariableByName(self, t_name)
Model.getEnergyManagementSystemConstructionIndexVariableByName = _getEnergyManagementSystemConstructionIndexVariableByName

def _getEnergyManagementSystemConstructionIndexVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemConstructionIndexVariableVector:
    return getEnergyManagementSystemConstructionIndexVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemConstructionIndexVariablesByName = _getEnergyManagementSystemConstructionIndexVariablesByName

class EnergyManagementSystemCurveOrTableIndexVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariable(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType()

    def curveOrTableObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_curveOrTableObject(self)

    def setCurveOrTableObject(self, allCurves: "openstudio::model::Curve const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_setCurveOrTableObject(self, allCurves)

# Register EnergyManagementSystemCurveOrTableIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_swigregister(EnergyManagementSystemCurveOrTableIndexVariable)

def EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType()


def toEnergyManagementSystemCurveOrTableIndexVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemCurveOrTableIndexVariable(idfObject)

def getEnergyManagementSystemCurveOrTableIndexVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariable(t_model, t_handle)

def getEnergyManagementSystemCurveOrTableIndexVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariables(t_model)

def getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model, t_name)

def getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemCurveOrTableIndexVariable(self) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    return toEnergyManagementSystemCurveOrTableIndexVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemCurveOrTableIndexVariable = _to_EnergyManagementSystemCurveOrTableIndexVariable

def _getEnergyManagementSystemCurveOrTableIndexVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    return getEnergyManagementSystemCurveOrTableIndexVariable(self, t_handle)
Model.getEnergyManagementSystemCurveOrTableIndexVariable = _getEnergyManagementSystemCurveOrTableIndexVariable

def _getEnergyManagementSystemCurveOrTableIndexVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    return getEnergyManagementSystemCurveOrTableIndexVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemCurveOrTableIndexVariable = _getEnergyManagementSystemCurveOrTableIndexVariable

def _getEnergyManagementSystemCurveOrTableIndexVariables(self) -> EnergyManagementSystemCurveOrTableIndexVariableVector:
    return getEnergyManagementSystemCurveOrTableIndexVariables(self)
Model.getEnergyManagementSystemCurveOrTableIndexVariables = _getEnergyManagementSystemCurveOrTableIndexVariables

def _getEnergyManagementSystemCurveOrTableIndexVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    return getEnergyManagementSystemCurveOrTableIndexVariableByName(self, t_name)
Model.getEnergyManagementSystemCurveOrTableIndexVariableByName = _getEnergyManagementSystemCurveOrTableIndexVariableByName

def _getEnergyManagementSystemCurveOrTableIndexVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemCurveOrTableIndexVariableVector:
    return getEnergyManagementSystemCurveOrTableIndexVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemCurveOrTableIndexVariablesByName = _getEnergyManagementSystemCurveOrTableIndexVariablesByName

class EnergyManagementSystemGlobalVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", variableName: "std::string const &"):
        _openstudiomodelcore.EnergyManagementSystemGlobalVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemGlobalVariable(model, variableName))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType()

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_isExportToBCVTBDefaulted(self)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_resetExportToBCVTB(self)

# Register EnergyManagementSystemGlobalVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemGlobalVariable_swigregister(EnergyManagementSystemGlobalVariable)

def EnergyManagementSystemGlobalVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType()


def toEnergyManagementSystemGlobalVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemGlobalVariable(idfObject)

def getEnergyManagementSystemGlobalVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariable(t_model, t_handle)

def getEnergyManagementSystemGlobalVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariables(t_model)

def getEnergyManagementSystemGlobalVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariableByName(t_model, t_name)

def getEnergyManagementSystemGlobalVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemGlobalVariable(self) -> OptionalEnergyManagementSystemGlobalVariable:
    return toEnergyManagementSystemGlobalVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemGlobalVariable = _to_EnergyManagementSystemGlobalVariable

def _getEnergyManagementSystemGlobalVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemGlobalVariable:
    return getEnergyManagementSystemGlobalVariable(self, t_handle)
Model.getEnergyManagementSystemGlobalVariable = _getEnergyManagementSystemGlobalVariable

def _getEnergyManagementSystemGlobalVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemGlobalVariable:
    return getEnergyManagementSystemGlobalVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemGlobalVariable = _getEnergyManagementSystemGlobalVariable

def _getEnergyManagementSystemGlobalVariables(self) -> EnergyManagementSystemGlobalVariableVector:
    return getEnergyManagementSystemGlobalVariables(self)
Model.getEnergyManagementSystemGlobalVariables = _getEnergyManagementSystemGlobalVariables

def _getEnergyManagementSystemGlobalVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemGlobalVariable:
    return getEnergyManagementSystemGlobalVariableByName(self, t_name)
Model.getEnergyManagementSystemGlobalVariableByName = _getEnergyManagementSystemGlobalVariableByName

def _getEnergyManagementSystemGlobalVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemGlobalVariableVector:
    return getEnergyManagementSystemGlobalVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemGlobalVariablesByName = _getEnergyManagementSystemGlobalVariablesByName

class EnergyManagementSystemInternalVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", internalDataType: "std::string const &"):
        _openstudiomodelcore.EnergyManagementSystemInternalVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemInternalVariable(model, internalDataType))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType()

    def internalDataIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataIndexKeyName(self)

    def internalDataType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataType(self)

    def setInternalDataIndexKeyName(self, internalDataIndexKeyName: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataIndexKeyName(self, internalDataIndexKeyName)

    def resetInternalDataIndexKeyName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_resetInternalDataIndexKeyName(self)

    def setInternalDataType(self, internalDataType: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataType(self, internalDataType)

# Register EnergyManagementSystemInternalVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemInternalVariable_swigregister(EnergyManagementSystemInternalVariable)

def EnergyManagementSystemInternalVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType()


def toEnergyManagementSystemInternalVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemInternalVariable(idfObject)

def getEnergyManagementSystemInternalVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariable(t_model, t_handle)

def getEnergyManagementSystemInternalVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariables(t_model)

def getEnergyManagementSystemInternalVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariableByName(t_model, t_name)

def getEnergyManagementSystemInternalVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemInternalVariable(self) -> OptionalEnergyManagementSystemInternalVariable:
    return toEnergyManagementSystemInternalVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemInternalVariable = _to_EnergyManagementSystemInternalVariable

def _getEnergyManagementSystemInternalVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemInternalVariable:
    return getEnergyManagementSystemInternalVariable(self, t_handle)
Model.getEnergyManagementSystemInternalVariable = _getEnergyManagementSystemInternalVariable

def _getEnergyManagementSystemInternalVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemInternalVariable:
    return getEnergyManagementSystemInternalVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemInternalVariable = _getEnergyManagementSystemInternalVariable

def _getEnergyManagementSystemInternalVariables(self) -> EnergyManagementSystemInternalVariableVector:
    return getEnergyManagementSystemInternalVariables(self)
Model.getEnergyManagementSystemInternalVariables = _getEnergyManagementSystemInternalVariables

def _getEnergyManagementSystemInternalVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemInternalVariable:
    return getEnergyManagementSystemInternalVariableByName(self, t_name)
Model.getEnergyManagementSystemInternalVariableByName = _getEnergyManagementSystemInternalVariableByName

def _getEnergyManagementSystemInternalVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemInternalVariableVector:
    return getEnergyManagementSystemInternalVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemInternalVariablesByName = _getEnergyManagementSystemInternalVariablesByName

class EnergyManagementSystemTrendVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemTrendVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemTrendVariable(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType()

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableName(self)

    def numberOfTimestepsToBeLogged(self) -> "int":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_numberOfTimestepsToBeLogged(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsConstructionIndexVariable(self)

    def setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged: "int") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setEMSVariableName(self, *args)

# Register EnergyManagementSystemTrendVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemTrendVariable_swigregister(EnergyManagementSystemTrendVariable)

def EnergyManagementSystemTrendVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType()


def toEnergyManagementSystemTrendVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemTrendVariable(idfObject)

def getEnergyManagementSystemTrendVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariable(t_model, t_handle)

def getEnergyManagementSystemTrendVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariables(t_model)

def getEnergyManagementSystemTrendVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariableByName(t_model, t_name)

def getEnergyManagementSystemTrendVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemTrendVariable(self) -> OptionalEnergyManagementSystemTrendVariable:
    return toEnergyManagementSystemTrendVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemTrendVariable = _to_EnergyManagementSystemTrendVariable

def _getEnergyManagementSystemTrendVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemTrendVariable:
    return getEnergyManagementSystemTrendVariable(self, t_handle)
Model.getEnergyManagementSystemTrendVariable = _getEnergyManagementSystemTrendVariable

def _getEnergyManagementSystemTrendVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemTrendVariable:
    return getEnergyManagementSystemTrendVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemTrendVariable = _getEnergyManagementSystemTrendVariable

def _getEnergyManagementSystemTrendVariables(self) -> EnergyManagementSystemTrendVariableVector:
    return getEnergyManagementSystemTrendVariables(self)
Model.getEnergyManagementSystemTrendVariables = _getEnergyManagementSystemTrendVariables

def _getEnergyManagementSystemTrendVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemTrendVariable:
    return getEnergyManagementSystemTrendVariableByName(self, t_name)
Model.getEnergyManagementSystemTrendVariableByName = _getEnergyManagementSystemTrendVariableByName

def _getEnergyManagementSystemTrendVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemTrendVariableVector:
    return getEnergyManagementSystemTrendVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemTrendVariablesByName = _getEnergyManagementSystemTrendVariablesByName

class EnergyManagementSystemSubroutine(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.EnergyManagementSystemSubroutine_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSubroutine(model))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutine

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType()

    def body(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_body(self)

    def lines(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_lines(self)

    def referencedObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_referencedObjects(self)

    def invalidReferencedObjects(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_invalidReferencedObjects(self)

    def setBody(self, body: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setBody(self, body)

    def resetBody(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_resetBody(self)

    def addLine(self, body: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_addLine(self, body)

    def setLines(self, body: "StringVector") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setLines(self, body)

# Register EnergyManagementSystemSubroutine in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSubroutine_swigregister(EnergyManagementSystemSubroutine)

def EnergyManagementSystemSubroutine_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType()


def toEnergyManagementSystemSubroutine(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.toEnergyManagementSystemSubroutine(idfObject)

def getEnergyManagementSystemSubroutine(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutine(t_model, t_handle)

def getEnergyManagementSystemSubroutines(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutines(t_model)

def getEnergyManagementSystemSubroutineByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutineByName(t_model, t_name)

def getEnergyManagementSystemSubroutinesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutinesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemSubroutine(self) -> OptionalEnergyManagementSystemSubroutine:
    return toEnergyManagementSystemSubroutine(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemSubroutine = _to_EnergyManagementSystemSubroutine

def _getEnergyManagementSystemSubroutine(self, t_handle: "UUID") -> OptionalEnergyManagementSystemSubroutine:
    return getEnergyManagementSystemSubroutine(self, t_handle)
Model.getEnergyManagementSystemSubroutine = _getEnergyManagementSystemSubroutine

def _getEnergyManagementSystemSubroutine(self, t_handle_str: str) -> OptionalEnergyManagementSystemSubroutine:
    return getEnergyManagementSystemSubroutine(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemSubroutine = _getEnergyManagementSystemSubroutine

def _getEnergyManagementSystemSubroutines(self) -> EnergyManagementSystemSubroutineVector:
    return getEnergyManagementSystemSubroutines(self)
Model.getEnergyManagementSystemSubroutines = _getEnergyManagementSystemSubroutines

def _getEnergyManagementSystemSubroutineByName(self, t_name: str) -> OptionalEnergyManagementSystemSubroutine:
    return getEnergyManagementSystemSubroutineByName(self, t_name)
Model.getEnergyManagementSystemSubroutineByName = _getEnergyManagementSystemSubroutineByName

def _getEnergyManagementSystemSubroutinesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemSubroutineVector:
    return getEnergyManagementSystemSubroutinesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemSubroutinesByName = _getEnergyManagementSystemSubroutinesByName

class EnergyManagementSystemProgram(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.EnergyManagementSystemProgram_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgram(model))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgram

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType()

    def body(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemProgram_body(self)

    def lines(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_lines(self)

    def referencedObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_referencedObjects(self)

    def invalidReferencedObjects(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_invalidReferencedObjects(self)

    def setBody(self, body: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_setBody(self, body)

    def resetBody(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_resetBody(self)

    def addLine(self, body: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_addLine(self, body)

    def setLines(self, body: "StringVector") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_setLines(self, body)

# Register EnergyManagementSystemProgram in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgram_swigregister(EnergyManagementSystemProgram)

def EnergyManagementSystemProgram_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType()


def toEnergyManagementSystemProgram(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.toEnergyManagementSystemProgram(idfObject)

def getEnergyManagementSystemProgram(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.getEnergyManagementSystemProgram(t_model, t_handle)

def getEnergyManagementSystemPrograms(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
    return _openstudiomodelcore.getEnergyManagementSystemPrograms(t_model)

def getEnergyManagementSystemProgramByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramByName(t_model, t_name)

def getEnergyManagementSystemProgramsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemProgram(self) -> OptionalEnergyManagementSystemProgram:
    return toEnergyManagementSystemProgram(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemProgram = _to_EnergyManagementSystemProgram

def _getEnergyManagementSystemProgram(self, t_handle: "UUID") -> OptionalEnergyManagementSystemProgram:
    return getEnergyManagementSystemProgram(self, t_handle)
Model.getEnergyManagementSystemProgram = _getEnergyManagementSystemProgram

def _getEnergyManagementSystemProgram(self, t_handle_str: str) -> OptionalEnergyManagementSystemProgram:
    return getEnergyManagementSystemProgram(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemProgram = _getEnergyManagementSystemProgram

def _getEnergyManagementSystemPrograms(self) -> EnergyManagementSystemProgramVector:
    return getEnergyManagementSystemPrograms(self)
Model.getEnergyManagementSystemPrograms = _getEnergyManagementSystemPrograms

def _getEnergyManagementSystemProgramByName(self, t_name: str) -> OptionalEnergyManagementSystemProgram:
    return getEnergyManagementSystemProgramByName(self, t_name)
Model.getEnergyManagementSystemProgramByName = _getEnergyManagementSystemProgramByName

def _getEnergyManagementSystemProgramsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemProgramVector:
    return getEnergyManagementSystemProgramsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemProgramsByName = _getEnergyManagementSystemProgramsByName

class EnergyManagementSystemProgramCallingManager(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManager(model))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManager

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType()

    @staticmethod
    def validCallingPointValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues()

    def callingPoint(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_callingPoint(self)

    def programs(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_programs(self)

    def getProgram(self, index: "unsigned int") -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_getProgram(self, index)

    def setCallingPoint(self, callingPoint: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setCallingPoint(self, callingPoint)

    def eraseProgram(self, index: "unsigned int") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_eraseProgram(self, index)

    def erasePrograms(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_erasePrograms(self)

    def addProgram(self, program: "EnergyManagementSystemProgram") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_addProgram(self, program)

    def setProgram(self, program: "EnergyManagementSystemProgram", index: "unsigned int") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setProgram(self, program, index)

    def setPrograms(self, programs: "EnergyManagementSystemProgramVector") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setPrograms(self, programs)

# Register EnergyManagementSystemProgramCallingManager in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramCallingManager_swigregister(EnergyManagementSystemProgramCallingManager)

def EnergyManagementSystemProgramCallingManager_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType()

def EnergyManagementSystemProgramCallingManager_validCallingPointValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues()


def toEnergyManagementSystemProgramCallingManager(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.toEnergyManagementSystemProgramCallingManager(idfObject)

def getEnergyManagementSystemProgramCallingManager(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManager(t_model, t_handle)

def getEnergyManagementSystemProgramCallingManagers(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagers(t_model)

def getEnergyManagementSystemProgramCallingManagerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagerByName(t_model, t_name)

def getEnergyManagementSystemProgramCallingManagersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagersByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemProgramCallingManager(self) -> OptionalEnergyManagementSystemProgramCallingManager:
    return toEnergyManagementSystemProgramCallingManager(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemProgramCallingManager = _to_EnergyManagementSystemProgramCallingManager

def _getEnergyManagementSystemProgramCallingManager(self, t_handle: "UUID") -> OptionalEnergyManagementSystemProgramCallingManager:
    return getEnergyManagementSystemProgramCallingManager(self, t_handle)
Model.getEnergyManagementSystemProgramCallingManager = _getEnergyManagementSystemProgramCallingManager

def _getEnergyManagementSystemProgramCallingManager(self, t_handle_str: str) -> OptionalEnergyManagementSystemProgramCallingManager:
    return getEnergyManagementSystemProgramCallingManager(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemProgramCallingManager = _getEnergyManagementSystemProgramCallingManager

def _getEnergyManagementSystemProgramCallingManagers(self) -> EnergyManagementSystemProgramCallingManagerVector:
    return getEnergyManagementSystemProgramCallingManagers(self)
Model.getEnergyManagementSystemProgramCallingManagers = _getEnergyManagementSystemProgramCallingManagers

def _getEnergyManagementSystemProgramCallingManagerByName(self, t_name: str) -> OptionalEnergyManagementSystemProgramCallingManager:
    return getEnergyManagementSystemProgramCallingManagerByName(self, t_name)
Model.getEnergyManagementSystemProgramCallingManagerByName = _getEnergyManagementSystemProgramCallingManagerByName

def _getEnergyManagementSystemProgramCallingManagersByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemProgramCallingManagerVector:
    return getEnergyManagementSystemProgramCallingManagersByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemProgramCallingManagersByName = _getEnergyManagementSystemProgramCallingManagersByName

class EnergyManagementSystemOutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemOutputVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemOutputVariable(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType()

    @staticmethod
    def typeOfDataInVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues()

    @staticmethod
    def updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues()

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableName(self)

    def typeOfDataInVariable(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariable(self)

    def updateFrequency(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgram(self)

    def emsSubroutine(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSubroutine(self)

    def units(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_units(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsConstructionIndexVariable(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_isExportToBCVTBDefaulted(self)

    def setTypeOfDataInVariable(self, typeofDatainVariable: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setTypeOfDataInVariable(self, typeofDatainVariable)

    def setUpdateFrequency(self, updateFrequency: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setUnits(self, units: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSVariableName(self, *args)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetExportToBCVTB(self)

# Register EnergyManagementSystemOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemOutputVariable_swigregister(EnergyManagementSystemOutputVariable)

def EnergyManagementSystemOutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType()

def EnergyManagementSystemOutputVariable_typeOfDataInVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues()

def EnergyManagementSystemOutputVariable_updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues()


def toEnergyManagementSystemOutputVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemOutputVariable(idfObject)

def getEnergyManagementSystemOutputVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariable(t_model, t_handle)

def getEnergyManagementSystemOutputVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariables(t_model)

def getEnergyManagementSystemOutputVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariableByName(t_model, t_name)

def getEnergyManagementSystemOutputVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemOutputVariable(self) -> OptionalEnergyManagementSystemOutputVariable:
    return toEnergyManagementSystemOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemOutputVariable = _to_EnergyManagementSystemOutputVariable

def _getEnergyManagementSystemOutputVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemOutputVariable:
    return getEnergyManagementSystemOutputVariable(self, t_handle)
Model.getEnergyManagementSystemOutputVariable = _getEnergyManagementSystemOutputVariable

def _getEnergyManagementSystemOutputVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemOutputVariable:
    return getEnergyManagementSystemOutputVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemOutputVariable = _getEnergyManagementSystemOutputVariable

def _getEnergyManagementSystemOutputVariables(self) -> EnergyManagementSystemOutputVariableVector:
    return getEnergyManagementSystemOutputVariables(self)
Model.getEnergyManagementSystemOutputVariables = _getEnergyManagementSystemOutputVariables

def _getEnergyManagementSystemOutputVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemOutputVariable:
    return getEnergyManagementSystemOutputVariableByName(self, t_name)
Model.getEnergyManagementSystemOutputVariableByName = _getEnergyManagementSystemOutputVariableByName

def _getEnergyManagementSystemOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemOutputVariableVector:
    return getEnergyManagementSystemOutputVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemOutputVariablesByName = _getEnergyManagementSystemOutputVariablesByName

class EnergyManagementSystemMeteredOutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariable(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType()

    @staticmethod
    def updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues()

    @staticmethod
    def resourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues()

    @staticmethod
    def groupTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues()

    @staticmethod
    def endUseCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues()

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableName(self)

    def updateFrequency(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgram(self)

    def emsSubroutine(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSubroutine(self)

    def resourceType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceType(self)

    def groupType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupType(self)

    def endUseCategory(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategory(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseSubcategory(self)

    def units(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_units(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsConstructionIndexVariable(self)

    def setUpdateFrequency(self, updateFrequency: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setResourceType(self, resourceType: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setResourceType(self, resourceType)

    def setGroupType(self, groupType: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setGroupType(self, groupType)

    def setEndUseCategory(self, endUseCategory: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseCategory(self, endUseCategory)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEndUseSubcategory(self)

    def setUnits(self, units: "std::string const &") -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSVariableName(self, *args)

# Register EnergyManagementSystemMeteredOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_swigregister(EnergyManagementSystemMeteredOutputVariable)

def EnergyManagementSystemMeteredOutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType()

def EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues()

def EnergyManagementSystemMeteredOutputVariable_resourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues()

def EnergyManagementSystemMeteredOutputVariable_groupTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues()

def EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues()


def toEnergyManagementSystemMeteredOutputVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemMeteredOutputVariable(idfObject)

def getEnergyManagementSystemMeteredOutputVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariable(t_model, t_handle)

def getEnergyManagementSystemMeteredOutputVariables(t_model: "Model") -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariables(t_model)

def getEnergyManagementSystemMeteredOutputVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariableByName(t_model, t_name)

def getEnergyManagementSystemMeteredOutputVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemMeteredOutputVariable(self) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    return toEnergyManagementSystemMeteredOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemMeteredOutputVariable = _to_EnergyManagementSystemMeteredOutputVariable

def _getEnergyManagementSystemMeteredOutputVariable(self, t_handle: "UUID") -> OptionalEnergyManagementSystemMeteredOutputVariable:
    return getEnergyManagementSystemMeteredOutputVariable(self, t_handle)
Model.getEnergyManagementSystemMeteredOutputVariable = _getEnergyManagementSystemMeteredOutputVariable

def _getEnergyManagementSystemMeteredOutputVariable(self, t_handle_str: str) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    return getEnergyManagementSystemMeteredOutputVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEnergyManagementSystemMeteredOutputVariable = _getEnergyManagementSystemMeteredOutputVariable

def _getEnergyManagementSystemMeteredOutputVariables(self) -> EnergyManagementSystemMeteredOutputVariableVector:
    return getEnergyManagementSystemMeteredOutputVariables(self)
Model.getEnergyManagementSystemMeteredOutputVariables = _getEnergyManagementSystemMeteredOutputVariables

def _getEnergyManagementSystemMeteredOutputVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    return getEnergyManagementSystemMeteredOutputVariableByName(self, t_name)
Model.getEnergyManagementSystemMeteredOutputVariableByName = _getEnergyManagementSystemMeteredOutputVariableByName

def _getEnergyManagementSystemMeteredOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemMeteredOutputVariableVector:
    return getEnergyManagementSystemMeteredOutputVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemMeteredOutputVariablesByName = _getEnergyManagementSystemMeteredOutputVariablesByName

class OutputEnergyManagementSystem(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputEnergyManagementSystem

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType()

    @staticmethod
    def actuatorAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues()

    @staticmethod
    def internalVariableAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues()

    @staticmethod
    def eMSRuntimeLanguageDebugOutputLevelValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues()

    def actuatorAvailabilityDictionaryReporting(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReporting(self)

    def isActuatorAvailabilityDictionaryReportingDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isActuatorAvailabilityDictionaryReportingDefaulted(self)

    def internalVariableAvailabilityDictionaryReporting(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReporting(self)

    def isInternalVariableAvailabilityDictionaryReportingDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isInternalVariableAvailabilityDictionaryReportingDefaulted(self)

    def eMSRuntimeLanguageDebugOutputLevel(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevel(self)

    def isEMSRuntimeLanguageDebugOutputLevelDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isEMSRuntimeLanguageDebugOutputLevelDefaulted(self)

    def setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting)

    def resetActuatorAvailabilityDictionaryReporting(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetActuatorAvailabilityDictionaryReporting(self)

    def setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting)

    def resetInternalVariableAvailabilityDictionaryReporting(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetInternalVariableAvailabilityDictionaryReporting(self)

    def setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel: "std::string const &") -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel)

    def resetEMSRuntimeLanguageDebugOutputLevel(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetEMSRuntimeLanguageDebugOutputLevel(self)

# Register OutputEnergyManagementSystem in _openstudiomodelcore:
_openstudiomodelcore.OutputEnergyManagementSystem_swigregister(OutputEnergyManagementSystem)

def OutputEnergyManagementSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType()

def OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues()

def OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues()

def OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues()


def toOutputEnergyManagementSystem(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputEnergyManagementSystem >":
    return _openstudiomodelcore.toOutputEnergyManagementSystem(idfObject)

def getOutputEnergyManagementSystem(t_model: "Model") -> "openstudio::model::OutputEnergyManagementSystem":
    return _openstudiomodelcore.getOutputEnergyManagementSystem(t_model)

def getOptionalOutputEnergyManagementSystem(t_model: "Model") -> "boost::optional< openstudio::model::OutputEnergyManagementSystem >":
    return _openstudiomodelcore.getOptionalOutputEnergyManagementSystem(t_model)

def _to_OutputEnergyManagementSystem(self) -> OptionalOutputEnergyManagementSystem:
    return toOutputEnergyManagementSystem(self)
openstudioutilitiesidf.IdfObject.to_OutputEnergyManagementSystem = _to_OutputEnergyManagementSystem

def _getOutputEnergyManagementSystem(self) -> OutputEnergyManagementSystem:
    return getOutputEnergyManagementSystem(self)
Model.getOutputEnergyManagementSystem = _getOutputEnergyManagementSystem

def _getOptionalOutputEnergyManagementSystem(self) -> OptionalOutputEnergyManagementSystem:
    return getOptionalOutputEnergyManagementSystem(self)
Model.getOptionalOutputEnergyManagementSystem = _getOptionalOutputEnergyManagementSystem

class ExternalInterface(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterface

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterface_iddObjectType()

    @staticmethod
    def nameofExternalInterfaceValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues()

    def nameofExternalInterface(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterface_nameofExternalInterface(self)

    def setNameofExternalInterface(self, nameofExternalInterface: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterface_setNameofExternalInterface(self, nameofExternalInterface)

# Register ExternalInterface in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterface_swigregister(ExternalInterface)

def ExternalInterface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterface_iddObjectType()

def ExternalInterface_nameofExternalInterfaceValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues()


def toExternalInterface(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterface >":
    return _openstudiomodelcore.toExternalInterface(idfObject)

def getExternalInterface(t_model: "Model") -> "openstudio::model::ExternalInterface":
    return _openstudiomodelcore.getExternalInterface(t_model)

def getOptionalExternalInterface(t_model: "Model") -> "boost::optional< openstudio::model::ExternalInterface >":
    return _openstudiomodelcore.getOptionalExternalInterface(t_model)

def _to_ExternalInterface(self) -> OptionalExternalInterface:
    return toExternalInterface(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterface = _to_ExternalInterface

def _getExternalInterface(self) -> ExternalInterface:
    return getExternalInterface(self)
Model.getExternalInterface = _getExternalInterface

def _getOptionalExternalInterface(self) -> OptionalExternalInterface:
    return getOptionalExternalInterface(self)
Model.getOptionalExternalInterface = _getOptionalExternalInterface

class ExternalInterfaceActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceActuator(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuator

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType()

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentControlType(self)

    def optionalInitialValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ExternalInterfaceActuator_optionalInitialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_isExportToBCVTBDefaulted(self)

    def setActuatedComponentUnique(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setOptionalInitialValue(self, optionalInitialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setOptionalInitialValue(self, optionalInitialValue)

    def resetOptionalInitialValue(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuator_resetOptionalInitialValue(self)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuator_resetExportToBCVTB(self)

# Register ExternalInterfaceActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceActuator_swigregister(ExternalInterfaceActuator)

def ExternalInterfaceActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType()


def toExternalInterfaceActuator(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.toExternalInterfaceActuator(idfObject)

def getExternalInterfaceActuator(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.getExternalInterfaceActuator(t_model, t_handle)

def getExternalInterfaceActuators(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > >":
    return _openstudiomodelcore.getExternalInterfaceActuators(t_model)

def getExternalInterfaceActuatorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.getExternalInterfaceActuatorByName(t_model, t_name)

def getExternalInterfaceActuatorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > >":
    return _openstudiomodelcore.getExternalInterfaceActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceActuator(self) -> OptionalExternalInterfaceActuator:
    return toExternalInterfaceActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceActuator = _to_ExternalInterfaceActuator

def _getExternalInterfaceActuator(self, t_handle: "UUID") -> OptionalExternalInterfaceActuator:
    return getExternalInterfaceActuator(self, t_handle)
Model.getExternalInterfaceActuator = _getExternalInterfaceActuator

def _getExternalInterfaceActuator(self, t_handle_str: str) -> OptionalExternalInterfaceActuator:
    return getExternalInterfaceActuator(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceActuator = _getExternalInterfaceActuator

def _getExternalInterfaceActuators(self) -> ExternalInterfaceActuatorVector:
    return getExternalInterfaceActuators(self)
Model.getExternalInterfaceActuators = _getExternalInterfaceActuators

def _getExternalInterfaceActuatorByName(self, t_name: str) -> OptionalExternalInterfaceActuator:
    return getExternalInterfaceActuatorByName(self, t_name)
Model.getExternalInterfaceActuatorByName = _getExternalInterfaceActuatorByName

def _getExternalInterfaceActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceActuatorVector:
    return getExternalInterfaceActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceActuatorsByName = _getExternalInterfaceActuatorsByName

class ExternalInterfaceFunctionalMockupUnitExportFromVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", outputVariableIndexKeyName: "std::string const &", outputVariableName: "std::string const &", fMUVariableName: "std::string const &"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariable(model, outputVariableIndexKeyName, outputVariableName, fMUVariableName))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType()

    def outputVariableIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setFMUVariableName(self, fMUVariableName)

# Register ExternalInterfaceFunctionalMockupUnitExportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariable)

def ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportFromVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    return toExternalInterfaceFunctionalMockupUnitExportFromVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportFromVariable = _to_ExternalInterfaceFunctionalMockupUnitExportFromVariable

def _getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariable = _getExternalInterfaceFunctionalMockupUnitExportFromVariable

def _getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariable = _getExternalInterfaceFunctionalMockupUnitExportFromVariable

def _getExternalInterfaceFunctionalMockupUnitExportFromVariables(self) -> ExternalInterfaceFunctionalMockupUnitExportFromVariableVector:
    return getExternalInterfaceFunctionalMockupUnitExportFromVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariables = _getExternalInterfaceFunctionalMockupUnitExportFromVariables

def _getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName = _getExternalInterfaceFunctionalMockupUnitExportFromVariableByName

def _getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportFromVariableVector:
    return getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName = _getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName

class ExternalInterfaceFunctionalMockupUnitExportToActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelObject: "ModelObject", actuatedComponentType: "std::string const &", actuatedComponentControlType: "std::string const &", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuator(modelObject, actuatedComponentType, actuatedComponentControlType, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuator

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType()

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentControlType(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuator)

def ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToActuator(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    return toExternalInterfaceFunctionalMockupUnitExportToActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToActuator = _to_ExternalInterfaceFunctionalMockupUnitExportToActuator

def _getExternalInterfaceFunctionalMockupUnitExportToActuator(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    return getExternalInterfaceFunctionalMockupUnitExportToActuator(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuator = _getExternalInterfaceFunctionalMockupUnitExportToActuator

def _getExternalInterfaceFunctionalMockupUnitExportToActuator(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    return getExternalInterfaceFunctionalMockupUnitExportToActuator(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitExportToActuator = _getExternalInterfaceFunctionalMockupUnitExportToActuator

def _getExternalInterfaceFunctionalMockupUnitExportToActuators(self) -> ExternalInterfaceFunctionalMockupUnitExportToActuatorVector:
    return getExternalInterfaceFunctionalMockupUnitExportToActuators(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuators = _getExternalInterfaceFunctionalMockupUnitExportToActuators

def _getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    return getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName = _getExternalInterfaceFunctionalMockupUnitExportToActuatorByName

def _getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToActuatorVector:
    return getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName = _getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName

class ExternalInterfaceFunctionalMockupUnitExportToSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToSchedule(model, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToSchedule

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType()

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_initialValue(self)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitExportToSchedule)

def ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToSchedule(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    return toExternalInterfaceFunctionalMockupUnitExportToSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToSchedule = _to_ExternalInterfaceFunctionalMockupUnitExportToSchedule

def _getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedule = _getExternalInterfaceFunctionalMockupUnitExportToSchedule

def _getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedule = _getExternalInterfaceFunctionalMockupUnitExportToSchedule

def _getExternalInterfaceFunctionalMockupUnitExportToSchedules(self) -> ExternalInterfaceFunctionalMockupUnitExportToScheduleVector:
    return getExternalInterfaceFunctionalMockupUnitExportToSchedules(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedules = _getExternalInterfaceFunctionalMockupUnitExportToSchedules

def _getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName = _getExternalInterfaceFunctionalMockupUnitExportToScheduleByName

def _getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToScheduleVector:
    return getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName = _getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName

class ExternalInterfaceFunctionalMockupUnitExportToVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariable(model, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType()

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_initialValue(self)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariable)

def ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    return toExternalInterfaceFunctionalMockupUnitExportToVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToVariable = _to_ExternalInterfaceFunctionalMockupUnitExportToVariable

def _getExternalInterfaceFunctionalMockupUnitExportToVariable(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    return getExternalInterfaceFunctionalMockupUnitExportToVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariable = _getExternalInterfaceFunctionalMockupUnitExportToVariable

def _getExternalInterfaceFunctionalMockupUnitExportToVariable(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    return getExternalInterfaceFunctionalMockupUnitExportToVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitExportToVariable = _getExternalInterfaceFunctionalMockupUnitExportToVariable

def _getExternalInterfaceFunctionalMockupUnitExportToVariables(self) -> ExternalInterfaceFunctionalMockupUnitExportToVariableVector:
    return getExternalInterfaceFunctionalMockupUnitExportToVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariables = _getExternalInterfaceFunctionalMockupUnitExportToVariables

def _getExternalInterfaceFunctionalMockupUnitExportToVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    return getExternalInterfaceFunctionalMockupUnitExportToVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariableByName = _getExternalInterfaceFunctionalMockupUnitExportToVariableByName

def _getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToVariableVector:
    return getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName = _getExternalInterfaceFunctionalMockupUnitExportToVariablesByName

class ExternalInterfaceFunctionalMockupUnitImport(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fmuName: "std::string const &"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImport(model, fmuName))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImport

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType()

    def fMUTimeout(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUTimeout(self)

    def isFMUTimeoutDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMUTimeoutDefaulted(self)

    def fMULoggingOn(self) -> "int":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMULoggingOn(self)

    def isFMULoggingOnDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMULoggingOnDefaulted(self)

    def fMUFileName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUFileName(self)

    def setFMUTimeout(self, fMUTimeout: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUTimeout(self, fMUTimeout)

    def resetFMUTimeout(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMUTimeout(self)

    def setFMULoggingOn(self, fMULoggingOn: "int") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMULoggingOn(self, fMULoggingOn)

    def resetFMULoggingOn(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMULoggingOn(self)

    def setFMUFileName(self, fMUName: "std::string") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUFileName(self, fMUName)

# Register ExternalInterfaceFunctionalMockupUnitImport in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_swigregister(ExternalInterfaceFunctionalMockupUnitImport)

def ExternalInterfaceFunctionalMockupUnitImport_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitImport(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImport(idfObject)

def getExternalInterfaceFunctionalMockupUnitImport(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImport(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImports(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImports(t_model)

def getExternalInterfaceFunctionalMockupUnitImportByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImport(self) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    return toExternalInterfaceFunctionalMockupUnitImport(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImport = _to_ExternalInterfaceFunctionalMockupUnitImport

def _getExternalInterfaceFunctionalMockupUnitImport(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    return getExternalInterfaceFunctionalMockupUnitImport(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImport = _getExternalInterfaceFunctionalMockupUnitImport

def _getExternalInterfaceFunctionalMockupUnitImport(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    return getExternalInterfaceFunctionalMockupUnitImport(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitImport = _getExternalInterfaceFunctionalMockupUnitImport

def _getExternalInterfaceFunctionalMockupUnitImports(self) -> ExternalInterfaceFunctionalMockupUnitImportVector:
    return getExternalInterfaceFunctionalMockupUnitImports(self)
Model.getExternalInterfaceFunctionalMockupUnitImports = _getExternalInterfaceFunctionalMockupUnitImports

def _getExternalInterfaceFunctionalMockupUnitImportByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    return getExternalInterfaceFunctionalMockupUnitImportByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportByName = _getExternalInterfaceFunctionalMockupUnitImportByName

def _getExternalInterfaceFunctionalMockupUnitImportsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportVector:
    return getExternalInterfaceFunctionalMockupUnitImportsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportsByName = _getExternalInterfaceFunctionalMockupUnitImportsByName

class ExternalInterfaceFunctionalMockupUnitImportFromVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", outputVariableIndexKeyName: "std::string const &", outputVariableName: "std::string const &", fMUFile: "ExternalInterfaceFunctionalMockupUnitImport", fMUInstanceName: "std::string const &", fMUVariableName: "std::string const &"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariable(model, outputVariableIndexKeyName, outputVariableName, fMUFile, fMUInstanceName, fMUVariableName))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType()

    def outputVariableIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableName(self)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUFile(self, fMUFile: "ExternalInterfaceFunctionalMockupUnitImport") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUVariableName(self, fMUVariableName)

# Register ExternalInterfaceFunctionalMockupUnitImportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariable)

def ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportFromVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    return toExternalInterfaceFunctionalMockupUnitImportFromVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportFromVariable = _to_ExternalInterfaceFunctionalMockupUnitImportFromVariable

def _getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariable = _getExternalInterfaceFunctionalMockupUnitImportFromVariable

def _getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariable = _getExternalInterfaceFunctionalMockupUnitImportFromVariable

def _getExternalInterfaceFunctionalMockupUnitImportFromVariables(self) -> ExternalInterfaceFunctionalMockupUnitImportFromVariableVector:
    return getExternalInterfaceFunctionalMockupUnitImportFromVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariables = _getExternalInterfaceFunctionalMockupUnitImportFromVariables

def _getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    return getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName = _getExternalInterfaceFunctionalMockupUnitImportFromVariableByName

def _getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportFromVariableVector:
    return getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName = _getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName

class ExternalInterfaceFunctionalMockupUnitImportToActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelObject: "ModelObject", actuatedComponentType: "std::string const &", actuatedComponentControlType: "std::string const &", fMUFile: "ExternalInterfaceFunctionalMockupUnitImport", fMUInstanceName: "std::string const &", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuator(modelObject, actuatedComponentType, actuatedComponentControlType, fMUFile, fMUInstanceName, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuator

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType()

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentControlType(self)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUFile(self, fMUFile: "ExternalInterfaceFunctionalMockupUnitImport") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuator)

def ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToActuator(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    return toExternalInterfaceFunctionalMockupUnitImportToActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToActuator = _to_ExternalInterfaceFunctionalMockupUnitImportToActuator

def _getExternalInterfaceFunctionalMockupUnitImportToActuator(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    return getExternalInterfaceFunctionalMockupUnitImportToActuator(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuator = _getExternalInterfaceFunctionalMockupUnitImportToActuator

def _getExternalInterfaceFunctionalMockupUnitImportToActuator(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    return getExternalInterfaceFunctionalMockupUnitImportToActuator(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitImportToActuator = _getExternalInterfaceFunctionalMockupUnitImportToActuator

def _getExternalInterfaceFunctionalMockupUnitImportToActuators(self) -> ExternalInterfaceFunctionalMockupUnitImportToActuatorVector:
    return getExternalInterfaceFunctionalMockupUnitImportToActuators(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuators = _getExternalInterfaceFunctionalMockupUnitImportToActuators

def _getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    return getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName = _getExternalInterfaceFunctionalMockupUnitImportToActuatorByName

def _getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToActuatorVector:
    return getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName = _getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName

class ExternalInterfaceFunctionalMockupUnitImportToSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fMUFile: "ExternalInterfaceFunctionalMockupUnitImport", fMUInstanceName: "std::string const &", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToSchedule(model, fMUFile, fMUInstanceName, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToSchedule

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType()

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_initialValue(self)

    def setFMUFile(self, fMUFile: "ExternalInterfaceFunctionalMockupUnitImport") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitImportToSchedule)

def ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToSchedule(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    return toExternalInterfaceFunctionalMockupUnitImportToSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToSchedule = _to_ExternalInterfaceFunctionalMockupUnitImportToSchedule

def _getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedule = _getExternalInterfaceFunctionalMockupUnitImportToSchedule

def _getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedule = _getExternalInterfaceFunctionalMockupUnitImportToSchedule

def _getExternalInterfaceFunctionalMockupUnitImportToSchedules(self) -> ExternalInterfaceFunctionalMockupUnitImportToScheduleVector:
    return getExternalInterfaceFunctionalMockupUnitImportToSchedules(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedules = _getExternalInterfaceFunctionalMockupUnitImportToSchedules

def _getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    return getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName = _getExternalInterfaceFunctionalMockupUnitImportToScheduleByName

def _getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToScheduleVector:
    return getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName = _getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName

class ExternalInterfaceFunctionalMockupUnitImportToVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fMUFile: "ExternalInterfaceFunctionalMockupUnitImport", fMUInstanceName: "std::string const &", fMUVariableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariable(model, fMUFile, fMUInstanceName, fMUVariableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType()

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_initialValue(self)

    def setFMUFile(self, fMUFile: "ExternalInterfaceFunctionalMockupUnitImport") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: "std::string const &") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariable)

def ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType()


def toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    return toExternalInterfaceFunctionalMockupUnitImportToVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToVariable = _to_ExternalInterfaceFunctionalMockupUnitImportToVariable

def _getExternalInterfaceFunctionalMockupUnitImportToVariable(self, t_handle: "UUID") -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    return getExternalInterfaceFunctionalMockupUnitImportToVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariable = _getExternalInterfaceFunctionalMockupUnitImportToVariable

def _getExternalInterfaceFunctionalMockupUnitImportToVariable(self, t_handle_str: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    return getExternalInterfaceFunctionalMockupUnitImportToVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceFunctionalMockupUnitImportToVariable = _getExternalInterfaceFunctionalMockupUnitImportToVariable

def _getExternalInterfaceFunctionalMockupUnitImportToVariables(self) -> ExternalInterfaceFunctionalMockupUnitImportToVariableVector:
    return getExternalInterfaceFunctionalMockupUnitImportToVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariables = _getExternalInterfaceFunctionalMockupUnitImportToVariables

def _getExternalInterfaceFunctionalMockupUnitImportToVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    return getExternalInterfaceFunctionalMockupUnitImportToVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariableByName = _getExternalInterfaceFunctionalMockupUnitImportToVariableByName

def _getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToVariableVector:
    return getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName = _getExternalInterfaceFunctionalMockupUnitImportToVariablesByName

class ExternalInterfaceSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceSchedule(*args))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceSchedule

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType()

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceSchedule_initialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceSchedule_resetExportToBCVTB(self)

# Register ExternalInterfaceSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceSchedule_swigregister(ExternalInterfaceSchedule)

def ExternalInterfaceSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType()


def toExternalInterfaceSchedule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.toExternalInterfaceSchedule(idfObject)

def getExternalInterfaceSchedule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.getExternalInterfaceSchedule(t_model, t_handle)

def getExternalInterfaceSchedules(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceSchedules(t_model)

def getExternalInterfaceScheduleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.getExternalInterfaceScheduleByName(t_model, t_name)

def getExternalInterfaceSchedulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceSchedule(self) -> OptionalExternalInterfaceSchedule:
    return toExternalInterfaceSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceSchedule = _to_ExternalInterfaceSchedule

def _getExternalInterfaceSchedule(self, t_handle: "UUID") -> OptionalExternalInterfaceSchedule:
    return getExternalInterfaceSchedule(self, t_handle)
Model.getExternalInterfaceSchedule = _getExternalInterfaceSchedule

def _getExternalInterfaceSchedule(self, t_handle_str: str) -> OptionalExternalInterfaceSchedule:
    return getExternalInterfaceSchedule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceSchedule = _getExternalInterfaceSchedule

def _getExternalInterfaceSchedules(self) -> ExternalInterfaceScheduleVector:
    return getExternalInterfaceSchedules(self)
Model.getExternalInterfaceSchedules = _getExternalInterfaceSchedules

def _getExternalInterfaceScheduleByName(self, t_name: str) -> OptionalExternalInterfaceSchedule:
    return getExternalInterfaceScheduleByName(self, t_name)
Model.getExternalInterfaceScheduleByName = _getExternalInterfaceScheduleByName

def _getExternalInterfaceSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceScheduleVector:
    return getExternalInterfaceSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceSchedulesByName = _getExternalInterfaceSchedulesByName

class ExternalInterfaceVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", variableName: "std::string const &", initialValue: "double"):
        _openstudiomodelcore.ExternalInterfaceVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceVariable(model, variableName, initialValue))
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariable

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType()

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceVariable_initialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue: "double") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB: "bool") -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariable_resetExportToBCVTB(self)

# Register ExternalInterfaceVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceVariable_swigregister(ExternalInterfaceVariable)

def ExternalInterfaceVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType()


def toExternalInterfaceVariable(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.toExternalInterfaceVariable(idfObject)

def getExternalInterfaceVariable(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.getExternalInterfaceVariable(t_model, t_handle)

def getExternalInterfaceVariables(t_model: "Model") -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > >":
    return _openstudiomodelcore.getExternalInterfaceVariables(t_model)

def getExternalInterfaceVariableByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.getExternalInterfaceVariableByName(t_model, t_name)

def getExternalInterfaceVariablesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > >":
    return _openstudiomodelcore.getExternalInterfaceVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceVariable(self) -> OptionalExternalInterfaceVariable:
    return toExternalInterfaceVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceVariable = _to_ExternalInterfaceVariable

def _getExternalInterfaceVariable(self, t_handle: "UUID") -> OptionalExternalInterfaceVariable:
    return getExternalInterfaceVariable(self, t_handle)
Model.getExternalInterfaceVariable = _getExternalInterfaceVariable

def _getExternalInterfaceVariable(self, t_handle_str: str) -> OptionalExternalInterfaceVariable:
    return getExternalInterfaceVariable(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getExternalInterfaceVariable = _getExternalInterfaceVariable

def _getExternalInterfaceVariables(self) -> ExternalInterfaceVariableVector:
    return getExternalInterfaceVariables(self)
Model.getExternalInterfaceVariables = _getExternalInterfaceVariables

def _getExternalInterfaceVariableByName(self, t_name: str) -> OptionalExternalInterfaceVariable:
    return getExternalInterfaceVariableByName(self, t_name)
Model.getExternalInterfaceVariableByName = _getExternalInterfaceVariableByName

def _getExternalInterfaceVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceVariableVector:
    return getExternalInterfaceVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceVariablesByName = _getExternalInterfaceVariablesByName



