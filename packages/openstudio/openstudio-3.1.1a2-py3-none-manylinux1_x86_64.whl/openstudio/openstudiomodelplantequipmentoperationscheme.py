# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelplantequipmentoperationscheme
else:
    import _openstudiomodelplantequipmentoperationscheme

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelplantequipmentoperationscheme.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac

Model = openstudiomodelcore.Model

class PlantEquipmentOperationCoolingLoadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop(self)

    def append(self, x: "PlantEquipmentOperationCoolingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_size(self)

    def swap(self, v: "PlantEquipmentOperationCoolingLoadVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoadVector(*args))

    def push_back(self, x: "PlantEquipmentOperationCoolingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type", x: "PlantEquipmentOperationCoolingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type", x: "PlantEquipmentOperationCoolingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoadVector

# Register PlantEquipmentOperationCoolingLoadVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swigregister(PlantEquipmentOperationCoolingLoadVector)

class OptionalPlantEquipmentOperationCoolingLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationCoolingLoad(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationCoolingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationCoolingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_get(self)

    def set(self, t: "PlantEquipmentOperationCoolingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationCoolingLoad

# Register OptionalPlantEquipmentOperationCoolingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_swigregister(OptionalPlantEquipmentOperationCoolingLoad)

class PlantEquipmentOperationHeatingLoadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop(self)

    def append(self, x: "PlantEquipmentOperationHeatingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_size(self)

    def swap(self, v: "PlantEquipmentOperationHeatingLoadVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoadVector(*args))

    def push_back(self, x: "PlantEquipmentOperationHeatingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type", x: "PlantEquipmentOperationHeatingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type", x: "PlantEquipmentOperationHeatingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoadVector

# Register PlantEquipmentOperationHeatingLoadVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swigregister(PlantEquipmentOperationHeatingLoadVector)

class OptionalPlantEquipmentOperationHeatingLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationHeatingLoad(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationHeatingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationHeatingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_get(self)

    def set(self, t: "PlantEquipmentOperationHeatingLoad") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationHeatingLoad

# Register OptionalPlantEquipmentOperationHeatingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_swigregister(OptionalPlantEquipmentOperationHeatingLoad)

class PlantEquipmentOperationOutdoorDryBulbVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorDryBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorDryBulbVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorDryBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type", x: "PlantEquipmentOperationOutdoorDryBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type", x: "PlantEquipmentOperationOutdoorDryBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbVector

# Register PlantEquipmentOperationOutdoorDryBulbVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swigregister(PlantEquipmentOperationOutdoorDryBulbVector)

class OptionalPlantEquipmentOperationOutdoorDryBulb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulb(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorDryBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulb

# Register OptionalPlantEquipmentOperationOutdoorDryBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulb)

class PlantEquipmentOperationOutdoorWetBulbVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorWetBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorWetBulbVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorWetBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type", x: "PlantEquipmentOperationOutdoorWetBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type", x: "PlantEquipmentOperationOutdoorWetBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbVector

# Register PlantEquipmentOperationOutdoorWetBulbVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swigregister(PlantEquipmentOperationOutdoorWetBulbVector)

class OptionalPlantEquipmentOperationOutdoorWetBulb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulb(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorWetBulb") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulb

# Register OptionalPlantEquipmentOperationOutdoorWetBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulb)

class PlantEquipmentOperationOutdoorDewpointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorDewpoint") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorDewpointVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorDewpoint") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type", x: "PlantEquipmentOperationOutdoorDewpoint") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type", x: "PlantEquipmentOperationOutdoorDewpoint") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointVector

# Register PlantEquipmentOperationOutdoorDewpointVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swigregister(PlantEquipmentOperationOutdoorDewpointVector)

class OptionalPlantEquipmentOperationOutdoorDewpoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpoint(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpoint":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpoint":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorDewpoint") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpoint

# Register OptionalPlantEquipmentOperationOutdoorDewpoint in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_swigregister(OptionalPlantEquipmentOperationOutdoorDewpoint)

class PlantEquipmentOperationOutdoorRelativeHumidityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorRelativeHumidity") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorRelativeHumidityVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidityVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorRelativeHumidity") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type", x: "PlantEquipmentOperationOutdoorRelativeHumidity") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type", x: "PlantEquipmentOperationOutdoorRelativeHumidity") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidityVector

# Register PlantEquipmentOperationOutdoorRelativeHumidityVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swigregister(PlantEquipmentOperationOutdoorRelativeHumidityVector)

class OptionalPlantEquipmentOperationOutdoorRelativeHumidity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorRelativeHumidity(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorRelativeHumidity") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorRelativeHumidity

# Register OptionalPlantEquipmentOperationOutdoorRelativeHumidity in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swigregister(OptionalPlantEquipmentOperationOutdoorRelativeHumidity)

class PlantEquipmentOperationOutdoorDryBulbDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorDryBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorDryBulbDifferenceVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifferenceVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorDryBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type", x: "PlantEquipmentOperationOutdoorDryBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type", x: "PlantEquipmentOperationOutdoorDryBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifferenceVector

# Register PlantEquipmentOperationOutdoorDryBulbDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDryBulbDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorDryBulbDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulbDifference(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorDryBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulbDifference

# Register OptionalPlantEquipmentOperationOutdoorDryBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulbDifference)

class PlantEquipmentOperationOutdoorWetBulbDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorWetBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorWetBulbDifferenceVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifferenceVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorWetBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type", x: "PlantEquipmentOperationOutdoorWetBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type", x: "PlantEquipmentOperationOutdoorWetBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifferenceVector

# Register PlantEquipmentOperationOutdoorWetBulbDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorWetBulbDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorWetBulbDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulbDifference(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorWetBulbDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulbDifference

# Register OptionalPlantEquipmentOperationOutdoorWetBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulbDifference)

class PlantEquipmentOperationOutdoorDewpointDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop(self)

    def append(self, x: "PlantEquipmentOperationOutdoorDewpointDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_size(self)

    def swap(self, v: "PlantEquipmentOperationOutdoorDewpointDifferenceVector") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifferenceVector(*args))

    def push_back(self, x: "PlantEquipmentOperationOutdoorDewpointDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type", x: "PlantEquipmentOperationOutdoorDewpointDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type", x: "PlantEquipmentOperationOutdoorDewpointDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifferenceVector

# Register PlantEquipmentOperationOutdoorDewpointDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDewpointDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorDewpointDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpointDifference(*args))

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_get(self)

    def set(self, t: "PlantEquipmentOperationOutdoorDewpointDifference") -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpointDifference

# Register OptionalPlantEquipmentOperationOutdoorDewpointDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDewpointDifference)

class PlantEquipmentOperationCoolingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoad(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoad

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType()

# Register PlantEquipmentOperationCoolingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_swigregister(PlantEquipmentOperationCoolingLoad)

def PlantEquipmentOperationCoolingLoad_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType()


def toPlantEquipmentOperationCoolingLoad(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationCoolingLoad(idfObject)

def getPlantEquipmentOperationCoolingLoad(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoad(t_model, t_handle)

def getPlantEquipmentOperationCoolingLoads(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoads(t_model)

def getPlantEquipmentOperationCoolingLoadByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadByName(t_model, t_name)

def getPlantEquipmentOperationCoolingLoadsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationCoolingLoad(self) -> OptionalPlantEquipmentOperationCoolingLoad:
    return toPlantEquipmentOperationCoolingLoad(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationCoolingLoad = _to_PlantEquipmentOperationCoolingLoad

def _getPlantEquipmentOperationCoolingLoad(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationCoolingLoad:
    return getPlantEquipmentOperationCoolingLoad(self, t_handle)
Model.getPlantEquipmentOperationCoolingLoad = _getPlantEquipmentOperationCoolingLoad

def _getPlantEquipmentOperationCoolingLoad(self, t_handle_str: str) -> OptionalPlantEquipmentOperationCoolingLoad:
    return getPlantEquipmentOperationCoolingLoad(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationCoolingLoad = _getPlantEquipmentOperationCoolingLoad

def _getPlantEquipmentOperationCoolingLoads(self) -> PlantEquipmentOperationCoolingLoadVector:
    return getPlantEquipmentOperationCoolingLoads(self)
Model.getPlantEquipmentOperationCoolingLoads = _getPlantEquipmentOperationCoolingLoads

def _getPlantEquipmentOperationCoolingLoadByName(self, t_name: str) -> OptionalPlantEquipmentOperationCoolingLoad:
    return getPlantEquipmentOperationCoolingLoadByName(self, t_name)
Model.getPlantEquipmentOperationCoolingLoadByName = _getPlantEquipmentOperationCoolingLoadByName

def _getPlantEquipmentOperationCoolingLoadsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationCoolingLoadVector:
    return getPlantEquipmentOperationCoolingLoadsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationCoolingLoadsByName = _getPlantEquipmentOperationCoolingLoadsByName

class PlantEquipmentOperationHeatingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoad(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoad

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType()

# Register PlantEquipmentOperationHeatingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_swigregister(PlantEquipmentOperationHeatingLoad)

def PlantEquipmentOperationHeatingLoad_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType()


def toPlantEquipmentOperationHeatingLoad(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationHeatingLoad(idfObject)

def getPlantEquipmentOperationHeatingLoad(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoad(t_model, t_handle)

def getPlantEquipmentOperationHeatingLoads(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoads(t_model)

def getPlantEquipmentOperationHeatingLoadByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadByName(t_model, t_name)

def getPlantEquipmentOperationHeatingLoadsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationHeatingLoad(self) -> OptionalPlantEquipmentOperationHeatingLoad:
    return toPlantEquipmentOperationHeatingLoad(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationHeatingLoad = _to_PlantEquipmentOperationHeatingLoad

def _getPlantEquipmentOperationHeatingLoad(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationHeatingLoad:
    return getPlantEquipmentOperationHeatingLoad(self, t_handle)
Model.getPlantEquipmentOperationHeatingLoad = _getPlantEquipmentOperationHeatingLoad

def _getPlantEquipmentOperationHeatingLoad(self, t_handle_str: str) -> OptionalPlantEquipmentOperationHeatingLoad:
    return getPlantEquipmentOperationHeatingLoad(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationHeatingLoad = _getPlantEquipmentOperationHeatingLoad

def _getPlantEquipmentOperationHeatingLoads(self) -> PlantEquipmentOperationHeatingLoadVector:
    return getPlantEquipmentOperationHeatingLoads(self)
Model.getPlantEquipmentOperationHeatingLoads = _getPlantEquipmentOperationHeatingLoads

def _getPlantEquipmentOperationHeatingLoadByName(self, t_name: str) -> OptionalPlantEquipmentOperationHeatingLoad:
    return getPlantEquipmentOperationHeatingLoadByName(self, t_name)
Model.getPlantEquipmentOperationHeatingLoadByName = _getPlantEquipmentOperationHeatingLoadByName

def _getPlantEquipmentOperationHeatingLoadsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationHeatingLoadVector:
    return getPlantEquipmentOperationHeatingLoadsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationHeatingLoadsByName = _getPlantEquipmentOperationHeatingLoadsByName

class PlantEquipmentOperationOutdoorDryBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulb(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulb

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType()

# Register PlantEquipmentOperationOutdoorDryBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_swigregister(PlantEquipmentOperationOutdoorDryBulb)

def PlantEquipmentOperationOutdoorDryBulb_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType()


def toPlantEquipmentOperationOutdoorDryBulb(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulb(idfObject)

def getPlantEquipmentOperationOutdoorDryBulb(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulb(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDryBulbs(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbs(t_model)

def getPlantEquipmentOperationOutdoorDryBulbByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDryBulbsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDryBulb(self) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    return toPlantEquipmentOperationOutdoorDryBulb(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDryBulb = _to_PlantEquipmentOperationOutdoorDryBulb

def _getPlantEquipmentOperationOutdoorDryBulb(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    return getPlantEquipmentOperationOutdoorDryBulb(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDryBulb = _getPlantEquipmentOperationOutdoorDryBulb

def _getPlantEquipmentOperationOutdoorDryBulb(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    return getPlantEquipmentOperationOutdoorDryBulb(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorDryBulb = _getPlantEquipmentOperationOutdoorDryBulb

def _getPlantEquipmentOperationOutdoorDryBulbs(self) -> PlantEquipmentOperationOutdoorDryBulbVector:
    return getPlantEquipmentOperationOutdoorDryBulbs(self)
Model.getPlantEquipmentOperationOutdoorDryBulbs = _getPlantEquipmentOperationOutdoorDryBulbs

def _getPlantEquipmentOperationOutdoorDryBulbByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    return getPlantEquipmentOperationOutdoorDryBulbByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDryBulbByName = _getPlantEquipmentOperationOutdoorDryBulbByName

def _getPlantEquipmentOperationOutdoorDryBulbsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDryBulbVector:
    return getPlantEquipmentOperationOutdoorDryBulbsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDryBulbsByName = _getPlantEquipmentOperationOutdoorDryBulbsByName

class PlantEquipmentOperationOutdoorWetBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulb(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulb

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType()

# Register PlantEquipmentOperationOutdoorWetBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_swigregister(PlantEquipmentOperationOutdoorWetBulb)

def PlantEquipmentOperationOutdoorWetBulb_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType()


def toPlantEquipmentOperationOutdoorWetBulb(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulb(idfObject)

def getPlantEquipmentOperationOutdoorWetBulb(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulb(t_model, t_handle)

def getPlantEquipmentOperationOutdoorWetBulbs(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbs(t_model)

def getPlantEquipmentOperationOutdoorWetBulbByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorWetBulbsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorWetBulb(self) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    return toPlantEquipmentOperationOutdoorWetBulb(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorWetBulb = _to_PlantEquipmentOperationOutdoorWetBulb

def _getPlantEquipmentOperationOutdoorWetBulb(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    return getPlantEquipmentOperationOutdoorWetBulb(self, t_handle)
Model.getPlantEquipmentOperationOutdoorWetBulb = _getPlantEquipmentOperationOutdoorWetBulb

def _getPlantEquipmentOperationOutdoorWetBulb(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    return getPlantEquipmentOperationOutdoorWetBulb(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorWetBulb = _getPlantEquipmentOperationOutdoorWetBulb

def _getPlantEquipmentOperationOutdoorWetBulbs(self) -> PlantEquipmentOperationOutdoorWetBulbVector:
    return getPlantEquipmentOperationOutdoorWetBulbs(self)
Model.getPlantEquipmentOperationOutdoorWetBulbs = _getPlantEquipmentOperationOutdoorWetBulbs

def _getPlantEquipmentOperationOutdoorWetBulbByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    return getPlantEquipmentOperationOutdoorWetBulbByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorWetBulbByName = _getPlantEquipmentOperationOutdoorWetBulbByName

def _getPlantEquipmentOperationOutdoorWetBulbsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorWetBulbVector:
    return getPlantEquipmentOperationOutdoorWetBulbsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorWetBulbsByName = _getPlantEquipmentOperationOutdoorWetBulbsByName

class PlantEquipmentOperationOutdoorDewpoint(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpoint(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpoint

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType()

# Register PlantEquipmentOperationOutdoorDewpoint in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_swigregister(PlantEquipmentOperationOutdoorDewpoint)

def PlantEquipmentOperationOutdoorDewpoint_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType()


def toPlantEquipmentOperationOutdoorDewpoint(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpoint(idfObject)

def getPlantEquipmentOperationOutdoorDewpoint(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoint(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDewpoints(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoints(t_model)

def getPlantEquipmentOperationOutdoorDewpointByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDewpointsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDewpoint(self) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    return toPlantEquipmentOperationOutdoorDewpoint(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDewpoint = _to_PlantEquipmentOperationOutdoorDewpoint

def _getPlantEquipmentOperationOutdoorDewpoint(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    return getPlantEquipmentOperationOutdoorDewpoint(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDewpoint = _getPlantEquipmentOperationOutdoorDewpoint

def _getPlantEquipmentOperationOutdoorDewpoint(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    return getPlantEquipmentOperationOutdoorDewpoint(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorDewpoint = _getPlantEquipmentOperationOutdoorDewpoint

def _getPlantEquipmentOperationOutdoorDewpoints(self) -> PlantEquipmentOperationOutdoorDewpointVector:
    return getPlantEquipmentOperationOutdoorDewpoints(self)
Model.getPlantEquipmentOperationOutdoorDewpoints = _getPlantEquipmentOperationOutdoorDewpoints

def _getPlantEquipmentOperationOutdoorDewpointByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    return getPlantEquipmentOperationOutdoorDewpointByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDewpointByName = _getPlantEquipmentOperationOutdoorDewpointByName

def _getPlantEquipmentOperationOutdoorDewpointsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDewpointVector:
    return getPlantEquipmentOperationOutdoorDewpointsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDewpointsByName = _getPlantEquipmentOperationOutdoorDewpointsByName

class PlantEquipmentOperationOutdoorRelativeHumidity(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidity(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidity

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType()

# Register PlantEquipmentOperationOutdoorRelativeHumidity in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_swigregister(PlantEquipmentOperationOutdoorRelativeHumidity)

def PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType()


def toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject)

def getPlantEquipmentOperationOutdoorRelativeHumidity(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidity(t_model, t_handle)

def getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model)

def getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorRelativeHumidity(self) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    return toPlantEquipmentOperationOutdoorRelativeHumidity(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorRelativeHumidity = _to_PlantEquipmentOperationOutdoorRelativeHumidity

def _getPlantEquipmentOperationOutdoorRelativeHumidity(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    return getPlantEquipmentOperationOutdoorRelativeHumidity(self, t_handle)
Model.getPlantEquipmentOperationOutdoorRelativeHumidity = _getPlantEquipmentOperationOutdoorRelativeHumidity

def _getPlantEquipmentOperationOutdoorRelativeHumidity(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    return getPlantEquipmentOperationOutdoorRelativeHumidity(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorRelativeHumidity = _getPlantEquipmentOperationOutdoorRelativeHumidity

def _getPlantEquipmentOperationOutdoorRelativeHumiditys(self) -> PlantEquipmentOperationOutdoorRelativeHumidityVector:
    return getPlantEquipmentOperationOutdoorRelativeHumiditys(self)
Model.getPlantEquipmentOperationOutdoorRelativeHumiditys = _getPlantEquipmentOperationOutdoorRelativeHumiditys

def _getPlantEquipmentOperationOutdoorRelativeHumidityByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    return getPlantEquipmentOperationOutdoorRelativeHumidityByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorRelativeHumidityByName = _getPlantEquipmentOperationOutdoorRelativeHumidityByName

def _getPlantEquipmentOperationOutdoorRelativeHumiditysByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorRelativeHumidityVector:
    return getPlantEquipmentOperationOutdoorRelativeHumiditysByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorRelativeHumiditysByName = _getPlantEquipmentOperationOutdoorRelativeHumiditysByName

class PlantEquipmentOperationOutdoorDryBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifference(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifference

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType()

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: "Node") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorDryBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_swigregister(PlantEquipmentOperationOutdoorDryBulbDifference)

def PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType()


def toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject)

def getPlantEquipmentOperationOutdoorDryBulbDifference(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model)

def getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDryBulbDifference(self) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    return toPlantEquipmentOperationOutdoorDryBulbDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDryBulbDifference = _to_PlantEquipmentOperationOutdoorDryBulbDifference

def _getPlantEquipmentOperationOutdoorDryBulbDifference(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    return getPlantEquipmentOperationOutdoorDryBulbDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDryBulbDifference = _getPlantEquipmentOperationOutdoorDryBulbDifference

def _getPlantEquipmentOperationOutdoorDryBulbDifference(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    return getPlantEquipmentOperationOutdoorDryBulbDifference(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorDryBulbDifference = _getPlantEquipmentOperationOutdoorDryBulbDifference

def _getPlantEquipmentOperationOutdoorDryBulbDifferences(self) -> PlantEquipmentOperationOutdoorDryBulbDifferenceVector:
    return getPlantEquipmentOperationOutdoorDryBulbDifferences(self)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferences = _getPlantEquipmentOperationOutdoorDryBulbDifferences

def _getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    return getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName = _getPlantEquipmentOperationOutdoorDryBulbDifferenceByName

def _getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDryBulbDifferenceVector:
    return getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName = _getPlantEquipmentOperationOutdoorDryBulbDifferencesByName

class PlantEquipmentOperationOutdoorWetBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifference(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifference

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType()

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: "Node") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorWetBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_swigregister(PlantEquipmentOperationOutdoorWetBulbDifference)

def PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType()


def toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject)

def getPlantEquipmentOperationOutdoorWetBulbDifference(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model)

def getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorWetBulbDifference(self) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    return toPlantEquipmentOperationOutdoorWetBulbDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorWetBulbDifference = _to_PlantEquipmentOperationOutdoorWetBulbDifference

def _getPlantEquipmentOperationOutdoorWetBulbDifference(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    return getPlantEquipmentOperationOutdoorWetBulbDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorWetBulbDifference = _getPlantEquipmentOperationOutdoorWetBulbDifference

def _getPlantEquipmentOperationOutdoorWetBulbDifference(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    return getPlantEquipmentOperationOutdoorWetBulbDifference(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorWetBulbDifference = _getPlantEquipmentOperationOutdoorWetBulbDifference

def _getPlantEquipmentOperationOutdoorWetBulbDifferences(self) -> PlantEquipmentOperationOutdoorWetBulbDifferenceVector:
    return getPlantEquipmentOperationOutdoorWetBulbDifferences(self)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferences = _getPlantEquipmentOperationOutdoorWetBulbDifferences

def _getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    return getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName = _getPlantEquipmentOperationOutdoorWetBulbDifferenceByName

def _getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorWetBulbDifferenceVector:
    return getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName = _getPlantEquipmentOperationOutdoorWetBulbDifferencesByName

class PlantEquipmentOperationOutdoorDewpointDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifference(model))
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifference

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType()

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: "Node") -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorDewpointDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_swigregister(PlantEquipmentOperationOutdoorDewpointDifference)

def PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType()


def toPlantEquipmentOperationOutdoorDewpointDifference(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpointDifference(idfObject)

def getPlantEquipmentOperationOutdoorDewpointDifference(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDewpointDifferences(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferences(t_model)

def getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDewpointDifference(self) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    return toPlantEquipmentOperationOutdoorDewpointDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDewpointDifference = _to_PlantEquipmentOperationOutdoorDewpointDifference

def _getPlantEquipmentOperationOutdoorDewpointDifference(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    return getPlantEquipmentOperationOutdoorDewpointDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDewpointDifference = _getPlantEquipmentOperationOutdoorDewpointDifference

def _getPlantEquipmentOperationOutdoorDewpointDifference(self, t_handle_str: str) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    return getPlantEquipmentOperationOutdoorDewpointDifference(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationOutdoorDewpointDifference = _getPlantEquipmentOperationOutdoorDewpointDifference

def _getPlantEquipmentOperationOutdoorDewpointDifferences(self) -> PlantEquipmentOperationOutdoorDewpointDifferenceVector:
    return getPlantEquipmentOperationOutdoorDewpointDifferences(self)
Model.getPlantEquipmentOperationOutdoorDewpointDifferences = _getPlantEquipmentOperationOutdoorDewpointDifferences

def _getPlantEquipmentOperationOutdoorDewpointDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    return getPlantEquipmentOperationOutdoorDewpointDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDewpointDifferenceByName = _getPlantEquipmentOperationOutdoorDewpointDifferenceByName

def _getPlantEquipmentOperationOutdoorDewpointDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDewpointDifferenceVector:
    return getPlantEquipmentOperationOutdoorDewpointDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDewpointDifferencesByName = _getPlantEquipmentOperationOutdoorDewpointDifferencesByName



