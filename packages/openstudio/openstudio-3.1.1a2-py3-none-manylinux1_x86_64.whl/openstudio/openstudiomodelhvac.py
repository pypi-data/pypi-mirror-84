# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelhvac
else:
    import _openstudiomodelhvac

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelhvac.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelhvac.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelhvac.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelhvac.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelhvac.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelhvac.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelhvac.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelhvac.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelhvac.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelhvac.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelhvac.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelhvac:
_openstudiomodelhvac.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelhvac.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry

Model = openstudiomodelcore.Model

class SupplyAirflowRatioFieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type", j: "std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type") -> "std::vector< openstudio::model::SupplyAirflowRatioField,std::allocator< openstudio::model::SupplyAirflowRatioField > > *":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type", j: "std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_pop(self)

    def append(self, x: "SupplyAirflowRatioField") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_size(self)

    def swap(self, v: "SupplyAirflowRatioFieldVector") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::reverse_iterator":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::reverse_iterator":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::allocator_type":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SupplyAirflowRatioFieldVector_swiginit(self, _openstudiomodelhvac.new_SupplyAirflowRatioFieldVector(*args))

    def push_back(self, x: "SupplyAirflowRatioField") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type", x: "SupplyAirflowRatioField") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type", x: "SupplyAirflowRatioField") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type") -> "void":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":
        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SupplyAirflowRatioFieldVector

# Register SupplyAirflowRatioFieldVector in _openstudiomodelhvac:
_openstudiomodelhvac.SupplyAirflowRatioFieldVector_swigregister(SupplyAirflowRatioFieldVector)

class PortListVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.PortListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.PortListVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.PortListVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PortList >::size_type":
        return _openstudiomodelhvac.PortListVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PortList >::difference_type", j: "std::vector< openstudio::model::PortList >::difference_type") -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > > *":
        return _openstudiomodelhvac.PortListVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.PortListVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PortList >::difference_type", j: "std::vector< openstudio::model::PortList >::difference_type") -> "void":
        return _openstudiomodelhvac.PortListVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PortListVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PortList >::value_type const &":
        return _openstudiomodelhvac.PortListVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PortListVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PortList >::value_type":
        return _openstudiomodelhvac.PortListVector_pop(self)

    def append(self, x: "PortList") -> "void":
        return _openstudiomodelhvac.PortListVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.PortListVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PortList >::size_type":
        return _openstudiomodelhvac.PortListVector_size(self)

    def swap(self, v: "PortListVector") -> "void":
        return _openstudiomodelhvac.PortListVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PortList >::iterator":
        return _openstudiomodelhvac.PortListVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PortList >::iterator":
        return _openstudiomodelhvac.PortListVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PortList >::reverse_iterator":
        return _openstudiomodelhvac.PortListVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PortList >::reverse_iterator":
        return _openstudiomodelhvac.PortListVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.PortListVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PortList >::allocator_type":
        return _openstudiomodelhvac.PortListVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.PortListVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PortList >::iterator":
        return _openstudiomodelhvac.PortListVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.PortListVector_swiginit(self, _openstudiomodelhvac.new_PortListVector(*args))

    def push_back(self, x: "PortList") -> "void":
        return _openstudiomodelhvac.PortListVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PortList >::value_type const &":
        return _openstudiomodelhvac.PortListVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PortList >::value_type const &":
        return _openstudiomodelhvac.PortListVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PortList >::size_type", x: "PortList") -> "void":
        return _openstudiomodelhvac.PortListVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PortList >::size_type", x: "PortList") -> "void":
        return _openstudiomodelhvac.PortListVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.PortListVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PortList >::size_type") -> "void":
        return _openstudiomodelhvac.PortListVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PortList >::size_type":
        return _openstudiomodelhvac.PortListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_PortListVector

# Register PortListVector in _openstudiomodelhvac:
_openstudiomodelhvac.PortListVector_swigregister(PortListVector)

class OptionalPortList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalPortList_swiginit(self, _openstudiomodelhvac.new_OptionalPortList(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalPortList_reset(self)

    def __ref__(self) -> "openstudio::model::PortList":
        return _openstudiomodelhvac.OptionalPortList___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalPortList_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalPortList_isNull(self)

    def get(self) -> "openstudio::model::PortList":
        return _openstudiomodelhvac.OptionalPortList_get(self)

    def set(self, t: "PortList") -> "void":
        return _openstudiomodelhvac.OptionalPortList_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPortList

# Register OptionalPortList in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalPortList_swigregister(OptionalPortList)

class LoopVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.LoopVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.LoopVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.LoopVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Loop >::size_type":
        return _openstudiomodelhvac.LoopVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Loop >::difference_type", j: "std::vector< openstudio::model::Loop >::difference_type") -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > > *":
        return _openstudiomodelhvac.LoopVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.LoopVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Loop >::difference_type", j: "std::vector< openstudio::model::Loop >::difference_type") -> "void":
        return _openstudiomodelhvac.LoopVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.LoopVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Loop >::value_type const &":
        return _openstudiomodelhvac.LoopVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.LoopVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Loop >::value_type":
        return _openstudiomodelhvac.LoopVector_pop(self)

    def append(self, x: "Loop") -> "void":
        return _openstudiomodelhvac.LoopVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.LoopVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Loop >::size_type":
        return _openstudiomodelhvac.LoopVector_size(self)

    def swap(self, v: "LoopVector") -> "void":
        return _openstudiomodelhvac.LoopVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Loop >::iterator":
        return _openstudiomodelhvac.LoopVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Loop >::iterator":
        return _openstudiomodelhvac.LoopVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Loop >::reverse_iterator":
        return _openstudiomodelhvac.LoopVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Loop >::reverse_iterator":
        return _openstudiomodelhvac.LoopVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.LoopVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Loop >::allocator_type":
        return _openstudiomodelhvac.LoopVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.LoopVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Loop >::iterator":
        return _openstudiomodelhvac.LoopVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.LoopVector_swiginit(self, _openstudiomodelhvac.new_LoopVector(*args))

    def push_back(self, x: "Loop") -> "void":
        return _openstudiomodelhvac.LoopVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Loop >::value_type const &":
        return _openstudiomodelhvac.LoopVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Loop >::value_type const &":
        return _openstudiomodelhvac.LoopVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Loop >::size_type", x: "Loop") -> "void":
        return _openstudiomodelhvac.LoopVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Loop >::size_type", x: "Loop") -> "void":
        return _openstudiomodelhvac.LoopVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.LoopVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Loop >::size_type") -> "void":
        return _openstudiomodelhvac.LoopVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Loop >::size_type":
        return _openstudiomodelhvac.LoopVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_LoopVector

# Register LoopVector in _openstudiomodelhvac:
_openstudiomodelhvac.LoopVector_swigregister(LoopVector)

class OptionalLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalLoop_swiginit(self, _openstudiomodelhvac.new_OptionalLoop(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalLoop_reset(self)

    def __ref__(self) -> "openstudio::model::Loop":
        return _openstudiomodelhvac.OptionalLoop___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalLoop_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalLoop_isNull(self)

    def get(self) -> "openstudio::model::Loop":
        return _openstudiomodelhvac.OptionalLoop_get(self)

    def set(self, t: "Loop") -> "void":
        return _openstudiomodelhvac.OptionalLoop_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalLoop

# Register OptionalLoop in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalLoop_swigregister(OptionalLoop)

class HVACComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.HVACComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.HVACComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.HVACComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":
        return _openstudiomodelhvac.HVACComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HVACComponent >::difference_type", j: "std::vector< openstudio::model::HVACComponent >::difference_type") -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > > *":
        return _openstudiomodelhvac.HVACComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.HVACComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HVACComponent >::difference_type", j: "std::vector< openstudio::model::HVACComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.HVACComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HVACComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":
        return _openstudiomodelhvac.HVACComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HVACComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HVACComponent >::value_type":
        return _openstudiomodelhvac.HVACComponentVector_pop(self)

    def append(self, x: "HVACComponent") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.HVACComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":
        return _openstudiomodelhvac.HVACComponentVector_size(self)

    def swap(self, v: "HVACComponentVector") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HVACComponent >::iterator":
        return _openstudiomodelhvac.HVACComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HVACComponent >::iterator":
        return _openstudiomodelhvac.HVACComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HVACComponent >::reverse_iterator":
        return _openstudiomodelhvac.HVACComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HVACComponent >::reverse_iterator":
        return _openstudiomodelhvac.HVACComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.HVACComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HVACComponent >::allocator_type":
        return _openstudiomodelhvac.HVACComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.HVACComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HVACComponent >::iterator":
        return _openstudiomodelhvac.HVACComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.HVACComponentVector_swiginit(self, _openstudiomodelhvac.new_HVACComponentVector(*args))

    def push_back(self, x: "HVACComponent") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":
        return _openstudiomodelhvac.HVACComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":
        return _openstudiomodelhvac.HVACComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HVACComponent >::size_type", x: "HVACComponent") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HVACComponent >::size_type", x: "HVACComponent") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.HVACComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HVACComponent >::size_type") -> "void":
        return _openstudiomodelhvac.HVACComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":
        return _openstudiomodelhvac.HVACComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_HVACComponentVector

# Register HVACComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.HVACComponentVector_swigregister(HVACComponentVector)

class OptionalHVACComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalHVACComponent_swiginit(self, _openstudiomodelhvac.new_OptionalHVACComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalHVACComponent_reset(self)

    def __ref__(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelhvac.OptionalHVACComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalHVACComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalHVACComponent_isNull(self)

    def get(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelhvac.OptionalHVACComponent_get(self)

    def set(self, t: "HVACComponent") -> "void":
        return _openstudiomodelhvac.OptionalHVACComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHVACComponent

# Register OptionalHVACComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalHVACComponent_swigregister(OptionalHVACComponent)

class ZoneHVACComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneHVACComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":
        return _openstudiomodelhvac.ZoneHVACComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneHVACComponent >::difference_type", j: "std::vector< openstudio::model::ZoneHVACComponent >::difference_type") -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > > *":
        return _openstudiomodelhvac.ZoneHVACComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneHVACComponent >::difference_type", j: "std::vector< openstudio::model::ZoneHVACComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type":
        return _openstudiomodelhvac.ZoneHVACComponentVector_pop(self)

    def append(self, x: "ZoneHVACComponent") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":
        return _openstudiomodelhvac.ZoneHVACComponentVector_size(self)

    def swap(self, v: "ZoneHVACComponentVector") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":
        return _openstudiomodelhvac.ZoneHVACComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":
        return _openstudiomodelhvac.ZoneHVACComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::reverse_iterator":
        return _openstudiomodelhvac.ZoneHVACComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::reverse_iterator":
        return _openstudiomodelhvac.ZoneHVACComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::allocator_type":
        return _openstudiomodelhvac.ZoneHVACComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":
        return _openstudiomodelhvac.ZoneHVACComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneHVACComponentVector_swiginit(self, _openstudiomodelhvac.new_ZoneHVACComponentVector(*args))

    def push_back(self, x: "ZoneHVACComponent") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneHVACComponent >::size_type", x: "ZoneHVACComponent") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneHVACComponent >::size_type", x: "ZoneHVACComponent") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneHVACComponent >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneHVACComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":
        return _openstudiomodelhvac.ZoneHVACComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACComponentVector

# Register ZoneHVACComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneHVACComponentVector_swigregister(ZoneHVACComponentVector)

class OptionalZoneHVACComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneHVACComponent_swiginit(self, _openstudiomodelhvac.new_OptionalZoneHVACComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneHVACComponent_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACComponent":
        return _openstudiomodelhvac.OptionalZoneHVACComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneHVACComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneHVACComponent_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACComponent":
        return _openstudiomodelhvac.OptionalZoneHVACComponent_get(self)

    def set(self, t: "ZoneHVACComponent") -> "void":
        return _openstudiomodelhvac.OptionalZoneHVACComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneHVACComponent

# Register OptionalZoneHVACComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneHVACComponent_swigregister(OptionalZoneHVACComponent)

class ZoneHVACEquipmentListVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type", j: "std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type") -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > > *":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type", j: "std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_pop(self)

    def append(self, x: "ZoneHVACEquipmentList") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_size(self)

    def swap(self, v: "ZoneHVACEquipmentListVector") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::reverse_iterator":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::reverse_iterator":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::allocator_type":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneHVACEquipmentListVector_swiginit(self, _openstudiomodelhvac.new_ZoneHVACEquipmentListVector(*args))

    def push_back(self, x: "ZoneHVACEquipmentList") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type", x: "ZoneHVACEquipmentList") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type", x: "ZoneHVACEquipmentList") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":
        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACEquipmentListVector

# Register ZoneHVACEquipmentListVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneHVACEquipmentListVector_swigregister(ZoneHVACEquipmentListVector)

class OptionalZoneHVACEquipmentList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneHVACEquipmentList_swiginit(self, _openstudiomodelhvac.new_OptionalZoneHVACEquipmentList(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACEquipmentList":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACEquipmentList":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_get(self)

    def set(self, t: "ZoneHVACEquipmentList") -> "void":
        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneHVACEquipmentList

# Register OptionalZoneHVACEquipmentList in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneHVACEquipmentList_swigregister(OptionalZoneHVACEquipmentList)

class ThermostatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ThermostatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ThermostatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ThermostatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Thermostat >::size_type":
        return _openstudiomodelhvac.ThermostatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Thermostat >::difference_type", j: "std::vector< openstudio::model::Thermostat >::difference_type") -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > > *":
        return _openstudiomodelhvac.ThermostatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Thermostat >::difference_type", j: "std::vector< openstudio::model::Thermostat >::difference_type") -> "void":
        return _openstudiomodelhvac.ThermostatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Thermostat >::value_type const &":
        return _openstudiomodelhvac.ThermostatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Thermostat >::value_type":
        return _openstudiomodelhvac.ThermostatVector_pop(self)

    def append(self, x: "Thermostat") -> "void":
        return _openstudiomodelhvac.ThermostatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ThermostatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Thermostat >::size_type":
        return _openstudiomodelhvac.ThermostatVector_size(self)

    def swap(self, v: "ThermostatVector") -> "void":
        return _openstudiomodelhvac.ThermostatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Thermostat >::iterator":
        return _openstudiomodelhvac.ThermostatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Thermostat >::iterator":
        return _openstudiomodelhvac.ThermostatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Thermostat >::reverse_iterator":
        return _openstudiomodelhvac.ThermostatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Thermostat >::reverse_iterator":
        return _openstudiomodelhvac.ThermostatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ThermostatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Thermostat >::allocator_type":
        return _openstudiomodelhvac.ThermostatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ThermostatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Thermostat >::iterator":
        return _openstudiomodelhvac.ThermostatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ThermostatVector_swiginit(self, _openstudiomodelhvac.new_ThermostatVector(*args))

    def push_back(self, x: "Thermostat") -> "void":
        return _openstudiomodelhvac.ThermostatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Thermostat >::value_type const &":
        return _openstudiomodelhvac.ThermostatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Thermostat >::value_type const &":
        return _openstudiomodelhvac.ThermostatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Thermostat >::size_type", x: "Thermostat") -> "void":
        return _openstudiomodelhvac.ThermostatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Thermostat >::size_type", x: "Thermostat") -> "void":
        return _openstudiomodelhvac.ThermostatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Thermostat >::size_type") -> "void":
        return _openstudiomodelhvac.ThermostatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Thermostat >::size_type":
        return _openstudiomodelhvac.ThermostatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatVector

# Register ThermostatVector in _openstudiomodelhvac:
_openstudiomodelhvac.ThermostatVector_swigregister(ThermostatVector)

class OptionalThermostat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalThermostat_swiginit(self, _openstudiomodelhvac.new_OptionalThermostat(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalThermostat_reset(self)

    def __ref__(self) -> "openstudio::model::Thermostat":
        return _openstudiomodelhvac.OptionalThermostat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermostat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermostat_isNull(self)

    def get(self) -> "openstudio::model::Thermostat":
        return _openstudiomodelhvac.OptionalThermostat_get(self)

    def set(self, t: "Thermostat") -> "void":
        return _openstudiomodelhvac.OptionalThermostat_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermostat

# Register OptionalThermostat in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalThermostat_swigregister(OptionalThermostat)

class SetpointManagerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":
        return _openstudiomodelhvac.SetpointManagerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManager >::difference_type", j: "std::vector< openstudio::model::SetpointManager >::difference_type") -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > > *":
        return _openstudiomodelhvac.SetpointManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManager >::difference_type", j: "std::vector< openstudio::model::SetpointManager >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManager >::value_type":
        return _openstudiomodelhvac.SetpointManagerVector_pop(self)

    def append(self, x: "SetpointManager") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":
        return _openstudiomodelhvac.SetpointManagerVector_size(self)

    def swap(self, v: "SetpointManagerVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManager >::iterator":
        return _openstudiomodelhvac.SetpointManagerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManager >::iterator":
        return _openstudiomodelhvac.SetpointManagerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManager >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManager >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManager >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManager >::iterator":
        return _openstudiomodelhvac.SetpointManagerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerVector(*args))

    def push_back(self, x: "SetpointManager") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManager >::size_type", x: "SetpointManager") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManager >::size_type", x: "SetpointManager") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManager >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":
        return _openstudiomodelhvac.SetpointManagerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerVector

# Register SetpointManagerVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerVector_swigregister(SetpointManagerVector)

class OptionalSetpointManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManager_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManager(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManager_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManager":
        return _openstudiomodelhvac.OptionalSetpointManager___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManager_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManager_isNull(self)

    def get(self) -> "openstudio::model::SetpointManager":
        return _openstudiomodelhvac.OptionalSetpointManager_get(self)

    def set(self, t: "SetpointManager") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManager_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManager

# Register OptionalSetpointManager in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManager_swigregister(OptionalSetpointManager)

class StraightComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.StraightComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.StraightComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.StraightComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":
        return _openstudiomodelhvac.StraightComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::StraightComponent >::difference_type", j: "std::vector< openstudio::model::StraightComponent >::difference_type") -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > > *":
        return _openstudiomodelhvac.StraightComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.StraightComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::StraightComponent >::difference_type", j: "std::vector< openstudio::model::StraightComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.StraightComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.StraightComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":
        return _openstudiomodelhvac.StraightComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.StraightComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::StraightComponent >::value_type":
        return _openstudiomodelhvac.StraightComponentVector_pop(self)

    def append(self, x: "StraightComponent") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.StraightComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":
        return _openstudiomodelhvac.StraightComponentVector_size(self)

    def swap(self, v: "StraightComponentVector") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::StraightComponent >::iterator":
        return _openstudiomodelhvac.StraightComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StraightComponent >::iterator":
        return _openstudiomodelhvac.StraightComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StraightComponent >::reverse_iterator":
        return _openstudiomodelhvac.StraightComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StraightComponent >::reverse_iterator":
        return _openstudiomodelhvac.StraightComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.StraightComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::StraightComponent >::allocator_type":
        return _openstudiomodelhvac.StraightComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.StraightComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StraightComponent >::iterator":
        return _openstudiomodelhvac.StraightComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.StraightComponentVector_swiginit(self, _openstudiomodelhvac.new_StraightComponentVector(*args))

    def push_back(self, x: "StraightComponent") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":
        return _openstudiomodelhvac.StraightComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":
        return _openstudiomodelhvac.StraightComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::StraightComponent >::size_type", x: "StraightComponent") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::StraightComponent >::size_type", x: "StraightComponent") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.StraightComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::StraightComponent >::size_type") -> "void":
        return _openstudiomodelhvac.StraightComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":
        return _openstudiomodelhvac.StraightComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_StraightComponentVector

# Register StraightComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.StraightComponentVector_swigregister(StraightComponentVector)

class OptionalStraightComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalStraightComponent_swiginit(self, _openstudiomodelhvac.new_OptionalStraightComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalStraightComponent_reset(self)

    def __ref__(self) -> "openstudio::model::StraightComponent":
        return _openstudiomodelhvac.OptionalStraightComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalStraightComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalStraightComponent_isNull(self)

    def get(self) -> "openstudio::model::StraightComponent":
        return _openstudiomodelhvac.OptionalStraightComponent_get(self)

    def set(self, t: "StraightComponent") -> "void":
        return _openstudiomodelhvac.OptionalStraightComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalStraightComponent

# Register OptionalStraightComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalStraightComponent_swigregister(OptionalStraightComponent)

class WaterToAirComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterToAirComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterToAirComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterToAirComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":
        return _openstudiomodelhvac.WaterToAirComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterToAirComponent >::difference_type", j: "std::vector< openstudio::model::WaterToAirComponent >::difference_type") -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > > *":
        return _openstudiomodelhvac.WaterToAirComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterToAirComponent >::difference_type", j: "std::vector< openstudio::model::WaterToAirComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToAirComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type":
        return _openstudiomodelhvac.WaterToAirComponentVector_pop(self)

    def append(self, x: "WaterToAirComponent") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterToAirComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":
        return _openstudiomodelhvac.WaterToAirComponentVector_size(self)

    def swap(self, v: "WaterToAirComponentVector") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":
        return _openstudiomodelhvac.WaterToAirComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":
        return _openstudiomodelhvac.WaterToAirComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterToAirComponent >::reverse_iterator":
        return _openstudiomodelhvac.WaterToAirComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterToAirComponent >::reverse_iterator":
        return _openstudiomodelhvac.WaterToAirComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterToAirComponent >::allocator_type":
        return _openstudiomodelhvac.WaterToAirComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":
        return _openstudiomodelhvac.WaterToAirComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterToAirComponentVector_swiginit(self, _openstudiomodelhvac.new_WaterToAirComponentVector(*args))

    def push_back(self, x: "WaterToAirComponent") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToAirComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToAirComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterToAirComponent >::size_type", x: "WaterToAirComponent") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterToAirComponent >::size_type", x: "WaterToAirComponent") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterToAirComponent >::size_type") -> "void":
        return _openstudiomodelhvac.WaterToAirComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":
        return _openstudiomodelhvac.WaterToAirComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToAirComponentVector

# Register WaterToAirComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterToAirComponentVector_swigregister(WaterToAirComponentVector)

class OptionalWaterToAirComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterToAirComponent_swiginit(self, _openstudiomodelhvac.new_OptionalWaterToAirComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterToAirComponent_reset(self)

    def __ref__(self) -> "openstudio::model::WaterToAirComponent":
        return _openstudiomodelhvac.OptionalWaterToAirComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterToAirComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterToAirComponent_isNull(self)

    def get(self) -> "openstudio::model::WaterToAirComponent":
        return _openstudiomodelhvac.OptionalWaterToAirComponent_get(self)

    def set(self, t: "WaterToAirComponent") -> "void":
        return _openstudiomodelhvac.OptionalWaterToAirComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterToAirComponent

# Register OptionalWaterToAirComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterToAirComponent_swigregister(OptionalWaterToAirComponent)

class WaterToWaterComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterToWaterComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":
        return _openstudiomodelhvac.WaterToWaterComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterToWaterComponent >::difference_type", j: "std::vector< openstudio::model::WaterToWaterComponent >::difference_type") -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > > *":
        return _openstudiomodelhvac.WaterToWaterComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterToWaterComponent >::difference_type", j: "std::vector< openstudio::model::WaterToWaterComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToWaterComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type":
        return _openstudiomodelhvac.WaterToWaterComponentVector_pop(self)

    def append(self, x: "WaterToWaterComponent") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":
        return _openstudiomodelhvac.WaterToWaterComponentVector_size(self)

    def swap(self, v: "WaterToWaterComponentVector") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":
        return _openstudiomodelhvac.WaterToWaterComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":
        return _openstudiomodelhvac.WaterToWaterComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::reverse_iterator":
        return _openstudiomodelhvac.WaterToWaterComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::reverse_iterator":
        return _openstudiomodelhvac.WaterToWaterComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::allocator_type":
        return _openstudiomodelhvac.WaterToWaterComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":
        return _openstudiomodelhvac.WaterToWaterComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterToWaterComponentVector_swiginit(self, _openstudiomodelhvac.new_WaterToWaterComponentVector(*args))

    def push_back(self, x: "WaterToWaterComponent") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToWaterComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":
        return _openstudiomodelhvac.WaterToWaterComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterToWaterComponent >::size_type", x: "WaterToWaterComponent") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterToWaterComponent >::size_type", x: "WaterToWaterComponent") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterToWaterComponent >::size_type") -> "void":
        return _openstudiomodelhvac.WaterToWaterComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":
        return _openstudiomodelhvac.WaterToWaterComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToWaterComponentVector

# Register WaterToWaterComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterToWaterComponentVector_swigregister(WaterToWaterComponentVector)

class OptionalWaterToWaterComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterToWaterComponent_swiginit(self, _openstudiomodelhvac.new_OptionalWaterToWaterComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent_reset(self)

    def __ref__(self) -> "openstudio::model::WaterToWaterComponent":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent_isNull(self)

    def get(self) -> "openstudio::model::WaterToWaterComponent":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent_get(self)

    def set(self, t: "WaterToWaterComponent") -> "void":
        return _openstudiomodelhvac.OptionalWaterToWaterComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterToWaterComponent

# Register OptionalWaterToWaterComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterToWaterComponent_swigregister(OptionalWaterToWaterComponent)

class AirToAirComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirToAirComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirToAirComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirToAirComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":
        return _openstudiomodelhvac.AirToAirComponentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirToAirComponent >::difference_type", j: "std::vector< openstudio::model::AirToAirComponent >::difference_type") -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > > *":
        return _openstudiomodelhvac.AirToAirComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirToAirComponent >::difference_type", j: "std::vector< openstudio::model::AirToAirComponent >::difference_type") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":
        return _openstudiomodelhvac.AirToAirComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type":
        return _openstudiomodelhvac.AirToAirComponentVector_pop(self)

    def append(self, x: "AirToAirComponent") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirToAirComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":
        return _openstudiomodelhvac.AirToAirComponentVector_size(self)

    def swap(self, v: "AirToAirComponentVector") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":
        return _openstudiomodelhvac.AirToAirComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":
        return _openstudiomodelhvac.AirToAirComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirToAirComponent >::reverse_iterator":
        return _openstudiomodelhvac.AirToAirComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirToAirComponent >::reverse_iterator":
        return _openstudiomodelhvac.AirToAirComponentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirToAirComponent >::allocator_type":
        return _openstudiomodelhvac.AirToAirComponentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":
        return _openstudiomodelhvac.AirToAirComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirToAirComponentVector_swiginit(self, _openstudiomodelhvac.new_AirToAirComponentVector(*args))

    def push_back(self, x: "AirToAirComponent") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":
        return _openstudiomodelhvac.AirToAirComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":
        return _openstudiomodelhvac.AirToAirComponentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirToAirComponent >::size_type", x: "AirToAirComponent") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirToAirComponent >::size_type", x: "AirToAirComponent") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirToAirComponent >::size_type") -> "void":
        return _openstudiomodelhvac.AirToAirComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":
        return _openstudiomodelhvac.AirToAirComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirToAirComponentVector

# Register AirToAirComponentVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirToAirComponentVector_swigregister(AirToAirComponentVector)

class OptionalAirToAirComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirToAirComponent_swiginit(self, _openstudiomodelhvac.new_OptionalAirToAirComponent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirToAirComponent_reset(self)

    def __ref__(self) -> "openstudio::model::AirToAirComponent":
        return _openstudiomodelhvac.OptionalAirToAirComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirToAirComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirToAirComponent_isNull(self)

    def get(self) -> "openstudio::model::AirToAirComponent":
        return _openstudiomodelhvac.OptionalAirToAirComponent_get(self)

    def set(self, t: "AirToAirComponent") -> "void":
        return _openstudiomodelhvac.OptionalAirToAirComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirToAirComponent

# Register OptionalAirToAirComponent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirToAirComponent_swigregister(OptionalAirToAirComponent)

class NodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.NodeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.NodeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Node >::size_type":
        return _openstudiomodelhvac.NodeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Node >::difference_type", j: "std::vector< openstudio::model::Node >::difference_type") -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > > *":
        return _openstudiomodelhvac.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.NodeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Node >::difference_type", j: "std::vector< openstudio::model::Node >::difference_type") -> "void":
        return _openstudiomodelhvac.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Node >::value_type const &":
        return _openstudiomodelhvac.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.NodeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Node >::value_type":
        return _openstudiomodelhvac.NodeVector_pop(self)

    def append(self, x: "Node") -> "void":
        return _openstudiomodelhvac.NodeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.NodeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Node >::size_type":
        return _openstudiomodelhvac.NodeVector_size(self)

    def swap(self, v: "NodeVector") -> "void":
        return _openstudiomodelhvac.NodeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Node >::iterator":
        return _openstudiomodelhvac.NodeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Node >::iterator":
        return _openstudiomodelhvac.NodeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Node >::reverse_iterator":
        return _openstudiomodelhvac.NodeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Node >::reverse_iterator":
        return _openstudiomodelhvac.NodeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.NodeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Node >::allocator_type":
        return _openstudiomodelhvac.NodeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.NodeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Node >::iterator":
        return _openstudiomodelhvac.NodeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.NodeVector_swiginit(self, _openstudiomodelhvac.new_NodeVector(*args))

    def push_back(self, x: "Node") -> "void":
        return _openstudiomodelhvac.NodeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Node >::value_type const &":
        return _openstudiomodelhvac.NodeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Node >::value_type const &":
        return _openstudiomodelhvac.NodeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Node >::size_type", x: "Node") -> "void":
        return _openstudiomodelhvac.NodeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Node >::size_type", x: "Node") -> "void":
        return _openstudiomodelhvac.NodeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.NodeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Node >::size_type") -> "void":
        return _openstudiomodelhvac.NodeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Node >::size_type":
        return _openstudiomodelhvac.NodeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_NodeVector

# Register NodeVector in _openstudiomodelhvac:
_openstudiomodelhvac.NodeVector_swigregister(NodeVector)

class OptionalNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalNode_swiginit(self, _openstudiomodelhvac.new_OptionalNode(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalNode_reset(self)

    def __ref__(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.OptionalNode___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalNode_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalNode_isNull(self)

    def get(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.OptionalNode_get(self)

    def set(self, t: "Node") -> "void":
        return _openstudiomodelhvac.OptionalNode_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalNode

# Register OptionalNode in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalNode_swigregister(OptionalNode)

class SizingZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SizingZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SizingZoneVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SizingZoneVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SizingZone >::size_type":
        return _openstudiomodelhvac.SizingZoneVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SizingZone >::difference_type", j: "std::vector< openstudio::model::SizingZone >::difference_type") -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > > *":
        return _openstudiomodelhvac.SizingZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingZoneVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SizingZone >::difference_type", j: "std::vector< openstudio::model::SizingZone >::difference_type") -> "void":
        return _openstudiomodelhvac.SizingZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingZoneVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingZone >::value_type const &":
        return _openstudiomodelhvac.SizingZoneVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingZoneVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SizingZone >::value_type":
        return _openstudiomodelhvac.SizingZoneVector_pop(self)

    def append(self, x: "SizingZone") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SizingZoneVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SizingZone >::size_type":
        return _openstudiomodelhvac.SizingZoneVector_size(self)

    def swap(self, v: "SizingZoneVector") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SizingZone >::iterator":
        return _openstudiomodelhvac.SizingZoneVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SizingZone >::iterator":
        return _openstudiomodelhvac.SizingZoneVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SizingZone >::reverse_iterator":
        return _openstudiomodelhvac.SizingZoneVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SizingZone >::reverse_iterator":
        return _openstudiomodelhvac.SizingZoneVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SizingZoneVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SizingZone >::allocator_type":
        return _openstudiomodelhvac.SizingZoneVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SizingZoneVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SizingZone >::iterator":
        return _openstudiomodelhvac.SizingZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SizingZoneVector_swiginit(self, _openstudiomodelhvac.new_SizingZoneVector(*args))

    def push_back(self, x: "SizingZone") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SizingZone >::value_type const &":
        return _openstudiomodelhvac.SizingZoneVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SizingZone >::value_type const &":
        return _openstudiomodelhvac.SizingZoneVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SizingZone >::size_type", x: "SizingZone") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SizingZone >::size_type", x: "SizingZone") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SizingZoneVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SizingZone >::size_type") -> "void":
        return _openstudiomodelhvac.SizingZoneVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SizingZone >::size_type":
        return _openstudiomodelhvac.SizingZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingZoneVector

# Register SizingZoneVector in _openstudiomodelhvac:
_openstudiomodelhvac.SizingZoneVector_swigregister(SizingZoneVector)

class OptionalSizingZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSizingZone_swiginit(self, _openstudiomodelhvac.new_OptionalSizingZone(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSizingZone_reset(self)

    def __ref__(self) -> "openstudio::model::SizingZone":
        return _openstudiomodelhvac.OptionalSizingZone___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingZone_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingZone_isNull(self)

    def get(self) -> "openstudio::model::SizingZone":
        return _openstudiomodelhvac.OptionalSizingZone_get(self)

    def set(self, t: "SizingZone") -> "void":
        return _openstudiomodelhvac.OptionalSizingZone_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingZone

# Register OptionalSizingZone in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSizingZone_swigregister(OptionalSizingZone)

class SizingSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SizingSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SizingSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SizingSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":
        return _openstudiomodelhvac.SizingSystemVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SizingSystem >::difference_type", j: "std::vector< openstudio::model::SizingSystem >::difference_type") -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > > *":
        return _openstudiomodelhvac.SizingSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingSystemVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SizingSystem >::difference_type", j: "std::vector< openstudio::model::SizingSystem >::difference_type") -> "void":
        return _openstudiomodelhvac.SizingSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":
        return _openstudiomodelhvac.SizingSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingSystemVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SizingSystem >::value_type":
        return _openstudiomodelhvac.SizingSystemVector_pop(self)

    def append(self, x: "SizingSystem") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SizingSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":
        return _openstudiomodelhvac.SizingSystemVector_size(self)

    def swap(self, v: "SizingSystemVector") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SizingSystem >::iterator":
        return _openstudiomodelhvac.SizingSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SizingSystem >::iterator":
        return _openstudiomodelhvac.SizingSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SizingSystem >::reverse_iterator":
        return _openstudiomodelhvac.SizingSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SizingSystem >::reverse_iterator":
        return _openstudiomodelhvac.SizingSystemVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SizingSystemVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SizingSystem >::allocator_type":
        return _openstudiomodelhvac.SizingSystemVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SizingSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SizingSystem >::iterator":
        return _openstudiomodelhvac.SizingSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SizingSystemVector_swiginit(self, _openstudiomodelhvac.new_SizingSystemVector(*args))

    def push_back(self, x: "SizingSystem") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":
        return _openstudiomodelhvac.SizingSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":
        return _openstudiomodelhvac.SizingSystemVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SizingSystem >::size_type", x: "SizingSystem") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SizingSystem >::size_type", x: "SizingSystem") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SizingSystemVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SizingSystem >::size_type") -> "void":
        return _openstudiomodelhvac.SizingSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":
        return _openstudiomodelhvac.SizingSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingSystemVector

# Register SizingSystemVector in _openstudiomodelhvac:
_openstudiomodelhvac.SizingSystemVector_swigregister(SizingSystemVector)

class OptionalSizingSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSizingSystem_swiginit(self, _openstudiomodelhvac.new_OptionalSizingSystem(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSizingSystem_reset(self)

    def __ref__(self) -> "openstudio::model::SizingSystem":
        return _openstudiomodelhvac.OptionalSizingSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingSystem_isNull(self)

    def get(self) -> "openstudio::model::SizingSystem":
        return _openstudiomodelhvac.OptionalSizingSystem_get(self)

    def set(self, t: "SizingSystem") -> "void":
        return _openstudiomodelhvac.OptionalSizingSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingSystem

# Register OptionalSizingSystem in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSizingSystem_swigregister(OptionalSizingSystem)

class ThermalZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ThermalZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ThermalZoneVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ThermalZoneVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":
        return _openstudiomodelhvac.ThermalZoneVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ThermalZone >::difference_type", j: "std::vector< openstudio::model::ThermalZone >::difference_type") -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > > *":
        return _openstudiomodelhvac.ThermalZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ThermalZone >::difference_type", j: "std::vector< openstudio::model::ThermalZone >::difference_type") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":
        return _openstudiomodelhvac.ThermalZoneVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ThermalZone >::value_type":
        return _openstudiomodelhvac.ThermalZoneVector_pop(self)

    def append(self, x: "ThermalZone") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ThermalZoneVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":
        return _openstudiomodelhvac.ThermalZoneVector_size(self)

    def swap(self, v: "ThermalZoneVector") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ThermalZone >::iterator":
        return _openstudiomodelhvac.ThermalZoneVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermalZone >::iterator":
        return _openstudiomodelhvac.ThermalZoneVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermalZone >::reverse_iterator":
        return _openstudiomodelhvac.ThermalZoneVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermalZone >::reverse_iterator":
        return _openstudiomodelhvac.ThermalZoneVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermalZone >::allocator_type":
        return _openstudiomodelhvac.ThermalZoneVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermalZone >::iterator":
        return _openstudiomodelhvac.ThermalZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ThermalZoneVector_swiginit(self, _openstudiomodelhvac.new_ThermalZoneVector(*args))

    def push_back(self, x: "ThermalZone") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":
        return _openstudiomodelhvac.ThermalZoneVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":
        return _openstudiomodelhvac.ThermalZoneVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ThermalZone >::size_type", x: "ThermalZone") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ThermalZone >::size_type", x: "ThermalZone") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ThermalZone >::size_type") -> "void":
        return _openstudiomodelhvac.ThermalZoneVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":
        return _openstudiomodelhvac.ThermalZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalZoneVector

# Register ThermalZoneVector in _openstudiomodelhvac:
_openstudiomodelhvac.ThermalZoneVector_swigregister(ThermalZoneVector)

class OptionalThermalZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalThermalZone_swiginit(self, _openstudiomodelhvac.new_OptionalThermalZone(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalThermalZone_reset(self)

    def __ref__(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.OptionalThermalZone___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermalZone_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermalZone_isNull(self)

    def get(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.OptionalThermalZone_get(self)

    def set(self, t: "ThermalZone") -> "void":
        return _openstudiomodelhvac.OptionalThermalZone_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermalZone

# Register OptionalThermalZone in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalThermalZone_swigregister(OptionalThermalZone)

class ThermostatSetpointDualSetpointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type", j: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type") -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > > *":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type", j: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_pop(self)

    def append(self, x: "ThermostatSetpointDualSetpoint") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_size(self)

    def swap(self, v: "ThermostatSetpointDualSetpointVector") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::allocator_type":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_swiginit(self, _openstudiomodelhvac.new_ThermostatSetpointDualSetpointVector(*args))

    def push_back(self, x: "ThermostatSetpointDualSetpoint") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type", x: "ThermostatSetpointDualSetpoint") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type", x: "ThermostatSetpointDualSetpoint") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type") -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatSetpointDualSetpointVector

# Register ThermostatSetpointDualSetpointVector in _openstudiomodelhvac:
_openstudiomodelhvac.ThermostatSetpointDualSetpointVector_swigregister(ThermostatSetpointDualSetpointVector)

class OptionalThermostatSetpointDualSetpoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_swiginit(self, _openstudiomodelhvac.new_OptionalThermostatSetpointDualSetpoint(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_reset(self)

    def __ref__(self) -> "openstudio::model::ThermostatSetpointDualSetpoint":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_isNull(self)

    def get(self) -> "openstudio::model::ThermostatSetpointDualSetpoint":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_get(self)

    def set(self, t: "ThermostatSetpointDualSetpoint") -> "void":
        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermostatSetpointDualSetpoint

# Register OptionalThermostatSetpointDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_swigregister(OptionalThermostatSetpointDualSetpoint)

class ZoneControlContaminantControllerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneControlContaminantController >::difference_type", j: "std::vector< openstudio::model::ZoneControlContaminantController >::difference_type") -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > > *":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneControlContaminantController >::difference_type", j: "std::vector< openstudio::model::ZoneControlContaminantController >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_pop(self)

    def append(self, x: "ZoneControlContaminantController") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_size(self)

    def swap(self, v: "ZoneControlContaminantControllerVector") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::allocator_type":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneControlContaminantControllerVector_swiginit(self, _openstudiomodelhvac.new_ZoneControlContaminantControllerVector(*args))

    def push_back(self, x: "ZoneControlContaminantController") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneControlContaminantController >::size_type", x: "ZoneControlContaminantController") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneControlContaminantController >::size_type", x: "ZoneControlContaminantController") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneControlContaminantController >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":
        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlContaminantControllerVector

# Register ZoneControlContaminantControllerVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlContaminantControllerVector_swigregister(ZoneControlContaminantControllerVector)

class OptionalZoneControlContaminantController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneControlContaminantController_swiginit(self, _openstudiomodelhvac.new_OptionalZoneControlContaminantController(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneControlContaminantController":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController_isNull(self)

    def get(self) -> "openstudio::model::ZoneControlContaminantController":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController_get(self)

    def set(self, t: "ZoneControlContaminantController") -> "void":
        return _openstudiomodelhvac.OptionalZoneControlContaminantController_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlContaminantController

# Register OptionalZoneControlContaminantController in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneControlContaminantController_swigregister(OptionalZoneControlContaminantController)

class ZoneControlHumidistatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneControlHumidistat >::difference_type", j: "std::vector< openstudio::model::ZoneControlHumidistat >::difference_type") -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > > *":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneControlHumidistat >::difference_type", j: "std::vector< openstudio::model::ZoneControlHumidistat >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_pop(self)

    def append(self, x: "ZoneControlHumidistat") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_size(self)

    def swap(self, v: "ZoneControlHumidistatVector") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::allocator_type":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneControlHumidistatVector_swiginit(self, _openstudiomodelhvac.new_ZoneControlHumidistatVector(*args))

    def push_back(self, x: "ZoneControlHumidistat") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneControlHumidistat >::size_type", x: "ZoneControlHumidistat") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneControlHumidistat >::size_type", x: "ZoneControlHumidistat") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneControlHumidistat >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":
        return _openstudiomodelhvac.ZoneControlHumidistatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlHumidistatVector

# Register ZoneControlHumidistatVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlHumidistatVector_swigregister(ZoneControlHumidistatVector)

class OptionalZoneControlHumidistat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneControlHumidistat_swiginit(self, _openstudiomodelhvac.new_OptionalZoneControlHumidistat(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneControlHumidistat":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat_isNull(self)

    def get(self) -> "openstudio::model::ZoneControlHumidistat":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat_get(self)

    def set(self, t: "ZoneControlHumidistat") -> "void":
        return _openstudiomodelhvac.OptionalZoneControlHumidistat_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlHumidistat

# Register OptionalZoneControlHumidistat in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneControlHumidistat_swigregister(OptionalZoneControlHumidistat)

class ZoneControlThermostatStagedDualSetpointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type", j: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type") -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > > *":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type", j: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_pop(self)

    def append(self, x: "ZoneControlThermostatStagedDualSetpoint") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_size(self)

    def swap(self, v: "ZoneControlThermostatStagedDualSetpointVector") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::allocator_type":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_swiginit(self, _openstudiomodelhvac.new_ZoneControlThermostatStagedDualSetpointVector(*args))

    def push_back(self, x: "ZoneControlThermostatStagedDualSetpoint") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type", x: "ZoneControlThermostatStagedDualSetpoint") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type", x: "ZoneControlThermostatStagedDualSetpoint") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlThermostatStagedDualSetpointVector

# Register ZoneControlThermostatStagedDualSetpointVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_swigregister(ZoneControlThermostatStagedDualSetpointVector)

class OptionalZoneControlThermostatStagedDualSetpoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_swiginit(self, _openstudiomodelhvac.new_OptionalZoneControlThermostatStagedDualSetpoint(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneControlThermostatStagedDualSetpoint":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_isNull(self)

    def get(self) -> "openstudio::model::ZoneControlThermostatStagedDualSetpoint":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_get(self)

    def set(self, t: "ZoneControlThermostatStagedDualSetpoint") -> "void":
        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlThermostatStagedDualSetpoint

# Register OptionalZoneControlThermostatStagedDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_swigregister(OptionalZoneControlThermostatStagedDualSetpoint)

class AirLoopHVACVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":
        return _openstudiomodelhvac.AirLoopHVACVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVAC >::difference_type", j: "std::vector< openstudio::model::AirLoopHVAC >::difference_type") -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > > *":
        return _openstudiomodelhvac.AirLoopHVACVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVAC >::difference_type", j: "std::vector< openstudio::model::AirLoopHVAC >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type":
        return _openstudiomodelhvac.AirLoopHVACVector_pop(self)

    def append(self, x: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":
        return _openstudiomodelhvac.AirLoopHVACVector_size(self)

    def swap(self, v: "AirLoopHVACVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":
        return _openstudiomodelhvac.AirLoopHVACVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":
        return _openstudiomodelhvac.AirLoopHVACVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVAC >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVAC >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVAC >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":
        return _openstudiomodelhvac.AirLoopHVACVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACVector(*args))

    def push_back(self, x: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVAC >::size_type", x: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVAC >::size_type", x: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVAC >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":
        return _openstudiomodelhvac.AirLoopHVACVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACVector

# Register AirLoopHVACVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACVector_swigregister(AirLoopHVACVector)

class OptionalAirLoopHVAC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVAC_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVAC(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVAC_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVAC":
        return _openstudiomodelhvac.OptionalAirLoopHVAC___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVAC_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVAC_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVAC":
        return _openstudiomodelhvac.OptionalAirLoopHVAC_get(self)

    def set(self, t: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVAC_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVAC

# Register OptionalAirLoopHVAC in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVAC_swigregister(OptionalAirLoopHVAC)

class SizingPlantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SizingPlantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SizingPlantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SizingPlantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":
        return _openstudiomodelhvac.SizingPlantVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SizingPlant >::difference_type", j: "std::vector< openstudio::model::SizingPlant >::difference_type") -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > > *":
        return _openstudiomodelhvac.SizingPlantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingPlantVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SizingPlant >::difference_type", j: "std::vector< openstudio::model::SizingPlant >::difference_type") -> "void":
        return _openstudiomodelhvac.SizingPlantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingPlantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":
        return _openstudiomodelhvac.SizingPlantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SizingPlantVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SizingPlant >::value_type":
        return _openstudiomodelhvac.SizingPlantVector_pop(self)

    def append(self, x: "SizingPlant") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SizingPlantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":
        return _openstudiomodelhvac.SizingPlantVector_size(self)

    def swap(self, v: "SizingPlantVector") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SizingPlant >::iterator":
        return _openstudiomodelhvac.SizingPlantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SizingPlant >::iterator":
        return _openstudiomodelhvac.SizingPlantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SizingPlant >::reverse_iterator":
        return _openstudiomodelhvac.SizingPlantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SizingPlant >::reverse_iterator":
        return _openstudiomodelhvac.SizingPlantVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SizingPlantVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SizingPlant >::allocator_type":
        return _openstudiomodelhvac.SizingPlantVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SizingPlantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SizingPlant >::iterator":
        return _openstudiomodelhvac.SizingPlantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SizingPlantVector_swiginit(self, _openstudiomodelhvac.new_SizingPlantVector(*args))

    def push_back(self, x: "SizingPlant") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":
        return _openstudiomodelhvac.SizingPlantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":
        return _openstudiomodelhvac.SizingPlantVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SizingPlant >::size_type", x: "SizingPlant") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SizingPlant >::size_type", x: "SizingPlant") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SizingPlantVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SizingPlant >::size_type") -> "void":
        return _openstudiomodelhvac.SizingPlantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":
        return _openstudiomodelhvac.SizingPlantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingPlantVector

# Register SizingPlantVector in _openstudiomodelhvac:
_openstudiomodelhvac.SizingPlantVector_swigregister(SizingPlantVector)

class OptionalSizingPlant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSizingPlant_swiginit(self, _openstudiomodelhvac.new_OptionalSizingPlant(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSizingPlant_reset(self)

    def __ref__(self) -> "openstudio::model::SizingPlant":
        return _openstudiomodelhvac.OptionalSizingPlant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingPlant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSizingPlant_isNull(self)

    def get(self) -> "openstudio::model::SizingPlant":
        return _openstudiomodelhvac.OptionalSizingPlant_get(self)

    def set(self, t: "SizingPlant") -> "void":
        return _openstudiomodelhvac.OptionalSizingPlant_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingPlant

# Register OptionalSizingPlant in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSizingPlant_swigregister(OptionalSizingPlant)

class PlantLoopVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.PlantLoopVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.PlantLoopVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.PlantLoopVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":
        return _openstudiomodelhvac.PlantLoopVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantLoop >::difference_type", j: "std::vector< openstudio::model::PlantLoop >::difference_type") -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > > *":
        return _openstudiomodelhvac.PlantLoopVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantLoopVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantLoop >::difference_type", j: "std::vector< openstudio::model::PlantLoop >::difference_type") -> "void":
        return _openstudiomodelhvac.PlantLoopVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantLoopVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":
        return _openstudiomodelhvac.PlantLoopVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantLoopVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantLoop >::value_type":
        return _openstudiomodelhvac.PlantLoopVector_pop(self)

    def append(self, x: "PlantLoop") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.PlantLoopVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":
        return _openstudiomodelhvac.PlantLoopVector_size(self)

    def swap(self, v: "PlantLoopVector") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantLoop >::iterator":
        return _openstudiomodelhvac.PlantLoopVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantLoop >::iterator":
        return _openstudiomodelhvac.PlantLoopVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantLoop >::reverse_iterator":
        return _openstudiomodelhvac.PlantLoopVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantLoop >::reverse_iterator":
        return _openstudiomodelhvac.PlantLoopVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.PlantLoopVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantLoop >::allocator_type":
        return _openstudiomodelhvac.PlantLoopVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.PlantLoopVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantLoop >::iterator":
        return _openstudiomodelhvac.PlantLoopVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.PlantLoopVector_swiginit(self, _openstudiomodelhvac.new_PlantLoopVector(*args))

    def push_back(self, x: "PlantLoop") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":
        return _openstudiomodelhvac.PlantLoopVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":
        return _openstudiomodelhvac.PlantLoopVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantLoop >::size_type", x: "PlantLoop") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantLoop >::size_type", x: "PlantLoop") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.PlantLoopVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantLoop >::size_type") -> "void":
        return _openstudiomodelhvac.PlantLoopVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":
        return _openstudiomodelhvac.PlantLoopVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantLoopVector

# Register PlantLoopVector in _openstudiomodelhvac:
_openstudiomodelhvac.PlantLoopVector_swigregister(PlantLoopVector)

class OptionalPlantLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalPlantLoop_swiginit(self, _openstudiomodelhvac.new_OptionalPlantLoop(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalPlantLoop_reset(self)

    def __ref__(self) -> "openstudio::model::PlantLoop":
        return _openstudiomodelhvac.OptionalPlantLoop___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantLoop_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantLoop_isNull(self)

    def get(self) -> "openstudio::model::PlantLoop":
        return _openstudiomodelhvac.OptionalPlantLoop_get(self)

    def set(self, t: "PlantLoop") -> "void":
        return _openstudiomodelhvac.OptionalPlantLoop_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantLoop

# Register OptionalPlantLoop in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalPlantLoop_swigregister(OptionalPlantLoop)

class PlantEquipmentOperationSchemeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > > *":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_pop(self)

    def append(self, x: "PlantEquipmentOperationScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_size(self)

    def swap(self, v: "PlantEquipmentOperationSchemeVector") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::reverse_iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::reverse_iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::allocator_type":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_swiginit(self, _openstudiomodelhvac.new_PlantEquipmentOperationSchemeVector(*args))

    def push_back(self, x: "PlantEquipmentOperationScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type", x: "PlantEquipmentOperationScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type", x: "PlantEquipmentOperationScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationSchemeVector

# Register PlantEquipmentOperationSchemeVector in _openstudiomodelhvac:
_openstudiomodelhvac.PlantEquipmentOperationSchemeVector_swigregister(PlantEquipmentOperationSchemeVector)

class OptionalPlantEquipmentOperationScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_swiginit(self, _openstudiomodelhvac.new_OptionalPlantEquipmentOperationScheme(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationScheme":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationScheme":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_get(self)

    def set(self, t: "PlantEquipmentOperationScheme") -> "void":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantEquipmentOperationScheme

# Register OptionalPlantEquipmentOperationScheme in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_swigregister(OptionalPlantEquipmentOperationScheme)

class PlantEquipmentOperationRangeBasedSchemeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type") -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > > *":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type", j: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_pop(self)

    def append(self, x: "PlantEquipmentOperationRangeBasedScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_size(self)

    def swap(self, v: "PlantEquipmentOperationRangeBasedSchemeVector") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::reverse_iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::reverse_iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::allocator_type":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_swiginit(self, _openstudiomodelhvac.new_PlantEquipmentOperationRangeBasedSchemeVector(*args))

    def push_back(self, x: "PlantEquipmentOperationRangeBasedScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type", x: "PlantEquipmentOperationRangeBasedScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type", x: "PlantEquipmentOperationRangeBasedScheme") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type") -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationRangeBasedSchemeVector

# Register PlantEquipmentOperationRangeBasedSchemeVector in _openstudiomodelhvac:
_openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_swigregister(PlantEquipmentOperationRangeBasedSchemeVector)

class OptionalPlantEquipmentOperationRangeBasedScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_swiginit(self, _openstudiomodelhvac.new_OptionalPlantEquipmentOperationRangeBasedScheme(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationRangeBasedScheme":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationRangeBasedScheme":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_get(self)

    def set(self, t: "PlantEquipmentOperationRangeBasedScheme") -> "void":
        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantEquipmentOperationRangeBasedScheme

# Register OptionalPlantEquipmentOperationRangeBasedScheme in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_swigregister(OptionalPlantEquipmentOperationRangeBasedScheme)

class PlantComponentUserDefinedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantComponentUserDefined >::difference_type", j: "std::vector< openstudio::model::PlantComponentUserDefined >::difference_type") -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > > *":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantComponentUserDefined >::difference_type", j: "std::vector< openstudio::model::PlantComponentUserDefined >::difference_type") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_pop(self)

    def append(self, x: "PlantComponentUserDefined") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_size(self)

    def swap(self, v: "PlantComponentUserDefinedVector") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::reverse_iterator":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::reverse_iterator":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::allocator_type":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.PlantComponentUserDefinedVector_swiginit(self, _openstudiomodelhvac.new_PlantComponentUserDefinedVector(*args))

    def push_back(self, x: "PlantComponentUserDefined") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantComponentUserDefined >::size_type", x: "PlantComponentUserDefined") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantComponentUserDefined >::size_type", x: "PlantComponentUserDefined") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantComponentUserDefined >::size_type") -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":
        return _openstudiomodelhvac.PlantComponentUserDefinedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantComponentUserDefinedVector

# Register PlantComponentUserDefinedVector in _openstudiomodelhvac:
_openstudiomodelhvac.PlantComponentUserDefinedVector_swigregister(PlantComponentUserDefinedVector)

class OptionalPlantComponentUserDefined(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalPlantComponentUserDefined_swiginit(self, _openstudiomodelhvac.new_OptionalPlantComponentUserDefined(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_reset(self)

    def __ref__(self) -> "openstudio::model::PlantComponentUserDefined":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_isNull(self)

    def get(self) -> "openstudio::model::PlantComponentUserDefined":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_get(self)

    def set(self, t: "PlantComponentUserDefined") -> "void":
        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantComponentUserDefined

# Register OptionalPlantComponentUserDefined in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalPlantComponentUserDefined_swigregister(OptionalPlantComponentUserDefined)

class AirLoopHVACOutdoorAirSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > > *":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_pop(self)

    def append(self, x: "AirLoopHVACOutdoorAirSystem") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_size(self)

    def swap(self, v: "AirLoopHVACOutdoorAirSystemVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACOutdoorAirSystemVector(*args))

    def push_back(self, x: "AirLoopHVACOutdoorAirSystem") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type", x: "AirLoopHVACOutdoorAirSystem") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type", x: "AirLoopHVACOutdoorAirSystem") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACOutdoorAirSystemVector

# Register AirLoopHVACOutdoorAirSystemVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_swigregister(AirLoopHVACOutdoorAirSystemVector)

class OptionalAirLoopHVACOutdoorAirSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVACOutdoorAirSystem(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACOutdoorAirSystem":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACOutdoorAirSystem":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_get(self)

    def set(self, t: "AirLoopHVACOutdoorAirSystem") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACOutdoorAirSystem

# Register OptionalAirLoopHVACOutdoorAirSystem in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_swigregister(OptionalAirLoopHVACOutdoorAirSystem)

class ControllerMechanicalVentilationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type", j: "std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type") -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > > *":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type", j: "std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_pop(self)

    def append(self, x: "ControllerMechanicalVentilation") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_size(self)

    def swap(self, v: "ControllerMechanicalVentilationVector") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::reverse_iterator":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::reverse_iterator":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::allocator_type":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ControllerMechanicalVentilationVector_swiginit(self, _openstudiomodelhvac.new_ControllerMechanicalVentilationVector(*args))

    def push_back(self, x: "ControllerMechanicalVentilation") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type", x: "ControllerMechanicalVentilation") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type", x: "ControllerMechanicalVentilation") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":
        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerMechanicalVentilationVector

# Register ControllerMechanicalVentilationVector in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerMechanicalVentilationVector_swigregister(ControllerMechanicalVentilationVector)

class OptionalControllerMechanicalVentilation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalControllerMechanicalVentilation_swiginit(self, _openstudiomodelhvac.new_OptionalControllerMechanicalVentilation(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_reset(self)

    def __ref__(self) -> "openstudio::model::ControllerMechanicalVentilation":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_isNull(self)

    def get(self) -> "openstudio::model::ControllerMechanicalVentilation":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_get(self)

    def set(self, t: "ControllerMechanicalVentilation") -> "void":
        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerMechanicalVentilation

# Register OptionalControllerMechanicalVentilation in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalControllerMechanicalVentilation_swigregister(OptionalControllerMechanicalVentilation)

class ControllerOutdoorAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ControllerOutdoorAir >::difference_type", j: "std::vector< openstudio::model::ControllerOutdoorAir >::difference_type") -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > > *":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ControllerOutdoorAir >::difference_type", j: "std::vector< openstudio::model::ControllerOutdoorAir >::difference_type") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_pop(self)

    def append(self, x: "ControllerOutdoorAir") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_size(self)

    def swap(self, v: "ControllerOutdoorAirVector") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::reverse_iterator":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::reverse_iterator":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::allocator_type":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ControllerOutdoorAirVector_swiginit(self, _openstudiomodelhvac.new_ControllerOutdoorAirVector(*args))

    def push_back(self, x: "ControllerOutdoorAir") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ControllerOutdoorAir >::size_type", x: "ControllerOutdoorAir") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ControllerOutdoorAir >::size_type", x: "ControllerOutdoorAir") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ControllerOutdoorAir >::size_type") -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":
        return _openstudiomodelhvac.ControllerOutdoorAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerOutdoorAirVector

# Register ControllerOutdoorAirVector in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerOutdoorAirVector_swigregister(ControllerOutdoorAirVector)

class OptionalControllerOutdoorAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalControllerOutdoorAir_swiginit(self, _openstudiomodelhvac.new_OptionalControllerOutdoorAir(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir_reset(self)

    def __ref__(self) -> "openstudio::model::ControllerOutdoorAir":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir_isNull(self)

    def get(self) -> "openstudio::model::ControllerOutdoorAir":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir_get(self)

    def set(self, t: "ControllerOutdoorAir") -> "void":
        return _openstudiomodelhvac.OptionalControllerOutdoorAir_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerOutdoorAir

# Register OptionalControllerOutdoorAir in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalControllerOutdoorAir_swigregister(OptionalControllerOutdoorAir)

class ControllerWaterCoilVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ControllerWaterCoilVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoilVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoilVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":
        return _openstudiomodelhvac.ControllerWaterCoilVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ControllerWaterCoil >::difference_type", j: "std::vector< openstudio::model::ControllerWaterCoil >::difference_type") -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > > *":
        return _openstudiomodelhvac.ControllerWaterCoilVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ControllerWaterCoil >::difference_type", j: "std::vector< openstudio::model::ControllerWaterCoil >::difference_type") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":
        return _openstudiomodelhvac.ControllerWaterCoilVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type":
        return _openstudiomodelhvac.ControllerWaterCoilVector_pop(self)

    def append(self, x: "ControllerWaterCoil") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoilVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":
        return _openstudiomodelhvac.ControllerWaterCoilVector_size(self)

    def swap(self, v: "ControllerWaterCoilVector") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":
        return _openstudiomodelhvac.ControllerWaterCoilVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":
        return _openstudiomodelhvac.ControllerWaterCoilVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::reverse_iterator":
        return _openstudiomodelhvac.ControllerWaterCoilVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::reverse_iterator":
        return _openstudiomodelhvac.ControllerWaterCoilVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::allocator_type":
        return _openstudiomodelhvac.ControllerWaterCoilVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":
        return _openstudiomodelhvac.ControllerWaterCoilVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ControllerWaterCoilVector_swiginit(self, _openstudiomodelhvac.new_ControllerWaterCoilVector(*args))

    def push_back(self, x: "ControllerWaterCoil") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":
        return _openstudiomodelhvac.ControllerWaterCoilVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":
        return _openstudiomodelhvac.ControllerWaterCoilVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ControllerWaterCoil >::size_type", x: "ControllerWaterCoil") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ControllerWaterCoil >::size_type", x: "ControllerWaterCoil") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ControllerWaterCoil >::size_type") -> "void":
        return _openstudiomodelhvac.ControllerWaterCoilVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":
        return _openstudiomodelhvac.ControllerWaterCoilVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerWaterCoilVector

# Register ControllerWaterCoilVector in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerWaterCoilVector_swigregister(ControllerWaterCoilVector)

class OptionalControllerWaterCoil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalControllerWaterCoil_swiginit(self, _openstudiomodelhvac.new_OptionalControllerWaterCoil(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalControllerWaterCoil_reset(self)

    def __ref__(self) -> "openstudio::model::ControllerWaterCoil":
        return _openstudiomodelhvac.OptionalControllerWaterCoil___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerWaterCoil_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalControllerWaterCoil_isNull(self)

    def get(self) -> "openstudio::model::ControllerWaterCoil":
        return _openstudiomodelhvac.OptionalControllerWaterCoil_get(self)

    def set(self, t: "ControllerWaterCoil") -> "void":
        return _openstudiomodelhvac.OptionalControllerWaterCoil_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerWaterCoil

# Register OptionalControllerWaterCoil in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalControllerWaterCoil_swigregister(OptionalControllerWaterCoil)

class MixerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.MixerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.MixerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.MixerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Mixer >::size_type":
        return _openstudiomodelhvac.MixerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Mixer >::difference_type", j: "std::vector< openstudio::model::Mixer >::difference_type") -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > > *":
        return _openstudiomodelhvac.MixerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.MixerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Mixer >::difference_type", j: "std::vector< openstudio::model::Mixer >::difference_type") -> "void":
        return _openstudiomodelhvac.MixerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.MixerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Mixer >::value_type const &":
        return _openstudiomodelhvac.MixerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.MixerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Mixer >::value_type":
        return _openstudiomodelhvac.MixerVector_pop(self)

    def append(self, x: "Mixer") -> "void":
        return _openstudiomodelhvac.MixerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.MixerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Mixer >::size_type":
        return _openstudiomodelhvac.MixerVector_size(self)

    def swap(self, v: "MixerVector") -> "void":
        return _openstudiomodelhvac.MixerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Mixer >::iterator":
        return _openstudiomodelhvac.MixerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Mixer >::iterator":
        return _openstudiomodelhvac.MixerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Mixer >::reverse_iterator":
        return _openstudiomodelhvac.MixerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Mixer >::reverse_iterator":
        return _openstudiomodelhvac.MixerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.MixerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Mixer >::allocator_type":
        return _openstudiomodelhvac.MixerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.MixerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Mixer >::iterator":
        return _openstudiomodelhvac.MixerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.MixerVector_swiginit(self, _openstudiomodelhvac.new_MixerVector(*args))

    def push_back(self, x: "Mixer") -> "void":
        return _openstudiomodelhvac.MixerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Mixer >::value_type const &":
        return _openstudiomodelhvac.MixerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Mixer >::value_type const &":
        return _openstudiomodelhvac.MixerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Mixer >::size_type", x: "Mixer") -> "void":
        return _openstudiomodelhvac.MixerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Mixer >::size_type", x: "Mixer") -> "void":
        return _openstudiomodelhvac.MixerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.MixerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Mixer >::size_type") -> "void":
        return _openstudiomodelhvac.MixerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Mixer >::size_type":
        return _openstudiomodelhvac.MixerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_MixerVector

# Register MixerVector in _openstudiomodelhvac:
_openstudiomodelhvac.MixerVector_swigregister(MixerVector)

class OptionalMixer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalMixer_swiginit(self, _openstudiomodelhvac.new_OptionalMixer(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalMixer_reset(self)

    def __ref__(self) -> "openstudio::model::Mixer":
        return _openstudiomodelhvac.OptionalMixer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalMixer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalMixer_isNull(self)

    def get(self) -> "openstudio::model::Mixer":
        return _openstudiomodelhvac.OptionalMixer_get(self)

    def set(self, t: "Mixer") -> "void":
        return _openstudiomodelhvac.OptionalMixer_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalMixer

# Register OptionalMixer in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalMixer_swigregister(OptionalMixer)

class AirLoopHVACReturnPlenumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > > *":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_pop(self)

    def append(self, x: "AirLoopHVACReturnPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_size(self)

    def swap(self, v: "AirLoopHVACReturnPlenumVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACReturnPlenumVector(*args))

    def push_back(self, x: "AirLoopHVACReturnPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type", x: "AirLoopHVACReturnPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type", x: "AirLoopHVACReturnPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACReturnPlenumVector

# Register AirLoopHVACReturnPlenumVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACReturnPlenumVector_swigregister(AirLoopHVACReturnPlenumVector)

class OptionalAirLoopHVACReturnPlenum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVACReturnPlenum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACReturnPlenum":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACReturnPlenum":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_get(self)

    def set(self, t: "AirLoopHVACReturnPlenum") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACReturnPlenum

# Register OptionalAirLoopHVACReturnPlenum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_swigregister(OptionalAirLoopHVACReturnPlenum)

class AirLoopHVACZoneMixerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > > *":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_pop(self)

    def append(self, x: "AirLoopHVACZoneMixer") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_size(self)

    def swap(self, v: "AirLoopHVACZoneMixerVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACZoneMixerVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACZoneMixerVector(*args))

    def push_back(self, x: "AirLoopHVACZoneMixer") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type", x: "AirLoopHVACZoneMixer") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type", x: "AirLoopHVACZoneMixer") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneMixerVector

# Register AirLoopHVACZoneMixerVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACZoneMixerVector_swigregister(AirLoopHVACZoneMixerVector)

class OptionalAirLoopHVACZoneMixer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVACZoneMixer(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACZoneMixer":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACZoneMixer":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_get(self)

    def set(self, t: "AirLoopHVACZoneMixer") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACZoneMixer

# Register OptionalAirLoopHVACZoneMixer in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_swigregister(OptionalAirLoopHVACZoneMixer)

class ConnectorMixerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ConnectorMixerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ConnectorMixerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ConnectorMixerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":
        return _openstudiomodelhvac.ConnectorMixerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ConnectorMixer >::difference_type", j: "std::vector< openstudio::model::ConnectorMixer >::difference_type") -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > > *":
        return _openstudiomodelhvac.ConnectorMixerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ConnectorMixer >::difference_type", j: "std::vector< openstudio::model::ConnectorMixer >::difference_type") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":
        return _openstudiomodelhvac.ConnectorMixerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type":
        return _openstudiomodelhvac.ConnectorMixerVector_pop(self)

    def append(self, x: "ConnectorMixer") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ConnectorMixerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":
        return _openstudiomodelhvac.ConnectorMixerVector_size(self)

    def swap(self, v: "ConnectorMixerVector") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":
        return _openstudiomodelhvac.ConnectorMixerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":
        return _openstudiomodelhvac.ConnectorMixerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConnectorMixer >::reverse_iterator":
        return _openstudiomodelhvac.ConnectorMixerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConnectorMixer >::reverse_iterator":
        return _openstudiomodelhvac.ConnectorMixerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ConnectorMixer >::allocator_type":
        return _openstudiomodelhvac.ConnectorMixerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":
        return _openstudiomodelhvac.ConnectorMixerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ConnectorMixerVector_swiginit(self, _openstudiomodelhvac.new_ConnectorMixerVector(*args))

    def push_back(self, x: "ConnectorMixer") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":
        return _openstudiomodelhvac.ConnectorMixerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":
        return _openstudiomodelhvac.ConnectorMixerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ConnectorMixer >::size_type", x: "ConnectorMixer") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ConnectorMixer >::size_type", x: "ConnectorMixer") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ConnectorMixer >::size_type") -> "void":
        return _openstudiomodelhvac.ConnectorMixerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":
        return _openstudiomodelhvac.ConnectorMixerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorMixerVector

# Register ConnectorMixerVector in _openstudiomodelhvac:
_openstudiomodelhvac.ConnectorMixerVector_swigregister(ConnectorMixerVector)

class OptionalConnectorMixer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalConnectorMixer_swiginit(self, _openstudiomodelhvac.new_OptionalConnectorMixer(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalConnectorMixer_reset(self)

    def __ref__(self) -> "openstudio::model::ConnectorMixer":
        return _openstudiomodelhvac.OptionalConnectorMixer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalConnectorMixer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalConnectorMixer_isNull(self)

    def get(self) -> "openstudio::model::ConnectorMixer":
        return _openstudiomodelhvac.OptionalConnectorMixer_get(self)

    def set(self, t: "ConnectorMixer") -> "void":
        return _openstudiomodelhvac.OptionalConnectorMixer_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalConnectorMixer

# Register OptionalConnectorMixer in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalConnectorMixer_swigregister(OptionalConnectorMixer)

class AvailabilityManagerAssignmentListVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type", j: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type") -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > > *":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type", j: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_pop(self)

    def append(self, x: "AvailabilityManagerAssignmentList") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_size(self)

    def swap(self, v: "AvailabilityManagerAssignmentListVector") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::reverse_iterator":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::reverse_iterator":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::allocator_type":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_swiginit(self, _openstudiomodelhvac.new_AvailabilityManagerAssignmentListVector(*args))

    def push_back(self, x: "AvailabilityManagerAssignmentList") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type", x: "AvailabilityManagerAssignmentList") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type", x: "AvailabilityManagerAssignmentList") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerAssignmentListVector

# Register AvailabilityManagerAssignmentListVector in _openstudiomodelhvac:
_openstudiomodelhvac.AvailabilityManagerAssignmentListVector_swigregister(AvailabilityManagerAssignmentListVector)

class OptionalAvailabilityManagerAssignmentList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_swiginit(self, _openstudiomodelhvac.new_OptionalAvailabilityManagerAssignmentList(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_reset(self)

    def __ref__(self) -> "openstudio::model::AvailabilityManagerAssignmentList":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_isNull(self)

    def get(self) -> "openstudio::model::AvailabilityManagerAssignmentList":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_get(self)

    def set(self, t: "AvailabilityManagerAssignmentList") -> "void":
        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAvailabilityManagerAssignmentList

# Register OptionalAvailabilityManagerAssignmentList in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_swigregister(OptionalAvailabilityManagerAssignmentList)

class AvailabilityManagerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AvailabilityManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AvailabilityManager >::difference_type", j: "std::vector< openstudio::model::AvailabilityManager >::difference_type") -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > > *":
        return _openstudiomodelhvac.AvailabilityManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AvailabilityManager >::difference_type", j: "std::vector< openstudio::model::AvailabilityManager >::difference_type") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type":
        return _openstudiomodelhvac.AvailabilityManagerVector_pop(self)

    def append(self, x: "AvailabilityManager") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerVector_size(self)

    def swap(self, v: "AvailabilityManagerVector") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AvailabilityManager >::reverse_iterator":
        return _openstudiomodelhvac.AvailabilityManagerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AvailabilityManager >::reverse_iterator":
        return _openstudiomodelhvac.AvailabilityManagerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AvailabilityManager >::allocator_type":
        return _openstudiomodelhvac.AvailabilityManagerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":
        return _openstudiomodelhvac.AvailabilityManagerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AvailabilityManagerVector_swiginit(self, _openstudiomodelhvac.new_AvailabilityManagerVector(*args))

    def push_back(self, x: "AvailabilityManager") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":
        return _openstudiomodelhvac.AvailabilityManagerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AvailabilityManager >::size_type", x: "AvailabilityManager") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AvailabilityManager >::size_type", x: "AvailabilityManager") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AvailabilityManager >::size_type") -> "void":
        return _openstudiomodelhvac.AvailabilityManagerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":
        return _openstudiomodelhvac.AvailabilityManagerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerVector

# Register AvailabilityManagerVector in _openstudiomodelhvac:
_openstudiomodelhvac.AvailabilityManagerVector_swigregister(AvailabilityManagerVector)

class OptionalAvailabilityManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAvailabilityManager_swiginit(self, _openstudiomodelhvac.new_OptionalAvailabilityManager(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAvailabilityManager_reset(self)

    def __ref__(self) -> "openstudio::model::AvailabilityManager":
        return _openstudiomodelhvac.OptionalAvailabilityManager___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAvailabilityManager_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAvailabilityManager_isNull(self)

    def get(self) -> "openstudio::model::AvailabilityManager":
        return _openstudiomodelhvac.OptionalAvailabilityManager_get(self)

    def set(self, t: "AvailabilityManager") -> "void":
        return _openstudiomodelhvac.OptionalAvailabilityManager_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAvailabilityManager

# Register OptionalAvailabilityManager in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAvailabilityManager_swigregister(OptionalAvailabilityManager)

class SplitterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SplitterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SplitterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SplitterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Splitter >::size_type":
        return _openstudiomodelhvac.SplitterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Splitter >::difference_type", j: "std::vector< openstudio::model::Splitter >::difference_type") -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > > *":
        return _openstudiomodelhvac.SplitterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SplitterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Splitter >::difference_type", j: "std::vector< openstudio::model::Splitter >::difference_type") -> "void":
        return _openstudiomodelhvac.SplitterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SplitterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Splitter >::value_type const &":
        return _openstudiomodelhvac.SplitterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SplitterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Splitter >::value_type":
        return _openstudiomodelhvac.SplitterVector_pop(self)

    def append(self, x: "Splitter") -> "void":
        return _openstudiomodelhvac.SplitterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SplitterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Splitter >::size_type":
        return _openstudiomodelhvac.SplitterVector_size(self)

    def swap(self, v: "SplitterVector") -> "void":
        return _openstudiomodelhvac.SplitterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Splitter >::iterator":
        return _openstudiomodelhvac.SplitterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Splitter >::iterator":
        return _openstudiomodelhvac.SplitterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Splitter >::reverse_iterator":
        return _openstudiomodelhvac.SplitterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Splitter >::reverse_iterator":
        return _openstudiomodelhvac.SplitterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SplitterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Splitter >::allocator_type":
        return _openstudiomodelhvac.SplitterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SplitterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Splitter >::iterator":
        return _openstudiomodelhvac.SplitterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SplitterVector_swiginit(self, _openstudiomodelhvac.new_SplitterVector(*args))

    def push_back(self, x: "Splitter") -> "void":
        return _openstudiomodelhvac.SplitterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Splitter >::value_type const &":
        return _openstudiomodelhvac.SplitterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Splitter >::value_type const &":
        return _openstudiomodelhvac.SplitterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Splitter >::size_type", x: "Splitter") -> "void":
        return _openstudiomodelhvac.SplitterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Splitter >::size_type", x: "Splitter") -> "void":
        return _openstudiomodelhvac.SplitterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SplitterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Splitter >::size_type") -> "void":
        return _openstudiomodelhvac.SplitterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Splitter >::size_type":
        return _openstudiomodelhvac.SplitterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SplitterVector

# Register SplitterVector in _openstudiomodelhvac:
_openstudiomodelhvac.SplitterVector_swigregister(SplitterVector)

class OptionalSplitter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSplitter_swiginit(self, _openstudiomodelhvac.new_OptionalSplitter(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSplitter_reset(self)

    def __ref__(self) -> "openstudio::model::Splitter":
        return _openstudiomodelhvac.OptionalSplitter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSplitter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSplitter_isNull(self)

    def get(self) -> "openstudio::model::Splitter":
        return _openstudiomodelhvac.OptionalSplitter_get(self)

    def set(self, t: "Splitter") -> "void":
        return _openstudiomodelhvac.OptionalSplitter_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSplitter

# Register OptionalSplitter in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSplitter_swigregister(OptionalSplitter)

class AirLoopHVACSupplyPlenumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > > *":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_pop(self)

    def append(self, x: "AirLoopHVACSupplyPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_size(self)

    def swap(self, v: "AirLoopHVACSupplyPlenumVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACSupplyPlenumVector(*args))

    def push_back(self, x: "AirLoopHVACSupplyPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type", x: "AirLoopHVACSupplyPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type", x: "AirLoopHVACSupplyPlenum") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACSupplyPlenumVector

# Register AirLoopHVACSupplyPlenumVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_swigregister(AirLoopHVACSupplyPlenumVector)

class OptionalAirLoopHVACSupplyPlenum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVACSupplyPlenum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACSupplyPlenum":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACSupplyPlenum":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_get(self)

    def set(self, t: "AirLoopHVACSupplyPlenum") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACSupplyPlenum

# Register OptionalAirLoopHVACSupplyPlenum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_swigregister(OptionalAirLoopHVACSupplyPlenum)

class AirLoopHVACZoneSplitterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > > *":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_pop(self)

    def append(self, x: "AirLoopHVACZoneSplitter") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_size(self)

    def swap(self, v: "AirLoopHVACZoneSplitterVector") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::reverse_iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::allocator_type":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACZoneSplitterVector(*args))

    def push_back(self, x: "AirLoopHVACZoneSplitter") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type", x: "AirLoopHVACZoneSplitter") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type", x: "AirLoopHVACZoneSplitter") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type") -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneSplitterVector

# Register AirLoopHVACZoneSplitterVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACZoneSplitterVector_swigregister(AirLoopHVACZoneSplitterVector)

class OptionalAirLoopHVACZoneSplitter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_swiginit(self, _openstudiomodelhvac.new_OptionalAirLoopHVACZoneSplitter(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACZoneSplitter":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACZoneSplitter":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_get(self)

    def set(self, t: "AirLoopHVACZoneSplitter") -> "void":
        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACZoneSplitter

# Register OptionalAirLoopHVACZoneSplitter in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_swigregister(OptionalAirLoopHVACZoneSplitter)

class ConnectorSplitterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ConnectorSplitterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ConnectorSplitterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ConnectorSplitterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":
        return _openstudiomodelhvac.ConnectorSplitterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ConnectorSplitter >::difference_type", j: "std::vector< openstudio::model::ConnectorSplitter >::difference_type") -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > > *":
        return _openstudiomodelhvac.ConnectorSplitterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ConnectorSplitter >::difference_type", j: "std::vector< openstudio::model::ConnectorSplitter >::difference_type") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":
        return _openstudiomodelhvac.ConnectorSplitterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type":
        return _openstudiomodelhvac.ConnectorSplitterVector_pop(self)

    def append(self, x: "ConnectorSplitter") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ConnectorSplitterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":
        return _openstudiomodelhvac.ConnectorSplitterVector_size(self)

    def swap(self, v: "ConnectorSplitterVector") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":
        return _openstudiomodelhvac.ConnectorSplitterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":
        return _openstudiomodelhvac.ConnectorSplitterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConnectorSplitter >::reverse_iterator":
        return _openstudiomodelhvac.ConnectorSplitterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConnectorSplitter >::reverse_iterator":
        return _openstudiomodelhvac.ConnectorSplitterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ConnectorSplitter >::allocator_type":
        return _openstudiomodelhvac.ConnectorSplitterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":
        return _openstudiomodelhvac.ConnectorSplitterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ConnectorSplitterVector_swiginit(self, _openstudiomodelhvac.new_ConnectorSplitterVector(*args))

    def push_back(self, x: "ConnectorSplitter") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":
        return _openstudiomodelhvac.ConnectorSplitterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":
        return _openstudiomodelhvac.ConnectorSplitterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ConnectorSplitter >::size_type", x: "ConnectorSplitter") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ConnectorSplitter >::size_type", x: "ConnectorSplitter") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ConnectorSplitter >::size_type") -> "void":
        return _openstudiomodelhvac.ConnectorSplitterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":
        return _openstudiomodelhvac.ConnectorSplitterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorSplitterVector

# Register ConnectorSplitterVector in _openstudiomodelhvac:
_openstudiomodelhvac.ConnectorSplitterVector_swigregister(ConnectorSplitterVector)

class OptionalConnectorSplitter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalConnectorSplitter_swiginit(self, _openstudiomodelhvac.new_OptionalConnectorSplitter(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalConnectorSplitter_reset(self)

    def __ref__(self) -> "openstudio::model::ConnectorSplitter":
        return _openstudiomodelhvac.OptionalConnectorSplitter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalConnectorSplitter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalConnectorSplitter_isNull(self)

    def get(self) -> "openstudio::model::ConnectorSplitter":
        return _openstudiomodelhvac.OptionalConnectorSplitter_get(self)

    def set(self, t: "ConnectorSplitter") -> "void":
        return _openstudiomodelhvac.OptionalConnectorSplitter_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalConnectorSplitter

# Register OptionalConnectorSplitter in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalConnectorSplitter_swigregister(OptionalConnectorSplitter)

class AirTerminalDualDuctConstantVolumeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type") -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > > *":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_pop(self)

    def append(self, x: "AirTerminalDualDuctConstantVolume") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_size(self)

    def swap(self, v: "AirTerminalDualDuctConstantVolumeVector") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::allocator_type":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctConstantVolumeVector(*args))

    def push_back(self, x: "AirTerminalDualDuctConstantVolume") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type", x: "AirTerminalDualDuctConstantVolume") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type", x: "AirTerminalDualDuctConstantVolume") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctConstantVolumeVector

# Register AirTerminalDualDuctConstantVolumeVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_swigregister(AirTerminalDualDuctConstantVolumeVector)

class OptionalAirTerminalDualDuctConstantVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_swiginit(self, _openstudiomodelhvac.new_OptionalAirTerminalDualDuctConstantVolume(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctConstantVolume":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalDualDuctConstantVolume":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_get(self)

    def set(self, t: "AirTerminalDualDuctConstantVolume") -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctConstantVolume

# Register OptionalAirTerminalDualDuctConstantVolume in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_swigregister(OptionalAirTerminalDualDuctConstantVolume)

class AirTerminalDualDuctVAVVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type") -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > > *":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_pop(self)

    def append(self, x: "AirTerminalDualDuctVAV") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_size(self)

    def swap(self, v: "AirTerminalDualDuctVAVVector") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::allocator_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirTerminalDualDuctVAVVector_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctVAVVector(*args))

    def push_back(self, x: "AirTerminalDualDuctVAV") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type", x: "AirTerminalDualDuctVAV") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type", x: "AirTerminalDualDuctVAV") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVVector

# Register AirTerminalDualDuctVAVVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctVAVVector_swigregister(AirTerminalDualDuctVAVVector)

class OptionalAirTerminalDualDuctVAV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_swiginit(self, _openstudiomodelhvac.new_OptionalAirTerminalDualDuctVAV(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctVAV":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalDualDuctVAV":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_get(self)

    def set(self, t: "AirTerminalDualDuctVAV") -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctVAV

# Register OptionalAirTerminalDualDuctVAV in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_swigregister(OptionalAirTerminalDualDuctVAV)

class AirTerminalDualDuctVAVOutdoorAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type") -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > > *":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type", j: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_pop(self)

    def append(self, x: "AirTerminalDualDuctVAVOutdoorAir") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_size(self)

    def swap(self, v: "AirTerminalDualDuctVAVOutdoorAirVector") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::reverse_iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::allocator_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctVAVOutdoorAirVector(*args))

    def push_back(self, x: "AirTerminalDualDuctVAVOutdoorAir") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type", x: "AirTerminalDualDuctVAVOutdoorAir") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type", x: "AirTerminalDualDuctVAVOutdoorAir") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type") -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVOutdoorAirVector

# Register AirTerminalDualDuctVAVOutdoorAirVector in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_swigregister(AirTerminalDualDuctVAVOutdoorAirVector)

class OptionalAirTerminalDualDuctVAVOutdoorAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_swiginit(self, _openstudiomodelhvac.new_OptionalAirTerminalDualDuctVAVOutdoorAir(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctVAVOutdoorAir":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalDualDuctVAVOutdoorAir":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_get(self)

    def set(self, t: "AirTerminalDualDuctVAVOutdoorAir") -> "void":
        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctVAVOutdoorAir

# Register OptionalAirTerminalDualDuctVAVOutdoorAir in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_swigregister(OptionalAirTerminalDualDuctVAVOutdoorAir)

class CentralHeatPumpSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type", j: "std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type") -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > > *":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type", j: "std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_pop(self)

    def append(self, x: "CentralHeatPumpSystem") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_size(self)

    def swap(self, v: "CentralHeatPumpSystemVector") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::reverse_iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::reverse_iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::allocator_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CentralHeatPumpSystemVector_swiginit(self, _openstudiomodelhvac.new_CentralHeatPumpSystemVector(*args))

    def push_back(self, x: "CentralHeatPumpSystem") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type", x: "CentralHeatPumpSystem") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type", x: "CentralHeatPumpSystem") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemVector

# Register CentralHeatPumpSystemVector in _openstudiomodelhvac:
_openstudiomodelhvac.CentralHeatPumpSystemVector_swigregister(CentralHeatPumpSystemVector)

class OptionalCentralHeatPumpSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCentralHeatPumpSystem_swiginit(self, _openstudiomodelhvac.new_OptionalCentralHeatPumpSystem(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_reset(self)

    def __ref__(self) -> "openstudio::model::CentralHeatPumpSystem":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_isNull(self)

    def get(self) -> "openstudio::model::CentralHeatPumpSystem":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_get(self)

    def set(self, t: "CentralHeatPumpSystem") -> "void":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCentralHeatPumpSystem

# Register OptionalCentralHeatPumpSystem in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCentralHeatPumpSystem_swigregister(OptionalCentralHeatPumpSystem)

class CentralHeatPumpSystemModuleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type", j: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type") -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > > *":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type", j: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_pop(self)

    def append(self, x: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_size(self)

    def swap(self, v: "CentralHeatPumpSystemModuleVector") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::reverse_iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::reverse_iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::allocator_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_swiginit(self, _openstudiomodelhvac.new_CentralHeatPumpSystemModuleVector(*args))

    def push_back(self, x: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type", x: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type", x: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":
        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemModuleVector

# Register CentralHeatPumpSystemModuleVector in _openstudiomodelhvac:
_openstudiomodelhvac.CentralHeatPumpSystemModuleVector_swigregister(CentralHeatPumpSystemModuleVector)

class OptionalCentralHeatPumpSystemModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_swiginit(self, _openstudiomodelhvac.new_OptionalCentralHeatPumpSystemModule(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_reset(self)

    def __ref__(self) -> "openstudio::model::CentralHeatPumpSystemModule":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_isNull(self)

    def get(self) -> "openstudio::model::CentralHeatPumpSystemModule":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_get(self)

    def set(self, t: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCentralHeatPumpSystemModule

# Register OptionalCentralHeatPumpSystemModule in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_swigregister(OptionalCentralHeatPumpSystemModule)

class ChillerHeaterPerformanceElectricEIRVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type", j: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type") -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > > *":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type", j: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_pop(self)

    def append(self, x: "ChillerHeaterPerformanceElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_size(self)

    def swap(self, v: "ChillerHeaterPerformanceElectricEIRVector") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::reverse_iterator":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::reverse_iterator":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::allocator_type":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_swiginit(self, _openstudiomodelhvac.new_ChillerHeaterPerformanceElectricEIRVector(*args))

    def push_back(self, x: "ChillerHeaterPerformanceElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type", x: "ChillerHeaterPerformanceElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type", x: "ChillerHeaterPerformanceElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type") -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerHeaterPerformanceElectricEIRVector

# Register ChillerHeaterPerformanceElectricEIRVector in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_swigregister(ChillerHeaterPerformanceElectricEIRVector)

class OptionalChillerHeaterPerformanceElectricEIR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_swiginit(self, _openstudiomodelhvac.new_OptionalChillerHeaterPerformanceElectricEIR(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_reset(self)

    def __ref__(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_isNull(self)

    def get(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_get(self)

    def set(self, t: "ChillerHeaterPerformanceElectricEIR") -> "void":
        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerHeaterPerformanceElectricEIR

# Register OptionalChillerHeaterPerformanceElectricEIR in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_swigregister(OptionalChillerHeaterPerformanceElectricEIR)

class ChillerElectricEIRVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ChillerElectricEIRVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIRVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIRVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerElectricEIRVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ChillerElectricEIR >::difference_type", j: "std::vector< openstudio::model::ChillerElectricEIR >::difference_type") -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > > *":
        return _openstudiomodelhvac.ChillerElectricEIRVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ChillerElectricEIR >::difference_type", j: "std::vector< openstudio::model::ChillerElectricEIR >::difference_type") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerElectricEIRVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type":
        return _openstudiomodelhvac.ChillerElectricEIRVector_pop(self)

    def append(self, x: "ChillerElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIRVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerElectricEIRVector_size(self)

    def swap(self, v: "ChillerElectricEIRVector") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerElectricEIRVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerElectricEIRVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::reverse_iterator":
        return _openstudiomodelhvac.ChillerElectricEIRVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::reverse_iterator":
        return _openstudiomodelhvac.ChillerElectricEIRVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::allocator_type":
        return _openstudiomodelhvac.ChillerElectricEIRVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":
        return _openstudiomodelhvac.ChillerElectricEIRVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerElectricEIRVector_swiginit(self, _openstudiomodelhvac.new_ChillerElectricEIRVector(*args))

    def push_back(self, x: "ChillerElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerElectricEIRVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":
        return _openstudiomodelhvac.ChillerElectricEIRVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ChillerElectricEIR >::size_type", x: "ChillerElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ChillerElectricEIR >::size_type", x: "ChillerElectricEIR") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ChillerElectricEIR >::size_type") -> "void":
        return _openstudiomodelhvac.ChillerElectricEIRVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":
        return _openstudiomodelhvac.ChillerElectricEIRVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerElectricEIRVector

# Register ChillerElectricEIRVector in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerElectricEIRVector_swigregister(ChillerElectricEIRVector)

class OptionalChillerElectricEIR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalChillerElectricEIR_swiginit(self, _openstudiomodelhvac.new_OptionalChillerElectricEIR(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalChillerElectricEIR_reset(self)

    def __ref__(self) -> "openstudio::model::ChillerElectricEIR":
        return _openstudiomodelhvac.OptionalChillerElectricEIR___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerElectricEIR_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerElectricEIR_isNull(self)

    def get(self) -> "openstudio::model::ChillerElectricEIR":
        return _openstudiomodelhvac.OptionalChillerElectricEIR_get(self)

    def set(self, t: "ChillerElectricEIR") -> "void":
        return _openstudiomodelhvac.OptionalChillerElectricEIR_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerElectricEIR

# Register OptionalChillerElectricEIR in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalChillerElectricEIR_swigregister(OptionalChillerElectricEIR)

class CoilCoolingDXMultiSpeedStageDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > > *":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_pop(self)

    def append(self, x: "CoilCoolingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_size(self)

    def swap(self, v: "CoilCoolingDXMultiSpeedStageDataVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXMultiSpeedStageDataVector(*args))

    def push_back(self, x: "CoilCoolingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type", x: "CoilCoolingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type", x: "CoilCoolingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXMultiSpeedStageDataVector

# Register CoilCoolingDXMultiSpeedStageDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_swigregister(CoilCoolingDXMultiSpeedStageDataVector)

class OptionalCoilCoolingDXMultiSpeedStageData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingDXMultiSpeedStageData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXMultiSpeedStageData":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXMultiSpeedStageData":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_get(self)

    def set(self, t: "CoilCoolingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXMultiSpeedStageData

# Register OptionalCoilCoolingDXMultiSpeedStageData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_swigregister(OptionalCoilCoolingDXMultiSpeedStageData)

class CoilCoolingDXVariableRefrigerantFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > > *":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_pop(self)

    def append(self, x: "CoilCoolingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_size(self)

    def swap(self, v: "CoilCoolingDXVariableRefrigerantFlowVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXVariableRefrigerantFlowVector(*args))

    def push_back(self, x: "CoilCoolingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type", x: "CoilCoolingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type", x: "CoilCoolingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableRefrigerantFlowVector

# Register CoilCoolingDXVariableRefrigerantFlowVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_swigregister(CoilCoolingDXVariableRefrigerantFlowVector)

class OptionalCoilCoolingDXVariableRefrigerantFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingDXVariableRefrigerantFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXVariableRefrigerantFlow":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXVariableRefrigerantFlow":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_get(self)

    def set(self, t: "CoilCoolingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXVariableRefrigerantFlow

# Register OptionalCoilCoolingDXVariableRefrigerantFlow in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_swigregister(OptionalCoilCoolingDXVariableRefrigerantFlow)

class CoilCoolingDXVariableSpeedSpeedDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > > *":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_pop(self)

    def append(self, x: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_size(self)

    def swap(self, v: "CoilCoolingDXVariableSpeedSpeedDataVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXVariableSpeedSpeedDataVector(*args))

    def push_back(self, x: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type", x: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type", x: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableSpeedSpeedDataVector

# Register CoilCoolingDXVariableSpeedSpeedDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_swigregister(CoilCoolingDXVariableSpeedSpeedDataVector)

class OptionalCoilCoolingDXVariableSpeedSpeedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingDXVariableSpeedSpeedData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXVariableSpeedSpeedData":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXVariableSpeedSpeedData":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_get(self)

    def set(self, t: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXVariableSpeedSpeedData

# Register OptionalCoilCoolingDXVariableSpeedSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_swigregister(OptionalCoilCoolingDXVariableSpeedSpeedData)

class CoilCoolingWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingWater >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWater >::difference_type") -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > > *":
        return _openstudiomodelhvac.CoilCoolingWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingWater >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWater >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type":
        return _openstudiomodelhvac.CoilCoolingWaterVector_pop(self)

    def append(self, x: "CoilCoolingWater") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterVector_size(self)

    def swap(self, v: "CoilCoolingWaterVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWater >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWater >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWater >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingWaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterVector(*args))

    def push_back(self, x: "CoilCoolingWater") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingWater >::size_type", x: "CoilCoolingWater") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingWater >::size_type", x: "CoilCoolingWater") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingWater >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterVector

# Register CoilCoolingWaterVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterVector_swigregister(CoilCoolingWaterVector)

class OptionalCoilCoolingWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingWater_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingWater(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWater_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingWater":
        return _openstudiomodelhvac.OptionalCoilCoolingWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWater_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingWater":
        return _openstudiomodelhvac.OptionalCoilCoolingWater_get(self)

    def set(self, t: "CoilCoolingWater") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWater_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWater

# Register OptionalCoilCoolingWater in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingWater_swigregister(OptionalCoilCoolingWater)

class CoilCoolingWaterToAirHeatPumpEquationFitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > > *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_pop(self)

    def append(self, x: "CoilCoolingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_size(self)

    def swap(self, v: "CoilCoolingWaterToAirHeatPumpEquationFitVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpEquationFitVector(*args))

    def push_back(self, x: "CoilCoolingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type", x: "CoilCoolingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type", x: "CoilCoolingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpEquationFitVector

# Register CoilCoolingWaterToAirHeatPumpEquationFitVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_swigregister(CoilCoolingWaterToAirHeatPumpEquationFitVector)

class OptionalCoilCoolingWaterToAirHeatPumpEquationFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpEquationFit(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_get(self)

    def set(self, t: "CoilCoolingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpEquationFit

# Register OptionalCoilCoolingWaterToAirHeatPumpEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_swigregister(OptionalCoilCoolingWaterToAirHeatPumpEquationFit)

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > > *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop(self)

    def append(self, x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_size(self)

    def swap(self, v: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector(*args))

    def push_back(self, x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type", x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type", x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector

# Register CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector)

class OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_get(self)

    def set(self, t: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

# Register OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit)

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > > *":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop(self)

    def append(self, x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_size(self)

    def swap(self, v: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::allocator_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(*args))

    def push_back(self, x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type", x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type", x: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector

# Register CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector)

class OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_get(self)

    def set(self, t: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

# Register OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)

class CoilHeatingDXMultiSpeedStageDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > > *":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_pop(self)

    def append(self, x: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_size(self)

    def swap(self, v: "CoilHeatingDXMultiSpeedStageDataVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXMultiSpeedStageDataVector(*args))

    def push_back(self, x: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type", x: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type", x: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXMultiSpeedStageDataVector

# Register CoilHeatingDXMultiSpeedStageDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_swigregister(CoilHeatingDXMultiSpeedStageDataVector)

class OptionalCoilHeatingDXMultiSpeedStageData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingDXMultiSpeedStageData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXMultiSpeedStageData":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXMultiSpeedStageData":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_get(self)

    def set(self, t: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXMultiSpeedStageData

# Register OptionalCoilHeatingDXMultiSpeedStageData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_swigregister(OptionalCoilHeatingDXMultiSpeedStageData)

class CoilHeatingDXVariableRefrigerantFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > > *":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_pop(self)

    def append(self, x: "CoilHeatingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_size(self)

    def swap(self, v: "CoilHeatingDXVariableRefrigerantFlowVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXVariableRefrigerantFlowVector(*args))

    def push_back(self, x: "CoilHeatingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type", x: "CoilHeatingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type", x: "CoilHeatingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableRefrigerantFlowVector

# Register CoilHeatingDXVariableRefrigerantFlowVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_swigregister(CoilHeatingDXVariableRefrigerantFlowVector)

class OptionalCoilHeatingDXVariableRefrigerantFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingDXVariableRefrigerantFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXVariableRefrigerantFlow":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXVariableRefrigerantFlow":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_get(self)

    def set(self, t: "CoilHeatingDXVariableRefrigerantFlow") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXVariableRefrigerantFlow

# Register OptionalCoilHeatingDXVariableRefrigerantFlow in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_swigregister(OptionalCoilHeatingDXVariableRefrigerantFlow)

class CoilHeatingGasMultiStageStageDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type") -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > > *":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_pop(self)

    def append(self, x: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_size(self)

    def swap(self, v: "CoilHeatingGasMultiStageStageDataVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingGasMultiStageStageDataVector(*args))

    def push_back(self, x: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type", x: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type", x: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingGasMultiStageStageDataVector

# Register CoilHeatingGasMultiStageStageDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_swigregister(CoilHeatingGasMultiStageStageDataVector)

class OptionalCoilHeatingGasMultiStageStageData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingGasMultiStageStageData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingGasMultiStageStageData":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingGasMultiStageStageData":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_get(self)

    def set(self, t: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingGasMultiStageStageData

# Register OptionalCoilHeatingGasMultiStageStageData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_swigregister(OptionalCoilHeatingGasMultiStageStageData)

class CoilHeatingDXVariableSpeedSpeedDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > > *":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_pop(self)

    def append(self, x: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_size(self)

    def swap(self, v: "CoilHeatingDXVariableSpeedSpeedDataVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXVariableSpeedSpeedDataVector(*args))

    def push_back(self, x: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type", x: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type", x: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableSpeedSpeedDataVector

# Register CoilHeatingDXVariableSpeedSpeedDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_swigregister(CoilHeatingDXVariableSpeedSpeedDataVector)

class OptionalCoilHeatingDXVariableSpeedSpeedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingDXVariableSpeedSpeedData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXVariableSpeedSpeedData":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXVariableSpeedSpeedData":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_get(self)

    def set(self, t: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXVariableSpeedSpeedData

# Register OptionalCoilHeatingDXVariableSpeedSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_swigregister(OptionalCoilHeatingDXVariableSpeedSpeedData)

class CoilHeatingWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWater >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWater >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > > *":
        return _openstudiomodelhvac.CoilHeatingWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWater >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWater >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type":
        return _openstudiomodelhvac.CoilHeatingWaterVector_pop(self)

    def append(self, x: "CoilHeatingWater") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterVector_size(self)

    def swap(self, v: "CoilHeatingWaterVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWater >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWater >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWater >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingWaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterVector(*args))

    def push_back(self, x: "CoilHeatingWater") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWater >::size_type", x: "CoilHeatingWater") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWater >::size_type", x: "CoilHeatingWater") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWater >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterVector

# Register CoilHeatingWaterVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterVector_swigregister(CoilHeatingWaterVector)

class OptionalCoilHeatingWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingWater_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingWater(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWater_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWater":
        return _openstudiomodelhvac.OptionalCoilHeatingWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWater_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWater":
        return _openstudiomodelhvac.OptionalCoilHeatingWater_get(self)

    def set(self, t: "CoilHeatingWater") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWater_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWater

# Register OptionalCoilHeatingWater in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingWater_swigregister(OptionalCoilHeatingWater)

class CoilHeatingWaterToAirHeatPumpEquationFitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > > *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_pop(self)

    def append(self, x: "CoilHeatingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_size(self)

    def swap(self, v: "CoilHeatingWaterToAirHeatPumpEquationFitVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpEquationFitVector(*args))

    def push_back(self, x: "CoilHeatingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type", x: "CoilHeatingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type", x: "CoilHeatingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpEquationFitVector

# Register CoilHeatingWaterToAirHeatPumpEquationFitVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_swigregister(CoilHeatingWaterToAirHeatPumpEquationFitVector)

class OptionalCoilHeatingWaterToAirHeatPumpEquationFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpEquationFit(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_get(self)

    def set(self, t: "CoilHeatingWaterToAirHeatPumpEquationFit") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpEquationFit

# Register OptionalCoilHeatingWaterToAirHeatPumpEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_swigregister(OptionalCoilHeatingWaterToAirHeatPumpEquationFit)

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > > *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop(self)

    def append(self, x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_size(self)

    def swap(self, v: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector(*args))

    def push_back(self, x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type", x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type", x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector

# Register CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector)

class OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_get(self)

    def set(self, t: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

# Register OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit)

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > > *":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop(self)

    def append(self, x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_size(self)

    def swap(self, v: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::allocator_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(*args))

    def push_back(self, x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type", x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type", x: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector

# Register CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector)

class OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swiginit(self, _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_get(self)

    def set(self, t: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

# Register OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)

class CoilPerformanceDXCoolingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type", j: "std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type") -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > > *":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type", j: "std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_pop(self)

    def append(self, x: "CoilPerformanceDXCooling") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_size(self)

    def swap(self, v: "CoilPerformanceDXCoolingVector") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::reverse_iterator":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::reverse_iterator":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::allocator_type":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilPerformanceDXCoolingVector_swiginit(self, _openstudiomodelhvac.new_CoilPerformanceDXCoolingVector(*args))

    def push_back(self, x: "CoilPerformanceDXCooling") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type", x: "CoilPerformanceDXCooling") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type", x: "CoilPerformanceDXCooling") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type") -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":
        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilPerformanceDXCoolingVector

# Register CoilPerformanceDXCoolingVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilPerformanceDXCoolingVector_swigregister(CoilPerformanceDXCoolingVector)

class OptionalCoilPerformanceDXCooling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_swiginit(self, _openstudiomodelhvac.new_OptionalCoilPerformanceDXCooling(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_reset(self)

    def __ref__(self) -> "openstudio::model::CoilPerformanceDXCooling":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_isNull(self)

    def get(self) -> "openstudio::model::CoilPerformanceDXCooling":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_get(self)

    def set(self, t: "CoilPerformanceDXCooling") -> "void":
        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilPerformanceDXCooling

# Register OptionalCoilPerformanceDXCooling in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilPerformanceDXCooling_swigregister(OptionalCoilPerformanceDXCooling)

class CoilWaterHeatingAirToWaterHeatPumpVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > > *":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_pop(self)

    def append(self, x: "CoilWaterHeatingAirToWaterHeatPump") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_size(self)

    def swap(self, v: "CoilWaterHeatingAirToWaterHeatPumpVector") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::reverse_iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::reverse_iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::allocator_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_swiginit(self, _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpVector(*args))

    def push_back(self, x: "CoilWaterHeatingAirToWaterHeatPump") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type", x: "CoilWaterHeatingAirToWaterHeatPump") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type", x: "CoilWaterHeatingAirToWaterHeatPump") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpVector

# Register CoilWaterHeatingAirToWaterHeatPumpVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_swigregister(CoilWaterHeatingAirToWaterHeatPumpVector)

class OptionalCoilWaterHeatingAirToWaterHeatPump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_swiginit(self, _openstudiomodelhvac.new_OptionalCoilWaterHeatingAirToWaterHeatPump(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_reset(self)

    def __ref__(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPump":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_isNull(self)

    def get(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPump":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_get(self)

    def set(self, t: "CoilWaterHeatingAirToWaterHeatPump") -> "void":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilWaterHeatingAirToWaterHeatPump

# Register OptionalCoilWaterHeatingAirToWaterHeatPump in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_swigregister(OptionalCoilWaterHeatingAirToWaterHeatPump)

class CoilWaterHeatingAirToWaterHeatPumpWrappedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > > *":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_pop(self)

    def append(self, x: "CoilWaterHeatingAirToWaterHeatPumpWrapped") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_size(self)

    def swap(self, v: "CoilWaterHeatingAirToWaterHeatPumpWrappedVector") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::reverse_iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::reverse_iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::allocator_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swiginit(self, _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpWrappedVector(*args))

    def push_back(self, x: "CoilWaterHeatingAirToWaterHeatPumpWrapped") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type", x: "CoilWaterHeatingAirToWaterHeatPumpWrapped") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type", x: "CoilWaterHeatingAirToWaterHeatPumpWrapped") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type") -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpWrappedVector

# Register CoilWaterHeatingAirToWaterHeatPumpWrappedVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swigregister(CoilWaterHeatingAirToWaterHeatPumpWrappedVector)

class OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_swiginit(self, _openstudiomodelhvac.new_OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_reset(self)

    def __ref__(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_isNull(self)

    def get(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_get(self)

    def set(self, t: "CoilWaterHeatingAirToWaterHeatPumpWrapped") -> "void":
        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped

# Register OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister(OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped)

class CoolingTowerPerformanceCoolToolsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type", j: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type") -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > > *":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type", j: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_pop(self)

    def append(self, x: "CoolingTowerPerformanceCoolTools") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_size(self)

    def swap(self, v: "CoolingTowerPerformanceCoolToolsVector") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::reverse_iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::reverse_iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::allocator_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_swiginit(self, _openstudiomodelhvac.new_CoolingTowerPerformanceCoolToolsVector(*args))

    def push_back(self, x: "CoolingTowerPerformanceCoolTools") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type", x: "CoolingTowerPerformanceCoolTools") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type", x: "CoolingTowerPerformanceCoolTools") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceCoolToolsVector

# Register CoolingTowerPerformanceCoolToolsVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_swigregister(CoolingTowerPerformanceCoolToolsVector)

class OptionalCoolingTowerPerformanceCoolTools(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_swiginit(self, _openstudiomodelhvac.new_OptionalCoolingTowerPerformanceCoolTools(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_reset(self)

    def __ref__(self) -> "openstudio::model::CoolingTowerPerformanceCoolTools":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_isNull(self)

    def get(self) -> "openstudio::model::CoolingTowerPerformanceCoolTools":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_get(self)

    def set(self, t: "CoolingTowerPerformanceCoolTools") -> "void":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoolingTowerPerformanceCoolTools

# Register OptionalCoolingTowerPerformanceCoolTools in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_swigregister(OptionalCoolingTowerPerformanceCoolTools)

class CoolingTowerPerformanceYorkCalcVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type", j: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type") -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > > *":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type", j: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_pop(self)

    def append(self, x: "CoolingTowerPerformanceYorkCalc") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_size(self)

    def swap(self, v: "CoolingTowerPerformanceYorkCalcVector") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::reverse_iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::reverse_iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::allocator_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_swiginit(self, _openstudiomodelhvac.new_CoolingTowerPerformanceYorkCalcVector(*args))

    def push_back(self, x: "CoolingTowerPerformanceYorkCalc") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type", x: "CoolingTowerPerformanceYorkCalc") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type", x: "CoolingTowerPerformanceYorkCalc") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type") -> "void":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceYorkCalcVector

# Register CoolingTowerPerformanceYorkCalcVector in _openstudiomodelhvac:
_openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_swigregister(CoolingTowerPerformanceYorkCalcVector)

class OptionalCoolingTowerPerformanceYorkCalc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_swiginit(self, _openstudiomodelhvac.new_OptionalCoolingTowerPerformanceYorkCalc(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_reset(self)

    def __ref__(self) -> "openstudio::model::CoolingTowerPerformanceYorkCalc":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_isNull(self)

    def get(self) -> "openstudio::model::CoolingTowerPerformanceYorkCalc":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_get(self)

    def set(self, t: "CoolingTowerPerformanceYorkCalc") -> "void":
        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoolingTowerPerformanceYorkCalc

# Register OptionalCoolingTowerPerformanceYorkCalc in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_swigregister(OptionalCoolingTowerPerformanceYorkCalc)

class UnitarySystemPerformanceMultispeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type", j: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type") -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > > *":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type", j: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_pop(self)

    def append(self, x: "UnitarySystemPerformanceMultispeed") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_size(self)

    def swap(self, v: "UnitarySystemPerformanceMultispeedVector") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::reverse_iterator":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::reverse_iterator":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::allocator_type":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_swiginit(self, _openstudiomodelhvac.new_UnitarySystemPerformanceMultispeedVector(*args))

    def push_back(self, x: "UnitarySystemPerformanceMultispeed") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type", x: "UnitarySystemPerformanceMultispeed") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type", x: "UnitarySystemPerformanceMultispeed") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type") -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_UnitarySystemPerformanceMultispeedVector

# Register UnitarySystemPerformanceMultispeedVector in _openstudiomodelhvac:
_openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_swigregister(UnitarySystemPerformanceMultispeedVector)

class OptionalUnitarySystemPerformanceMultispeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_swiginit(self, _openstudiomodelhvac.new_OptionalUnitarySystemPerformanceMultispeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_reset(self)

    def __ref__(self) -> "openstudio::model::UnitarySystemPerformanceMultispeed":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_isNull(self)

    def get(self) -> "openstudio::model::UnitarySystemPerformanceMultispeed":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_get(self)

    def set(self, t: "UnitarySystemPerformanceMultispeed") -> "void":
        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalUnitarySystemPerformanceMultispeed

# Register OptionalUnitarySystemPerformanceMultispeed in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_swigregister(OptionalUnitarySystemPerformanceMultispeed)

class ZoneMixingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneMixingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneMixingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneMixingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":
        return _openstudiomodelhvac.ZoneMixingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneMixing >::difference_type", j: "std::vector< openstudio::model::ZoneMixing >::difference_type") -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > > *":
        return _openstudiomodelhvac.ZoneMixingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneMixing >::difference_type", j: "std::vector< openstudio::model::ZoneMixing >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":
        return _openstudiomodelhvac.ZoneMixingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type":
        return _openstudiomodelhvac.ZoneMixingVector_pop(self)

    def append(self, x: "ZoneMixing") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneMixingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":
        return _openstudiomodelhvac.ZoneMixingVector_size(self)

    def swap(self, v: "ZoneMixingVector") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneMixing >::iterator":
        return _openstudiomodelhvac.ZoneMixingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneMixing >::iterator":
        return _openstudiomodelhvac.ZoneMixingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneMixing >::reverse_iterator":
        return _openstudiomodelhvac.ZoneMixingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneMixing >::reverse_iterator":
        return _openstudiomodelhvac.ZoneMixingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneMixing >::allocator_type":
        return _openstudiomodelhvac.ZoneMixingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneMixing >::iterator":
        return _openstudiomodelhvac.ZoneMixingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneMixingVector_swiginit(self, _openstudiomodelhvac.new_ZoneMixingVector(*args))

    def push_back(self, x: "ZoneMixing") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":
        return _openstudiomodelhvac.ZoneMixingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":
        return _openstudiomodelhvac.ZoneMixingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneMixing >::size_type", x: "ZoneMixing") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneMixing >::size_type", x: "ZoneMixing") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneMixing >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneMixingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":
        return _openstudiomodelhvac.ZoneMixingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneMixingVector

# Register ZoneMixingVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneMixingVector_swigregister(ZoneMixingVector)

class OptionalZoneMixing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneMixing_swiginit(self, _openstudiomodelhvac.new_OptionalZoneMixing(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneMixing_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneMixing":
        return _openstudiomodelhvac.OptionalZoneMixing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneMixing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneMixing_isNull(self)

    def get(self) -> "openstudio::model::ZoneMixing":
        return _openstudiomodelhvac.OptionalZoneMixing_get(self)

    def set(self, t: "ZoneMixing") -> "void":
        return _openstudiomodelhvac.OptionalZoneMixing_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneMixing

# Register OptionalZoneMixing in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneMixing_swigregister(OptionalZoneMixing)

class ZoneVentilationDesignFlowRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type", j: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type") -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > > *":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type", j: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_pop(self)

    def append(self, x: "ZoneVentilationDesignFlowRate") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_size(self)

    def swap(self, v: "ZoneVentilationDesignFlowRateVector") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::reverse_iterator":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::reverse_iterator":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::allocator_type":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_swiginit(self, _openstudiomodelhvac.new_ZoneVentilationDesignFlowRateVector(*args))

    def push_back(self, x: "ZoneVentilationDesignFlowRate") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type", x: "ZoneVentilationDesignFlowRate") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type", x: "ZoneVentilationDesignFlowRate") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationDesignFlowRateVector

# Register ZoneVentilationDesignFlowRateVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_swigregister(ZoneVentilationDesignFlowRateVector)

class OptionalZoneVentilationDesignFlowRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_swiginit(self, _openstudiomodelhvac.new_OptionalZoneVentilationDesignFlowRate(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneVentilationDesignFlowRate":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_isNull(self)

    def get(self) -> "openstudio::model::ZoneVentilationDesignFlowRate":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_get(self)

    def set(self, t: "ZoneVentilationDesignFlowRate") -> "void":
        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneVentilationDesignFlowRate

# Register OptionalZoneVentilationDesignFlowRate in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_swigregister(OptionalZoneVentilationDesignFlowRate)

class ZoneVentilationWindandStackOpenAreaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::difference_type", j: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::difference_type") -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea,std::allocator< openstudio::model::ZoneVentilationWindandStackOpenArea > > *":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::difference_type", j: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::difference_type") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::value_type":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_pop(self)

    def append(self, x: "ZoneVentilationWindandStackOpenArea") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_size(self)

    def swap(self, v: "ZoneVentilationWindandStackOpenAreaVector") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::iterator":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::iterator":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::reverse_iterator":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::reverse_iterator":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::allocator_type":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::iterator":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_swiginit(self, _openstudiomodelhvac.new_ZoneVentilationWindandStackOpenAreaVector(*args))

    def push_back(self, x: "ZoneVentilationWindandStackOpenArea") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::value_type const &":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type", x: "ZoneVentilationWindandStackOpenArea") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type", x: "ZoneVentilationWindandStackOpenArea") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type") -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea >::size_type":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationWindandStackOpenAreaVector

# Register ZoneVentilationWindandStackOpenAreaVector in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneVentilationWindandStackOpenAreaVector_swigregister(ZoneVentilationWindandStackOpenAreaVector)

class OptionalZoneVentilationWindandStackOpenArea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_swiginit(self, _openstudiomodelhvac.new_OptionalZoneVentilationWindandStackOpenArea(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneVentilationWindandStackOpenArea":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_isNull(self)

    def get(self) -> "openstudio::model::ZoneVentilationWindandStackOpenArea":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_get(self)

    def set(self, t: "ZoneVentilationWindandStackOpenArea") -> "void":
        return _openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneVentilationWindandStackOpenArea

# Register OptionalZoneVentilationWindandStackOpenArea in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalZoneVentilationWindandStackOpenArea_swigregister(OptionalZoneVentilationWindandStackOpenArea)

class WaterHeaterMixedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterHeaterMixedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":
        return _openstudiomodelhvac.WaterHeaterMixedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterHeaterMixed >::difference_type", j: "std::vector< openstudio::model::WaterHeaterMixed >::difference_type") -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > > *":
        return _openstudiomodelhvac.WaterHeaterMixedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterHeaterMixed >::difference_type", j: "std::vector< openstudio::model::WaterHeaterMixed >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterMixedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type":
        return _openstudiomodelhvac.WaterHeaterMixedVector_pop(self)

    def append(self, x: "WaterHeaterMixed") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":
        return _openstudiomodelhvac.WaterHeaterMixedVector_size(self)

    def swap(self, v: "WaterHeaterMixedVector") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":
        return _openstudiomodelhvac.WaterHeaterMixedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":
        return _openstudiomodelhvac.WaterHeaterMixedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::reverse_iterator":
        return _openstudiomodelhvac.WaterHeaterMixedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::reverse_iterator":
        return _openstudiomodelhvac.WaterHeaterMixedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::allocator_type":
        return _openstudiomodelhvac.WaterHeaterMixedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":
        return _openstudiomodelhvac.WaterHeaterMixedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterHeaterMixedVector_swiginit(self, _openstudiomodelhvac.new_WaterHeaterMixedVector(*args))

    def push_back(self, x: "WaterHeaterMixed") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterMixedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterMixedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterHeaterMixed >::size_type", x: "WaterHeaterMixed") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterHeaterMixed >::size_type", x: "WaterHeaterMixed") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterHeaterMixed >::size_type") -> "void":
        return _openstudiomodelhvac.WaterHeaterMixedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":
        return _openstudiomodelhvac.WaterHeaterMixedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterMixedVector

# Register WaterHeaterMixedVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterHeaterMixedVector_swigregister(WaterHeaterMixedVector)

class OptionalWaterHeaterMixed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterHeaterMixed_swiginit(self, _openstudiomodelhvac.new_OptionalWaterHeaterMixed(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed_reset(self)

    def __ref__(self) -> "openstudio::model::WaterHeaterMixed":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed_isNull(self)

    def get(self) -> "openstudio::model::WaterHeaterMixed":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed_get(self)

    def set(self, t: "WaterHeaterMixed") -> "void":
        return _openstudiomodelhvac.OptionalWaterHeaterMixed_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterHeaterMixed

# Register OptionalWaterHeaterMixed in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterHeaterMixed_swigregister(OptionalWaterHeaterMixed)

class WaterHeaterStratifiedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterHeaterStratified >::difference_type", j: "std::vector< openstudio::model::WaterHeaterStratified >::difference_type") -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > > *":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterHeaterStratified >::difference_type", j: "std::vector< openstudio::model::WaterHeaterStratified >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_pop(self)

    def append(self, x: "WaterHeaterStratified") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_size(self)

    def swap(self, v: "WaterHeaterStratifiedVector") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::reverse_iterator":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::reverse_iterator":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::allocator_type":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterHeaterStratifiedVector_swiginit(self, _openstudiomodelhvac.new_WaterHeaterStratifiedVector(*args))

    def push_back(self, x: "WaterHeaterStratified") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterHeaterStratified >::size_type", x: "WaterHeaterStratified") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterHeaterStratified >::size_type", x: "WaterHeaterStratified") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterHeaterStratified >::size_type") -> "void":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":
        return _openstudiomodelhvac.WaterHeaterStratifiedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterStratifiedVector

# Register WaterHeaterStratifiedVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterHeaterStratifiedVector_swigregister(WaterHeaterStratifiedVector)

class OptionalWaterHeaterStratified(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterHeaterStratified_swiginit(self, _openstudiomodelhvac.new_OptionalWaterHeaterStratified(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified_reset(self)

    def __ref__(self) -> "openstudio::model::WaterHeaterStratified":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified_isNull(self)

    def get(self) -> "openstudio::model::WaterHeaterStratified":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified_get(self)

    def set(self, t: "WaterHeaterStratified") -> "void":
        return _openstudiomodelhvac.OptionalWaterHeaterStratified_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterHeaterStratified

# Register OptionalWaterHeaterStratified in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterHeaterStratified_swigregister(OptionalWaterHeaterStratified)

class WaterUseEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type") -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > > *":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type", j: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_pop(self)

    def append(self, x: "WaterUseEquipmentDefinition") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_size(self)

    def swap(self, v: "WaterUseEquipmentDefinitionVector") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::allocator_type":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_swiginit(self, _openstudiomodelhvac.new_WaterUseEquipmentDefinitionVector(*args))

    def push_back(self, x: "WaterUseEquipmentDefinition") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type", x: "WaterUseEquipmentDefinition") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type", x: "WaterUseEquipmentDefinition") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentDefinitionVector

# Register WaterUseEquipmentDefinitionVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterUseEquipmentDefinitionVector_swigregister(WaterUseEquipmentDefinitionVector)

class OptionalWaterUseEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_swiginit(self, _openstudiomodelhvac.new_OptionalWaterUseEquipmentDefinition(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::WaterUseEquipmentDefinition":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::WaterUseEquipmentDefinition":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_get(self)

    def set(self, t: "WaterUseEquipmentDefinition") -> "void":
        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterUseEquipmentDefinition

# Register OptionalWaterUseEquipmentDefinition in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_swigregister(OptionalWaterUseEquipmentDefinition)

class WaterUseEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.WaterUseEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterUseEquipment >::difference_type", j: "std::vector< openstudio::model::WaterUseEquipment >::difference_type") -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > > *":
        return _openstudiomodelhvac.WaterUseEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterUseEquipment >::difference_type", j: "std::vector< openstudio::model::WaterUseEquipment >::difference_type") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type":
        return _openstudiomodelhvac.WaterUseEquipmentVector_pop(self)

    def append(self, x: "WaterUseEquipment") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentVector_size(self)

    def swap(self, v: "WaterUseEquipmentVector") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterUseEquipment >::reverse_iterator":
        return _openstudiomodelhvac.WaterUseEquipmentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterUseEquipment >::reverse_iterator":
        return _openstudiomodelhvac.WaterUseEquipmentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterUseEquipment >::allocator_type":
        return _openstudiomodelhvac.WaterUseEquipmentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":
        return _openstudiomodelhvac.WaterUseEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.WaterUseEquipmentVector_swiginit(self, _openstudiomodelhvac.new_WaterUseEquipmentVector(*args))

    def push_back(self, x: "WaterUseEquipment") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":
        return _openstudiomodelhvac.WaterUseEquipmentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterUseEquipment >::size_type", x: "WaterUseEquipment") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterUseEquipment >::size_type", x: "WaterUseEquipment") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterUseEquipment >::size_type") -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":
        return _openstudiomodelhvac.WaterUseEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentVector

# Register WaterUseEquipmentVector in _openstudiomodelhvac:
_openstudiomodelhvac.WaterUseEquipmentVector_swigregister(WaterUseEquipmentVector)

class OptionalWaterUseEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalWaterUseEquipment_swiginit(self, _openstudiomodelhvac.new_OptionalWaterUseEquipment(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalWaterUseEquipment_reset(self)

    def __ref__(self) -> "openstudio::model::WaterUseEquipment":
        return _openstudiomodelhvac.OptionalWaterUseEquipment___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterUseEquipment_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalWaterUseEquipment_isNull(self)

    def get(self) -> "openstudio::model::WaterUseEquipment":
        return _openstudiomodelhvac.OptionalWaterUseEquipment_get(self)

    def set(self, t: "WaterUseEquipment") -> "void":
        return _openstudiomodelhvac.OptionalWaterUseEquipment_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterUseEquipment

# Register OptionalWaterUseEquipment in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalWaterUseEquipment_swigregister(OptionalWaterUseEquipment)

class HeatExchangerAirToAirSensibleAndLatentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type", j: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type") -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > > *":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type", j: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_pop(self)

    def append(self, x: "HeatExchangerAirToAirSensibleAndLatent") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_size(self)

    def swap(self, v: "HeatExchangerAirToAirSensibleAndLatentVector") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::reverse_iterator":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::reverse_iterator":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::allocator_type":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_swiginit(self, _openstudiomodelhvac.new_HeatExchangerAirToAirSensibleAndLatentVector(*args))

    def push_back(self, x: "HeatExchangerAirToAirSensibleAndLatent") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type", x: "HeatExchangerAirToAirSensibleAndLatent") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type", x: "HeatExchangerAirToAirSensibleAndLatent") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type") -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerAirToAirSensibleAndLatentVector

# Register HeatExchangerAirToAirSensibleAndLatentVector in _openstudiomodelhvac:
_openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_swigregister(HeatExchangerAirToAirSensibleAndLatentVector)

class OptionalHeatExchangerAirToAirSensibleAndLatent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_swiginit(self, _openstudiomodelhvac.new_OptionalHeatExchangerAirToAirSensibleAndLatent(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_reset(self)

    def __ref__(self) -> "openstudio::model::HeatExchangerAirToAirSensibleAndLatent":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_isNull(self)

    def get(self) -> "openstudio::model::HeatExchangerAirToAirSensibleAndLatent":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_get(self)

    def set(self, t: "HeatExchangerAirToAirSensibleAndLatent") -> "void":
        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatExchangerAirToAirSensibleAndLatent

# Register OptionalHeatExchangerAirToAirSensibleAndLatent in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_swigregister(OptionalHeatExchangerAirToAirSensibleAndLatent)

class HeatExchangerFluidToFluidVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type", j: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type") -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > > *":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type", j: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_pop(self)

    def append(self, x: "HeatExchangerFluidToFluid") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_size(self)

    def swap(self, v: "HeatExchangerFluidToFluidVector") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::reverse_iterator":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::reverse_iterator":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::allocator_type":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.HeatExchangerFluidToFluidVector_swiginit(self, _openstudiomodelhvac.new_HeatExchangerFluidToFluidVector(*args))

    def push_back(self, x: "HeatExchangerFluidToFluid") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type", x: "HeatExchangerFluidToFluid") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type", x: "HeatExchangerFluidToFluid") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type") -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":
        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerFluidToFluidVector

# Register HeatExchangerFluidToFluidVector in _openstudiomodelhvac:
_openstudiomodelhvac.HeatExchangerFluidToFluidVector_swigregister(HeatExchangerFluidToFluidVector)

class OptionalHeatExchangerFluidToFluid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_swiginit(self, _openstudiomodelhvac.new_OptionalHeatExchangerFluidToFluid(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_reset(self)

    def __ref__(self) -> "openstudio::model::HeatExchangerFluidToFluid":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_isNull(self)

    def get(self) -> "openstudio::model::HeatExchangerFluidToFluid":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_get(self)

    def set(self, t: "HeatExchangerFluidToFluid") -> "void":
        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatExchangerFluidToFluid

# Register OptionalHeatExchangerFluidToFluid in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_swigregister(OptionalHeatExchangerFluidToFluid)

class HeatPumpWaterToWaterEquationFitCoolingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type", j: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > > *":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type", j: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_pop(self)

    def append(self, x: "HeatPumpWaterToWaterEquationFitCooling") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_size(self)

    def swap(self, v: "HeatPumpWaterToWaterEquationFitCoolingVector") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::reverse_iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::reverse_iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::allocator_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_swiginit(self, _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitCoolingVector(*args))

    def push_back(self, x: "HeatPumpWaterToWaterEquationFitCooling") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type", x: "HeatPumpWaterToWaterEquationFitCooling") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type", x: "HeatPumpWaterToWaterEquationFitCooling") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitCoolingVector

# Register HeatPumpWaterToWaterEquationFitCoolingVector in _openstudiomodelhvac:
_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_swigregister(HeatPumpWaterToWaterEquationFitCoolingVector)

class OptionalHeatPumpWaterToWaterEquationFitCooling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_swiginit(self, _openstudiomodelhvac.new_OptionalHeatPumpWaterToWaterEquationFitCooling(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_reset(self)

    def __ref__(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitCooling":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_isNull(self)

    def get(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitCooling":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_get(self)

    def set(self, t: "HeatPumpWaterToWaterEquationFitCooling") -> "void":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatPumpWaterToWaterEquationFitCooling

# Register OptionalHeatPumpWaterToWaterEquationFitCooling in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_swigregister(OptionalHeatPumpWaterToWaterEquationFitCooling)

class HeatPumpWaterToWaterEquationFitHeatingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type", j: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > > *":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type", j: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_pop(self)

    def append(self, x: "HeatPumpWaterToWaterEquationFitHeating") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_size(self)

    def swap(self, v: "HeatPumpWaterToWaterEquationFitHeatingVector") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::reverse_iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::reverse_iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::allocator_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_swiginit(self, _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitHeatingVector(*args))

    def push_back(self, x: "HeatPumpWaterToWaterEquationFitHeating") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type", x: "HeatPumpWaterToWaterEquationFitHeating") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type", x: "HeatPumpWaterToWaterEquationFitHeating") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type") -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitHeatingVector

# Register HeatPumpWaterToWaterEquationFitHeatingVector in _openstudiomodelhvac:
_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_swigregister(HeatPumpWaterToWaterEquationFitHeatingVector)

class OptionalHeatPumpWaterToWaterEquationFitHeating(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_swiginit(self, _openstudiomodelhvac.new_OptionalHeatPumpWaterToWaterEquationFitHeating(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_reset(self)

    def __ref__(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitHeating":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_isNull(self)

    def get(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitHeating":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_get(self)

    def set(self, t: "HeatPumpWaterToWaterEquationFitHeating") -> "void":
        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatPumpWaterToWaterEquationFitHeating

# Register OptionalHeatPumpWaterToWaterEquationFitHeating in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_swigregister(OptionalHeatPumpWaterToWaterEquationFitHeating)

class ThermalStorageChilledWaterStratifiedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type", j: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type") -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > > *":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type", j: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_pop(self)

    def append(self, x: "ThermalStorageChilledWaterStratified") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_size(self)

    def swap(self, v: "ThermalStorageChilledWaterStratifiedVector") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::reverse_iterator":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::reverse_iterator":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::allocator_type":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_swiginit(self, _openstudiomodelhvac.new_ThermalStorageChilledWaterStratifiedVector(*args))

    def push_back(self, x: "ThermalStorageChilledWaterStratified") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type", x: "ThermalStorageChilledWaterStratified") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type", x: "ThermalStorageChilledWaterStratified") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type") -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalStorageChilledWaterStratifiedVector

# Register ThermalStorageChilledWaterStratifiedVector in _openstudiomodelhvac:
_openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_swigregister(ThermalStorageChilledWaterStratifiedVector)

class OptionalThermalStorageChilledWaterStratified(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_swiginit(self, _openstudiomodelhvac.new_OptionalThermalStorageChilledWaterStratified(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_reset(self)

    def __ref__(self) -> "openstudio::model::ThermalStorageChilledWaterStratified":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_isNull(self)

    def get(self) -> "openstudio::model::ThermalStorageChilledWaterStratified":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_get(self)

    def set(self, t: "ThermalStorageChilledWaterStratified") -> "void":
        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermalStorageChilledWaterStratified

# Register OptionalThermalStorageChilledWaterStratified in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_swigregister(OptionalThermalStorageChilledWaterStratified)

class ChillerAbsorptionIndirectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type", j: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type") -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > > *":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type", j: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_pop(self)

    def append(self, x: "ChillerAbsorptionIndirect") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_size(self)

    def swap(self, v: "ChillerAbsorptionIndirectVector") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::reverse_iterator":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::reverse_iterator":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::allocator_type":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerAbsorptionIndirectVector_swiginit(self, _openstudiomodelhvac.new_ChillerAbsorptionIndirectVector(*args))

    def push_back(self, x: "ChillerAbsorptionIndirect") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type", x: "ChillerAbsorptionIndirect") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type", x: "ChillerAbsorptionIndirect") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionIndirectVector

# Register ChillerAbsorptionIndirectVector in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerAbsorptionIndirectVector_swigregister(ChillerAbsorptionIndirectVector)

class OptionalChillerAbsorptionIndirect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_swiginit(self, _openstudiomodelhvac.new_OptionalChillerAbsorptionIndirect(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_reset(self)

    def __ref__(self) -> "openstudio::model::ChillerAbsorptionIndirect":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_isNull(self)

    def get(self) -> "openstudio::model::ChillerAbsorptionIndirect":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_get(self)

    def set(self, t: "ChillerAbsorptionIndirect") -> "void":
        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerAbsorptionIndirect

# Register OptionalChillerAbsorptionIndirect in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalChillerAbsorptionIndirect_swigregister(OptionalChillerAbsorptionIndirect)

class ChillerAbsorptionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.ChillerAbsorptionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ChillerAbsorption >::difference_type", j: "std::vector< openstudio::model::ChillerAbsorption >::difference_type") -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > > *":
        return _openstudiomodelhvac.ChillerAbsorptionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ChillerAbsorption >::difference_type", j: "std::vector< openstudio::model::ChillerAbsorption >::difference_type") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type":
        return _openstudiomodelhvac.ChillerAbsorptionVector_pop(self)

    def append(self, x: "ChillerAbsorption") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionVector_size(self)

    def swap(self, v: "ChillerAbsorptionVector") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ChillerAbsorption >::reverse_iterator":
        return _openstudiomodelhvac.ChillerAbsorptionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ChillerAbsorption >::reverse_iterator":
        return _openstudiomodelhvac.ChillerAbsorptionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ChillerAbsorption >::allocator_type":
        return _openstudiomodelhvac.ChillerAbsorptionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":
        return _openstudiomodelhvac.ChillerAbsorptionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerAbsorptionVector_swiginit(self, _openstudiomodelhvac.new_ChillerAbsorptionVector(*args))

    def push_back(self, x: "ChillerAbsorption") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":
        return _openstudiomodelhvac.ChillerAbsorptionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ChillerAbsorption >::size_type", x: "ChillerAbsorption") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ChillerAbsorption >::size_type", x: "ChillerAbsorption") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ChillerAbsorption >::size_type") -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":
        return _openstudiomodelhvac.ChillerAbsorptionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionVector

# Register ChillerAbsorptionVector in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerAbsorptionVector_swigregister(ChillerAbsorptionVector)

class OptionalChillerAbsorption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalChillerAbsorption_swiginit(self, _openstudiomodelhvac.new_OptionalChillerAbsorption(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalChillerAbsorption_reset(self)

    def __ref__(self) -> "openstudio::model::ChillerAbsorption":
        return _openstudiomodelhvac.OptionalChillerAbsorption___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerAbsorption_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalChillerAbsorption_isNull(self)

    def get(self) -> "openstudio::model::ChillerAbsorption":
        return _openstudiomodelhvac.OptionalChillerAbsorption_get(self)

    def set(self, t: "ChillerAbsorption") -> "void":
        return _openstudiomodelhvac.OptionalChillerAbsorption_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerAbsorption

# Register OptionalChillerAbsorption in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalChillerAbsorption_swigregister(OptionalChillerAbsorption)

class SolarCollectorPerformanceFlatPlateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type") -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > > *":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_pop(self)

    def append(self, x: "SolarCollectorPerformanceFlatPlate") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_size(self)

    def swap(self, v: "SolarCollectorPerformanceFlatPlateVector") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::allocator_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_swiginit(self, _openstudiomodelhvac.new_SolarCollectorPerformanceFlatPlateVector(*args))

    def push_back(self, x: "SolarCollectorPerformanceFlatPlate") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type", x: "SolarCollectorPerformanceFlatPlate") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type", x: "SolarCollectorPerformanceFlatPlate") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceFlatPlateVector

# Register SolarCollectorPerformanceFlatPlateVector in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_swigregister(SolarCollectorPerformanceFlatPlateVector)

class OptionalSolarCollectorPerformanceFlatPlate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_swiginit(self, _openstudiomodelhvac.new_OptionalSolarCollectorPerformanceFlatPlate(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorPerformanceFlatPlate":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorPerformanceFlatPlate":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_get(self)

    def set(self, t: "SolarCollectorPerformanceFlatPlate") -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformanceFlatPlate

# Register OptionalSolarCollectorPerformanceFlatPlate in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_swigregister(OptionalSolarCollectorPerformanceFlatPlate)

class SolarCollectorPerformanceIntegralCollectorStorageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type") -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > > *":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_pop(self)

    def append(self, x: "SolarCollectorPerformanceIntegralCollectorStorage") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_size(self)

    def swap(self, v: "SolarCollectorPerformanceIntegralCollectorStorageVector") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::allocator_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_swiginit(self, _openstudiomodelhvac.new_SolarCollectorPerformanceIntegralCollectorStorageVector(*args))

    def push_back(self, x: "SolarCollectorPerformanceIntegralCollectorStorage") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type", x: "SolarCollectorPerformanceIntegralCollectorStorage") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type", x: "SolarCollectorPerformanceIntegralCollectorStorage") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceIntegralCollectorStorageVector

# Register SolarCollectorPerformanceIntegralCollectorStorageVector in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_swigregister(SolarCollectorPerformanceIntegralCollectorStorageVector)

class OptionalSolarCollectorPerformanceIntegralCollectorStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_swiginit(self, _openstudiomodelhvac.new_OptionalSolarCollectorPerformanceIntegralCollectorStorage(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_get(self)

    def set(self, t: "SolarCollectorPerformanceIntegralCollectorStorage") -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformanceIntegralCollectorStorage

# Register OptionalSolarCollectorPerformanceIntegralCollectorStorage in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_swigregister(OptionalSolarCollectorPerformanceIntegralCollectorStorage)

class SolarCollectorPerformancePhotovoltaicThermalSimpleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type") -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > > *":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type", j: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_pop(self)

    def append(self, x: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_size(self)

    def swap(self, v: "SolarCollectorPerformancePhotovoltaicThermalSimpleVector") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::reverse_iterator":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::allocator_type":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swiginit(self, _openstudiomodelhvac.new_SolarCollectorPerformancePhotovoltaicThermalSimpleVector(*args))

    def push_back(self, x: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type", x: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type", x: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type") -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformancePhotovoltaicThermalSimpleVector

# Register SolarCollectorPerformancePhotovoltaicThermalSimpleVector in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swigregister(SolarCollectorPerformancePhotovoltaicThermalSimpleVector)

class OptionalSolarCollectorPerformancePhotovoltaicThermalSimple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_swiginit(self, _openstudiomodelhvac.new_OptionalSolarCollectorPerformancePhotovoltaicThermalSimple(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_get(self)

    def set(self, t: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "void":
        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformancePhotovoltaicThermalSimple

# Register OptionalSolarCollectorPerformancePhotovoltaicThermalSimple in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_swigregister(OptionalSolarCollectorPerformancePhotovoltaicThermalSimple)

class SwimmingPoolIndoorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SwimmingPoolIndoor >::difference_type", j: "std::vector< openstudio::model::SwimmingPoolIndoor >::difference_type") -> "std::vector< openstudio::model::SwimmingPoolIndoor,std::allocator< openstudio::model::SwimmingPoolIndoor > > *":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SwimmingPoolIndoor >::difference_type", j: "std::vector< openstudio::model::SwimmingPoolIndoor >::difference_type") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::value_type const &":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::value_type":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_pop(self)

    def append(self, x: "SwimmingPoolIndoor") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_size(self)

    def swap(self, v: "SwimmingPoolIndoorVector") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::iterator":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::iterator":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::reverse_iterator":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::reverse_iterator":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::allocator_type":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::iterator":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SwimmingPoolIndoorVector_swiginit(self, _openstudiomodelhvac.new_SwimmingPoolIndoorVector(*args))

    def push_back(self, x: "SwimmingPoolIndoor") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::value_type const &":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::value_type const &":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type", x: "SwimmingPoolIndoor") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type", x: "SwimmingPoolIndoor") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type") -> "void":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SwimmingPoolIndoor >::size_type":
        return _openstudiomodelhvac.SwimmingPoolIndoorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SwimmingPoolIndoorVector

# Register SwimmingPoolIndoorVector in _openstudiomodelhvac:
_openstudiomodelhvac.SwimmingPoolIndoorVector_swigregister(SwimmingPoolIndoorVector)

class OptionalSwimmingPoolIndoor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSwimmingPoolIndoor_swiginit(self, _openstudiomodelhvac.new_OptionalSwimmingPoolIndoor(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor_reset(self)

    def __ref__(self) -> "openstudio::model::SwimmingPoolIndoor":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor_isNull(self)

    def get(self) -> "openstudio::model::SwimmingPoolIndoor":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor_get(self)

    def set(self, t: "SwimmingPoolIndoor") -> "void":
        return _openstudiomodelhvac.OptionalSwimmingPoolIndoor_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSwimmingPoolIndoor

# Register OptionalSwimmingPoolIndoor in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSwimmingPoolIndoor_swigregister(OptionalSwimmingPoolIndoor)

class SetpointManagerFollowOutdoorAirTemperatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type") -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > > *":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_pop(self)

    def append(self, x: "SetpointManagerFollowOutdoorAirTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_size(self)

    def swap(self, v: "SetpointManagerFollowOutdoorAirTemperatureVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowOutdoorAirTemperatureVector(*args))

    def push_back(self, x: "SetpointManagerFollowOutdoorAirTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type", x: "SetpointManagerFollowOutdoorAirTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type", x: "SetpointManagerFollowOutdoorAirTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowOutdoorAirTemperatureVector

# Register SetpointManagerFollowOutdoorAirTemperatureVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_swigregister(SetpointManagerFollowOutdoorAirTemperatureVector)

class OptionalSetpointManagerFollowOutdoorAirTemperature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerFollowOutdoorAirTemperature(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerFollowOutdoorAirTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerFollowOutdoorAirTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_get(self)

    def set(self, t: "SetpointManagerFollowOutdoorAirTemperature") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowOutdoorAirTemperature

# Register OptionalSetpointManagerFollowOutdoorAirTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_swigregister(OptionalSetpointManagerFollowOutdoorAirTemperature)

class SetpointManagerFollowSystemNodeTemperatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type") -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > > *":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_pop(self)

    def append(self, x: "SetpointManagerFollowSystemNodeTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_size(self)

    def swap(self, v: "SetpointManagerFollowSystemNodeTemperatureVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowSystemNodeTemperatureVector(*args))

    def push_back(self, x: "SetpointManagerFollowSystemNodeTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type", x: "SetpointManagerFollowSystemNodeTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type", x: "SetpointManagerFollowSystemNodeTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowSystemNodeTemperatureVector

# Register SetpointManagerFollowSystemNodeTemperatureVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_swigregister(SetpointManagerFollowSystemNodeTemperatureVector)

class OptionalSetpointManagerFollowSystemNodeTemperature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerFollowSystemNodeTemperature(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerFollowSystemNodeTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerFollowSystemNodeTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_get(self)

    def set(self, t: "SetpointManagerFollowSystemNodeTemperature") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowSystemNodeTemperature

# Register OptionalSetpointManagerFollowSystemNodeTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_swigregister(OptionalSetpointManagerFollowSystemNodeTemperature)

class SetpointManagerMixedAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > > *":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_pop(self)

    def append(self, x: "SetpointManagerMixedAir") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_size(self)

    def swap(self, v: "SetpointManagerMixedAirVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMixedAirVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMixedAirVector(*args))

    def push_back(self, x: "SetpointManagerMixedAir") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type", x: "SetpointManagerMixedAir") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type", x: "SetpointManagerMixedAir") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":
        return _openstudiomodelhvac.SetpointManagerMixedAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMixedAirVector

# Register SetpointManagerMixedAirVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMixedAirVector_swigregister(SetpointManagerMixedAirVector)

class OptionalSetpointManagerMixedAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMixedAir_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMixedAir(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMixedAir":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMixedAir":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_get(self)

    def set(self, t: "SetpointManagerMixedAir") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMixedAir

# Register OptionalSetpointManagerMixedAir in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMixedAir_swigregister(OptionalSetpointManagerMixedAir)

class SetpointManagerMultiZoneCoolingAverageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneCoolingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneCoolingAverageVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneCoolingAverageVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneCoolingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type", x: "SetpointManagerMultiZoneCoolingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type", x: "SetpointManagerMultiZoneCoolingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneCoolingAverageVector

# Register SetpointManagerMultiZoneCoolingAverageVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_swigregister(SetpointManagerMultiZoneCoolingAverageVector)

class OptionalSetpointManagerMultiZoneCoolingAverage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneCoolingAverage(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneCoolingAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneCoolingAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_get(self)

    def set(self, t: "SetpointManagerMultiZoneCoolingAverage") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneCoolingAverage

# Register OptionalSetpointManagerMultiZoneCoolingAverage in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_swigregister(OptionalSetpointManagerMultiZoneCoolingAverage)

class SetpointManagerMultiZoneHeatingAverageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneHeatingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneHeatingAverageVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHeatingAverageVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneHeatingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type", x: "SetpointManagerMultiZoneHeatingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type", x: "SetpointManagerMultiZoneHeatingAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHeatingAverageVector

# Register SetpointManagerMultiZoneHeatingAverageVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_swigregister(SetpointManagerMultiZoneHeatingAverageVector)

class OptionalSetpointManagerMultiZoneHeatingAverage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHeatingAverage(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHeatingAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHeatingAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_get(self)

    def set(self, t: "SetpointManagerMultiZoneHeatingAverage") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHeatingAverage

# Register OptionalSetpointManagerMultiZoneHeatingAverage in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_swigregister(OptionalSetpointManagerMultiZoneHeatingAverage)

class SetpointManagerMultiZoneHumidityMaximumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneHumidityMaximumVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMaximumVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type", x: "SetpointManagerMultiZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type", x: "SetpointManagerMultiZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMaximumVector

# Register SetpointManagerMultiZoneHumidityMaximumVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_swigregister(SetpointManagerMultiZoneHumidityMaximumVector)

class OptionalSetpointManagerMultiZoneHumidityMaximum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHumidityMaximum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMaximum":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMaximum":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_get(self)

    def set(self, t: "SetpointManagerMultiZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHumidityMaximum

# Register OptionalSetpointManagerMultiZoneHumidityMaximum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_swigregister(OptionalSetpointManagerMultiZoneHumidityMaximum)

class SetpointManagerMultiZoneHumidityMinimumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneHumidityMinimumVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMinimumVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type", x: "SetpointManagerMultiZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type", x: "SetpointManagerMultiZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMinimumVector

# Register SetpointManagerMultiZoneHumidityMinimumVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_swigregister(SetpointManagerMultiZoneHumidityMinimumVector)

class OptionalSetpointManagerMultiZoneHumidityMinimum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHumidityMinimum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMinimum":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMinimum":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_get(self)

    def set(self, t: "SetpointManagerMultiZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHumidityMinimum

# Register OptionalSetpointManagerMultiZoneHumidityMinimum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_swigregister(OptionalSetpointManagerMultiZoneHumidityMinimum)

class SetpointManagerMultiZoneMaximumHumidityAverageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneMaximumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneMaximumHumidityAverageVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneMaximumHumidityAverageVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneMaximumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type", x: "SetpointManagerMultiZoneMaximumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type", x: "SetpointManagerMultiZoneMaximumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMaximumHumidityAverageVector

# Register SetpointManagerMultiZoneMaximumHumidityAverageVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_swigregister(SetpointManagerMultiZoneMaximumHumidityAverageVector)

class OptionalSetpointManagerMultiZoneMaximumHumidityAverage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneMaximumHumidityAverage(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_get(self)

    def set(self, t: "SetpointManagerMultiZoneMaximumHumidityAverage") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneMaximumHumidityAverage

# Register OptionalSetpointManagerMultiZoneMaximumHumidityAverage in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_swigregister(OptionalSetpointManagerMultiZoneMaximumHumidityAverage)

class SetpointManagerMultiZoneMinimumHumidityAverageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > > *":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type", j: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_pop(self)

    def append(self, x: "SetpointManagerMultiZoneMinimumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_size(self)

    def swap(self, v: "SetpointManagerMultiZoneMinimumHumidityAverageVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneMinimumHumidityAverageVector(*args))

    def push_back(self, x: "SetpointManagerMultiZoneMinimumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type", x: "SetpointManagerMultiZoneMinimumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type", x: "SetpointManagerMultiZoneMinimumHumidityAverage") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMinimumHumidityAverageVector

# Register SetpointManagerMultiZoneMinimumHumidityAverageVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_swigregister(SetpointManagerMultiZoneMinimumHumidityAverageVector)

class OptionalSetpointManagerMultiZoneMinimumHumidityAverage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneMinimumHumidityAverage(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_get(self)

    def set(self, t: "SetpointManagerMultiZoneMinimumHumidityAverage") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneMinimumHumidityAverage

# Register OptionalSetpointManagerMultiZoneMinimumHumidityAverage in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_swigregister(OptionalSetpointManagerMultiZoneMinimumHumidityAverage)

class SetpointManagerOutdoorAirPretreatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type", j: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > > *":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type", j: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_pop(self)

    def append(self, x: "SetpointManagerOutdoorAirPretreat") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_size(self)

    def swap(self, v: "SetpointManagerOutdoorAirPretreatVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerOutdoorAirPretreatVector(*args))

    def push_back(self, x: "SetpointManagerOutdoorAirPretreat") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type", x: "SetpointManagerOutdoorAirPretreat") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type", x: "SetpointManagerOutdoorAirPretreat") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirPretreatVector

# Register SetpointManagerOutdoorAirPretreatVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_swigregister(SetpointManagerOutdoorAirPretreatVector)

class OptionalSetpointManagerOutdoorAirPretreat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerOutdoorAirPretreat(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerOutdoorAirPretreat":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerOutdoorAirPretreat":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_get(self)

    def set(self, t: "SetpointManagerOutdoorAirPretreat") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerOutdoorAirPretreat

# Register OptionalSetpointManagerOutdoorAirPretreat in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_swigregister(OptionalSetpointManagerOutdoorAirPretreat)

class SetpointManagerOutdoorAirResetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type", j: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > > *":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type", j: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_pop(self)

    def append(self, x: "SetpointManagerOutdoorAirReset") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_size(self)

    def swap(self, v: "SetpointManagerOutdoorAirResetVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerOutdoorAirResetVector(*args))

    def push_back(self, x: "SetpointManagerOutdoorAirReset") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type", x: "SetpointManagerOutdoorAirReset") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type", x: "SetpointManagerOutdoorAirReset") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirResetVector

# Register SetpointManagerOutdoorAirResetVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_swigregister(SetpointManagerOutdoorAirResetVector)

class OptionalSetpointManagerOutdoorAirReset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerOutdoorAirReset(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerOutdoorAirReset":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerOutdoorAirReset":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_get(self)

    def set(self, t: "SetpointManagerOutdoorAirReset") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerOutdoorAirReset

# Register OptionalSetpointManagerOutdoorAirReset in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_swigregister(OptionalSetpointManagerOutdoorAirReset)

class SetpointManagerScheduledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerScheduled >::difference_type", j: "std::vector< openstudio::model::SetpointManagerScheduled >::difference_type") -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > > *":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerScheduled >::difference_type", j: "std::vector< openstudio::model::SetpointManagerScheduled >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_pop(self)

    def append(self, x: "SetpointManagerScheduled") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_size(self)

    def swap(self, v: "SetpointManagerScheduledVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerScheduledVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerScheduledVector(*args))

    def push_back(self, x: "SetpointManagerScheduled") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerScheduled >::size_type", x: "SetpointManagerScheduled") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerScheduled >::size_type", x: "SetpointManagerScheduled") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerScheduled >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledVector

# Register SetpointManagerScheduledVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerScheduledVector_swigregister(SetpointManagerScheduledVector)

class OptionalSetpointManagerScheduled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerScheduled_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerScheduled(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerScheduled":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerScheduled":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_get(self)

    def set(self, t: "SetpointManagerScheduled") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerScheduled

# Register OptionalSetpointManagerScheduled in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerScheduled_swigregister(OptionalSetpointManagerScheduled)

class SetpointManagerScheduledDualSetpointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type", j: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type") -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > > *":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type", j: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_pop(self)

    def append(self, x: "SetpointManagerScheduledDualSetpoint") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_size(self)

    def swap(self, v: "SetpointManagerScheduledDualSetpointVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerScheduledDualSetpointVector(*args))

    def push_back(self, x: "SetpointManagerScheduledDualSetpoint") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type", x: "SetpointManagerScheduledDualSetpoint") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type", x: "SetpointManagerScheduledDualSetpoint") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledDualSetpointVector

# Register SetpointManagerScheduledDualSetpointVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_swigregister(SetpointManagerScheduledDualSetpointVector)

class OptionalSetpointManagerScheduledDualSetpoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerScheduledDualSetpoint(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerScheduledDualSetpoint":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerScheduledDualSetpoint":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_get(self)

    def set(self, t: "SetpointManagerScheduledDualSetpoint") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerScheduledDualSetpoint

# Register OptionalSetpointManagerScheduledDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_swigregister(OptionalSetpointManagerScheduledDualSetpoint)

class SetpointManagerSingleZoneHumidityMaximumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneHumidityMaximumVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMaximumVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type", x: "SetpointManagerSingleZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type", x: "SetpointManagerSingleZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMaximumVector

# Register SetpointManagerSingleZoneHumidityMaximumVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_swigregister(SetpointManagerSingleZoneHumidityMaximumVector)

class OptionalSetpointManagerSingleZoneHumidityMaximum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHumidityMaximum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMaximum":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMaximum":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_get(self)

    def set(self, t: "SetpointManagerSingleZoneHumidityMaximum") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHumidityMaximum

# Register OptionalSetpointManagerSingleZoneHumidityMaximum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_swigregister(OptionalSetpointManagerSingleZoneHumidityMaximum)

class SetpointManagerSingleZoneHumidityMinimumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneHumidityMinimumVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMinimumVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type", x: "SetpointManagerSingleZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type", x: "SetpointManagerSingleZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMinimumVector

# Register SetpointManagerSingleZoneHumidityMinimumVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_swigregister(SetpointManagerSingleZoneHumidityMinimumVector)

class OptionalSetpointManagerSingleZoneHumidityMinimum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHumidityMinimum(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMinimum":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMinimum":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_get(self)

    def set(self, t: "SetpointManagerSingleZoneHumidityMinimum") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHumidityMinimum

# Register OptionalSetpointManagerSingleZoneHumidityMinimum in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_swigregister(OptionalSetpointManagerSingleZoneHumidityMinimum)

class SetpointManagerSingleZoneOneStageCoolingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneOneStageCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneOneStageCoolingVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageCoolingVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneOneStageCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type", x: "SetpointManagerSingleZoneOneStageCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type", x: "SetpointManagerSingleZoneOneStageCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageCoolingVector

# Register SetpointManagerSingleZoneOneStageCoolingVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_swigregister(SetpointManagerSingleZoneOneStageCoolingVector)

class OptionalSetpointManagerSingleZoneOneStageCooling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneOneStageCooling(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageCooling":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageCooling":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_get(self)

    def set(self, t: "SetpointManagerSingleZoneOneStageCooling") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneOneStageCooling

# Register OptionalSetpointManagerSingleZoneOneStageCooling in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_swigregister(OptionalSetpointManagerSingleZoneOneStageCooling)

class SetpointManagerSingleZoneOneStageHeatingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneOneStageHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneOneStageHeatingVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageHeatingVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneOneStageHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type", x: "SetpointManagerSingleZoneOneStageHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type", x: "SetpointManagerSingleZoneOneStageHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageHeatingVector

# Register SetpointManagerSingleZoneOneStageHeatingVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_swigregister(SetpointManagerSingleZoneOneStageHeatingVector)

class OptionalSetpointManagerSingleZoneOneStageHeating(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneOneStageHeating(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageHeating":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageHeating":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_get(self)

    def set(self, t: "SetpointManagerSingleZoneOneStageHeating") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneOneStageHeating

# Register OptionalSetpointManagerSingleZoneOneStageHeating in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_swigregister(OptionalSetpointManagerSingleZoneOneStageHeating)

class SetpointManagerSingleZoneCoolingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneCoolingVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneCoolingVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type", x: "SetpointManagerSingleZoneCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type", x: "SetpointManagerSingleZoneCooling") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneCoolingVector

# Register SetpointManagerSingleZoneCoolingVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_swigregister(SetpointManagerSingleZoneCoolingVector)

class OptionalSetpointManagerSingleZoneCooling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneCooling(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneCooling":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneCooling":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_get(self)

    def set(self, t: "SetpointManagerSingleZoneCooling") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneCooling

# Register OptionalSetpointManagerSingleZoneCooling in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_swigregister(OptionalSetpointManagerSingleZoneCooling)

class SetpointManagerSingleZoneHeatingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneHeatingVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHeatingVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type", x: "SetpointManagerSingleZoneHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type", x: "SetpointManagerSingleZoneHeating") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHeatingVector

# Register SetpointManagerSingleZoneHeatingVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_swigregister(SetpointManagerSingleZoneHeatingVector)

class OptionalSetpointManagerSingleZoneHeating(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHeating(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHeating":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHeating":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_get(self)

    def set(self, t: "SetpointManagerSingleZoneHeating") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHeating

# Register OptionalSetpointManagerSingleZoneHeating in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_swigregister(OptionalSetpointManagerSingleZoneHeating)

class SetpointManagerSingleZoneReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type") -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > > *":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type", j: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_pop(self)

    def append(self, x: "SetpointManagerSingleZoneReheat") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_size(self)

    def swap(self, v: "SetpointManagerSingleZoneReheatVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneReheatVector(*args))

    def push_back(self, x: "SetpointManagerSingleZoneReheat") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type", x: "SetpointManagerSingleZoneReheat") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type", x: "SetpointManagerSingleZoneReheat") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneReheatVector

# Register SetpointManagerSingleZoneReheatVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_swigregister(SetpointManagerSingleZoneReheatVector)

class OptionalSetpointManagerSingleZoneReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneReheat":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerSingleZoneReheat":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_get(self)

    def set(self, t: "SetpointManagerSingleZoneReheat") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneReheat

# Register OptionalSetpointManagerSingleZoneReheat in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_swigregister(OptionalSetpointManagerSingleZoneReheat)

class SetpointManagerWarmestVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerWarmest >::difference_type", j: "std::vector< openstudio::model::SetpointManagerWarmest >::difference_type") -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > > *":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerWarmest >::difference_type", j: "std::vector< openstudio::model::SetpointManagerWarmest >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_pop(self)

    def append(self, x: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_size(self)

    def swap(self, v: "SetpointManagerWarmestVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerWarmestVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerWarmestVector(*args))

    def push_back(self, x: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerWarmest >::size_type", x: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerWarmest >::size_type", x: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerWarmest >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestVector

# Register SetpointManagerWarmestVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerWarmestVector_swigregister(SetpointManagerWarmestVector)

class OptionalSetpointManagerWarmest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerWarmest_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerWarmest(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerWarmest":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerWarmest":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_get(self)

    def set(self, t: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerWarmest

# Register OptionalSetpointManagerWarmest in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerWarmest_swigregister(OptionalSetpointManagerWarmest)

class SetpointManagerWarmestTemperatureFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type", j: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type") -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > > *":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type", j: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_pop(self)

    def append(self, x: "SetpointManagerWarmestTemperatureFlow") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_size(self)

    def swap(self, v: "SetpointManagerWarmestTemperatureFlowVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerWarmestTemperatureFlowVector(*args))

    def push_back(self, x: "SetpointManagerWarmestTemperatureFlow") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type", x: "SetpointManagerWarmestTemperatureFlow") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type", x: "SetpointManagerWarmestTemperatureFlow") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestTemperatureFlowVector

# Register SetpointManagerWarmestTemperatureFlowVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_swigregister(SetpointManagerWarmestTemperatureFlowVector)

class OptionalSetpointManagerWarmestTemperatureFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerWarmestTemperatureFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerWarmestTemperatureFlow":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerWarmestTemperatureFlow":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_get(self)

    def set(self, t: "SetpointManagerWarmestTemperatureFlow") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerWarmestTemperatureFlow

# Register OptionalSetpointManagerWarmestTemperatureFlow in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_swigregister(OptionalSetpointManagerWarmestTemperatureFlow)

class SetpointManagerColdestVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerColdestVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdestVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdestVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":
        return _openstudiomodelhvac.SetpointManagerColdestVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerColdest >::difference_type", j: "std::vector< openstudio::model::SetpointManagerColdest >::difference_type") -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > > *":
        return _openstudiomodelhvac.SetpointManagerColdestVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerColdest >::difference_type", j: "std::vector< openstudio::model::SetpointManagerColdest >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerColdestVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type":
        return _openstudiomodelhvac.SetpointManagerColdestVector_pop(self)

    def append(self, x: "SetpointManagerColdest") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdestVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":
        return _openstudiomodelhvac.SetpointManagerColdestVector_size(self)

    def swap(self, v: "SetpointManagerColdestVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":
        return _openstudiomodelhvac.SetpointManagerColdestVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":
        return _openstudiomodelhvac.SetpointManagerColdestVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerColdestVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerColdestVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerColdestVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":
        return _openstudiomodelhvac.SetpointManagerColdestVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerColdestVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerColdestVector(*args))

    def push_back(self, x: "SetpointManagerColdest") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerColdestVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerColdestVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerColdest >::size_type", x: "SetpointManagerColdest") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerColdest >::size_type", x: "SetpointManagerColdest") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerColdest >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerColdestVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":
        return _openstudiomodelhvac.SetpointManagerColdestVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerColdestVector

# Register SetpointManagerColdestVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerColdestVector_swigregister(SetpointManagerColdestVector)

class OptionalSetpointManagerColdest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerColdest_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerColdest(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerColdest":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerColdest":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest_get(self)

    def set(self, t: "SetpointManagerColdest") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerColdest_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerColdest

# Register OptionalSetpointManagerColdest in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerColdest_swigregister(OptionalSetpointManagerColdest)

class SetpointManagerFollowGroundTemperatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type") -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > > *":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type", j: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_pop(self)

    def append(self, x: "SetpointManagerFollowGroundTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_size(self)

    def swap(self, v: "SetpointManagerFollowGroundTemperatureVector") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::reverse_iterator":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::allocator_type":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowGroundTemperatureVector(*args))

    def push_back(self, x: "SetpointManagerFollowGroundTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type", x: "SetpointManagerFollowGroundTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type", x: "SetpointManagerFollowGroundTemperature") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type") -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowGroundTemperatureVector

# Register SetpointManagerFollowGroundTemperatureVector in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_swigregister(SetpointManagerFollowGroundTemperatureVector)

class OptionalSetpointManagerFollowGroundTemperature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_swiginit(self, _openstudiomodelhvac.new_OptionalSetpointManagerFollowGroundTemperature(*args))

    def reset(self) -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SetpointManagerFollowGroundTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_isNull(self)

    def get(self) -> "openstudio::model::SetpointManagerFollowGroundTemperature":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_get(self)

    def set(self, t: "SetpointManagerFollowGroundTemperature") -> "void":
        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowGroundTemperature

# Register OptionalSetpointManagerFollowGroundTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_swigregister(OptionalSetpointManagerFollowGroundTemperature)

class PortList(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, comp: "HVACComponent"):
        _openstudiomodelhvac.PortList_swiginit(self, _openstudiomodelhvac.new_PortList(comp))
    __swig_destroy__ = _openstudiomodelhvac.delete_PortList

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.PortList_iddObjectType()

    def port(self, portIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.PortList_port(self, portIndex)

    def portIndex(self, port: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.PortList_portIndex(self, port)

    def nextPort(self) -> "unsigned int":
        return _openstudiomodelhvac.PortList_nextPort(self)

    def modelObject(self, portIndex: "unsigned int") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.PortList_modelObject(self, portIndex)

    def lastModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.PortList_lastModelObject(self)

    def modelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.PortList_modelObjects(self)

    def portIndexForModelObject(self, modelObject: "ModelObject") -> "unsigned int":
        return _openstudiomodelhvac.PortList_portIndexForModelObject(self, modelObject)

    def nextPortIndex(self) -> "unsigned int":
        return _openstudiomodelhvac.PortList_nextPortIndex(self)

    def thermalZone(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.PortList_thermalZone(self)

    def airLoopHVACPort(self) -> "unsigned int":
        return _openstudiomodelhvac.PortList_airLoopHVACPort(self)

    def airLoopHVACPorts(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelhvac.PortList_airLoopHVACPorts(self)

    def airLoopHVACPortIndex(self) -> "unsigned int":
        return _openstudiomodelhvac.PortList_airLoopHVACPortIndex(self)

    def airLoopHVACPortIndexes(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelhvac.PortList_airLoopHVACPortIndexes(self)

    def airLoopHVACModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.PortList_airLoopHVACModelObject(self)

    def airLoopHVACModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.PortList_airLoopHVACModelObjects(self)

# Register PortList in _openstudiomodelhvac:
_openstudiomodelhvac.PortList_swigregister(PortList)

def PortList_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.PortList_iddObjectType()


def toPortList(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PortList >":
    return _openstudiomodelhvac.toPortList(idfObject)

def getPortList(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PortList >":
    return _openstudiomodelhvac.getPortList(t_model, t_handle)

def getPortLists(t_model: "Model") -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > >":
    return _openstudiomodelhvac.getPortLists(t_model)

def getPortListByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PortList >":
    return _openstudiomodelhvac.getPortListByName(t_model, t_name)

def getPortListsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > >":
    return _openstudiomodelhvac.getPortListsByName(t_model, t_name, t_exactMatch)

def _to_PortList(self) -> OptionalPortList:
    return toPortList(self)
openstudioutilitiesidf.IdfObject.to_PortList = _to_PortList

def _getPortList(self, t_handle: "UUID") -> OptionalPortList:
    return getPortList(self, t_handle)
Model.getPortList = _getPortList

def _getPortList(self, t_handle_str: str) -> OptionalPortList:
    return getPortList(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPortList = _getPortList

def _getPortLists(self) -> PortListVector:
    return getPortLists(self)
Model.getPortLists = _getPortLists

def _getPortListByName(self, t_name: str) -> OptionalPortList:
    return getPortListByName(self, t_name)
Model.getPortListByName = _getPortListByName

def _getPortListsByName(self, t_name: str, t_exactMatch: bool) -> PortListVector:
    return getPortListsByName(self, t_name, t_exactMatch)
Model.getPortListsByName = _getPortListsByName

class Loop(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_Loop

    def supplyInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.Loop_supplyInletNode(self)

    def supplyOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.Loop_supplyOutletNode(self)

    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.Loop_supplyOutletNodes(self)

    def demandInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.Loop_demandInletNode(self)

    def demandOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.Loop_demandOutletNode(self)

    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.Loop_demandInletNodes(self)

    def supplyComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Loop_supplyComponents(self, *args)

    def demandComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Loop_demandComponents(self, *args)

    def components(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Loop_components(self, *args)

    def component(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Loop_component(self, handle)

    def demandComponent(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Loop_demandComponent(self, handle)

    def supplyComponent(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Loop_supplyComponent(self, handle)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.Loop_remove(self)

    def demandSplitter(self) -> "openstudio::model::Splitter":
        return _openstudiomodelhvac.Loop_demandSplitter(self)

    def demandMixer(self) -> "openstudio::model::Mixer":
        return _openstudiomodelhvac.Loop_demandMixer(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.Loop_clone(self, model)

    def children(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Loop_children(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.Loop_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.Loop_applySizingValues(self)

# Register Loop in _openstudiomodelhvac:
_openstudiomodelhvac.Loop_swigregister(Loop)


def toLoop(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Loop >":
    return _openstudiomodelhvac.toLoop(idfObject)

def getLoop(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Loop >":
    return _openstudiomodelhvac.getLoop(t_model, t_handle)

def getLoops(t_model: "Model") -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > >":
    return _openstudiomodelhvac.getLoops(t_model)

def getLoopByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Loop >":
    return _openstudiomodelhvac.getLoopByName(t_model, t_name)

def getLoopsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > >":
    return _openstudiomodelhvac.getLoopsByName(t_model, t_name, t_exactMatch)

def _to_Loop(self) -> OptionalLoop:
    return toLoop(self)
openstudioutilitiesidf.IdfObject.to_Loop = _to_Loop

def _getLoop(self, t_handle: "UUID") -> OptionalLoop:
    return getLoop(self, t_handle)
Model.getLoop = _getLoop

def _getLoop(self, t_handle_str: str) -> OptionalLoop:
    return getLoop(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLoop = _getLoop

def _getLoops(self) -> LoopVector:
    return getLoops(self)
Model.getLoops = _getLoops

def _getLoopByName(self, t_name: str) -> OptionalLoop:
    return getLoopByName(self, t_name)
Model.getLoopByName = _getLoopByName

def _getLoopsByName(self, t_name: str, t_exactMatch: bool) -> LoopVector:
    return getLoopsByName(self, t_name, t_exactMatch)
Model.getLoopsByName = _getLoopsByName

class HVACComponent(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_HVACComponent

    def loop(self) -> "boost::optional< openstudio::model::Loop >":
        return _openstudiomodelhvac.HVACComponent_loop(self)

    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.HVACComponent_airLoopHVAC(self)

    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.HVACComponent_plantLoop(self)

    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
        return _openstudiomodelhvac.HVACComponent_airLoopHVACOutdoorAirSystem(self)

    def containingHVACComponent(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelhvac.HVACComponent_containingHVACComponent(self)

    def containingZoneHVACComponent(self) -> "boost::optional< openstudio::model::ZoneHVACComponent >":
        return _openstudiomodelhvac.HVACComponent_containingZoneHVACComponent(self)

    def containingStraightComponent(self) -> "boost::optional< openstudio::model::StraightComponent >":
        return _openstudiomodelhvac.HVACComponent_containingStraightComponent(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.HVACComponent_addToNode(self, node)

    def addToSplitter(self, splitter: "Splitter") -> "bool":
        return _openstudiomodelhvac.HVACComponent_addToSplitter(self, splitter)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.HVACComponent_disconnect(self)

    def isRemovable(self) -> "bool":
        return _openstudiomodelhvac.HVACComponent_isRemovable(self)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.HVACComponent_remove(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.HVACComponent_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.HVACComponent_applySizingValues(self)

# Register HVACComponent in _openstudiomodelhvac:
_openstudiomodelhvac.HVACComponent_swigregister(HVACComponent)


def toHVACComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HVACComponent >":
    return _openstudiomodelhvac.toHVACComponent(idfObject)

def getHVACComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HVACComponent >":
    return _openstudiomodelhvac.getHVACComponent(t_model, t_handle)

def getHVACComponents(t_model: "Model") -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":
    return _openstudiomodelhvac.getHVACComponents(t_model)

def getHVACComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HVACComponent >":
    return _openstudiomodelhvac.getHVACComponentByName(t_model, t_name)

def getHVACComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":
    return _openstudiomodelhvac.getHVACComponentsByName(t_model, t_name, t_exactMatch)

def _to_HVACComponent(self) -> OptionalHVACComponent:
    return toHVACComponent(self)
openstudioutilitiesidf.IdfObject.to_HVACComponent = _to_HVACComponent

def _getHVACComponent(self, t_handle: "UUID") -> OptionalHVACComponent:
    return getHVACComponent(self, t_handle)
Model.getHVACComponent = _getHVACComponent

def _getHVACComponent(self, t_handle_str: str) -> OptionalHVACComponent:
    return getHVACComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHVACComponent = _getHVACComponent

def _getHVACComponents(self) -> HVACComponentVector:
    return getHVACComponents(self)
Model.getHVACComponents = _getHVACComponents

def _getHVACComponentByName(self, t_name: str) -> OptionalHVACComponent:
    return getHVACComponentByName(self, t_name)
Model.getHVACComponentByName = _getHVACComponentByName

def _getHVACComponentsByName(self, t_name: str, t_exactMatch: bool) -> HVACComponentVector:
    return getHVACComponentsByName(self, t_name, t_exactMatch)
Model.getHVACComponentsByName = _getHVACComponentsByName

class ZoneHVACComponent(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACComponent

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ZoneHVACComponent_inletPort(self)

    def inletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.ZoneHVACComponent_inletNode(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ZoneHVACComponent_outletPort(self)

    def outletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.ZoneHVACComponent_outletNode(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.ZoneHVACComponent_thermalZone(self)

    def addToThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponent_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponent_removeFromThermalZone(self)

    def setReturnPlenum(self, plenumZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponent_setReturnPlenum(self, plenumZone)

    def removeReturnPlenum(self) -> "void":
        return _openstudiomodelhvac.ZoneHVACComponent_removeReturnPlenum(self)

    def returnPlenum(self) -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":
        return _openstudiomodelhvac.ZoneHVACComponent_returnPlenum(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponent_addToNode(self, node)

    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.ZoneHVACComponent_airLoopHVAC(self)

    def removeFromAirLoopHVAC(self) -> "bool":
        return _openstudiomodelhvac.ZoneHVACComponent_removeFromAirLoopHVAC(self)

    def airInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.ZoneHVACComponent_airInletModelObject(self)

    def airOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.ZoneHVACComponent_airOutletModelObject(self)

# Register ZoneHVACComponent in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneHVACComponent_swigregister(ZoneHVACComponent)


def toZoneHVACComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneHVACComponent >":
    return _openstudiomodelhvac.toZoneHVACComponent(idfObject)

def getZoneHVACComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneHVACComponent >":
    return _openstudiomodelhvac.getZoneHVACComponent(t_model, t_handle)

def getZoneHVACComponents(t_model: "Model") -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > >":
    return _openstudiomodelhvac.getZoneHVACComponents(t_model)

def getZoneHVACComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneHVACComponent >":
    return _openstudiomodelhvac.getZoneHVACComponentByName(t_model, t_name)

def getZoneHVACComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > >":
    return _openstudiomodelhvac.getZoneHVACComponentsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACComponent(self) -> OptionalZoneHVACComponent:
    return toZoneHVACComponent(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACComponent = _to_ZoneHVACComponent

def _getZoneHVACComponent(self, t_handle: "UUID") -> OptionalZoneHVACComponent:
    return getZoneHVACComponent(self, t_handle)
Model.getZoneHVACComponent = _getZoneHVACComponent

def _getZoneHVACComponent(self, t_handle_str: str) -> OptionalZoneHVACComponent:
    return getZoneHVACComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneHVACComponent = _getZoneHVACComponent

def _getZoneHVACComponents(self) -> ZoneHVACComponentVector:
    return getZoneHVACComponents(self)
Model.getZoneHVACComponents = _getZoneHVACComponents

def _getZoneHVACComponentByName(self, t_name: str) -> OptionalZoneHVACComponent:
    return getZoneHVACComponentByName(self, t_name)
Model.getZoneHVACComponentByName = _getZoneHVACComponentByName

def _getZoneHVACComponentsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACComponentVector:
    return getZoneHVACComponentsByName(self, t_name, t_exactMatch)
Model.getZoneHVACComponentsByName = _getZoneHVACComponentsByName

class ZoneHVACEquipmentList(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thermalZone: "ThermalZone"):
        _openstudiomodelhvac.ZoneHVACEquipmentList_swiginit(self, _openstudiomodelhvac.new_ZoneHVACEquipmentList(thermalZone))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACEquipmentList

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType()

    @staticmethod
    def loadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_loadDistributionSchemeValues()

    @staticmethod
    def validLoadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_validLoadDistributionSchemeValues()

    def loadDistributionScheme(self) -> "std::string":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_loadDistributionScheme(self)

    def setLoadDistributionScheme(self, scheme: "std::string") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setLoadDistributionScheme(self, scheme)

    def addEquipment(self, equipment: "ModelObject") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_addEquipment(self, equipment)

    def removeEquipment(self, equipment: "ModelObject") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_removeEquipment(self, equipment)

    def setCoolingPriority(self, equipment: "ModelObject", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setCoolingPriority(self, equipment, priority)

    def setHeatingPriority(self, equipment: "ModelObject", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setHeatingPriority(self, equipment, priority)

    def equipment(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipment(self)

    def equipmentInHeatingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipmentInHeatingOrder(self)

    def equipmentInCoolingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipmentInCoolingOrder(self)

    def thermalZone(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_thermalZone(self)

    def heatingPriority(self, equipment: "ModelObject") -> "unsigned int":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_heatingPriority(self, equipment)

    def coolingPriority(self, equipment: "ModelObject") -> "unsigned int":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_coolingPriority(self, equipment)

    def sequentialCoolingFraction(self, equipment: "ModelObject") -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_sequentialCoolingFraction(self, equipment)

    def sequentialCoolingFractionSchedule(self, equipment: "ModelObject") -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_sequentialCoolingFractionSchedule(self, equipment)

    def sequentialHeatingFraction(self, equipment: "ModelObject") -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_sequentialHeatingFraction(self, equipment)

    def sequentialHeatingFractionSchedule(self, equipment: "ModelObject") -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_sequentialHeatingFractionSchedule(self, equipment)

    def setSequentialCoolingFraction(self, equipment: "ModelObject", fraction: "double") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setSequentialCoolingFraction(self, equipment, fraction)

    def setSequentialCoolingFractionSchedule(self, equipment: "ModelObject", schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setSequentialCoolingFractionSchedule(self, equipment, schedule)

    def setSequentialHeatingFraction(self, equipment: "ModelObject", fraction: "double") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setSequentialHeatingFraction(self, equipment, fraction)

    def setSequentialHeatingFractionSchedule(self, equipment: "ModelObject", schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneHVACEquipmentList_setSequentialHeatingFractionSchedule(self, equipment, schedule)

# Register ZoneHVACEquipmentList in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneHVACEquipmentList_swigregister(ZoneHVACEquipmentList)

def ZoneHVACEquipmentList_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType()

def ZoneHVACEquipmentList_loadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ZoneHVACEquipmentList_loadDistributionSchemeValues()

def ZoneHVACEquipmentList_validLoadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ZoneHVACEquipmentList_validLoadDistributionSchemeValues()


def toZoneHVACEquipmentList(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":
    return _openstudiomodelhvac.toZoneHVACEquipmentList(idfObject)

def getZoneHVACEquipmentList(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":
    return _openstudiomodelhvac.getZoneHVACEquipmentList(t_model, t_handle)

def getZoneHVACEquipmentLists(t_model: "Model") -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > >":
    return _openstudiomodelhvac.getZoneHVACEquipmentLists(t_model)

def getZoneHVACEquipmentListByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":
    return _openstudiomodelhvac.getZoneHVACEquipmentListByName(t_model, t_name)

def getZoneHVACEquipmentListsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > >":
    return _openstudiomodelhvac.getZoneHVACEquipmentListsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACEquipmentList(self) -> OptionalZoneHVACEquipmentList:
    return toZoneHVACEquipmentList(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACEquipmentList = _to_ZoneHVACEquipmentList

def _getZoneHVACEquipmentList(self, t_handle: "UUID") -> OptionalZoneHVACEquipmentList:
    return getZoneHVACEquipmentList(self, t_handle)
Model.getZoneHVACEquipmentList = _getZoneHVACEquipmentList

def _getZoneHVACEquipmentList(self, t_handle_str: str) -> OptionalZoneHVACEquipmentList:
    return getZoneHVACEquipmentList(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneHVACEquipmentList = _getZoneHVACEquipmentList

def _getZoneHVACEquipmentLists(self) -> ZoneHVACEquipmentListVector:
    return getZoneHVACEquipmentLists(self)
Model.getZoneHVACEquipmentLists = _getZoneHVACEquipmentLists

def _getZoneHVACEquipmentListByName(self, t_name: str) -> OptionalZoneHVACEquipmentList:
    return getZoneHVACEquipmentListByName(self, t_name)
Model.getZoneHVACEquipmentListByName = _getZoneHVACEquipmentListByName

def _getZoneHVACEquipmentListsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACEquipmentListVector:
    return getZoneHVACEquipmentListsByName(self, t_name, t_exactMatch)
Model.getZoneHVACEquipmentListsByName = _getZoneHVACEquipmentListsByName

class Thermostat(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_Thermostat

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.Thermostat_thermalZone(self)

# Register Thermostat in _openstudiomodelhvac:
_openstudiomodelhvac.Thermostat_swigregister(Thermostat)


def toThermostat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Thermostat >":
    return _openstudiomodelhvac.toThermostat(idfObject)

def getThermostat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Thermostat >":
    return _openstudiomodelhvac.getThermostat(t_model, t_handle)

def getThermostats(t_model: "Model") -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > >":
    return _openstudiomodelhvac.getThermostats(t_model)

def getThermostatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Thermostat >":
    return _openstudiomodelhvac.getThermostatByName(t_model, t_name)

def getThermostatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > >":
    return _openstudiomodelhvac.getThermostatsByName(t_model, t_name, t_exactMatch)

def _to_Thermostat(self) -> OptionalThermostat:
    return toThermostat(self)
openstudioutilitiesidf.IdfObject.to_Thermostat = _to_Thermostat

def _getThermostat(self, t_handle: "UUID") -> OptionalThermostat:
    return getThermostat(self, t_handle)
Model.getThermostat = _getThermostat

def _getThermostat(self, t_handle_str: str) -> OptionalThermostat:
    return getThermostat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermostat = _getThermostat

def _getThermostats(self) -> ThermostatVector:
    return getThermostats(self)
Model.getThermostats = _getThermostats

def _getThermostatByName(self, t_name: str) -> OptionalThermostat:
    return getThermostatByName(self, t_name)
Model.getThermostatByName = _getThermostatByName

def _getThermostatsByName(self, t_name: str, t_exactMatch: bool) -> ThermostatVector:
    return getThermostatsByName(self, t_name, t_exactMatch)
Model.getThermostatsByName = _getThermostatsByName

class SetpointManager(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManager

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManager_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManager_controlVariable(self)

    def isAllowedOnPlantLoop(self) -> "bool":
        return _openstudiomodelhvac.SetpointManager_isAllowedOnPlantLoop(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManager_setControlVariable(self, controlVariable)

# Register SetpointManager in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManager_swigregister(SetpointManager)


def toSetpointManager(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManager >":
    return _openstudiomodelhvac.toSetpointManager(idfObject)

def getSetpointManager(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManager >":
    return _openstudiomodelhvac.getSetpointManager(t_model, t_handle)

def getSetpointManagers(t_model: "Model") -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":
    return _openstudiomodelhvac.getSetpointManagers(t_model)

def getSetpointManagerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManager >":
    return _openstudiomodelhvac.getSetpointManagerByName(t_model, t_name)

def getSetpointManagersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":
    return _openstudiomodelhvac.getSetpointManagersByName(t_model, t_name, t_exactMatch)

def _to_SetpointManager(self) -> OptionalSetpointManager:
    return toSetpointManager(self)
openstudioutilitiesidf.IdfObject.to_SetpointManager = _to_SetpointManager

def _getSetpointManager(self, t_handle: "UUID") -> OptionalSetpointManager:
    return getSetpointManager(self, t_handle)
Model.getSetpointManager = _getSetpointManager

def _getSetpointManager(self, t_handle_str: str) -> OptionalSetpointManager:
    return getSetpointManager(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManager = _getSetpointManager

def _getSetpointManagers(self) -> SetpointManagerVector:
    return getSetpointManagers(self)
Model.getSetpointManagers = _getSetpointManagers

def _getSetpointManagerByName(self, t_name: str) -> OptionalSetpointManager:
    return getSetpointManagerByName(self, t_name)
Model.getSetpointManagerByName = _getSetpointManagerByName

def _getSetpointManagersByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerVector:
    return getSetpointManagersByName(self, t_name, t_exactMatch)
Model.getSetpointManagersByName = _getSetpointManagersByName

class StraightComponent(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.StraightComponent_swiginit(self, _openstudiomodelhvac.new_StraightComponent(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_StraightComponent

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.StraightComponent_remove(self)

    def removeFromLoop(self) -> "bool":
        return _openstudiomodelhvac.StraightComponent_removeFromLoop(self)

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.StraightComponent_inletPort(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.StraightComponent_outletPort(self)

    def inletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.StraightComponent_inletModelObject(self)

    def outletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.StraightComponent_outletModelObject(self)

    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.StraightComponent_airLoopHVAC(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.StraightComponent_addToNode(self, node)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.StraightComponent_clone(self, model)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.StraightComponent_disconnect(self)

# Register StraightComponent in _openstudiomodelhvac:
_openstudiomodelhvac.StraightComponent_swigregister(StraightComponent)


def toStraightComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::StraightComponent >":
    return _openstudiomodelhvac.toStraightComponent(idfObject)

def getStraightComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::StraightComponent >":
    return _openstudiomodelhvac.getStraightComponent(t_model, t_handle)

def getStraightComponents(t_model: "Model") -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > >":
    return _openstudiomodelhvac.getStraightComponents(t_model)

def getStraightComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::StraightComponent >":
    return _openstudiomodelhvac.getStraightComponentByName(t_model, t_name)

def getStraightComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > >":
    return _openstudiomodelhvac.getStraightComponentsByName(t_model, t_name, t_exactMatch)

def _to_StraightComponent(self) -> OptionalStraightComponent:
    return toStraightComponent(self)
openstudioutilitiesidf.IdfObject.to_StraightComponent = _to_StraightComponent

def _getStraightComponent(self, t_handle: "UUID") -> OptionalStraightComponent:
    return getStraightComponent(self, t_handle)
Model.getStraightComponent = _getStraightComponent

def _getStraightComponent(self, t_handle_str: str) -> OptionalStraightComponent:
    return getStraightComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getStraightComponent = _getStraightComponent

def _getStraightComponents(self) -> StraightComponentVector:
    return getStraightComponents(self)
Model.getStraightComponents = _getStraightComponents

def _getStraightComponentByName(self, t_name: str) -> OptionalStraightComponent:
    return getStraightComponentByName(self, t_name)
Model.getStraightComponentByName = _getStraightComponentByName

def _getStraightComponentsByName(self, t_name: str, t_exactMatch: bool) -> StraightComponentVector:
    return getStraightComponentsByName(self, t_name, t_exactMatch)
Model.getStraightComponentsByName = _getStraightComponentsByName

class WaterToAirComponent(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToAirComponent

    def airInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToAirComponent_airInletPort(self)

    def airOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToAirComponent_airOutletPort(self)

    def airInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToAirComponent_airInletModelObject(self)

    def airOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToAirComponent_airOutletModelObject(self)

    def waterInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToAirComponent_waterInletPort(self)

    def waterOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToAirComponent_waterOutletPort(self)

    def waterInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToAirComponent_waterInletModelObject(self)

    def waterOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToAirComponent_waterOutletModelObject(self)

    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.WaterToAirComponent_airLoopHVAC(self)

    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.WaterToAirComponent_plantLoop(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.WaterToAirComponent_addToNode(self, node)

    def addToSplitter(self, splitter: "Splitter") -> "bool":
        return _openstudiomodelhvac.WaterToAirComponent_addToSplitter(self, splitter)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.WaterToAirComponent_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.WaterToAirComponent_clone(self, model)

    def disconnectWaterSide(self) -> "void":
        return _openstudiomodelhvac.WaterToAirComponent_disconnectWaterSide(self)

    def disconnectAirSide(self) -> "void":
        return _openstudiomodelhvac.WaterToAirComponent_disconnectAirSide(self)

    def removeFromAirLoopHVAC(self) -> "bool":
        return _openstudiomodelhvac.WaterToAirComponent_removeFromAirLoopHVAC(self)

    def removeFromPlantLoop(self) -> "bool":
        return _openstudiomodelhvac.WaterToAirComponent_removeFromPlantLoop(self)

# Register WaterToAirComponent in _openstudiomodelhvac:
_openstudiomodelhvac.WaterToAirComponent_swigregister(WaterToAirComponent)


def toWaterToAirComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterToAirComponent >":
    return _openstudiomodelhvac.toWaterToAirComponent(idfObject)

def getWaterToAirComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterToAirComponent >":
    return _openstudiomodelhvac.getWaterToAirComponent(t_model, t_handle)

def getWaterToAirComponents(t_model: "Model") -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > >":
    return _openstudiomodelhvac.getWaterToAirComponents(t_model)

def getWaterToAirComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterToAirComponent >":
    return _openstudiomodelhvac.getWaterToAirComponentByName(t_model, t_name)

def getWaterToAirComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > >":
    return _openstudiomodelhvac.getWaterToAirComponentsByName(t_model, t_name, t_exactMatch)

def _to_WaterToAirComponent(self) -> OptionalWaterToAirComponent:
    return toWaterToAirComponent(self)
openstudioutilitiesidf.IdfObject.to_WaterToAirComponent = _to_WaterToAirComponent

def _getWaterToAirComponent(self, t_handle: "UUID") -> OptionalWaterToAirComponent:
    return getWaterToAirComponent(self, t_handle)
Model.getWaterToAirComponent = _getWaterToAirComponent

def _getWaterToAirComponent(self, t_handle_str: str) -> OptionalWaterToAirComponent:
    return getWaterToAirComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterToAirComponent = _getWaterToAirComponent

def _getWaterToAirComponents(self) -> WaterToAirComponentVector:
    return getWaterToAirComponents(self)
Model.getWaterToAirComponents = _getWaterToAirComponents

def _getWaterToAirComponentByName(self, t_name: str) -> OptionalWaterToAirComponent:
    return getWaterToAirComponentByName(self, t_name)
Model.getWaterToAirComponentByName = _getWaterToAirComponentByName

def _getWaterToAirComponentsByName(self, t_name: str, t_exactMatch: bool) -> WaterToAirComponentVector:
    return getWaterToAirComponentsByName(self, t_name, t_exactMatch)
Model.getWaterToAirComponentsByName = _getWaterToAirComponentsByName

class WaterToWaterComponent(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.WaterToWaterComponent_swiginit(self, _openstudiomodelhvac.new_WaterToWaterComponent(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToWaterComponent

    def supplyInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToWaterComponent_supplyInletPort(self)

    def supplyOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToWaterComponent_supplyOutletPort(self)

    def demandInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToWaterComponent_demandInletPort(self)

    def demandOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.WaterToWaterComponent_demandOutletPort(self)

    def supplyInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_supplyInletModelObject(self)

    def supplyOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_supplyOutletModelObject(self)

    def demandInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_demandInletModelObject(self)

    def demandOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_demandOutletModelObject(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponent_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.WaterToWaterComponent_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.WaterToWaterComponent_clone(self, model)

    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.WaterToWaterComponent_plantLoop(self)

    def secondaryPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.WaterToWaterComponent_secondaryPlantLoop(self)

    def removeFromPlantLoop(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponent_removeFromPlantLoop(self)

    def removeFromSecondaryPlantLoop(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponent_removeFromSecondaryPlantLoop(self)

    def tertiaryPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryPlantLoop(self)

    def removeFromTertiaryPlantLoop(self) -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponent_removeFromTertiaryPlantLoop(self)

    def addToTertiaryNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.WaterToWaterComponent_addToTertiaryNode(self, node)

    def tertiaryInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryInletModelObject(self)

    def tertiaryOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryOutletModelObject(self)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.WaterToWaterComponent_disconnect(self)

# Register WaterToWaterComponent in _openstudiomodelhvac:
_openstudiomodelhvac.WaterToWaterComponent_swigregister(WaterToWaterComponent)


def toWaterToWaterComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterToWaterComponent >":
    return _openstudiomodelhvac.toWaterToWaterComponent(idfObject)

def getWaterToWaterComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterToWaterComponent >":
    return _openstudiomodelhvac.getWaterToWaterComponent(t_model, t_handle)

def getWaterToWaterComponents(t_model: "Model") -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > >":
    return _openstudiomodelhvac.getWaterToWaterComponents(t_model)

def getWaterToWaterComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterToWaterComponent >":
    return _openstudiomodelhvac.getWaterToWaterComponentByName(t_model, t_name)

def getWaterToWaterComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > >":
    return _openstudiomodelhvac.getWaterToWaterComponentsByName(t_model, t_name, t_exactMatch)

def _to_WaterToWaterComponent(self) -> OptionalWaterToWaterComponent:
    return toWaterToWaterComponent(self)
openstudioutilitiesidf.IdfObject.to_WaterToWaterComponent = _to_WaterToWaterComponent

def _getWaterToWaterComponent(self, t_handle: "UUID") -> OptionalWaterToWaterComponent:
    return getWaterToWaterComponent(self, t_handle)
Model.getWaterToWaterComponent = _getWaterToWaterComponent

def _getWaterToWaterComponent(self, t_handle_str: str) -> OptionalWaterToWaterComponent:
    return getWaterToWaterComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterToWaterComponent = _getWaterToWaterComponent

def _getWaterToWaterComponents(self) -> WaterToWaterComponentVector:
    return getWaterToWaterComponents(self)
Model.getWaterToWaterComponents = _getWaterToWaterComponents

def _getWaterToWaterComponentByName(self, t_name: str) -> OptionalWaterToWaterComponent:
    return getWaterToWaterComponentByName(self, t_name)
Model.getWaterToWaterComponentByName = _getWaterToWaterComponentByName

def _getWaterToWaterComponentsByName(self, t_name: str, t_exactMatch: bool) -> WaterToWaterComponentVector:
    return getWaterToWaterComponentsByName(self, t_name, t_exactMatch)
Model.getWaterToWaterComponentsByName = _getWaterToWaterComponentsByName

class AirToAirComponent(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.AirToAirComponent_swiginit(self, _openstudiomodelhvac.new_AirToAirComponent(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirToAirComponent

    def primaryAirInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirToAirComponent_primaryAirInletPort(self)

    def primaryAirOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirToAirComponent_primaryAirOutletPort(self)

    def primaryAirInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirToAirComponent_primaryAirInletModelObject(self)

    def primaryAirOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirToAirComponent_primaryAirOutletModelObject(self)

    def secondaryAirInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirToAirComponent_secondaryAirInletPort(self)

    def secondaryAirOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirToAirComponent_secondaryAirOutletPort(self)

    def secondaryAirInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirToAirComponent_secondaryAirInletModelObject(self)

    def secondaryAirOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirToAirComponent_secondaryAirOutletModelObject(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.AirToAirComponent_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.AirToAirComponent_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.AirToAirComponent_clone(self, model)

# Register AirToAirComponent in _openstudiomodelhvac:
_openstudiomodelhvac.AirToAirComponent_swigregister(AirToAirComponent)


def toAirToAirComponent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirToAirComponent >":
    return _openstudiomodelhvac.toAirToAirComponent(idfObject)

def getAirToAirComponent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirToAirComponent >":
    return _openstudiomodelhvac.getAirToAirComponent(t_model, t_handle)

def getAirToAirComponents(t_model: "Model") -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > >":
    return _openstudiomodelhvac.getAirToAirComponents(t_model)

def getAirToAirComponentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirToAirComponent >":
    return _openstudiomodelhvac.getAirToAirComponentByName(t_model, t_name)

def getAirToAirComponentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > >":
    return _openstudiomodelhvac.getAirToAirComponentsByName(t_model, t_name, t_exactMatch)

def _to_AirToAirComponent(self) -> OptionalAirToAirComponent:
    return toAirToAirComponent(self)
openstudioutilitiesidf.IdfObject.to_AirToAirComponent = _to_AirToAirComponent

def _getAirToAirComponent(self, t_handle: "UUID") -> OptionalAirToAirComponent:
    return getAirToAirComponent(self, t_handle)
Model.getAirToAirComponent = _getAirToAirComponent

def _getAirToAirComponent(self, t_handle_str: str) -> OptionalAirToAirComponent:
    return getAirToAirComponent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirToAirComponent = _getAirToAirComponent

def _getAirToAirComponents(self) -> AirToAirComponentVector:
    return getAirToAirComponents(self)
Model.getAirToAirComponents = _getAirToAirComponents

def _getAirToAirComponentByName(self, t_name: str) -> OptionalAirToAirComponent:
    return getAirToAirComponentByName(self, t_name)
Model.getAirToAirComponentByName = _getAirToAirComponentByName

def _getAirToAirComponentsByName(self, t_name: str, t_exactMatch: bool) -> AirToAirComponentVector:
    return getAirToAirComponentsByName(self, t_name, t_exactMatch)
Model.getAirToAirComponentsByName = _getAirToAirComponentsByName

class Node(StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.Node_swiginit(self, _openstudiomodelhvac.new_Node(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_Node

    def setpointManagers(self) -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":
        return _openstudiomodelhvac.Node_setpointManagers(self)

    def removeSetpointManagerSingleZoneReheat(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerSingleZoneReheat(self)

    def getSetpointManagerSingleZoneReheat(self) -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":
        return _openstudiomodelhvac.Node_getSetpointManagerSingleZoneReheat(self)

    def removeSetpointManagerMixedAir(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerMixedAir(self)

    def getSetpointManagerMixedAir(self) -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":
        return _openstudiomodelhvac.Node_getSetpointManagerMixedAir(self)

    def setpointManagerScheduled(self) -> "boost::optional< openstudio::model::SetpointManagerScheduled >":
        return _openstudiomodelhvac.Node_setpointManagerScheduled(self)

    def removeSetpointManagerScheduled(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerScheduled(self)

    def setpointManagerFollowOutdoorAirTemperature(self) -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":
        return _openstudiomodelhvac.Node_setpointManagerFollowOutdoorAirTemperature(self)

    def removeSetpointManagerFollowOutdoorAirTemperature(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerFollowOutdoorAirTemperature(self)

    def addSetpointManager(self, *args) -> "void":
        return _openstudiomodelhvac.Node_addSetpointManager(self, *args)

    def removeSetpointManagerOutdoorAirReset(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerOutdoorAirReset(self)

    def setpointManagerOutdoorAirReset(self) -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":
        return _openstudiomodelhvac.Node_setpointManagerOutdoorAirReset(self)

    def removeSetpointManagerWarmest(self) -> "void":
        return _openstudiomodelhvac.Node_removeSetpointManagerWarmest(self)

    def setpointManagerWarmest(self) -> "boost::optional< openstudio::model::SetpointManagerWarmest >":
        return _openstudiomodelhvac.Node_setpointManagerWarmest(self)

    def addSetpointManagerWarmest(self, setPointManager: "SetpointManagerWarmest") -> "void":
        return _openstudiomodelhvac.Node_addSetpointManagerWarmest(self, setPointManager)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.Node_addToNode(self, node)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.Node_clone(self, model)

    def isRemovable(self) -> "bool":
        return _openstudiomodelhvac.Node_isRemovable(self)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.Node_remove(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.Node_iddObjectType()

    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":
        return _openstudiomodelhvac.Node_getAirflowNetworkDistributionNode(self)

    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":
        return _openstudiomodelhvac.Node_airflowNetworkDistributionNode(self)

# Register Node in _openstudiomodelhvac:
_openstudiomodelhvac.Node_swigregister(Node)

def Node_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.Node_iddObjectType()


def toNode(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Node >":
    return _openstudiomodelhvac.toNode(idfObject)

def getNode(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Node >":
    return _openstudiomodelhvac.getNode(t_model, t_handle)

def getNodes(t_model: "Model") -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
    return _openstudiomodelhvac.getNodes(t_model)

def getNodeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Node >":
    return _openstudiomodelhvac.getNodeByName(t_model, t_name)

def getNodesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
    return _openstudiomodelhvac.getNodesByName(t_model, t_name, t_exactMatch)

def _to_Node(self) -> OptionalNode:
    return toNode(self)
openstudioutilitiesidf.IdfObject.to_Node = _to_Node

def _getNode(self, t_handle: "UUID") -> OptionalNode:
    return getNode(self, t_handle)
Model.getNode = _getNode

def _getNode(self, t_handle_str: str) -> OptionalNode:
    return getNode(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getNode = _getNode

def _getNodes(self) -> NodeVector:
    return getNodes(self)
Model.getNodes = _getNodes

def _getNodeByName(self, t_name: str) -> OptionalNode:
    return getNodeByName(self, t_name)
Model.getNodeByName = _getNodeByName

def _getNodesByName(self, t_name: str, t_exactMatch: bool) -> NodeVector:
    return getNodesByName(self, t_name, t_exactMatch)
Model.getNodesByName = _getNodesByName

class SizingZone(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", thermalZone: "ThermalZone"):
        _openstudiomodelhvac.SizingZone_swiginit(self, _openstudiomodelhvac.new_SizingZone(model, thermalZone))
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingZone

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SizingZone_iddObjectType()

    @staticmethod
    def coolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues()

    @staticmethod
    def heatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues()

    @staticmethod
    def zoneCoolingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues()

    @staticmethod
    def zoneHeatingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues()

    def thermalZone(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.SizingZone_thermalZone(self)

    def zoneCoolingDesignSupplyAirTemperatureInputMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethod(self)

    def zoneCoolingDesignSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperature(self)

    def zoneCoolingDesignSupplyAirTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureDifference(self)

    def zoneHeatingDesignSupplyAirTemperatureInputMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethod(self)

    def zoneHeatingDesignSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperature(self)

    def zoneHeatingDesignSupplyAirTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureDifference(self)

    def zoneCoolingDesignSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirHumidityRatio(self)

    def zoneHeatingDesignSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirHumidityRatio(self)

    def zoneHeatingSizingFactor(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_zoneHeatingSizingFactor(self)

    def zoneCoolingSizingFactor(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_zoneCoolingSizingFactor(self)

    def coolingDesignAirFlowMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethod(self)

    def isCoolingDesignAirFlowMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isCoolingDesignAirFlowMethodDefaulted(self)

    def coolingDesignAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowRate(self)

    def isCoolingDesignAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isCoolingDesignAirFlowRateDefaulted(self)

    def coolingMinimumAirFlowperZoneFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlowperZoneFloorArea(self)

    def isCoolingMinimumAirFlowperZoneFloorAreaDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowperZoneFloorAreaDefaulted(self)

    def coolingMinimumAirFlow(self) -> "double":
        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlow(self)

    def isCoolingMinimumAirFlowDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowDefaulted(self)

    def coolingMinimumAirFlowFraction(self) -> "double":
        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlowFraction(self)

    def isCoolingMinimumAirFlowFractionDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowFractionDefaulted(self)

    def heatingDesignAirFlowMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethod(self)

    def isHeatingDesignAirFlowMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isHeatingDesignAirFlowMethodDefaulted(self)

    def heatingDesignAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowRate(self)

    def isHeatingDesignAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isHeatingDesignAirFlowRateDefaulted(self)

    def heatingMaximumAirFlowperZoneFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlowperZoneFloorArea(self)

    def isHeatingMaximumAirFlowperZoneFloorAreaDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowperZoneFloorAreaDefaulted(self)

    def heatingMaximumAirFlow(self) -> "double":
        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlow(self)

    def isHeatingMaximumAirFlowDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowDefaulted(self)

    def heatingMaximumAirFlowFraction(self) -> "double":
        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlowFraction(self)

    def isHeatingMaximumAirFlowFractionDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowFractionDefaulted(self)

    def accountforDedicatedOutdoorAirSystem(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_accountforDedicatedOutdoorAirSystem(self)

    def dedicatedOutdoorAirSystemControlStrategy(self) -> "std::string":
        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirSystemControlStrategy(self)

    def dedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirLowSetpointTemperatureforDesign(self)

    def isDedicatedOutdoorAirLowSetpointTemperatureforDesignAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDedicatedOutdoorAirLowSetpointTemperatureforDesignAutosized(self)

    def dedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirHighSetpointTemperatureforDesign(self)

    def isDedicatedOutdoorAirHighSetpointTemperatureforDesignAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDedicatedOutdoorAirHighSetpointTemperatureforDesignAutosized(self)

    def designZoneAirDistributionEffectivenessinCoolingMode(self) -> "double":
        return _openstudiomodelhvac.SizingZone_designZoneAirDistributionEffectivenessinCoolingMode(self)

    def isDesignZoneAirDistributionEffectivenessinCoolingModeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDesignZoneAirDistributionEffectivenessinCoolingModeDefaulted(self)

    def designZoneAirDistributionEffectivenessinHeatingMode(self) -> "double":
        return _openstudiomodelhvac.SizingZone_designZoneAirDistributionEffectivenessinHeatingMode(self)

    def isDesignZoneAirDistributionEffectivenessinHeatingModeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDesignZoneAirDistributionEffectivenessinHeatingModeDefaulted(self)

    def designZoneSecondaryRecirculationFraction(self) -> "double":
        return _openstudiomodelhvac.SizingZone_designZoneSecondaryRecirculationFraction(self)

    def isDesignZoneSecondaryRecirculationFractionDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDesignZoneSecondaryRecirculationFractionDefaulted(self)

    def designMinimumZoneVentilationEfficiency(self) -> "double":
        return _openstudiomodelhvac.SizingZone_designMinimumZoneVentilationEfficiency(self)

    def isDesignMinimumZoneVentilationEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingZone_isDesignMinimumZoneVentilationEfficiencyDefaulted(self)

    def setZoneCoolingDesignSupplyAirTemperatureInputMethod(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperatureInputMethod(self, value)

    def setZoneCoolingDesignSupplyAirTemperature(self, zoneCoolingDesignSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperature(self, zoneCoolingDesignSupplyAirTemperature)

    def setZoneCoolingDesignSupplyAirTemperatureDifference(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperatureDifference(self, value)

    def setZoneHeatingDesignSupplyAirTemperatureInputMethod(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperatureInputMethod(self, value)

    def setZoneHeatingDesignSupplyAirTemperature(self, zoneHeatingDesignSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperature(self, zoneHeatingDesignSupplyAirTemperature)

    def setZoneHeatingDesignSupplyAirTemperatureDifference(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperatureDifference(self, value)

    def setZoneCoolingDesignSupplyAirHumidityRatio(self, zoneCoolingDesignSupplyAirHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirHumidityRatio(self, zoneCoolingDesignSupplyAirHumidityRatio)

    def setZoneHeatingDesignSupplyAirHumidityRatio(self, zoneHeatingDesignSupplyAirHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirHumidityRatio(self, zoneHeatingDesignSupplyAirHumidityRatio)

    def setZoneHeatingSizingFactor(self, zoneHeatingSizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneHeatingSizingFactor(self, zoneHeatingSizingFactor)

    def resetZoneHeatingSizingFactor(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetZoneHeatingSizingFactor(self)

    def setZoneCoolingSizingFactor(self, zoneCoolingSizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setZoneCoolingSizingFactor(self, zoneCoolingSizingFactor)

    def resetZoneCoolingSizingFactor(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetZoneCoolingSizingFactor(self)

    def setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SizingZone_setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod)

    def resetCoolingDesignAirFlowMethod(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetCoolingDesignAirFlowMethod(self)

    def setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate)

    def resetCoolingDesignAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetCoolingDesignAirFlowRate(self)

    def setCoolingMinimumAirFlowperZoneFloorArea(self, coolingMinimumAirFlowperZoneFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlowperZoneFloorArea(self, coolingMinimumAirFlowperZoneFloorArea)

    def resetCoolingMinimumAirFlowperZoneFloorArea(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlowperZoneFloorArea(self)

    def setCoolingMinimumAirFlow(self, coolingMinimumAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlow(self, coolingMinimumAirFlow)

    def resetCoolingMinimumAirFlow(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlow(self)

    def setCoolingMinimumAirFlowFraction(self, coolingMinimumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlowFraction(self, coolingMinimumAirFlowFraction)

    def resetCoolingMinimumAirFlowFraction(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlowFraction(self)

    def setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SizingZone_setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod)

    def resetHeatingDesignAirFlowMethod(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetHeatingDesignAirFlowMethod(self)

    def setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate)

    def resetHeatingDesignAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetHeatingDesignAirFlowRate(self)

    def setHeatingMaximumAirFlowperZoneFloorArea(self, heatingMaximumAirFlowperZoneFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlowperZoneFloorArea(self, heatingMaximumAirFlowperZoneFloorArea)

    def resetHeatingMaximumAirFlowperZoneFloorArea(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlowperZoneFloorArea(self)

    def setHeatingMaximumAirFlow(self, heatingMaximumAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlow(self, heatingMaximumAirFlow)

    def resetHeatingMaximumAirFlow(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlow(self)

    def setHeatingMaximumAirFlowFraction(self, heatingMaximumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlowFraction(self, heatingMaximumAirFlowFraction)

    def resetHeatingMaximumAirFlowFraction(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlowFraction(self)

    def setAccountforDedicatedOutdoorAirSystem(self, accountforDedicatedOutdoorAirSystem: "bool") -> "bool":
        return _openstudiomodelhvac.SizingZone_setAccountforDedicatedOutdoorAirSystem(self, accountforDedicatedOutdoorAirSystem)

    def setDedicatedOutdoorAirSystemControlStrategy(self, dedicatedOutdoorAirSystemControlStrategy: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirSystemControlStrategy(self, dedicatedOutdoorAirSystemControlStrategy)

    def setDedicatedOutdoorAirLowSetpointTemperatureforDesign(self, dedicatedOutdoorAirLowSetpointTemperatureforDesign: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirLowSetpointTemperatureforDesign(self, dedicatedOutdoorAirLowSetpointTemperatureforDesign)

    def autosizeDedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "void":
        return _openstudiomodelhvac.SizingZone_autosizeDedicatedOutdoorAirLowSetpointTemperatureforDesign(self)

    def setDedicatedOutdoorAirHighSetpointTemperatureforDesign(self, dedicatedOutdoorAirHighSetpointTemperatureforDesign: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirHighSetpointTemperatureforDesign(self, dedicatedOutdoorAirHighSetpointTemperatureforDesign)

    def autosizeDedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "void":
        return _openstudiomodelhvac.SizingZone_autosizeDedicatedOutdoorAirHighSetpointTemperatureforDesign(self)

    def setDesignZoneAirDistributionEffectivenessinCoolingMode(self, designZoneAirDistributionEffectivenessinCoolingMode: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDesignZoneAirDistributionEffectivenessinCoolingMode(self, designZoneAirDistributionEffectivenessinCoolingMode)

    def resetDesignZoneAirDistributionEffectivenessinCoolingMode(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetDesignZoneAirDistributionEffectivenessinCoolingMode(self)

    def setDesignZoneAirDistributionEffectivenessinHeatingMode(self, designZoneAirDistributionEffectivenessinHeatingMode: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDesignZoneAirDistributionEffectivenessinHeatingMode(self, designZoneAirDistributionEffectivenessinHeatingMode)

    def resetDesignZoneAirDistributionEffectivenessinHeatingMode(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetDesignZoneAirDistributionEffectivenessinHeatingMode(self)

    def setDesignZoneSecondaryRecirculationFraction(self, designZoneSecondaryRecirculationFraction: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDesignZoneSecondaryRecirculationFraction(self, designZoneSecondaryRecirculationFraction)

    def resetDesignZoneSecondaryRecirculationFraction(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetDesignZoneSecondaryRecirculationFraction(self)

    def setDesignMinimumZoneVentilationEfficiency(self, designMinimumZoneVentilationEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.SizingZone_setDesignMinimumZoneVentilationEfficiency(self, designMinimumZoneVentilationEfficiency)

    def resetDesignMinimumZoneVentilationEfficiency(self) -> "void":
        return _openstudiomodelhvac.SizingZone_resetDesignMinimumZoneVentilationEfficiency(self)

    def autosizedDedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_autosizedDedicatedOutdoorAirLowSetpointTemperatureforDesign(self)

    def autosizedDedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingZone_autosizedDedicatedOutdoorAirHighSetpointTemperatureforDesign(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.SizingZone_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.SizingZone_applySizingValues(self)

# Register SizingZone in _openstudiomodelhvac:
_openstudiomodelhvac.SizingZone_swigregister(SizingZone)

def SizingZone_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SizingZone_iddObjectType()

def SizingZone_coolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues()

def SizingZone_heatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues()

def SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues()

def SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues()


def toSizingZone(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SizingZone >":
    return _openstudiomodelhvac.toSizingZone(idfObject)

def getSizingZone(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SizingZone >":
    return _openstudiomodelhvac.getSizingZone(t_model, t_handle)

def getSizingZones(t_model: "Model") -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > >":
    return _openstudiomodelhvac.getSizingZones(t_model)

def getSizingZoneByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SizingZone >":
    return _openstudiomodelhvac.getSizingZoneByName(t_model, t_name)

def getSizingZonesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > >":
    return _openstudiomodelhvac.getSizingZonesByName(t_model, t_name, t_exactMatch)

def _to_SizingZone(self) -> OptionalSizingZone:
    return toSizingZone(self)
openstudioutilitiesidf.IdfObject.to_SizingZone = _to_SizingZone

def _getSizingZone(self, t_handle: "UUID") -> OptionalSizingZone:
    return getSizingZone(self, t_handle)
Model.getSizingZone = _getSizingZone

def _getSizingZone(self, t_handle_str: str) -> OptionalSizingZone:
    return getSizingZone(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSizingZone = _getSizingZone

def _getSizingZones(self) -> SizingZoneVector:
    return getSizingZones(self)
Model.getSizingZones = _getSizingZones

def _getSizingZoneByName(self, t_name: str) -> OptionalSizingZone:
    return getSizingZoneByName(self, t_name)
Model.getSizingZoneByName = _getSizingZoneByName

def _getSizingZonesByName(self, t_name: str, t_exactMatch: bool) -> SizingZoneVector:
    return getSizingZonesByName(self, t_name, t_exactMatch)
Model.getSizingZonesByName = _getSizingZonesByName

class SizingSystem(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", airLoopHVAC: "AirLoopHVAC"):
        _openstudiomodelhvac.SizingSystem_swiginit(self, _openstudiomodelhvac.new_SizingSystem(model, airLoopHVAC))
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingSystem

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SizingSystem_iddObjectType()

    @staticmethod
    def validTypeofLoadtoSizeOnValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues()

    @staticmethod
    def validSizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingSystem_validSizingOptionValues()

    @staticmethod
    def validCoolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues()

    @staticmethod
    def validHeatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues()

    @staticmethod
    def validSystemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues()

    def typeofLoadtoSizeOn(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_typeofLoadtoSizeOn(self)

    def isTypeofLoadtoSizeOnDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isTypeofLoadtoSizeOnDefaulted(self)

    def designOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_designOutdoorAirFlowRate(self)

    def isDesignOutdoorAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isDesignOutdoorAirFlowRateDefaulted(self)

    def isDesignOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isDesignOutdoorAirFlowRateAutosized(self)

    def preheatDesignTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_preheatDesignTemperature(self)

    def preheatDesignHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_preheatDesignHumidityRatio(self)

    def precoolDesignTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_precoolDesignTemperature(self)

    def precoolDesignHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_precoolDesignHumidityRatio(self)

    def centralCoolingDesignSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_centralCoolingDesignSupplyAirTemperature(self)

    def centralHeatingDesignSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_centralHeatingDesignSupplyAirTemperature(self)

    def sizingOption(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_sizingOption(self)

    def isSizingOptionDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isSizingOptionDefaulted(self)

    def allOutdoorAirinCooling(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_allOutdoorAirinCooling(self)

    def isAllOutdoorAirinCoolingDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isAllOutdoorAirinCoolingDefaulted(self)

    def allOutdoorAirinHeating(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_allOutdoorAirinHeating(self)

    def isAllOutdoorAirinHeatingDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isAllOutdoorAirinHeatingDefaulted(self)

    def centralCoolingDesignSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_centralCoolingDesignSupplyAirHumidityRatio(self)

    def isCentralCoolingDesignSupplyAirHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCentralCoolingDesignSupplyAirHumidityRatioDefaulted(self)

    def centralHeatingDesignSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_centralHeatingDesignSupplyAirHumidityRatio(self)

    def isCentralHeatingDesignSupplyAirHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCentralHeatingDesignSupplyAirHumidityRatioDefaulted(self)

    def coolingDesignAirFlowMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_coolingDesignAirFlowMethod(self)

    def isCoolingDesignAirFlowMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCoolingDesignAirFlowMethodDefaulted(self)

    def coolingDesignAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_coolingDesignAirFlowRate(self)

    def isCoolingDesignAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCoolingDesignAirFlowRateDefaulted(self)

    def heatingDesignAirFlowMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_heatingDesignAirFlowMethod(self)

    def isHeatingDesignAirFlowMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isHeatingDesignAirFlowMethodDefaulted(self)

    def heatingDesignAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingDesignAirFlowRate(self)

    def isHeatingDesignAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isHeatingDesignAirFlowRateDefaulted(self)

    def systemOutdoorAirMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_systemOutdoorAirMethod(self)

    def isSystemOutdoorAirMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isSystemOutdoorAirMethodDefaulted(self)

    def zoneMaximumOutdoorAirFraction(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_zoneMaximumOutdoorAirFraction(self)

    def coolingSupplyAirFlowRatePerFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_coolingSupplyAirFlowRatePerFloorArea(self)

    def coolingFractionofAutosizedCoolingSupplyAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_coolingFractionofAutosizedCoolingSupplyAirFlowRate(self)

    def coolingSupplyAirFlowRatePerUnitCoolingCapacity(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_coolingSupplyAirFlowRatePerUnitCoolingCapacity(self)

    def heatingSupplyAirFlowRatePerFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingSupplyAirFlowRatePerFloorArea(self)

    def heatingFractionofAutosizedHeatingSupplyAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingFractionofAutosizedHeatingSupplyAirFlowRate(self)

    def heatingFractionofAutosizedCoolingSupplyAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingFractionofAutosizedCoolingSupplyAirFlowRate(self)

    def heatingSupplyAirFlowRatePerUnitHeatingCapacity(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingSupplyAirFlowRatePerUnitHeatingCapacity(self)

    def coolingDesignCapacityMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacityMethod(self)

    def coolingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacity(self)

    def isCoolingDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCoolingDesignCapacityAutosized(self)

    def coolingDesignCapacityPerFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedCoolingDesignCapacity(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_fractionofAutosizedCoolingDesignCapacity(self)

    def heatingDesignCapacityMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacityMethod(self)

    def heatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacity(self)

    def isHeatingDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isHeatingDesignCapacityAutosized(self)

    def heatingDesignCapacityPerFloorArea(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedHeatingDesignCapacity(self) -> "double":
        return _openstudiomodelhvac.SizingSystem_fractionofAutosizedHeatingDesignCapacity(self)

    def centralCoolingCapacityControlMethod(self) -> "std::string":
        return _openstudiomodelhvac.SizingSystem_centralCoolingCapacityControlMethod(self)

    def setTypeofLoadtoSizeOn(self, typeofLoadtoSizeOn: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setTypeofLoadtoSizeOn(self, typeofLoadtoSizeOn)

    def resetTypeofLoadtoSizeOn(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetTypeofLoadtoSizeOn(self)

    def setDesignOutdoorAirFlowRate(self, designOutdoorAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setDesignOutdoorAirFlowRate(self, designOutdoorAirFlowRate)

    def resetDesignOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetDesignOutdoorAirFlowRate(self)

    def autosizeDesignOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_autosizeDesignOutdoorAirFlowRate(self)

    def setPreheatDesignTemperature(self, preheatDesignTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setPreheatDesignTemperature(self, preheatDesignTemperature)

    def setPreheatDesignHumidityRatio(self, preheatDesignHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setPreheatDesignHumidityRatio(self, preheatDesignHumidityRatio)

    def setPrecoolDesignTemperature(self, precoolDesignTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setPrecoolDesignTemperature(self, precoolDesignTemperature)

    def setPrecoolDesignHumidityRatio(self, precoolDesignHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setPrecoolDesignHumidityRatio(self, precoolDesignHumidityRatio)

    def setCentralCoolingDesignSupplyAirTemperature(self, centralCoolingDesignSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralCoolingDesignSupplyAirTemperature(self, centralCoolingDesignSupplyAirTemperature)

    def setCentralHeatingDesignSupplyAirTemperature(self, centralHeatingDesignSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralHeatingDesignSupplyAirTemperature(self, centralHeatingDesignSupplyAirTemperature)

    def setSizingOption(self, sizingOption: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setSizingOption(self, sizingOption)

    def resetSizingOption(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetSizingOption(self)

    def setAllOutdoorAirinCooling(self, allOutdoorAirinCooling: "bool") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setAllOutdoorAirinCooling(self, allOutdoorAirinCooling)

    def resetAllOutdoorAirinCooling(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetAllOutdoorAirinCooling(self)

    def setAllOutdoorAirinHeating(self, allOutdoorAirinHeating: "bool") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setAllOutdoorAirinHeating(self, allOutdoorAirinHeating)

    def resetAllOutdoorAirinHeating(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetAllOutdoorAirinHeating(self)

    def setCentralCoolingDesignSupplyAirHumidityRatio(self, centralCoolingDesignSupplyAirHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralCoolingDesignSupplyAirHumidityRatio(self, centralCoolingDesignSupplyAirHumidityRatio)

    def resetCentralCoolingDesignSupplyAirHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetCentralCoolingDesignSupplyAirHumidityRatio(self)

    def setCentralHeatingDesignSupplyAirHumidityRatio(self, centralHeatingDesignSupplyAirHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralHeatingDesignSupplyAirHumidityRatio(self, centralHeatingDesignSupplyAirHumidityRatio)

    def resetCentralHeatingDesignSupplyAirHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetCentralHeatingDesignSupplyAirHumidityRatio(self)

    def setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod)

    def resetCoolingDesignAirFlowMethod(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetCoolingDesignAirFlowMethod(self)

    def setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate)

    def resetCoolingDesignAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetCoolingDesignAirFlowRate(self)

    def setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod)

    def resetHeatingDesignAirFlowMethod(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetHeatingDesignAirFlowMethod(self)

    def setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate)

    def resetHeatingDesignAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetHeatingDesignAirFlowRate(self)

    def setSystemOutdoorAirMethod(self, systemOutdoorAirMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setSystemOutdoorAirMethod(self, systemOutdoorAirMethod)

    def resetSystemOutdoorAirMethod(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_resetSystemOutdoorAirMethod(self)

    def setZoneMaximumOutdoorAirFraction(self, zoneMaximumOutdoorAirFraction: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setZoneMaximumOutdoorAirFraction(self, zoneMaximumOutdoorAirFraction)

    def setCoolingSupplyAirFlowRatePerFloorArea(self, coolingSupplyAirFlowRatePerFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingSupplyAirFlowRatePerFloorArea(self, coolingSupplyAirFlowRatePerFloorArea)

    def setCoolingFractionofAutosizedCoolingSupplyAirFlowRate(self, coolingFractionofAutosizedCoolingSupplyAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingFractionofAutosizedCoolingSupplyAirFlowRate(self, coolingFractionofAutosizedCoolingSupplyAirFlowRate)

    def setCoolingSupplyAirFlowRatePerUnitCoolingCapacity(self, coolingSupplyAirFlowRatePerUnitCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingSupplyAirFlowRatePerUnitCoolingCapacity(self, coolingSupplyAirFlowRatePerUnitCoolingCapacity)

    def setHeatingSupplyAirFlowRatePerFloorArea(self, heatingSupplyAirFlowRatePerFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingSupplyAirFlowRatePerFloorArea(self, heatingSupplyAirFlowRatePerFloorArea)

    def setHeatingFractionofAutosizedHeatingSupplyAirFlowRate(self, heatingFractionofAutosizedHeatingSupplyAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingFractionofAutosizedHeatingSupplyAirFlowRate(self, heatingFractionofAutosizedHeatingSupplyAirFlowRate)

    def setHeatingFractionofAutosizedCoolingSupplyAirFlowRate(self, heatingFractionofAutosizedCoolingSupplyAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingFractionofAutosizedCoolingSupplyAirFlowRate(self, heatingFractionofAutosizedCoolingSupplyAirFlowRate)

    def setHeatingSupplyAirFlowRatePerUnitHeatingCapacity(self, heatingSupplyAirFlowRatePerUnitHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingSupplyAirFlowRatePerUnitHeatingCapacity(self, heatingSupplyAirFlowRatePerUnitHeatingCapacity)

    def setCoolingDesignCapacityMethod(self, coolingDesignCapacityMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacityMethod(self, coolingDesignCapacityMethod)

    def setCoolingDesignCapacity(self, coolingDesignCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacity(self, coolingDesignCapacity)

    def autosizeCoolingDesignCapacity(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_autosizeCoolingDesignCapacity(self)

    def setCoolingDesignCapacityPerFloorArea(self, coolingDesignCapacityPerFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacityPerFloorArea(self, coolingDesignCapacityPerFloorArea)

    def setFractionofAutosizedCoolingDesignCapacity(self, fractionofAutosizedCoolingDesignCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setFractionofAutosizedCoolingDesignCapacity(self, fractionofAutosizedCoolingDesignCapacity)

    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)

    def setHeatingDesignCapacity(self, heatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacity(self, heatingDesignCapacity)

    def autosizeHeatingDesignCapacity(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_autosizeHeatingDesignCapacity(self)

    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)

    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)

    def setCentralCoolingCapacityControlMethod(self, centralCoolingCapacityControlMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralCoolingCapacityControlMethod(self, centralCoolingCapacityControlMethod)

    def airLoopHVAC(self) -> "openstudio::model::AirLoopHVAC":
        return _openstudiomodelhvac.SizingSystem_airLoopHVAC(self)

    def centralHeatingMaximumSystemAirFlowRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_centralHeatingMaximumSystemAirFlowRatio(self)

    def isCentralHeatingMaximumSystemAirFlowRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.SizingSystem_isCentralHeatingMaximumSystemAirFlowRatioAutosized(self)

    def setCentralHeatingMaximumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setCentralHeatingMaximumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio)

    def autosizeCentralHeatingMaximumSystemAirFlowRatio(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_autosizeCentralHeatingMaximumSystemAirFlowRatio(self)

    def minimumSystemAirFlowRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_minimumSystemAirFlowRatio(self)

    def setMinimumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio: "double") -> "bool":
        return _openstudiomodelhvac.SizingSystem_setMinimumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio)

    def autosizedDesignOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_autosizedDesignOutdoorAirFlowRate(self)

    def autosizedCentralHeatingMaximumSystemAirFlowRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_autosizedCentralHeatingMaximumSystemAirFlowRatio(self)

    def autosizedCoolingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_autosizedCoolingDesignCapacity(self)

    def autosizedHeatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SizingSystem_autosizedHeatingDesignCapacity(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.SizingSystem_applySizingValues(self)

# Register SizingSystem in _openstudiomodelhvac:
_openstudiomodelhvac.SizingSystem_swigregister(SizingSystem)

def SizingSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SizingSystem_iddObjectType()

def SizingSystem_validTypeofLoadtoSizeOnValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues()

def SizingSystem_validSizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingSystem_validSizingOptionValues()

def SizingSystem_validCoolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues()

def SizingSystem_validHeatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues()

def SizingSystem_validSystemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues()


def toSizingSystem(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SizingSystem >":
    return _openstudiomodelhvac.toSizingSystem(idfObject)

def getSizingSystem(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SizingSystem >":
    return _openstudiomodelhvac.getSizingSystem(t_model, t_handle)

def getSizingSystems(t_model: "Model") -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > >":
    return _openstudiomodelhvac.getSizingSystems(t_model)

def getSizingSystemByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SizingSystem >":
    return _openstudiomodelhvac.getSizingSystemByName(t_model, t_name)

def getSizingSystemsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > >":
    return _openstudiomodelhvac.getSizingSystemsByName(t_model, t_name, t_exactMatch)

def _to_SizingSystem(self) -> OptionalSizingSystem:
    return toSizingSystem(self)
openstudioutilitiesidf.IdfObject.to_SizingSystem = _to_SizingSystem

def _getSizingSystem(self, t_handle: "UUID") -> OptionalSizingSystem:
    return getSizingSystem(self, t_handle)
Model.getSizingSystem = _getSizingSystem

def _getSizingSystem(self, t_handle_str: str) -> OptionalSizingSystem:
    return getSizingSystem(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSizingSystem = _getSizingSystem

def _getSizingSystems(self) -> SizingSystemVector:
    return getSizingSystems(self)
Model.getSizingSystems = _getSizingSystems

def _getSizingSystemByName(self, t_name: str) -> OptionalSizingSystem:
    return getSizingSystemByName(self, t_name)
Model.getSizingSystemByName = _getSizingSystemByName

def _getSizingSystemsByName(self, t_name: str, t_exactMatch: bool) -> SizingSystemVector:
    return getSizingSystemsByName(self, t_name, t_exactMatch)
Model.getSizingSystemsByName = _getSizingSystemsByName

class ThermalZone(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ThermalZone_swiginit(self, _openstudiomodelhvac.new_ThermalZone(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalZone

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ThermalZone_iddObjectType()

    @staticmethod
    def validZoneInsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues()

    @staticmethod
    def validZoneOutsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues()

    def multiplier(self) -> "int":
        return _openstudiomodelhvac.ThermalZone_multiplier(self)

    def isMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isMultiplierDefaulted(self)

    def ceilingHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalZone_ceilingHeight(self)

    def isCeilingHeightDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isCeilingHeightDefaulted(self)

    def isCeilingHeightAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isCeilingHeightAutocalculated(self)

    def volume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalZone_volume(self)

    def isVolumeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isVolumeDefaulted(self)

    def isVolumeAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isVolumeAutocalculated(self)

    def zoneInsideConvectionAlgorithm(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ThermalZone_zoneInsideConvectionAlgorithm(self)

    def zoneOutsideConvectionAlgorithm(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ThermalZone_zoneOutsideConvectionAlgorithm(self)

    def zoneConditioningEquipmentListName(self) -> "std::string":
        return _openstudiomodelhvac.ThermalZone_zoneConditioningEquipmentListName(self)

    def thermostat(self) -> "boost::optional< openstudio::model::Thermostat >":
        return _openstudiomodelhvac.ThermalZone_thermostat(self)

    def thermostatSetpointDualSetpoint(self) -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":
        return _openstudiomodelhvac.ThermalZone_thermostatSetpointDualSetpoint(self)

    def zoneControlHumidistat(self) -> "boost::optional< openstudio::model::ZoneControlHumidistat >":
        return _openstudiomodelhvac.ThermalZone_zoneControlHumidistat(self)

    def zoneControlContaminantController(self) -> "boost::optional< openstudio::model::ZoneControlContaminantController >":
        return _openstudiomodelhvac.ThermalZone_zoneControlContaminantController(self)

    def fractionofZoneControlledbyPrimaryDaylightingControl(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_fractionofZoneControlledbyPrimaryDaylightingControl(self)

    def isFractionofZoneControlledbyPrimaryDaylightingControlDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isFractionofZoneControlledbyPrimaryDaylightingControlDefaulted(self)

    def fractionofZoneControlledbySecondaryDaylightingControl(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_fractionofZoneControlledbySecondaryDaylightingControl(self)

    def isFractionofZoneControlledbySecondaryDaylightingControlDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isFractionofZoneControlledbySecondaryDaylightingControlDefaulted(self)

    def sizingZone(self) -> "openstudio::model::SizingZone":
        return _openstudiomodelhvac.ThermalZone_sizingZone(self)

    def getZonePropertyUserViewFactorsBySurfaceName(self) -> "openstudio::model::ZonePropertyUserViewFactorsBySurfaceName":
        return _openstudiomodelhvac.ThermalZone_getZonePropertyUserViewFactorsBySurfaceName(self)

    def setMultiplier(self, multiplier: "int") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setMultiplier(self, multiplier)

    def resetMultiplier(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetMultiplier(self)

    def setCeilingHeight(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setCeilingHeight(self, *args)

    def resetCeilingHeight(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetCeilingHeight(self)

    def autocalculateCeilingHeight(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_autocalculateCeilingHeight(self)

    def setVolume(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setVolume(self, *args)

    def resetVolume(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetVolume(self)

    def autocalculateVolume(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_autocalculateVolume(self)

    def setZoneInsideConvectionAlgorithm(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setZoneInsideConvectionAlgorithm(self, *args)

    def resetZoneInsideConvectionAlgorithm(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetZoneInsideConvectionAlgorithm(self)

    def setZoneOutsideConvectionAlgorithm(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setZoneOutsideConvectionAlgorithm(self, *args)

    def resetZoneOutsideConvectionAlgorithm(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetZoneOutsideConvectionAlgorithm(self)

    def setZoneConditioningEquipmentListName(self, zoneConditioningEquipmentListName: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setZoneConditioningEquipmentListName(self, zoneConditioningEquipmentListName)

    def setThermostatSetpointDualSetpoint(self, thermostat: "ThermostatSetpointDualSetpoint") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setThermostatSetpointDualSetpoint(self, thermostat)

    def resetThermostatSetpointDualSetpoint(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetThermostatSetpointDualSetpoint(self)

    def setThermostat(self, thermostat: "Thermostat") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setThermostat(self, thermostat)

    def resetThermostat(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetThermostat(self)

    def setZoneControlHumidistat(self, humidistat: "ZoneControlHumidistat") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setZoneControlHumidistat(self, humidistat)

    def resetZoneControlHumidistat(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetZoneControlHumidistat(self)

    def setZoneControlContaminantController(self, contaminantController: "ZoneControlContaminantController") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setZoneControlContaminantController(self, contaminantController)

    def resetZoneControlContaminantController(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetZoneControlContaminantController(self)

    def setFractionofZoneControlledbyPrimaryDaylightingControl(self, fractionofZoneControlledbyPrimaryDaylightingControl: "double") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setFractionofZoneControlledbyPrimaryDaylightingControl(self, fractionofZoneControlledbyPrimaryDaylightingControl)

    def resetFractionofZoneControlledbyPrimaryDaylightingControl(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetFractionofZoneControlledbyPrimaryDaylightingControl(self)

    def setFractionofZoneControlledbySecondaryDaylightingControl(self, fractionofZoneControlledbySecondaryDaylightingControl: "double") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setFractionofZoneControlledbySecondaryDaylightingControl(self, fractionofZoneControlledbySecondaryDaylightingControl)

    def resetFractionofZoneControlledbySecondaryDaylightingControl(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetFractionofZoneControlledbySecondaryDaylightingControl(self)

    def returnAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ThermalZone_returnAirPort(self)

    def zoneAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ThermalZone_zoneAirPort(self)

    def returnAirModelObject(self) -> "openstudio::model::OptionalModelObject":
        return _openstudiomodelhvac.ThermalZone_returnAirModelObject(self)

    def returnAirModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ThermalZone_returnAirModelObjects(self)

    def zoneAirNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.ThermalZone_zoneAirNode(self)

    def primaryDaylightingControl(self) -> "boost::optional< openstudio::model::DaylightingControl >":
        return _openstudiomodelhvac.ThermalZone_primaryDaylightingControl(self)

    def setPrimaryDaylightingControl(self, daylightingControl: "DaylightingControl") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setPrimaryDaylightingControl(self, daylightingControl)

    def resetPrimaryDaylightingControl(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetPrimaryDaylightingControl(self)

    def secondaryDaylightingControl(self) -> "boost::optional< openstudio::model::DaylightingControl >":
        return _openstudiomodelhvac.ThermalZone_secondaryDaylightingControl(self)

    def setSecondaryDaylightingControl(self, daylightingControl: "DaylightingControl") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSecondaryDaylightingControl(self, daylightingControl)

    def resetSecondaryDaylightingControl(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetSecondaryDaylightingControl(self)

    def illuminanceMap(self) -> "boost::optional< openstudio::model::IlluminanceMap >":
        return _openstudiomodelhvac.ThermalZone_illuminanceMap(self)

    def setIlluminanceMap(self, illuminanceMap: "IlluminanceMap") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setIlluminanceMap(self, illuminanceMap)

    def resetIlluminanceMap(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetIlluminanceMap(self)

    def checkDaylightingControlsAndIlluminanceMaps(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_checkDaylightingControlsAndIlluminanceMaps(self)

    def renderingColor(self) -> "boost::optional< openstudio::model::RenderingColor >":
        return _openstudiomodelhvac.ThermalZone_renderingColor(self)

    def setRenderingColor(self, renderingColor: "RenderingColor") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_resetRenderingColor(self)

    def equipment(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ThermalZone_equipment(self)

    def airLoopHVACTerminal(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelhvac.ThermalZone_airLoopHVACTerminal(self)

    def airLoopHVACTerminals(self) -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":
        return _openstudiomodelhvac.ThermalZone_airLoopHVACTerminals(self)

    def spaces(self) -> "std::vector< openstudio::model::Space,std::allocator< openstudio::model::Space > >":
        return _openstudiomodelhvac.ThermalZone_spaces(self)

    def floorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_floorArea(self)

    def exteriorSurfaceArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_exteriorSurfaceArea(self)

    def exteriorWallArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_exteriorWallArea(self)

    def airVolume(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_airVolume(self)

    def numberOfPeople(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_numberOfPeople(self)

    def peoplePerFloorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_peoplePerFloorArea(self)

    def floorAreaPerPerson(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_floorAreaPerPerson(self)

    def lightingPower(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_lightingPower(self)

    def lightingPowerPerFloorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_lightingPowerPerFloorArea(self)

    def lightingPowerPerPerson(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_lightingPowerPerPerson(self)

    def electricEquipmentPower(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_electricEquipmentPower(self)

    def electricEquipmentPowerPerFloorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_electricEquipmentPowerPerFloorArea(self)

    def electricEquipmentPowerPerPerson(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_electricEquipmentPowerPerPerson(self)

    def gasEquipmentPower(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_gasEquipmentPower(self)

    def gasEquipmentPowerPerFloorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_gasEquipmentPowerPerFloorArea(self)

    def gasEquipmentPowerPerPerson(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_gasEquipmentPowerPerPerson(self)

    def infiltrationDesignFlowRate(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowRate(self)

    def infiltrationDesignFlowPerSpaceFloorArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerSpaceFloorArea(self)

    def infiltrationDesignFlowPerExteriorSurfaceArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerExteriorSurfaceArea(self)

    def infiltrationDesignFlowPerExteriorWallArea(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerExteriorWallArea(self)

    def infiltrationDesignAirChangesPerHour(self) -> "double":
        return _openstudiomodelhvac.ThermalZone_infiltrationDesignAirChangesPerHour(self)

    def isConditioned(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ThermalZone_isConditioned(self)

    def combineSpaces(self) -> "boost::optional< openstudio::model::Space >":
        return _openstudiomodelhvac.ThermalZone_combineSpaces(self)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.ThermalZone_disconnect(self)

    def isRemovable(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isRemovable(self)

    def useIdealAirLoads(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_useIdealAirLoads(self)

    def setUseIdealAirLoads(self, useIdealAirLoads: "bool") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setUseIdealAirLoads(self, useIdealAirLoads)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ThermalZone_addToNode(self, node)

    def multiAddToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ThermalZone_multiAddToNode(self, node)

    def returnPortList(self) -> "openstudio::model::PortList":
        return _openstudiomodelhvac.ThermalZone_returnPortList(self)

    def inletPortList(self) -> "openstudio::model::PortList":
        return _openstudiomodelhvac.ThermalZone_inletPortList(self)

    def exhaustPortList(self) -> "openstudio::model::PortList":
        return _openstudiomodelhvac.ThermalZone_exhaustPortList(self)

    def removeEquipment(self, equipment: "ModelObject") -> "bool":
        return _openstudiomodelhvac.ThermalZone_removeEquipment(self, equipment)

    def loadDistributionScheme(self) -> "std::string":
        return _openstudiomodelhvac.ThermalZone_loadDistributionScheme(self)

    def setLoadDistributionScheme(self, scheme: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setLoadDistributionScheme(self, scheme)

    def setCoolingPriority(self, equipment: "ModelObject", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setCoolingPriority(self, equipment, priority)

    def setHeatingPriority(self, equipment: "ModelObject", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setHeatingPriority(self, equipment, priority)

    def equipmentInHeatingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ThermalZone_equipmentInHeatingOrder(self)

    def equipmentInCoolingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.ThermalZone_equipmentInCoolingOrder(self)

    def sequentialCoolingFraction(self, equipment: "ModelObject") -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalZone_sequentialCoolingFraction(self, equipment)

    def sequentialCoolingFractionSchedule(self, equipment: "ModelObject") -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalZone_sequentialCoolingFractionSchedule(self, equipment)

    def sequentialHeatingFraction(self, equipment: "ModelObject") -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalZone_sequentialHeatingFraction(self, equipment)

    def sequentialHeatingFractionSchedule(self, equipment: "ModelObject") -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalZone_sequentialHeatingFractionSchedule(self, equipment)

    def setSequentialCoolingFraction(self, equipment: "ModelObject", fraction: "double") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSequentialCoolingFraction(self, equipment, fraction)

    def setSequentialCoolingFractionSchedule(self, equipment: "ModelObject", schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSequentialCoolingFractionSchedule(self, equipment, schedule)

    def setSequentialHeatingFraction(self, equipment: "ModelObject", fraction: "double") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSequentialHeatingFraction(self, equipment, fraction)

    def setSequentialHeatingFractionSchedule(self, equipment: "ModelObject", schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSequentialHeatingFractionSchedule(self, equipment, schedule)

    def isPlenum(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_isPlenum(self)

    def canBePlenum(self) -> "bool":
        return _openstudiomodelhvac.ThermalZone_canBePlenum(self)

    def setSupplyPlenum(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setSupplyPlenum(self, *args)

    def removeSupplyPlenum(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZone_removeSupplyPlenum(self, *args)

    def setReturnPlenum(self, *args) -> "bool":
        return _openstudiomodelhvac.ThermalZone_setReturnPlenum(self, *args)

    def removeReturnPlenum(self, *args) -> "void":
        return _openstudiomodelhvac.ThermalZone_removeReturnPlenum(self, *args)

    def zoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":
        return _openstudiomodelhvac.ThermalZone_zoneMixing(self)

    def supplyZoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":
        return _openstudiomodelhvac.ThermalZone_supplyZoneMixing(self)

    def exhaustZoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":
        return _openstudiomodelhvac.ThermalZone_exhaustZoneMixing(self)

    def getAirflowNetworkZone(self) -> "openstudio::model::AirflowNetworkZone":
        return _openstudiomodelhvac.ThermalZone_getAirflowNetworkZone(self)

    def airflowNetworkZone(self) -> "boost::optional< openstudio::model::AirflowNetworkZone >":
        return _openstudiomodelhvac.ThermalZone_airflowNetworkZone(self)

    def airLoopHVACs(self) -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":
        return _openstudiomodelhvac.ThermalZone_airLoopHVACs(self)

# Register ThermalZone in _openstudiomodelhvac:
_openstudiomodelhvac.ThermalZone_swigregister(ThermalZone)

def ThermalZone_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ThermalZone_iddObjectType()

def ThermalZone_validZoneInsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues()

def ThermalZone_validZoneOutsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues()


def toThermalZone(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ThermalZone >":
    return _openstudiomodelhvac.toThermalZone(idfObject)

def getThermalZone(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ThermalZone >":
    return _openstudiomodelhvac.getThermalZone(t_model, t_handle)

def getThermalZones(t_model: "Model") -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":
    return _openstudiomodelhvac.getThermalZones(t_model)

def getThermalZoneByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ThermalZone >":
    return _openstudiomodelhvac.getThermalZoneByName(t_model, t_name)

def getThermalZonesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":
    return _openstudiomodelhvac.getThermalZonesByName(t_model, t_name, t_exactMatch)

def _to_ThermalZone(self) -> OptionalThermalZone:
    return toThermalZone(self)
openstudioutilitiesidf.IdfObject.to_ThermalZone = _to_ThermalZone

def _getThermalZone(self, t_handle: "UUID") -> OptionalThermalZone:
    return getThermalZone(self, t_handle)
Model.getThermalZone = _getThermalZone

def _getThermalZone(self, t_handle_str: str) -> OptionalThermalZone:
    return getThermalZone(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermalZone = _getThermalZone

def _getThermalZones(self) -> ThermalZoneVector:
    return getThermalZones(self)
Model.getThermalZones = _getThermalZones

def _getThermalZoneByName(self, t_name: str) -> OptionalThermalZone:
    return getThermalZoneByName(self, t_name)
Model.getThermalZoneByName = _getThermalZoneByName

def _getThermalZonesByName(self, t_name: str, t_exactMatch: bool) -> ThermalZoneVector:
    return getThermalZonesByName(self, t_name, t_exactMatch)
Model.getThermalZonesByName = _getThermalZonesByName

class ThermostatSetpointDualSetpoint(Thermostat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ThermostatSetpointDualSetpoint_swiginit(self, _openstudiomodelhvac.new_ThermostatSetpointDualSetpoint(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatSetpointDualSetpoint

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType()

    def heatingSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_heatingSetpointTemperatureSchedule(self)

    def coolingSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_coolingSetpointTemperatureSchedule(self)

    def temperatureDifferenceBetweenCutoutAndSetpoint(self) -> "double":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_temperatureDifferenceBetweenCutoutAndSetpoint(self)

    def isTemperatureDifferenceBetweenCutoutAndSetpointDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_isTemperatureDifferenceBetweenCutoutAndSetpointDefaulted(self)

    def getHeatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_getHeatingSchedule(self)

    def getCoolingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_getCoolingSchedule(self)

    def setHeatingSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setHeatingSetpointTemperatureSchedule(self, schedule)

    def resetHeatingSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetHeatingSetpointTemperatureSchedule(self)

    def setCoolingSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setCoolingSetpointTemperatureSchedule(self, schedule)

    def resetCoolingSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetCoolingSetpointTemperatureSchedule(self)

    def setTemperatureDifferenceBetweenCutoutAndSetpoint(self, deltaT: "double") -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setTemperatureDifferenceBetweenCutoutAndSetpoint(self, deltaT)

    def setHeatingSchedule(self, s: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setHeatingSchedule(self, s)

    def resetHeatingSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetHeatingSchedule(self)

    def setCoolingSchedule(self, s: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setCoolingSchedule(self, s)

    def resetCoolingSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetCoolingSchedule(self)

# Register ThermostatSetpointDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.ThermostatSetpointDualSetpoint_swigregister(ThermostatSetpointDualSetpoint)

def ThermostatSetpointDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType()


def toThermostatSetpointDualSetpoint(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":
    return _openstudiomodelhvac.toThermostatSetpointDualSetpoint(idfObject)

def getThermostatSetpointDualSetpoint(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":
    return _openstudiomodelhvac.getThermostatSetpointDualSetpoint(t_model, t_handle)

def getThermostatSetpointDualSetpoints(t_model: "Model") -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > >":
    return _openstudiomodelhvac.getThermostatSetpointDualSetpoints(t_model)

def getThermostatSetpointDualSetpointByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":
    return _openstudiomodelhvac.getThermostatSetpointDualSetpointByName(t_model, t_name)

def getThermostatSetpointDualSetpointsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > >":
    return _openstudiomodelhvac.getThermostatSetpointDualSetpointsByName(t_model, t_name, t_exactMatch)

def _to_ThermostatSetpointDualSetpoint(self) -> OptionalThermostatSetpointDualSetpoint:
    return toThermostatSetpointDualSetpoint(self)
openstudioutilitiesidf.IdfObject.to_ThermostatSetpointDualSetpoint = _to_ThermostatSetpointDualSetpoint

def _getThermostatSetpointDualSetpoint(self, t_handle: "UUID") -> OptionalThermostatSetpointDualSetpoint:
    return getThermostatSetpointDualSetpoint(self, t_handle)
Model.getThermostatSetpointDualSetpoint = _getThermostatSetpointDualSetpoint

def _getThermostatSetpointDualSetpoint(self, t_handle_str: str) -> OptionalThermostatSetpointDualSetpoint:
    return getThermostatSetpointDualSetpoint(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermostatSetpointDualSetpoint = _getThermostatSetpointDualSetpoint

def _getThermostatSetpointDualSetpoints(self) -> ThermostatSetpointDualSetpointVector:
    return getThermostatSetpointDualSetpoints(self)
Model.getThermostatSetpointDualSetpoints = _getThermostatSetpointDualSetpoints

def _getThermostatSetpointDualSetpointByName(self, t_name: str) -> OptionalThermostatSetpointDualSetpoint:
    return getThermostatSetpointDualSetpointByName(self, t_name)
Model.getThermostatSetpointDualSetpointByName = _getThermostatSetpointDualSetpointByName

def _getThermostatSetpointDualSetpointsByName(self, t_name: str, t_exactMatch: bool) -> ThermostatSetpointDualSetpointVector:
    return getThermostatSetpointDualSetpointsByName(self, t_name, t_exactMatch)
Model.getThermostatSetpointDualSetpointsByName = _getThermostatSetpointDualSetpointsByName

class ZoneControlContaminantController(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ZoneControlContaminantController_swiginit(self, _openstudiomodelhvac.new_ZoneControlContaminantController(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlContaminantController

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneControlContaminantController_iddObjectType()

    def controlledZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.ZoneControlContaminantController_controlledZone(self)

    def carbonDioxideControlAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlContaminantController_carbonDioxideControlAvailabilitySchedule(self)

    def carbonDioxideSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlContaminantController_carbonDioxideSetpointSchedule(self)

    def minimumCarbonDioxideConcentrationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlContaminantController_minimumCarbonDioxideConcentrationSchedule(self)

    def genericContaminantControlAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlContaminantController_genericContaminantControlAvailabilitySchedule(self)

    def genericContaminantSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlContaminantController_genericContaminantSetpointSchedule(self)

    def setCarbonDioxideControlAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantController_setCarbonDioxideControlAvailabilitySchedule(self, schedule)

    def resetCarbonDioxideControlAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantController_resetCarbonDioxideControlAvailabilitySchedule(self)

    def setCarbonDioxideSetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantController_setCarbonDioxideSetpointSchedule(self, schedule)

    def resetCarbonDioxideSetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantController_resetCarbonDioxideSetpointSchedule(self)

    def setMinimumCarbonDioxideConcentrationSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantController_setMinimumCarbonDioxideConcentrationSchedule(self, schedule)

    def resetMinimumCarbonDioxideConcentrationSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantController_resetMinimumCarbonDioxideConcentrationSchedule(self)

    def setGenericContaminantControlAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantController_setGenericContaminantControlAvailabilitySchedule(self, schedule)

    def resetGenericContaminantControlAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantController_resetGenericContaminantControlAvailabilitySchedule(self)

    def setGenericContaminantSetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlContaminantController_setGenericContaminantSetpointSchedule(self, schedule)

    def resetGenericContaminantSetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlContaminantController_resetGenericContaminantSetpointSchedule(self)

# Register ZoneControlContaminantController in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlContaminantController_swigregister(ZoneControlContaminantController)

def ZoneControlContaminantController_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneControlContaminantController_iddObjectType()


def toZoneControlContaminantController(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneControlContaminantController >":
    return _openstudiomodelhvac.toZoneControlContaminantController(idfObject)

def getZoneControlContaminantController(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneControlContaminantController >":
    return _openstudiomodelhvac.getZoneControlContaminantController(t_model, t_handle)

def getZoneControlContaminantControllers(t_model: "Model") -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > >":
    return _openstudiomodelhvac.getZoneControlContaminantControllers(t_model)

def getZoneControlContaminantControllerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneControlContaminantController >":
    return _openstudiomodelhvac.getZoneControlContaminantControllerByName(t_model, t_name)

def getZoneControlContaminantControllersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > >":
    return _openstudiomodelhvac.getZoneControlContaminantControllersByName(t_model, t_name, t_exactMatch)

def _to_ZoneControlContaminantController(self) -> OptionalZoneControlContaminantController:
    return toZoneControlContaminantController(self)
openstudioutilitiesidf.IdfObject.to_ZoneControlContaminantController = _to_ZoneControlContaminantController

def _getZoneControlContaminantController(self, t_handle: "UUID") -> OptionalZoneControlContaminantController:
    return getZoneControlContaminantController(self, t_handle)
Model.getZoneControlContaminantController = _getZoneControlContaminantController

def _getZoneControlContaminantController(self, t_handle_str: str) -> OptionalZoneControlContaminantController:
    return getZoneControlContaminantController(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneControlContaminantController = _getZoneControlContaminantController

def _getZoneControlContaminantControllers(self) -> ZoneControlContaminantControllerVector:
    return getZoneControlContaminantControllers(self)
Model.getZoneControlContaminantControllers = _getZoneControlContaminantControllers

def _getZoneControlContaminantControllerByName(self, t_name: str) -> OptionalZoneControlContaminantController:
    return getZoneControlContaminantControllerByName(self, t_name)
Model.getZoneControlContaminantControllerByName = _getZoneControlContaminantControllerByName

def _getZoneControlContaminantControllersByName(self, t_name: str, t_exactMatch: bool) -> ZoneControlContaminantControllerVector:
    return getZoneControlContaminantControllersByName(self, t_name, t_exactMatch)
Model.getZoneControlContaminantControllersByName = _getZoneControlContaminantControllersByName

class ZoneControlHumidistat(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ZoneControlHumidistat_swiginit(self, _openstudiomodelhvac.new_ZoneControlHumidistat(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlHumidistat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneControlHumidistat_iddObjectType()

    def controlledZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.ZoneControlHumidistat_controlledZone(self)

    def humidifyingRelativeHumiditySetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlHumidistat_humidifyingRelativeHumiditySetpointSchedule(self)

    def dehumidifyingRelativeHumiditySetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlHumidistat_dehumidifyingRelativeHumiditySetpointSchedule(self)

    def setHumidifyingRelativeHumiditySetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlHumidistat_setHumidifyingRelativeHumiditySetpointSchedule(self, schedule)

    def setDehumidifyingRelativeHumiditySetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlHumidistat_setDehumidifyingRelativeHumiditySetpointSchedule(self, schedule)

    def resetHumidifyingRelativeHumiditySetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistat_resetHumidifyingRelativeHumiditySetpointSchedule(self)

    def resetDehumidifyingRelativeHumiditySetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlHumidistat_resetDehumidifyingRelativeHumiditySetpointSchedule(self)

# Register ZoneControlHumidistat in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlHumidistat_swigregister(ZoneControlHumidistat)

def ZoneControlHumidistat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneControlHumidistat_iddObjectType()


def toZoneControlHumidistat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneControlHumidistat >":
    return _openstudiomodelhvac.toZoneControlHumidistat(idfObject)

def getZoneControlHumidistat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneControlHumidistat >":
    return _openstudiomodelhvac.getZoneControlHumidistat(t_model, t_handle)

def getZoneControlHumidistats(t_model: "Model") -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > >":
    return _openstudiomodelhvac.getZoneControlHumidistats(t_model)

def getZoneControlHumidistatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneControlHumidistat >":
    return _openstudiomodelhvac.getZoneControlHumidistatByName(t_model, t_name)

def getZoneControlHumidistatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > >":
    return _openstudiomodelhvac.getZoneControlHumidistatsByName(t_model, t_name, t_exactMatch)

def _to_ZoneControlHumidistat(self) -> OptionalZoneControlHumidistat:
    return toZoneControlHumidistat(self)
openstudioutilitiesidf.IdfObject.to_ZoneControlHumidistat = _to_ZoneControlHumidistat

def _getZoneControlHumidistat(self, t_handle: "UUID") -> OptionalZoneControlHumidistat:
    return getZoneControlHumidistat(self, t_handle)
Model.getZoneControlHumidistat = _getZoneControlHumidistat

def _getZoneControlHumidistat(self, t_handle_str: str) -> OptionalZoneControlHumidistat:
    return getZoneControlHumidistat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneControlHumidistat = _getZoneControlHumidistat

def _getZoneControlHumidistats(self) -> ZoneControlHumidistatVector:
    return getZoneControlHumidistats(self)
Model.getZoneControlHumidistats = _getZoneControlHumidistats

def _getZoneControlHumidistatByName(self, t_name: str) -> OptionalZoneControlHumidistat:
    return getZoneControlHumidistatByName(self, t_name)
Model.getZoneControlHumidistatByName = _getZoneControlHumidistatByName

def _getZoneControlHumidistatsByName(self, t_name: str, t_exactMatch: bool) -> ZoneControlHumidistatVector:
    return getZoneControlHumidistatsByName(self, t_name, t_exactMatch)
Model.getZoneControlHumidistatsByName = _getZoneControlHumidistatsByName

class ZoneControlThermostatStagedDualSetpoint(Thermostat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_swiginit(self, _openstudiomodelhvac.new_ZoneControlThermostatStagedDualSetpoint(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlThermostatStagedDualSetpoint

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType()

    def numberofHeatingStages(self) -> "int":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_numberofHeatingStages(self)

    def heatingTemperatureSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_heatingTemperatureSetpointSchedule(self)

    def heatingThrottlingTemperatureRange(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_heatingThrottlingTemperatureRange(self)

    def stage1HeatingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage1HeatingTemperatureOffset(self)

    def stage2HeatingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage2HeatingTemperatureOffset(self)

    def stage3HeatingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage3HeatingTemperatureOffset(self)

    def stage4HeatingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage4HeatingTemperatureOffset(self)

    def numberofCoolingStages(self) -> "int":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_numberofCoolingStages(self)

    def coolingTemperatureSetpointBaseSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_coolingTemperatureSetpointBaseSchedule(self)

    def coolingThrottlingTemperatureRange(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_coolingThrottlingTemperatureRange(self)

    def stage1CoolingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage1CoolingTemperatureOffset(self)

    def stage2CoolingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage2CoolingTemperatureOffset(self)

    def stage3CoolingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage3CoolingTemperatureOffset(self)

    def stage4CoolingTemperatureOffset(self) -> "double":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage4CoolingTemperatureOffset(self)

    def setNumberofHeatingStages(self, numberofHeatingStages: "int") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setNumberofHeatingStages(self, numberofHeatingStages)

    def setHeatingTemperatureSetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setHeatingTemperatureSetpointSchedule(self, schedule)

    def resetHeatingTemperatureSetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_resetHeatingTemperatureSetpointSchedule(self)

    def setHeatingThrottlingTemperatureRange(self, heatingThrottlingTemperatureRange: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setHeatingThrottlingTemperatureRange(self, heatingThrottlingTemperatureRange)

    def setStage1HeatingTemperatureOffset(self, stage1HeatingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage1HeatingTemperatureOffset(self, stage1HeatingTemperatureOffset)

    def setStage2HeatingTemperatureOffset(self, stage2HeatingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage2HeatingTemperatureOffset(self, stage2HeatingTemperatureOffset)

    def setStage3HeatingTemperatureOffset(self, stage3HeatingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage3HeatingTemperatureOffset(self, stage3HeatingTemperatureOffset)

    def setStage4HeatingTemperatureOffset(self, stage4HeatingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage4HeatingTemperatureOffset(self, stage4HeatingTemperatureOffset)

    def setNumberofCoolingStages(self, numberofCoolingStages: "int") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setNumberofCoolingStages(self, numberofCoolingStages)

    def setCoolingTemperatureSetpointBaseSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setCoolingTemperatureSetpointBaseSchedule(self, schedule)

    def resetCoolingTemperatureSetpointBaseSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_resetCoolingTemperatureSetpointBaseSchedule(self)

    def setCoolingThrottlingTemperatureRange(self, coolingThrottlingTemperatureRange: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setCoolingThrottlingTemperatureRange(self, coolingThrottlingTemperatureRange)

    def setStage1CoolingTemperatureOffset(self, stage1CoolingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage1CoolingTemperatureOffset(self, stage1CoolingTemperatureOffset)

    def setStage2CoolingTemperatureOffset(self, stage2CoolingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage2CoolingTemperatureOffset(self, stage2CoolingTemperatureOffset)

    def setStage3CoolingTemperatureOffset(self, stage3CoolingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage3CoolingTemperatureOffset(self, stage3CoolingTemperatureOffset)

    def setStage4CoolingTemperatureOffset(self, stage4CoolingTemperatureOffset: "double") -> "bool":
        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage4CoolingTemperatureOffset(self, stage4CoolingTemperatureOffset)

# Register ZoneControlThermostatStagedDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_swigregister(ZoneControlThermostatStagedDualSetpoint)

def ZoneControlThermostatStagedDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType()


def toZoneControlThermostatStagedDualSetpoint(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":
    return _openstudiomodelhvac.toZoneControlThermostatStagedDualSetpoint(idfObject)

def getZoneControlThermostatStagedDualSetpoint(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":
    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoint(t_model, t_handle)

def getZoneControlThermostatStagedDualSetpoints(t_model: "Model") -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > >":
    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoints(t_model)

def getZoneControlThermostatStagedDualSetpointByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":
    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointByName(t_model, t_name)

def getZoneControlThermostatStagedDualSetpointsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > >":
    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointsByName(t_model, t_name, t_exactMatch)

def _to_ZoneControlThermostatStagedDualSetpoint(self) -> OptionalZoneControlThermostatStagedDualSetpoint:
    return toZoneControlThermostatStagedDualSetpoint(self)
openstudioutilitiesidf.IdfObject.to_ZoneControlThermostatStagedDualSetpoint = _to_ZoneControlThermostatStagedDualSetpoint

def _getZoneControlThermostatStagedDualSetpoint(self, t_handle: "UUID") -> OptionalZoneControlThermostatStagedDualSetpoint:
    return getZoneControlThermostatStagedDualSetpoint(self, t_handle)
Model.getZoneControlThermostatStagedDualSetpoint = _getZoneControlThermostatStagedDualSetpoint

def _getZoneControlThermostatStagedDualSetpoint(self, t_handle_str: str) -> OptionalZoneControlThermostatStagedDualSetpoint:
    return getZoneControlThermostatStagedDualSetpoint(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneControlThermostatStagedDualSetpoint = _getZoneControlThermostatStagedDualSetpoint

def _getZoneControlThermostatStagedDualSetpoints(self) -> ZoneControlThermostatStagedDualSetpointVector:
    return getZoneControlThermostatStagedDualSetpoints(self)
Model.getZoneControlThermostatStagedDualSetpoints = _getZoneControlThermostatStagedDualSetpoints

def _getZoneControlThermostatStagedDualSetpointByName(self, t_name: str) -> OptionalZoneControlThermostatStagedDualSetpoint:
    return getZoneControlThermostatStagedDualSetpointByName(self, t_name)
Model.getZoneControlThermostatStagedDualSetpointByName = _getZoneControlThermostatStagedDualSetpointByName

def _getZoneControlThermostatStagedDualSetpointsByName(self, t_name: str, t_exactMatch: bool) -> ZoneControlThermostatStagedDualSetpointVector:
    return getZoneControlThermostatStagedDualSetpointsByName(self, t_name, t_exactMatch)
Model.getZoneControlThermostatStagedDualSetpointsByName = _getZoneControlThermostatStagedDualSetpointsByName

class AirLoopHVAC(Loop):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", dualDuct: "bool"=False):
        _openstudiomodelhvac.AirLoopHVAC_swiginit(self, _openstudiomodelhvac.new_AirLoopHVAC(model, dualDuct))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVAC

    def designSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirLoopHVAC_designSupplyAirFlowRate(self)

    def isDesignSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_isDesignSupplyAirFlowRateAutosized(self)

    def setDesignSupplyAirFlowRate(self, designSupplyAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setDesignSupplyAirFlowRate(self, designSupplyAirFlowRate)

    def resetDesignSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVAC_resetDesignSupplyAirFlowRate(self)

    def autosizeDesignSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVAC_autosizeDesignSupplyAirFlowRate(self)

    def designReturnAirFlowFractionofSupplyAirFlow(self) -> "double":
        return _openstudiomodelhvac.AirLoopHVAC_designReturnAirFlowFractionofSupplyAirFlow(self)

    def setDesignReturnAirFlowFractionofSupplyAirFlow(self, designReturnAirFlowFractionofSupplyAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setDesignReturnAirFlowFractionofSupplyAirFlow(self, designReturnAirFlowFractionofSupplyAirFlow)

    def supplyInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.AirLoopHVAC_supplyInletNode(self)

    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.AirLoopHVAC_supplyOutletNodes(self)

    def supplyOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.AirLoopHVAC_supplyOutletNode(self)

    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.AirLoopHVAC_demandInletNodes(self)

    def demandInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.AirLoopHVAC_demandInletNode(self)

    def demandOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.AirLoopHVAC_demandOutletNode(self)

    def outdoorAirNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVAC_outdoorAirNode(self)

    def reliefAirNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVAC_reliefAirNode(self)

    def mixedAirNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVAC_mixedAirNode(self)

    def returnAirNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVAC_returnAirNode(self)

    def isDualDuct(self) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_isDualDuct(self)

    def supplySplitter(self) -> "boost::optional< openstudio::model::Splitter >":
        return _openstudiomodelhvac.AirLoopHVAC_supplySplitter(self)

    def removeSupplySplitter(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_removeSupplySplitter(self, *args)

    def supplySplitterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVAC_supplySplitterInletNode(self)

    def supplySplitterOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.AirLoopHVAC_supplySplitterOutletNodes(self)

    def zoneSplitter(self) -> "openstudio::model::AirLoopHVACZoneSplitter":
        return _openstudiomodelhvac.AirLoopHVAC_zoneSplitter(self)

    def zoneSplitters(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":
        return _openstudiomodelhvac.AirLoopHVAC_zoneSplitters(self)

    def zoneMixer(self) -> "openstudio::model::AirLoopHVACZoneMixer":
        return _openstudiomodelhvac.AirLoopHVAC_zoneMixer(self)

    def oaComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.AirLoopHVAC_oaComponents(self, *args)

    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
        return _openstudiomodelhvac.AirLoopHVAC_airLoopHVACOutdoorAirSystem(self)

    def supplyFan(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelhvac.AirLoopHVAC_supplyFan(self)

    def returnFan(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelhvac.AirLoopHVAC_returnFan(self)

    def reliefFan(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelhvac.AirLoopHVAC_reliefFan(self)

    def addBranchForZone(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_addBranchForZone(self, *args)

    def multiAddBranchForZone(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_multiAddBranchForZone(self, *args)

    def addBranchForHVACComponent(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_addBranchForHVACComponent(self, hvacComponent)

    def removeBranchForZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_removeBranchForZone(self, thermalZone)

    def sizingSystem(self) -> "openstudio::model::SizingSystem":
        return _openstudiomodelhvac.AirLoopHVAC_sizingSystem(self)

    def thermalZones(self) -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":
        return _openstudiomodelhvac.AirLoopHVAC_thermalZones(self)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.AirLoopHVAC_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilitySchedule(self, schedule)

    def setNightCycleControlType(self, controlType: "std::string const &") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setNightCycleControlType(self, controlType)

    def nightCycleControlType(self) -> "std::string":
        return _openstudiomodelhvac.AirLoopHVAC_nightCycleControlType(self)

    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":
        return _openstudiomodelhvac.AirLoopHVAC_availabilityManagers(self)

    def addAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_addAvailabilityManager(self, *args)

    def setAvailabilityManagers(self, avms: "AvailabilityManagerVector") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManagers(self, avms)

    def resetAvailabilityManagers(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVAC_resetAvailabilityManagers(self)

    def removeAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_removeAvailabilityManager(self, *args)

    def setAvailabilityManagerPriority(self, availabilityManager: "AvailabilityManager", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManagerPriority(self, availabilityManager, priority)

    def availabilityManagerPriority(self, availabilityManager: "AvailabilityManager") -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVAC_availabilityManagerPriority(self, availabilityManager)

    def availabilityManager(self) -> "boost::optional< openstudio::model::AvailabilityManager >":
        return _openstudiomodelhvac.AirLoopHVAC_availabilityManager(self)

    def setAvailabilityManager(self, availabilityManager: "AvailabilityManager") -> "bool":
        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManager(self, availabilityManager)

    def resetAvailabilityManager(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVAC_resetAvailabilityManager(self)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.AirLoopHVAC_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.AirLoopHVAC_clone(self, model)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVAC_iddObjectType()

    def autosizedDesignSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirLoopHVAC_autosizedDesignSupplyAirFlowRate(self)

# Register AirLoopHVAC in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVAC_swigregister(AirLoopHVAC)

def AirLoopHVAC_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVAC_iddObjectType()


def toAirLoopHVAC(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVAC >":
    return _openstudiomodelhvac.toAirLoopHVAC(idfObject)

def getAirLoopHVAC(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVAC >":
    return _openstudiomodelhvac.getAirLoopHVAC(t_model, t_handle)

def getAirLoopHVACs(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":
    return _openstudiomodelhvac.getAirLoopHVACs(t_model)

def getAirLoopHVACByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVAC >":
    return _openstudiomodelhvac.getAirLoopHVACByName(t_model, t_name)

def getAirLoopHVACsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":
    return _openstudiomodelhvac.getAirLoopHVACsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVAC(self) -> OptionalAirLoopHVAC:
    return toAirLoopHVAC(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVAC = _to_AirLoopHVAC

def _getAirLoopHVAC(self, t_handle: "UUID") -> OptionalAirLoopHVAC:
    return getAirLoopHVAC(self, t_handle)
Model.getAirLoopHVAC = _getAirLoopHVAC

def _getAirLoopHVAC(self, t_handle_str: str) -> OptionalAirLoopHVAC:
    return getAirLoopHVAC(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVAC = _getAirLoopHVAC

def _getAirLoopHVACs(self) -> AirLoopHVACVector:
    return getAirLoopHVACs(self)
Model.getAirLoopHVACs = _getAirLoopHVACs

def _getAirLoopHVACByName(self, t_name: str) -> OptionalAirLoopHVAC:
    return getAirLoopHVACByName(self, t_name)
Model.getAirLoopHVACByName = _getAirLoopHVACByName

def _getAirLoopHVACsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACVector:
    return getAirLoopHVACsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACsByName = _getAirLoopHVACsByName

class SizingPlant(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", plantLoop: "PlantLoop"):
        _openstudiomodelhvac.SizingPlant_swiginit(self, _openstudiomodelhvac.new_SizingPlant(model, plantLoop))
    __swig_destroy__ = _openstudiomodelhvac.delete_SizingPlant

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SizingPlant_iddObjectType()

    @staticmethod
    def loopTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingPlant_loopTypeValues()

    @staticmethod
    def sizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingPlant_sizingOptionValues()

    @staticmethod
    def coincidentSizingFactorModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues()

    def plantLoop(self) -> "openstudio::model::PlantLoop":
        return _openstudiomodelhvac.SizingPlant_plantLoop(self)

    def setPlantLoop(self, plantLoop: "PlantLoop") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setPlantLoop(self, plantLoop)

    def loopType(self) -> "std::string":
        return _openstudiomodelhvac.SizingPlant_loopType(self)

    def setLoopType(self, loopType: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setLoopType(self, loopType)

    def designLoopExitTemperature(self) -> "double":
        return _openstudiomodelhvac.SizingPlant_designLoopExitTemperature(self)

    def setDesignLoopExitTemperature(self, designLoopExitTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setDesignLoopExitTemperature(self, designLoopExitTemperature)

    def loopDesignTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SizingPlant_loopDesignTemperatureDifference(self)

    def setLoopDesignTemperatureDifference(self, loopDesignTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setLoopDesignTemperatureDifference(self, loopDesignTemperatureDifference)

    def sizingOption(self) -> "std::string":
        return _openstudiomodelhvac.SizingPlant_sizingOption(self)

    def setSizingOption(self, sizingOption: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setSizingOption(self, sizingOption)

    def zoneTimestepsinAveragingWindow(self) -> "int":
        return _openstudiomodelhvac.SizingPlant_zoneTimestepsinAveragingWindow(self)

    def setZoneTimestepsinAveragingWindow(self, zoneTimestepsinAveragingWindow: "int") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setZoneTimestepsinAveragingWindow(self, zoneTimestepsinAveragingWindow)

    def coincidentSizingFactorMode(self) -> "std::string":
        return _openstudiomodelhvac.SizingPlant_coincidentSizingFactorMode(self)

    def setCoincidentSizingFactorMode(self, coincidentSizingFactorMode: "std::string") -> "bool":
        return _openstudiomodelhvac.SizingPlant_setCoincidentSizingFactorMode(self, coincidentSizingFactorMode)

# Register SizingPlant in _openstudiomodelhvac:
_openstudiomodelhvac.SizingPlant_swigregister(SizingPlant)

def SizingPlant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SizingPlant_iddObjectType()

def SizingPlant_loopTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingPlant_loopTypeValues()

def SizingPlant_sizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingPlant_sizingOptionValues()

def SizingPlant_coincidentSizingFactorModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues()


def toSizingPlant(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SizingPlant >":
    return _openstudiomodelhvac.toSizingPlant(idfObject)

def getSizingPlant(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SizingPlant >":
    return _openstudiomodelhvac.getSizingPlant(t_model, t_handle)

def getSizingPlants(t_model: "Model") -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > >":
    return _openstudiomodelhvac.getSizingPlants(t_model)

def getSizingPlantByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SizingPlant >":
    return _openstudiomodelhvac.getSizingPlantByName(t_model, t_name)

def getSizingPlantsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > >":
    return _openstudiomodelhvac.getSizingPlantsByName(t_model, t_name, t_exactMatch)

def _to_SizingPlant(self) -> OptionalSizingPlant:
    return toSizingPlant(self)
openstudioutilitiesidf.IdfObject.to_SizingPlant = _to_SizingPlant

def _getSizingPlant(self, t_handle: "UUID") -> OptionalSizingPlant:
    return getSizingPlant(self, t_handle)
Model.getSizingPlant = _getSizingPlant

def _getSizingPlant(self, t_handle_str: str) -> OptionalSizingPlant:
    return getSizingPlant(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSizingPlant = _getSizingPlant

def _getSizingPlants(self) -> SizingPlantVector:
    return getSizingPlants(self)
Model.getSizingPlants = _getSizingPlants

def _getSizingPlantByName(self, t_name: str) -> OptionalSizingPlant:
    return getSizingPlantByName(self, t_name)
Model.getSizingPlantByName = _getSizingPlantByName

def _getSizingPlantsByName(self, t_name: str, t_exactMatch: bool) -> SizingPlantVector:
    return getSizingPlantsByName(self, t_name, t_exactMatch)
Model.getSizingPlantsByName = _getSizingPlantsByName

class PlantLoop(Loop):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.PlantLoop_swiginit(self, _openstudiomodelhvac.new_PlantLoop(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantLoop

    @staticmethod
    def loadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues()

    @staticmethod
    def fluidTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.PlantLoop_fluidTypeValues()

    def loadDistributionScheme(self) -> "std::string":
        return _openstudiomodelhvac.PlantLoop_loadDistributionScheme(self)

    def setLoadDistributionScheme(self, scheme: "std::string") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setLoadDistributionScheme(self, scheme)

    def fluidType(self) -> "std::string":
        return _openstudiomodelhvac.PlantLoop_fluidType(self)

    def setFluidType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setFluidType(self, value)

    def setGlycolConcentration(self, glycolConcentration: "int") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setGlycolConcentration(self, glycolConcentration)

    def glycolConcentration(self) -> "int":
        return _openstudiomodelhvac.PlantLoop_glycolConcentration(self)

    def loopTemperatureSetpointNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.PlantLoop_loopTemperatureSetpointNode(self)

    def setLoopTemperatureSetpointNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setLoopTemperatureSetpointNode(self, node)

    def maximumLoopTemperature(self) -> "double":
        return _openstudiomodelhvac.PlantLoop_maximumLoopTemperature(self)

    def setMaximumLoopTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setMaximumLoopTemperature(self, value)

    def minimumLoopTemperature(self) -> "double":
        return _openstudiomodelhvac.PlantLoop_minimumLoopTemperature(self)

    def setMinimumLoopTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setMinimumLoopTemperature(self, value)

    def maximumLoopFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.PlantLoop_maximumLoopFlowRate(self)

    def setMaximumLoopFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setMaximumLoopFlowRate(self, value)

    def isMaximumLoopFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.PlantLoop_isMaximumLoopFlowRateAutosized(self)

    def autosizeMaximumLoopFlowRate(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_autosizeMaximumLoopFlowRate(self)

    def minimumLoopFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.PlantLoop_minimumLoopFlowRate(self)

    def setMinimumLoopFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setMinimumLoopFlowRate(self, value)

    def isMinimumLoopFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.PlantLoop_isMinimumLoopFlowRateAutosized(self)

    def autosizeMinimumLoopFlowRate(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_autosizeMinimumLoopFlowRate(self)

    def plantLoopVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.PlantLoop_plantLoopVolume(self)

    def setPlantLoopVolume(self, value: "double") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPlantLoopVolume(self, value)

    def isPlantLoopVolumeAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.PlantLoop_isPlantLoopVolumeAutocalculated(self)

    def autocalculatePlantLoopVolume(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_autocalculatePlantLoopVolume(self)

    def commonPipeSimulation(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.PlantLoop_commonPipeSimulation(self)

    def setCommonPipeSimulation(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setCommonPipeSimulation(self, value)

    def resetCommonPipeSimulation(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetCommonPipeSimulation(self)

    def plantEquipmentOperationHeatingLoad(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationHeatingLoad(self)

    def setPlantEquipmentOperationHeatingLoad(self, plantOperation: "openstudio::model::PlantEquipmentOperationHeatingLoad const &") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationHeatingLoad(self, plantOperation)

    def resetPlantEquipmentOperationHeatingLoad(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationHeatingLoad(self)

    def setPlantEquipmentOperationHeatingLoadSchedule(self, arg2: "Schedule") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationHeatingLoadSchedule(self, arg2)

    def resetPlantEquipmentOperationHeatingLoadSchedule(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationHeatingLoadSchedule(self)

    def plantEquipmentOperationHeatingLoadSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationHeatingLoadSchedule(self)

    def plantEquipmentOperationCoolingLoad(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationCoolingLoad(self)

    def setPlantEquipmentOperationCoolingLoad(self, plantOperation: "openstudio::model::PlantEquipmentOperationCoolingLoad const &") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationCoolingLoad(self, plantOperation)

    def resetPlantEquipmentOperationCoolingLoad(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationCoolingLoad(self)

    def setPlantEquipmentOperationCoolingLoadSchedule(self, arg2: "Schedule") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationCoolingLoadSchedule(self, arg2)

    def plantEquipmentOperationCoolingLoadSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationCoolingLoadSchedule(self)

    def resetPlantEquipmentOperationCoolingLoadSchedule(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationCoolingLoadSchedule(self)

    def primaryPlantEquipmentOperationScheme(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":
        return _openstudiomodelhvac.PlantLoop_primaryPlantEquipmentOperationScheme(self)

    def setPrimaryPlantEquipmentOperationScheme(self, plantOperation: "PlantEquipmentOperationScheme") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPrimaryPlantEquipmentOperationScheme(self, plantOperation)

    def resetPrimaryPlantEquipmentOperationScheme(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPrimaryPlantEquipmentOperationScheme(self)

    def setPrimaryPlantEquipmentOperationSchemeSchedule(self, arg2: "Schedule") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setPrimaryPlantEquipmentOperationSchemeSchedule(self, arg2)

    def resetPrimaryPlantEquipmentOperationSchemeSchedule(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetPrimaryPlantEquipmentOperationSchemeSchedule(self)

    def primaryPlantEquipmentOperationSchemeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.PlantLoop_primaryPlantEquipmentOperationSchemeSchedule(self)

    def setComponentSetpointOperationSchemeSchedule(self, arg2: "Schedule") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setComponentSetpointOperationSchemeSchedule(self, arg2)

    def resetComponentSetpointOperationSchemeSchedule(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetComponentSetpointOperationSchemeSchedule(self)

    def componentSetpointOperationSchemeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.PlantLoop_componentSetpointOperationSchemeSchedule(self)

    def supplyInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.PlantLoop_supplyInletNode(self)

    def supplyOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.PlantLoop_supplyOutletNode(self)

    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.PlantLoop_supplyOutletNodes(self)

    def demandInletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.PlantLoop_demandInletNode(self)

    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":
        return _openstudiomodelhvac.PlantLoop_demandInletNodes(self)

    def demandOutletNode(self) -> "openstudio::model::Node":
        return _openstudiomodelhvac.PlantLoop_demandOutletNode(self)

    def supplyMixer(self) -> "openstudio::model::Mixer":
        return _openstudiomodelhvac.PlantLoop_supplyMixer(self)

    def supplySplitter(self) -> "openstudio::model::Splitter":
        return _openstudiomodelhvac.PlantLoop_supplySplitter(self)

    def demandMixer(self) -> "openstudio::model::Mixer":
        return _openstudiomodelhvac.PlantLoop_demandMixer(self)

    def demandSplitter(self) -> "openstudio::model::Splitter":
        return _openstudiomodelhvac.PlantLoop_demandSplitter(self)

    def addSupplyBranchForComponent(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelhvac.PlantLoop_addSupplyBranchForComponent(self, hvacComponent)

    def removeSupplyBranchWithComponent(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelhvac.PlantLoop_removeSupplyBranchWithComponent(self, hvacComponent)

    def addDemandBranchForComponent(self, hvacComponent: "HVACComponent", tertiary: "bool"=False) -> "bool":
        return _openstudiomodelhvac.PlantLoop_addDemandBranchForComponent(self, hvacComponent, tertiary)

    def removeDemandBranchWithComponent(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelhvac.PlantLoop_removeDemandBranchWithComponent(self, hvacComponent)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.PlantLoop_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.PlantLoop_clone(self, model)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.PlantLoop_iddObjectType()

    def sizingPlant(self) -> "openstudio::model::SizingPlant":
        return _openstudiomodelhvac.PlantLoop_sizingPlant(self)

    def autosizedMaximumLoopFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.PlantLoop_autosizedMaximumLoopFlowRate(self)

    def autosizedPlantLoopVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.PlantLoop_autosizedPlantLoopVolume(self)

    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":
        return _openstudiomodelhvac.PlantLoop_availabilityManagers(self)

    def addAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.PlantLoop_addAvailabilityManager(self, *args)

    def setAvailabilityManagers(self, avms: "AvailabilityManagerVector") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setAvailabilityManagers(self, avms)

    def resetAvailabilityManagers(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetAvailabilityManagers(self)

    def removeAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.PlantLoop_removeAvailabilityManager(self, *args)

    def setAvailabilityManagerPriority(self, availabilityManager: "AvailabilityManager", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setAvailabilityManagerPriority(self, availabilityManager, priority)

    def availabilityManagerPriority(self, availabilityManager: "AvailabilityManager") -> "unsigned int":
        return _openstudiomodelhvac.PlantLoop_availabilityManagerPriority(self, availabilityManager)

    def availabilityManager(self) -> "boost::optional< openstudio::model::AvailabilityManager >":
        return _openstudiomodelhvac.PlantLoop_availabilityManager(self)

    def setAvailabilityManager(self, availabilityManager: "AvailabilityManager") -> "bool":
        return _openstudiomodelhvac.PlantLoop_setAvailabilityManager(self, availabilityManager)

    def resetAvailabilityManager(self) -> "void":
        return _openstudiomodelhvac.PlantLoop_resetAvailabilityManager(self)

# Register PlantLoop in _openstudiomodelhvac:
_openstudiomodelhvac.PlantLoop_swigregister(PlantLoop)

def PlantLoop_loadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues()

def PlantLoop_fluidTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.PlantLoop_fluidTypeValues()

def PlantLoop_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.PlantLoop_iddObjectType()


def toPlantLoop(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantLoop >":
    return _openstudiomodelhvac.toPlantLoop(idfObject)

def getPlantLoop(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantLoop >":
    return _openstudiomodelhvac.getPlantLoop(t_model, t_handle)

def getPlantLoops(t_model: "Model") -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > >":
    return _openstudiomodelhvac.getPlantLoops(t_model)

def getPlantLoopByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantLoop >":
    return _openstudiomodelhvac.getPlantLoopByName(t_model, t_name)

def getPlantLoopsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > >":
    return _openstudiomodelhvac.getPlantLoopsByName(t_model, t_name, t_exactMatch)

def _to_PlantLoop(self) -> OptionalPlantLoop:
    return toPlantLoop(self)
openstudioutilitiesidf.IdfObject.to_PlantLoop = _to_PlantLoop

def _getPlantLoop(self, t_handle: "UUID") -> OptionalPlantLoop:
    return getPlantLoop(self, t_handle)
Model.getPlantLoop = _getPlantLoop

def _getPlantLoop(self, t_handle_str: str) -> OptionalPlantLoop:
    return getPlantLoop(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantLoop = _getPlantLoop

def _getPlantLoops(self) -> PlantLoopVector:
    return getPlantLoops(self)
Model.getPlantLoops = _getPlantLoops

def _getPlantLoopByName(self, t_name: str) -> OptionalPlantLoop:
    return getPlantLoopByName(self, t_name)
Model.getPlantLoopByName = _getPlantLoopByName

def _getPlantLoopsByName(self, t_name: str, t_exactMatch: bool) -> PlantLoopVector:
    return getPlantLoopsByName(self, t_name, t_exactMatch)
Model.getPlantLoopsByName = _getPlantLoopsByName

class PlantEquipmentOperationScheme(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.PlantEquipmentOperationScheme_swiginit(self, _openstudiomodelhvac.new_PlantEquipmentOperationScheme(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationScheme

    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.PlantEquipmentOperationScheme_plantLoop(self)

# Register PlantEquipmentOperationScheme in _openstudiomodelhvac:
_openstudiomodelhvac.PlantEquipmentOperationScheme_swigregister(PlantEquipmentOperationScheme)


def toPlantEquipmentOperationScheme(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":
    return _openstudiomodelhvac.toPlantEquipmentOperationScheme(idfObject)

def getPlantEquipmentOperationScheme(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":
    return _openstudiomodelhvac.getPlantEquipmentOperationScheme(t_model, t_handle)

def getPlantEquipmentOperationSchemes(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > >":
    return _openstudiomodelhvac.getPlantEquipmentOperationSchemes(t_model)

def getPlantEquipmentOperationSchemeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":
    return _openstudiomodelhvac.getPlantEquipmentOperationSchemeByName(t_model, t_name)

def getPlantEquipmentOperationSchemesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > >":
    return _openstudiomodelhvac.getPlantEquipmentOperationSchemesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationScheme(self) -> OptionalPlantEquipmentOperationScheme:
    return toPlantEquipmentOperationScheme(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationScheme = _to_PlantEquipmentOperationScheme

def _getPlantEquipmentOperationScheme(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationScheme:
    return getPlantEquipmentOperationScheme(self, t_handle)
Model.getPlantEquipmentOperationScheme = _getPlantEquipmentOperationScheme

def _getPlantEquipmentOperationScheme(self, t_handle_str: str) -> OptionalPlantEquipmentOperationScheme:
    return getPlantEquipmentOperationScheme(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationScheme = _getPlantEquipmentOperationScheme

def _getPlantEquipmentOperationSchemes(self) -> PlantEquipmentOperationSchemeVector:
    return getPlantEquipmentOperationSchemes(self)
Model.getPlantEquipmentOperationSchemes = _getPlantEquipmentOperationSchemes

def _getPlantEquipmentOperationSchemeByName(self, t_name: str) -> OptionalPlantEquipmentOperationScheme:
    return getPlantEquipmentOperationSchemeByName(self, t_name)
Model.getPlantEquipmentOperationSchemeByName = _getPlantEquipmentOperationSchemeByName

def _getPlantEquipmentOperationSchemesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationSchemeVector:
    return getPlantEquipmentOperationSchemesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationSchemesByName = _getPlantEquipmentOperationSchemesByName

class PlantEquipmentOperationRangeBasedScheme(PlantEquipmentOperationScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_swiginit(self, _openstudiomodelhvac.new_PlantEquipmentOperationRangeBasedScheme(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationRangeBasedScheme

    def maximumUpperLimit(self) -> "double":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_maximumUpperLimit(self)

    def minimumLowerLimit(self) -> "double":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_minimumLowerLimit(self)

    def addLoadRange(self, upperLimit: "double", equipment: "HVACComponentVector") -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_addLoadRange(self, upperLimit, equipment)

    def removeLoadRange(self, upperLimit: "double") -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_removeLoadRange(self, upperLimit)

    def loadRangeUpperLimits(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_loadRangeUpperLimits(self)

    def equipment(self, upperLimit: "double") -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_equipment(self, upperLimit)

    def addEquipment(self, *args) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_addEquipment(self, *args)

    def replaceEquipment(self, *args) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_replaceEquipment(self, *args)

    def removeEquipment(self, *args) -> "bool":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_removeEquipment(self, *args)

    def clearLoadRanges(self) -> "void":
        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_clearLoadRanges(self)

# Register PlantEquipmentOperationRangeBasedScheme in _openstudiomodelhvac:
_openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_swigregister(PlantEquipmentOperationRangeBasedScheme)


def toPlantEquipmentOperationRangeBasedScheme(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":
    return _openstudiomodelhvac.toPlantEquipmentOperationRangeBasedScheme(idfObject)

def getPlantEquipmentOperationRangeBasedScheme(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":
    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedScheme(t_model, t_handle)

def getPlantEquipmentOperationRangeBasedSchemes(t_model: "Model") -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > >":
    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemes(t_model)

def getPlantEquipmentOperationRangeBasedSchemeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":
    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemeByName(t_model, t_name)

def getPlantEquipmentOperationRangeBasedSchemesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > >":
    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationRangeBasedScheme(self) -> OptionalPlantEquipmentOperationRangeBasedScheme:
    return toPlantEquipmentOperationRangeBasedScheme(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationRangeBasedScheme = _to_PlantEquipmentOperationRangeBasedScheme

def _getPlantEquipmentOperationRangeBasedScheme(self, t_handle: "UUID") -> OptionalPlantEquipmentOperationRangeBasedScheme:
    return getPlantEquipmentOperationRangeBasedScheme(self, t_handle)
Model.getPlantEquipmentOperationRangeBasedScheme = _getPlantEquipmentOperationRangeBasedScheme

def _getPlantEquipmentOperationRangeBasedScheme(self, t_handle_str: str) -> OptionalPlantEquipmentOperationRangeBasedScheme:
    return getPlantEquipmentOperationRangeBasedScheme(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantEquipmentOperationRangeBasedScheme = _getPlantEquipmentOperationRangeBasedScheme

def _getPlantEquipmentOperationRangeBasedSchemes(self) -> PlantEquipmentOperationRangeBasedSchemeVector:
    return getPlantEquipmentOperationRangeBasedSchemes(self)
Model.getPlantEquipmentOperationRangeBasedSchemes = _getPlantEquipmentOperationRangeBasedSchemes

def _getPlantEquipmentOperationRangeBasedSchemeByName(self, t_name: str) -> OptionalPlantEquipmentOperationRangeBasedScheme:
    return getPlantEquipmentOperationRangeBasedSchemeByName(self, t_name)
Model.getPlantEquipmentOperationRangeBasedSchemeByName = _getPlantEquipmentOperationRangeBasedSchemeByName

def _getPlantEquipmentOperationRangeBasedSchemesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationRangeBasedSchemeVector:
    return getPlantEquipmentOperationRangeBasedSchemesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationRangeBasedSchemesByName = _getPlantEquipmentOperationRangeBasedSchemesByName

class PlantComponentUserDefined(StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.PlantComponentUserDefined_swiginit(self, _openstudiomodelhvac.new_PlantComponentUserDefined(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_PlantComponentUserDefined

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.PlantComponentUserDefined_iddObjectType()

    @staticmethod
    def plantLoadingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues()

    @staticmethod
    def plantLoopFlowRequestModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues()

    def plantLoadingMode(self) -> "std::string":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingMode(self)

    def plantLoopFlowRequestMode(self) -> "std::string":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestMode(self)

    def mainModelProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
        return _openstudiomodelhvac.PlantComponentUserDefined_mainModelProgramCallingManager(self)

    def plantInitializationProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantInitializationProgramCallingManager(self)

    def plantSimulationProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantSimulationProgramCallingManager(self)

    def mainModelProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelhvac.PlantComponentUserDefined_mainModelProgram(self)

    def plantInitializationProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantInitializationProgram(self)

    def plantSimulationProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelhvac.PlantComponentUserDefined_plantSimulationProgram(self)

    def ambientZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.PlantComponentUserDefined_ambientZone(self)

    def designVolumeFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_designVolumeFlowRateActuator(self)

    def minimumMassFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_minimumMassFlowRateActuator(self)

    def maximumMassFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_maximumMassFlowRateActuator(self)

    def minimumLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_minimumLoadingCapacityActuator(self)

    def maximumLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_maximumLoadingCapacityActuator(self)

    def optimalLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_optimalLoadingCapacityActuator(self)

    def outletTemperatureActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_outletTemperatureActuator(self)

    def massFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelhvac.PlantComponentUserDefined_massFlowRateActuator(self)

    def setPlantLoadingMode(self, plantLoadingMode: "std::string const &") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantLoadingMode(self, plantLoadingMode)

    def setPlantLoopFlowRequestMode(self, plantLoopFlowRequestMode: "std::string const &") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantLoopFlowRequestMode(self, plantLoopFlowRequestMode)

    def setMainModelProgramCallingManager(self, energyManagementSystemProgramCallingManager: "EnergyManagementSystemProgramCallingManager") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMainModelProgramCallingManager(self, energyManagementSystemProgramCallingManager)

    def resetMainModelProgramCallingManager(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetMainModelProgramCallingManager(self)

    def setPlantInitializationProgramCallingManager(self, energyManagementSystemProgramCallingManager: "EnergyManagementSystemProgramCallingManager") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantInitializationProgramCallingManager(self, energyManagementSystemProgramCallingManager)

    def resetPlantInitializationProgramCallingManager(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantInitializationProgramCallingManager(self)

    def setPlantSimulationProgramCallingManager(self, energyManagementSystemProgramCallingManager: "EnergyManagementSystemProgramCallingManager") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantSimulationProgramCallingManager(self, energyManagementSystemProgramCallingManager)

    def resetPlantSimulationProgramCallingManager(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantSimulationProgramCallingManager(self)

    def setMainModelProgram(self, energyManagementSystemProgram: "EnergyManagementSystemProgram") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMainModelProgram(self, energyManagementSystemProgram)

    def resetMainModelProgram(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetMainModelProgram(self)

    def setPlantInitializationProgram(self, energyManagementSystemProgram: "EnergyManagementSystemProgram") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantInitializationProgram(self, energyManagementSystemProgram)

    def resetPlantInitializationProgram(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantInitializationProgram(self)

    def setPlantSimulationProgram(self, energyManagementSystemProgram: "EnergyManagementSystemProgram") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantSimulationProgram(self, energyManagementSystemProgram)

    def resetPlantSimulationProgram(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantSimulationProgram(self)

    def setAmbientZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setAmbientZone(self, thermalZone)

    def resetAmbientZone(self) -> "void":
        return _openstudiomodelhvac.PlantComponentUserDefined_resetAmbientZone(self)

    def setDesignVolumeFlowRateActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setDesignVolumeFlowRateActuator(self, energyManagementSystemActuator)

    def setMinimumMassFlowRateActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMinimumMassFlowRateActuator(self, energyManagementSystemActuator)

    def setMaximumMassFlowRateActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMaximumMassFlowRateActuator(self, energyManagementSystemActuator)

    def setMinimumLoadingCapacityActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMinimumLoadingCapacityActuator(self, energyManagementSystemActuator)

    def setMaximumLoadingCapacityActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMaximumLoadingCapacityActuator(self, energyManagementSystemActuator)

    def setOptimalLoadingCapacityActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setOptimalLoadingCapacityActuator(self, energyManagementSystemActuator)

    def setOutletTemperatureActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setOutletTemperatureActuator(self, energyManagementSystemActuator)

    def setMassFlowRateActuator(self, energyManagementSystemActuator: "EnergyManagementSystemActuator") -> "bool":
        return _openstudiomodelhvac.PlantComponentUserDefined_setMassFlowRateActuator(self, energyManagementSystemActuator)

    def createInitProgram(self, dvfrActuator: "EnergyManagementSystemActuator", mmfrActuator: "EnergyManagementSystemActuator", mxfrActuator: "EnergyManagementSystemActuator", mlcActuator: "EnergyManagementSystemActuator", mxlcActuator: "EnergyManagementSystemActuator", olcActuator: "EnergyManagementSystemActuator", model: "Model") -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelhvac.PlantComponentUserDefined_createInitProgram(self, dvfrActuator, mmfrActuator, mxfrActuator, mlcActuator, mxlcActuator, olcActuator, model)

    def createSimProgram(self, otActuator: "EnergyManagementSystemActuator", mfrActuator: "EnergyManagementSystemActuator", model: "Model") -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelhvac.PlantComponentUserDefined_createSimProgram(self, otActuator, mfrActuator, model)

# Register PlantComponentUserDefined in _openstudiomodelhvac:
_openstudiomodelhvac.PlantComponentUserDefined_swigregister(PlantComponentUserDefined)

def PlantComponentUserDefined_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.PlantComponentUserDefined_iddObjectType()

def PlantComponentUserDefined_plantLoadingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues()

def PlantComponentUserDefined_plantLoopFlowRequestModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues()


def toPlantComponentUserDefined(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantComponentUserDefined >":
    return _openstudiomodelhvac.toPlantComponentUserDefined(idfObject)

def getPlantComponentUserDefined(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantComponentUserDefined >":
    return _openstudiomodelhvac.getPlantComponentUserDefined(t_model, t_handle)

def getPlantComponentUserDefineds(t_model: "Model") -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > >":
    return _openstudiomodelhvac.getPlantComponentUserDefineds(t_model)

def getPlantComponentUserDefinedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantComponentUserDefined >":
    return _openstudiomodelhvac.getPlantComponentUserDefinedByName(t_model, t_name)

def getPlantComponentUserDefinedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > >":
    return _openstudiomodelhvac.getPlantComponentUserDefinedsByName(t_model, t_name, t_exactMatch)

def _to_PlantComponentUserDefined(self) -> OptionalPlantComponentUserDefined:
    return toPlantComponentUserDefined(self)
openstudioutilitiesidf.IdfObject.to_PlantComponentUserDefined = _to_PlantComponentUserDefined

def _getPlantComponentUserDefined(self, t_handle: "UUID") -> OptionalPlantComponentUserDefined:
    return getPlantComponentUserDefined(self, t_handle)
Model.getPlantComponentUserDefined = _getPlantComponentUserDefined

def _getPlantComponentUserDefined(self, t_handle_str: str) -> OptionalPlantComponentUserDefined:
    return getPlantComponentUserDefined(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantComponentUserDefined = _getPlantComponentUserDefined

def _getPlantComponentUserDefineds(self) -> PlantComponentUserDefinedVector:
    return getPlantComponentUserDefineds(self)
Model.getPlantComponentUserDefineds = _getPlantComponentUserDefineds

def _getPlantComponentUserDefinedByName(self, t_name: str) -> OptionalPlantComponentUserDefined:
    return getPlantComponentUserDefinedByName(self, t_name)
Model.getPlantComponentUserDefinedByName = _getPlantComponentUserDefinedByName

def _getPlantComponentUserDefinedsByName(self, t_name: str, t_exactMatch: bool) -> PlantComponentUserDefinedVector:
    return getPlantComponentUserDefinedsByName(self, t_name, t_exactMatch)
Model.getPlantComponentUserDefinedsByName = _getPlantComponentUserDefinedsByName

class AirLoopHVACOutdoorAirSystem(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", controller: "ControllerOutdoorAir"):
        _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACOutdoorAirSystem(model, controller))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACOutdoorAirSystem

    def returnAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_returnAirPort(self)

    def outdoorAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outdoorAirPort(self)

    def reliefAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefAirPort(self)

    def mixedAirPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_mixedAirPort(self)

    def returnAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_returnAirModelObject(self)

    def outdoorAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outdoorAirModelObject(self)

    def reliefAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefAirModelObject(self)

    def mixedAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_mixedAirModelObject(self)

    def outboardOANode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outboardOANode(self)

    def outboardReliefNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outboardReliefNode(self)

    def oaComponents(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_oaComponents(self)

    def reliefComponents(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefComponents(self)

    def components(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_components(self)

    def component(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_component(self, handle)

    def oaComponent(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_oaComponent(self, handle)

    def reliefComponent(self, handle: "UUID") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefComponent(self, handle)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_clone(self, model)

    def getControllerOutdoorAir(self) -> "openstudio::model::ControllerOutdoorAir":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_getControllerOutdoorAir(self)

    def setControllerOutdoorAir(self, controllerOutdoorAir: "ControllerOutdoorAir") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_setControllerOutdoorAir(self, controllerOutdoorAir)

    def airLoop(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_airLoop(self)

    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_getAirflowNetworkDistributionNode(self)

    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_airflowNetworkDistributionNode(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType()

# Register AirLoopHVACOutdoorAirSystem in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_swigregister(AirLoopHVACOutdoorAirSystem)

def AirLoopHVACOutdoorAirSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType()


def toAirLoopHVACOutdoorAirSystem(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
    return _openstudiomodelhvac.toAirLoopHVACOutdoorAirSystem(idfObject)

def getAirLoopHVACOutdoorAirSystem(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystem(t_model, t_handle)

def getAirLoopHVACOutdoorAirSystems(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > >":
    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystems(t_model)

def getAirLoopHVACOutdoorAirSystemByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemByName(t_model, t_name)

def getAirLoopHVACOutdoorAirSystemsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > >":
    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACOutdoorAirSystem(self) -> OptionalAirLoopHVACOutdoorAirSystem:
    return toAirLoopHVACOutdoorAirSystem(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACOutdoorAirSystem = _to_AirLoopHVACOutdoorAirSystem

def _getAirLoopHVACOutdoorAirSystem(self, t_handle: "UUID") -> OptionalAirLoopHVACOutdoorAirSystem:
    return getAirLoopHVACOutdoorAirSystem(self, t_handle)
Model.getAirLoopHVACOutdoorAirSystem = _getAirLoopHVACOutdoorAirSystem

def _getAirLoopHVACOutdoorAirSystem(self, t_handle_str: str) -> OptionalAirLoopHVACOutdoorAirSystem:
    return getAirLoopHVACOutdoorAirSystem(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACOutdoorAirSystem = _getAirLoopHVACOutdoorAirSystem

def _getAirLoopHVACOutdoorAirSystems(self) -> AirLoopHVACOutdoorAirSystemVector:
    return getAirLoopHVACOutdoorAirSystems(self)
Model.getAirLoopHVACOutdoorAirSystems = _getAirLoopHVACOutdoorAirSystems

def _getAirLoopHVACOutdoorAirSystemByName(self, t_name: str) -> OptionalAirLoopHVACOutdoorAirSystem:
    return getAirLoopHVACOutdoorAirSystemByName(self, t_name)
Model.getAirLoopHVACOutdoorAirSystemByName = _getAirLoopHVACOutdoorAirSystemByName

def _getAirLoopHVACOutdoorAirSystemsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACOutdoorAirSystemVector:
    return getAirLoopHVACOutdoorAirSystemsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACOutdoorAirSystemsByName = _getAirLoopHVACOutdoorAirSystemsByName

class ControllerMechanicalVentilation(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ControllerMechanicalVentilation_swiginit(self, _openstudiomodelhvac.new_ControllerMechanicalVentilation(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerMechanicalVentilation

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType()

    @staticmethod
    def systemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_setAvailabilitySchedule(self, schedule)

    def demandControlledVentilation(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_demandControlledVentilation(self)

    def isDemandControlledVentilationDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_isDemandControlledVentilationDefaulted(self)

    def setDemandControlledVentilation(self, demandControlledVentilation: "bool") -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_setDemandControlledVentilation(self, demandControlledVentilation)

    def setDemandControlledVentilationNoFail(self, demandControlledVentilation: "bool") -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_setDemandControlledVentilationNoFail(self, demandControlledVentilation)

    def resetDemandControlledVentilation(self) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_resetDemandControlledVentilation(self)

    def systemOutdoorAirMethod(self) -> "std::string":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethod(self)

    def isSystemOutdoorAirMethodDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_isSystemOutdoorAirMethodDefaulted(self)

    def setSystemOutdoorAirMethod(self, systemOutdoorAirMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_setSystemOutdoorAirMethod(self, systemOutdoorAirMethod)

    def resetSystemOutdoorAirMethod(self) -> "void":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_resetSystemOutdoorAirMethod(self)

    def controllerOutdoorAir(self) -> "openstudio::model::ControllerOutdoorAir":
        return _openstudiomodelhvac.ControllerMechanicalVentilation_controllerOutdoorAir(self)

# Register ControllerMechanicalVentilation in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerMechanicalVentilation_swigregister(ControllerMechanicalVentilation)

def ControllerMechanicalVentilation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType()

def ControllerMechanicalVentilation_systemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues()


def toControllerMechanicalVentilation(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":
    return _openstudiomodelhvac.toControllerMechanicalVentilation(idfObject)

def getControllerMechanicalVentilation(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":
    return _openstudiomodelhvac.getControllerMechanicalVentilation(t_model, t_handle)

def getControllerMechanicalVentilations(t_model: "Model") -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > >":
    return _openstudiomodelhvac.getControllerMechanicalVentilations(t_model)

def getControllerMechanicalVentilationByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":
    return _openstudiomodelhvac.getControllerMechanicalVentilationByName(t_model, t_name)

def getControllerMechanicalVentilationsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > >":
    return _openstudiomodelhvac.getControllerMechanicalVentilationsByName(t_model, t_name, t_exactMatch)

def _to_ControllerMechanicalVentilation(self) -> OptionalControllerMechanicalVentilation:
    return toControllerMechanicalVentilation(self)
openstudioutilitiesidf.IdfObject.to_ControllerMechanicalVentilation = _to_ControllerMechanicalVentilation

def _getControllerMechanicalVentilation(self, t_handle: "UUID") -> OptionalControllerMechanicalVentilation:
    return getControllerMechanicalVentilation(self, t_handle)
Model.getControllerMechanicalVentilation = _getControllerMechanicalVentilation

def _getControllerMechanicalVentilation(self, t_handle_str: str) -> OptionalControllerMechanicalVentilation:
    return getControllerMechanicalVentilation(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getControllerMechanicalVentilation = _getControllerMechanicalVentilation

def _getControllerMechanicalVentilations(self) -> ControllerMechanicalVentilationVector:
    return getControllerMechanicalVentilations(self)
Model.getControllerMechanicalVentilations = _getControllerMechanicalVentilations

def _getControllerMechanicalVentilationByName(self, t_name: str) -> OptionalControllerMechanicalVentilation:
    return getControllerMechanicalVentilationByName(self, t_name)
Model.getControllerMechanicalVentilationByName = _getControllerMechanicalVentilationByName

def _getControllerMechanicalVentilationsByName(self, t_name: str, t_exactMatch: bool) -> ControllerMechanicalVentilationVector:
    return getControllerMechanicalVentilationsByName(self, t_name, t_exactMatch)
Model.getControllerMechanicalVentilationsByName = _getControllerMechanicalVentilationsByName

class ControllerOutdoorAir(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ControllerOutdoorAir_swiginit(self, _openstudiomodelhvac.new_ControllerOutdoorAir(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerOutdoorAir

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ControllerOutdoorAir_iddObjectType()

    def minimumOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ControllerOutdoorAir_minimumOutdoorAirSchedule(self)

    def setMinimumOutdoorAirSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumOutdoorAirSchedule(self, schedule)

    def resetMinimumOutdoorAirSchedule(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetMinimumOutdoorAirSchedule(self)

    def minimumFractionofOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ControllerOutdoorAir_minimumFractionofOutdoorAirSchedule(self)

    def setMinimumFractionofOutdoorAirSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumFractionofOutdoorAirSchedule(self, schedule)

    def resetMinimumFractionofOutdoorAirSchedule(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetMinimumFractionofOutdoorAirSchedule(self)

    def maximumFractionofOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ControllerOutdoorAir_maximumFractionofOutdoorAirSchedule(self)

    def setMaximumFractionofOutdoorAirSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMaximumFractionofOutdoorAirSchedule(self, schedule)

    def resetMaximumFractionofOutdoorAirSchedule(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetMaximumFractionofOutdoorAirSchedule(self)

    def timeofDayEconomizerControlSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ControllerOutdoorAir_timeofDayEconomizerControlSchedule(self)

    def setTimeofDayEconomizerControlSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setTimeofDayEconomizerControlSchedule(self, schedule)

    def resetTimeofDayEconomizerControlSchedule(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetTimeofDayEconomizerControlSchedule(self)

    def minimumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_minimumOutdoorAirFlowRate(self)

    def isMinimumOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_isMinimumOutdoorAirFlowRateAutosized(self)

    def setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate)

    def autosizeMinimumOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_autosizeMinimumOutdoorAirFlowRate(self)

    def maximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_maximumOutdoorAirFlowRate(self)

    def isMaximumOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_isMaximumOutdoorAirFlowRateAutosized(self)

    def setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate)

    def autosizeMaximumOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_autosizeMaximumOutdoorAirFlowRate(self)

    def controllerMechanicalVentilation(self) -> "openstudio::model::ControllerMechanicalVentilation":
        return _openstudiomodelhvac.ControllerOutdoorAir_controllerMechanicalVentilation(self)

    def setControllerMechanicalVentilation(self, controllerMechanicalVentilation: "ControllerMechanicalVentilation") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setControllerMechanicalVentilation(self, controllerMechanicalVentilation)

    def getEconomizerControlType(self) -> "std::string":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerControlType(self)

    def setEconomizerControlType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerControlType(self, value)

    def getEconomizerControlActionType(self) -> "std::string":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerControlActionType(self)

    def setEconomizerControlActionType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerControlActionType(self, value)

    def getEconomizerMaximumLimitDryBulbTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitDryBulbTemperature(self)

    def setEconomizerMaximumLimitDryBulbTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitDryBulbTemperature(self, value)

    def resetEconomizerMaximumLimitDryBulbTemperature(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitDryBulbTemperature(self)

    def getEconomizerMaximumLimitEnthalpy(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitEnthalpy(self)

    def setEconomizerMaximumLimitEnthalpy(self, value: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitEnthalpy(self, value)

    def resetEconomizerMaximumLimitEnthalpy(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitEnthalpy(self)

    def getEconomizerMaximumLimitDewpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitDewpointTemperature(self)

    def setEconomizerMaximumLimitDewpointTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitDewpointTemperature(self, value)

    def resetEconomizerMaximumLimitDewpointTemperature(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitDewpointTemperature(self)

    def getEconomizerMinimumLimitDryBulbTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMinimumLimitDryBulbTemperature(self)

    def setEconomizerMinimumLimitDryBulbTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMinimumLimitDryBulbTemperature(self, value)

    def resetEconomizerMinimumLimitDryBulbTemperature(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMinimumLimitDryBulbTemperature(self)

    def getLockoutType(self) -> "std::string":
        return _openstudiomodelhvac.ControllerOutdoorAir_getLockoutType(self)

    def setLockoutType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setLockoutType(self, value)

    def getMinimumLimitType(self) -> "std::string":
        return _openstudiomodelhvac.ControllerOutdoorAir_getMinimumLimitType(self)

    def setMinimumLimitType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumLimitType(self, value)

    def getHighHumidityControl(self) -> "boost::optional< bool >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getHighHumidityControl(self)

    def setHighHumidityControl(self, val: "bool") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setHighHumidityControl(self, val)

    def getHighHumidityOutdoorAirFlowRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getHighHumidityOutdoorAirFlowRatio(self)

    def setHighHumidityOutdoorAirFlowRatio(self, v: "double") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setHighHumidityOutdoorAirFlowRatio(self, v)

    def getControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self) -> "boost::optional< bool >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self)

    def setControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self, v: "bool") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self, v)

    def getHeatRecoveryBypassControlType(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ControllerOutdoorAir_getHeatRecoveryBypassControlType(self)

    def setHeatRecoveryBypassControlType(self, v: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ControllerOutdoorAir_setHeatRecoveryBypassControlType(self, v)

    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":
        return _openstudiomodelhvac.ControllerOutdoorAir_airLoopHVACOutdoorAirSystem(self)

    def getAirflowNetworkOutdoorAirflow(self, crack: "openstudio::model::AirflowNetworkCrack const &") -> "openstudio::model::AirflowNetworkOutdoorAirflow":
        return _openstudiomodelhvac.ControllerOutdoorAir_getAirflowNetworkOutdoorAirflow(self, crack)

    def airflowNetworkOutdoorAirflow(self) -> "boost::optional< openstudio::model::AirflowNetworkOutdoorAirflow >":
        return _openstudiomodelhvac.ControllerOutdoorAir_airflowNetworkOutdoorAirflow(self)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.ControllerOutdoorAir_remove(self)

    def autosizedMinimumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_autosizedMinimumOutdoorAirFlowRate(self)

    def autosizedMaximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerOutdoorAir_autosizedMaximumOutdoorAirFlowRate(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.ControllerOutdoorAir_applySizingValues(self)

# Register ControllerOutdoorAir in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerOutdoorAir_swigregister(ControllerOutdoorAir)

def ControllerOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ControllerOutdoorAir_iddObjectType()


def toControllerOutdoorAir(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ControllerOutdoorAir >":
    return _openstudiomodelhvac.toControllerOutdoorAir(idfObject)

def getControllerOutdoorAir(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ControllerOutdoorAir >":
    return _openstudiomodelhvac.getControllerOutdoorAir(t_model, t_handle)

def getControllerOutdoorAirs(t_model: "Model") -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > >":
    return _openstudiomodelhvac.getControllerOutdoorAirs(t_model)

def getControllerOutdoorAirByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ControllerOutdoorAir >":
    return _openstudiomodelhvac.getControllerOutdoorAirByName(t_model, t_name)

def getControllerOutdoorAirsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > >":
    return _openstudiomodelhvac.getControllerOutdoorAirsByName(t_model, t_name, t_exactMatch)

def _to_ControllerOutdoorAir(self) -> OptionalControllerOutdoorAir:
    return toControllerOutdoorAir(self)
openstudioutilitiesidf.IdfObject.to_ControllerOutdoorAir = _to_ControllerOutdoorAir

def _getControllerOutdoorAir(self, t_handle: "UUID") -> OptionalControllerOutdoorAir:
    return getControllerOutdoorAir(self, t_handle)
Model.getControllerOutdoorAir = _getControllerOutdoorAir

def _getControllerOutdoorAir(self, t_handle_str: str) -> OptionalControllerOutdoorAir:
    return getControllerOutdoorAir(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getControllerOutdoorAir = _getControllerOutdoorAir

def _getControllerOutdoorAirs(self) -> ControllerOutdoorAirVector:
    return getControllerOutdoorAirs(self)
Model.getControllerOutdoorAirs = _getControllerOutdoorAirs

def _getControllerOutdoorAirByName(self, t_name: str) -> OptionalControllerOutdoorAir:
    return getControllerOutdoorAirByName(self, t_name)
Model.getControllerOutdoorAirByName = _getControllerOutdoorAirByName

def _getControllerOutdoorAirsByName(self, t_name: str, t_exactMatch: bool) -> ControllerOutdoorAirVector:
    return getControllerOutdoorAirsByName(self, t_name, t_exactMatch)
Model.getControllerOutdoorAirsByName = _getControllerOutdoorAirsByName

class ControllerWaterCoil(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ControllerWaterCoil_swiginit(self, _openstudiomodelhvac.new_ControllerWaterCoil(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerWaterCoil

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ControllerWaterCoil_iddObjectType()

    @staticmethod
    def validControlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues()

    @staticmethod
    def validActionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ControllerWaterCoil_validActionValues()

    @staticmethod
    def validActuatorVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues()

    def controlVariable(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ControllerWaterCoil_controlVariable(self)

    def action(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ControllerWaterCoil_action(self)

    def actuatorVariable(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ControllerWaterCoil_actuatorVariable(self)

    def sensorNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.ControllerWaterCoil_sensorNode(self)

    def actuatorNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.ControllerWaterCoil_actuatorNode(self)

    def controllerConvergenceTolerance(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerWaterCoil_controllerConvergenceTolerance(self)

    def isControllerConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_isControllerConvergenceToleranceDefaulted(self)

    def isControllerConvergenceToleranceAutosized(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_isControllerConvergenceToleranceAutosized(self)

    def maximumActuatedFlow(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerWaterCoil_maximumActuatedFlow(self)

    def isMaximumActuatedFlowAutosized(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_isMaximumActuatedFlowAutosized(self)

    def minimumActuatedFlow(self) -> "double":
        return _openstudiomodelhvac.ControllerWaterCoil_minimumActuatedFlow(self)

    def isMinimumActuatedFlowDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_isMinimumActuatedFlowDefaulted(self)

    def setControlVariable(self, controlVariable: "std::string") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setControlVariable(self, controlVariable)

    def resetControlVariable(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetControlVariable(self)

    def setAction(self, action: "std::string") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setAction(self, action)

    def resetAction(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetAction(self)

    def setActuatorVariable(self, actuatorVariable: "std::string") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setActuatorVariable(self, actuatorVariable)

    def resetActuatorVariable(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetActuatorVariable(self)

    def setSensorNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setSensorNode(self, node)

    def setActuatorNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setActuatorNode(self, node)

    def setControllerConvergenceTolerance(self, controllerConvergenceTolerance: "double") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setControllerConvergenceTolerance(self, controllerConvergenceTolerance)

    def resetControllerConvergenceTolerance(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetControllerConvergenceTolerance(self)

    def autosizeControllerConvergenceTolerance(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_autosizeControllerConvergenceTolerance(self)

    def setMaximumActuatedFlow(self, maximumActuatedFlow: "double") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setMaximumActuatedFlow(self, maximumActuatedFlow)

    def resetMaximumActuatedFlow(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetMaximumActuatedFlow(self)

    def autosizeMaximumActuatedFlow(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_autosizeMaximumActuatedFlow(self)

    def setMinimumActuatedFlow(self, minimumActuatedFlow: "double") -> "bool":
        return _openstudiomodelhvac.ControllerWaterCoil_setMinimumActuatedFlow(self, minimumActuatedFlow)

    def resetMinimumActuatedFlow(self) -> "void":
        return _openstudiomodelhvac.ControllerWaterCoil_resetMinimumActuatedFlow(self)

    def autosizedControllerConvergenceTolerance(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerWaterCoil_autosizedControllerConvergenceTolerance(self)

    def autosizedMaximumActuatedFlow(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ControllerWaterCoil_autosizedMaximumActuatedFlow(self)

# Register ControllerWaterCoil in _openstudiomodelhvac:
_openstudiomodelhvac.ControllerWaterCoil_swigregister(ControllerWaterCoil)

def ControllerWaterCoil_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ControllerWaterCoil_iddObjectType()

def ControllerWaterCoil_validControlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues()

def ControllerWaterCoil_validActionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ControllerWaterCoil_validActionValues()

def ControllerWaterCoil_validActuatorVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues()


def toControllerWaterCoil(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ControllerWaterCoil >":
    return _openstudiomodelhvac.toControllerWaterCoil(idfObject)

def getControllerWaterCoil(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ControllerWaterCoil >":
    return _openstudiomodelhvac.getControllerWaterCoil(t_model, t_handle)

def getControllerWaterCoils(t_model: "Model") -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > >":
    return _openstudiomodelhvac.getControllerWaterCoils(t_model)

def getControllerWaterCoilByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ControllerWaterCoil >":
    return _openstudiomodelhvac.getControllerWaterCoilByName(t_model, t_name)

def getControllerWaterCoilsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > >":
    return _openstudiomodelhvac.getControllerWaterCoilsByName(t_model, t_name, t_exactMatch)

def _to_ControllerWaterCoil(self) -> OptionalControllerWaterCoil:
    return toControllerWaterCoil(self)
openstudioutilitiesidf.IdfObject.to_ControllerWaterCoil = _to_ControllerWaterCoil

def _getControllerWaterCoil(self, t_handle: "UUID") -> OptionalControllerWaterCoil:
    return getControllerWaterCoil(self, t_handle)
Model.getControllerWaterCoil = _getControllerWaterCoil

def _getControllerWaterCoil(self, t_handle_str: str) -> OptionalControllerWaterCoil:
    return getControllerWaterCoil(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getControllerWaterCoil = _getControllerWaterCoil

def _getControllerWaterCoils(self) -> ControllerWaterCoilVector:
    return getControllerWaterCoils(self)
Model.getControllerWaterCoils = _getControllerWaterCoils

def _getControllerWaterCoilByName(self, t_name: str) -> OptionalControllerWaterCoil:
    return getControllerWaterCoilByName(self, t_name)
Model.getControllerWaterCoilByName = _getControllerWaterCoilByName

def _getControllerWaterCoilsByName(self, t_name: str, t_exactMatch: bool) -> ControllerWaterCoilVector:
    return getControllerWaterCoilsByName(self, t_name, t_exactMatch)
Model.getControllerWaterCoilsByName = _getControllerWaterCoilsByName

class Mixer(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_Mixer

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.Mixer_outletPort(self)

    def inletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.Mixer_inletPort(self, branchIndex)

    def nextInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.Mixer_nextInletPort(self)

    def outletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Mixer_outletModelObject(self)

    def inletModelObject(self, branchIndex: "unsigned int") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Mixer_inletModelObject(self, branchIndex)

    def lastInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Mixer_lastInletModelObject(self)

    def inletModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Mixer_inletModelObjects(self)

    def newInletPortAfterBranch(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.Mixer_newInletPortAfterBranch(self, branchIndex)

    def branchIndexForInletModelObject(self, modelObject: "ModelObject") -> "unsigned int":
        return _openstudiomodelhvac.Mixer_branchIndexForInletModelObject(self, modelObject)

    def nextBranchIndex(self) -> "unsigned int":
        return _openstudiomodelhvac.Mixer_nextBranchIndex(self)

    def removePortForBranch(self, branchIndex: "unsigned int") -> "void":
        return _openstudiomodelhvac.Mixer_removePortForBranch(self, branchIndex)

    def isRemovable(self) -> "bool":
        return _openstudiomodelhvac.Mixer_isRemovable(self)

# Register Mixer in _openstudiomodelhvac:
_openstudiomodelhvac.Mixer_swigregister(Mixer)


def toMixer(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Mixer >":
    return _openstudiomodelhvac.toMixer(idfObject)

def getMixer(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Mixer >":
    return _openstudiomodelhvac.getMixer(t_model, t_handle)

def getMixers(t_model: "Model") -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > >":
    return _openstudiomodelhvac.getMixers(t_model)

def getMixerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Mixer >":
    return _openstudiomodelhvac.getMixerByName(t_model, t_name)

def getMixersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > >":
    return _openstudiomodelhvac.getMixersByName(t_model, t_name, t_exactMatch)

def _to_Mixer(self) -> OptionalMixer:
    return toMixer(self)
openstudioutilitiesidf.IdfObject.to_Mixer = _to_Mixer

def _getMixer(self, t_handle: "UUID") -> OptionalMixer:
    return getMixer(self, t_handle)
Model.getMixer = _getMixer

def _getMixer(self, t_handle_str: str) -> OptionalMixer:
    return getMixer(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getMixer = _getMixer

def _getMixers(self) -> MixerVector:
    return getMixers(self)
Model.getMixers = _getMixers

def _getMixerByName(self, t_name: str) -> OptionalMixer:
    return getMixerByName(self, t_name)
Model.getMixerByName = _getMixerByName

def _getMixersByName(self, t_name: str, t_exactMatch: bool) -> MixerVector:
    return getMixersByName(self, t_name, t_exactMatch)
Model.getMixersByName = _getMixersByName

class AirLoopHVACReturnPlenum(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirLoopHVACReturnPlenum_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACReturnPlenum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACReturnPlenum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType()

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_thermalZone(self)

    def setThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_resetThermalZone(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_outletPort(self)

    def inletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_inletPort(self, branchIndex)

    def nextInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_nextInletPort(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_addToNode(self, node)

    def addBranchForZone(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_addBranchForZone(self, *args)

# Register AirLoopHVACReturnPlenum in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACReturnPlenum_swigregister(AirLoopHVACReturnPlenum)

def AirLoopHVACReturnPlenum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType()


def toAirLoopHVACReturnPlenum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":
    return _openstudiomodelhvac.toAirLoopHVACReturnPlenum(idfObject)

def getAirLoopHVACReturnPlenum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":
    return _openstudiomodelhvac.getAirLoopHVACReturnPlenum(t_model, t_handle)

def getAirLoopHVACReturnPlenums(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > >":
    return _openstudiomodelhvac.getAirLoopHVACReturnPlenums(t_model)

def getAirLoopHVACReturnPlenumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":
    return _openstudiomodelhvac.getAirLoopHVACReturnPlenumByName(t_model, t_name)

def getAirLoopHVACReturnPlenumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > >":
    return _openstudiomodelhvac.getAirLoopHVACReturnPlenumsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACReturnPlenum(self) -> OptionalAirLoopHVACReturnPlenum:
    return toAirLoopHVACReturnPlenum(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACReturnPlenum = _to_AirLoopHVACReturnPlenum

def _getAirLoopHVACReturnPlenum(self, t_handle: "UUID") -> OptionalAirLoopHVACReturnPlenum:
    return getAirLoopHVACReturnPlenum(self, t_handle)
Model.getAirLoopHVACReturnPlenum = _getAirLoopHVACReturnPlenum

def _getAirLoopHVACReturnPlenum(self, t_handle_str: str) -> OptionalAirLoopHVACReturnPlenum:
    return getAirLoopHVACReturnPlenum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACReturnPlenum = _getAirLoopHVACReturnPlenum

def _getAirLoopHVACReturnPlenums(self) -> AirLoopHVACReturnPlenumVector:
    return getAirLoopHVACReturnPlenums(self)
Model.getAirLoopHVACReturnPlenums = _getAirLoopHVACReturnPlenums

def _getAirLoopHVACReturnPlenumByName(self, t_name: str) -> OptionalAirLoopHVACReturnPlenum:
    return getAirLoopHVACReturnPlenumByName(self, t_name)
Model.getAirLoopHVACReturnPlenumByName = _getAirLoopHVACReturnPlenumByName

def _getAirLoopHVACReturnPlenumsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACReturnPlenumVector:
    return getAirLoopHVACReturnPlenumsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACReturnPlenumsByName = _getAirLoopHVACReturnPlenumsByName

class AirLoopHVACZoneMixer(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirLoopHVACZoneMixer_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACZoneMixer(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneMixer

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_outletPort(self)

    def inletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_inletPort(self, branchIndex)

    def nextInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_nextInletPort(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_clone(self, model)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_disconnect(self)

    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_getAirflowNetworkDistributionNode(self)

    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_airflowNetworkDistributionNode(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType()

# Register AirLoopHVACZoneMixer in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACZoneMixer_swigregister(AirLoopHVACZoneMixer)

def AirLoopHVACZoneMixer_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType()


def toAirLoopHVACZoneMixer(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":
    return _openstudiomodelhvac.toAirLoopHVACZoneMixer(idfObject)

def getAirLoopHVACZoneMixer(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":
    return _openstudiomodelhvac.getAirLoopHVACZoneMixer(t_model, t_handle)

def getAirLoopHVACZoneMixers(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > >":
    return _openstudiomodelhvac.getAirLoopHVACZoneMixers(t_model)

def getAirLoopHVACZoneMixerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":
    return _openstudiomodelhvac.getAirLoopHVACZoneMixerByName(t_model, t_name)

def getAirLoopHVACZoneMixersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > >":
    return _openstudiomodelhvac.getAirLoopHVACZoneMixersByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACZoneMixer(self) -> OptionalAirLoopHVACZoneMixer:
    return toAirLoopHVACZoneMixer(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACZoneMixer = _to_AirLoopHVACZoneMixer

def _getAirLoopHVACZoneMixer(self, t_handle: "UUID") -> OptionalAirLoopHVACZoneMixer:
    return getAirLoopHVACZoneMixer(self, t_handle)
Model.getAirLoopHVACZoneMixer = _getAirLoopHVACZoneMixer

def _getAirLoopHVACZoneMixer(self, t_handle_str: str) -> OptionalAirLoopHVACZoneMixer:
    return getAirLoopHVACZoneMixer(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACZoneMixer = _getAirLoopHVACZoneMixer

def _getAirLoopHVACZoneMixers(self) -> AirLoopHVACZoneMixerVector:
    return getAirLoopHVACZoneMixers(self)
Model.getAirLoopHVACZoneMixers = _getAirLoopHVACZoneMixers

def _getAirLoopHVACZoneMixerByName(self, t_name: str) -> OptionalAirLoopHVACZoneMixer:
    return getAirLoopHVACZoneMixerByName(self, t_name)
Model.getAirLoopHVACZoneMixerByName = _getAirLoopHVACZoneMixerByName

def _getAirLoopHVACZoneMixersByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACZoneMixerVector:
    return getAirLoopHVACZoneMixersByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACZoneMixersByName = _getAirLoopHVACZoneMixersByName

class ConnectorMixer(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ConnectorMixer_swiginit(self, _openstudiomodelhvac.new_ConnectorMixer(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorMixer

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ConnectorMixer_outletPort(self)

    def inletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.ConnectorMixer_inletPort(self, branchIndex)

    def nextInletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ConnectorMixer_nextInletPort(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ConnectorMixer_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.ConnectorMixer_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.ConnectorMixer_clone(self, model)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ConnectorMixer_iddObjectType()

# Register ConnectorMixer in _openstudiomodelhvac:
_openstudiomodelhvac.ConnectorMixer_swigregister(ConnectorMixer)

def ConnectorMixer_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ConnectorMixer_iddObjectType()


def toConnectorMixer(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConnectorMixer >":
    return _openstudiomodelhvac.toConnectorMixer(idfObject)

def getConnectorMixer(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ConnectorMixer >":
    return _openstudiomodelhvac.getConnectorMixer(t_model, t_handle)

def getConnectorMixers(t_model: "Model") -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > >":
    return _openstudiomodelhvac.getConnectorMixers(t_model)

def getConnectorMixerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ConnectorMixer >":
    return _openstudiomodelhvac.getConnectorMixerByName(t_model, t_name)

def getConnectorMixersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > >":
    return _openstudiomodelhvac.getConnectorMixersByName(t_model, t_name, t_exactMatch)

def _to_ConnectorMixer(self) -> OptionalConnectorMixer:
    return toConnectorMixer(self)
openstudioutilitiesidf.IdfObject.to_ConnectorMixer = _to_ConnectorMixer

def _getConnectorMixer(self, t_handle: "UUID") -> OptionalConnectorMixer:
    return getConnectorMixer(self, t_handle)
Model.getConnectorMixer = _getConnectorMixer

def _getConnectorMixer(self, t_handle_str: str) -> OptionalConnectorMixer:
    return getConnectorMixer(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConnectorMixer = _getConnectorMixer

def _getConnectorMixers(self) -> ConnectorMixerVector:
    return getConnectorMixers(self)
Model.getConnectorMixers = _getConnectorMixers

def _getConnectorMixerByName(self, t_name: str) -> OptionalConnectorMixer:
    return getConnectorMixerByName(self, t_name)
Model.getConnectorMixerByName = _getConnectorMixerByName

def _getConnectorMixersByName(self, t_name: str, t_exactMatch: bool) -> ConnectorMixerVector:
    return getConnectorMixersByName(self, t_name, t_exactMatch)
Model.getConnectorMixersByName = _getConnectorMixersByName

class AvailabilityManagerAssignmentList(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, loop: "Loop"):
        _openstudiomodelhvac.AvailabilityManagerAssignmentList_swiginit(self, _openstudiomodelhvac.new_AvailabilityManagerAssignmentList(loop))
    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerAssignmentList

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType()

    def availabilityManagerPriority(self, avm: "AvailabilityManager") -> "unsigned int":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_availabilityManagerPriority(self, avm)

    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_availabilityManagers(self)

    def loop(self) -> "boost::optional< openstudio::model::Loop >":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_loop(self)

    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_airLoopHVAC(self)

    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_plantLoop(self)

    def containingZoneHVACComponent(self) -> "boost::optional< openstudio::model::ZoneHVACComponent >":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_containingZoneHVACComponent(self)

    def addAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_addAvailabilityManager(self, *args)

    def setAvailabilityManagers(self, avms: "AvailabilityManagerVector") -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_setAvailabilityManagers(self, avms)

    def resetAvailabilityManagers(self) -> "void":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_resetAvailabilityManagers(self)

    def removeAvailabilityManager(self, *args) -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_removeAvailabilityManager(self, *args)

    def setAvailabilityManagerPriority(self, avm: "AvailabilityManager", priority: "unsigned int") -> "bool":
        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_setAvailabilityManagerPriority(self, avm, priority)

# Register AvailabilityManagerAssignmentList in _openstudiomodelhvac:
_openstudiomodelhvac.AvailabilityManagerAssignmentList_swigregister(AvailabilityManagerAssignmentList)

def AvailabilityManagerAssignmentList_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType()


def toAvailabilityManagerAssignmentList(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":
    return _openstudiomodelhvac.toAvailabilityManagerAssignmentList(idfObject)

def getAvailabilityManagerAssignmentList(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":
    return _openstudiomodelhvac.getAvailabilityManagerAssignmentList(t_model, t_handle)

def getAvailabilityManagerAssignmentLists(t_model: "Model") -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > >":
    return _openstudiomodelhvac.getAvailabilityManagerAssignmentLists(t_model)

def getAvailabilityManagerAssignmentListByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":
    return _openstudiomodelhvac.getAvailabilityManagerAssignmentListByName(t_model, t_name)

def getAvailabilityManagerAssignmentListsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > >":
    return _openstudiomodelhvac.getAvailabilityManagerAssignmentListsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerAssignmentList(self) -> OptionalAvailabilityManagerAssignmentList:
    return toAvailabilityManagerAssignmentList(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerAssignmentList = _to_AvailabilityManagerAssignmentList

def _getAvailabilityManagerAssignmentList(self, t_handle: "UUID") -> OptionalAvailabilityManagerAssignmentList:
    return getAvailabilityManagerAssignmentList(self, t_handle)
Model.getAvailabilityManagerAssignmentList = _getAvailabilityManagerAssignmentList

def _getAvailabilityManagerAssignmentList(self, t_handle_str: str) -> OptionalAvailabilityManagerAssignmentList:
    return getAvailabilityManagerAssignmentList(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAvailabilityManagerAssignmentList = _getAvailabilityManagerAssignmentList

def _getAvailabilityManagerAssignmentLists(self) -> AvailabilityManagerAssignmentListVector:
    return getAvailabilityManagerAssignmentLists(self)
Model.getAvailabilityManagerAssignmentLists = _getAvailabilityManagerAssignmentLists

def _getAvailabilityManagerAssignmentListByName(self, t_name: str) -> OptionalAvailabilityManagerAssignmentList:
    return getAvailabilityManagerAssignmentListByName(self, t_name)
Model.getAvailabilityManagerAssignmentListByName = _getAvailabilityManagerAssignmentListByName

def _getAvailabilityManagerAssignmentListsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerAssignmentListVector:
    return getAvailabilityManagerAssignmentListsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerAssignmentListsByName = _getAvailabilityManagerAssignmentListsByName

class AvailabilityManager(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "IddObjectType", model: "Model"):
        _openstudiomodelhvac.AvailabilityManager_swiginit(self, _openstudiomodelhvac.new_AvailabilityManager(type, model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManager

    def loop(self) -> "boost::optional< openstudio::model::Loop >":
        return _openstudiomodelhvac.AvailabilityManager_loop(self)

# Register AvailabilityManager in _openstudiomodelhvac:
_openstudiomodelhvac.AvailabilityManager_swigregister(AvailabilityManager)


def toAvailabilityManager(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AvailabilityManager >":
    return _openstudiomodelhvac.toAvailabilityManager(idfObject)

def getAvailabilityManager(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AvailabilityManager >":
    return _openstudiomodelhvac.getAvailabilityManager(t_model, t_handle)

def getAvailabilityManagers(t_model: "Model") -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":
    return _openstudiomodelhvac.getAvailabilityManagers(t_model)

def getAvailabilityManagerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AvailabilityManager >":
    return _openstudiomodelhvac.getAvailabilityManagerByName(t_model, t_name)

def getAvailabilityManagersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":
    return _openstudiomodelhvac.getAvailabilityManagersByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManager(self) -> OptionalAvailabilityManager:
    return toAvailabilityManager(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManager = _to_AvailabilityManager

def _getAvailabilityManager(self, t_handle: "UUID") -> OptionalAvailabilityManager:
    return getAvailabilityManager(self, t_handle)
Model.getAvailabilityManager = _getAvailabilityManager

def _getAvailabilityManager(self, t_handle_str: str) -> OptionalAvailabilityManager:
    return getAvailabilityManager(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAvailabilityManager = _getAvailabilityManager

def _getAvailabilityManagers(self) -> AvailabilityManagerVector:
    return getAvailabilityManagers(self)
Model.getAvailabilityManagers = _getAvailabilityManagers

def _getAvailabilityManagerByName(self, t_name: str) -> OptionalAvailabilityManager:
    return getAvailabilityManagerByName(self, t_name)
Model.getAvailabilityManagerByName = _getAvailabilityManagerByName

def _getAvailabilityManagersByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerVector:
    return getAvailabilityManagersByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagersByName = _getAvailabilityManagersByName

class Splitter(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_Splitter

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.Splitter_inletPort(self)

    def outletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.Splitter_outletPort(self, branchIndex)

    def nextOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.Splitter_nextOutletPort(self)

    def inletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Splitter_inletModelObject(self)

    def outletModelObject(self, branchIndex: "unsigned int") -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Splitter_outletModelObject(self, branchIndex)

    def lastOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelhvac.Splitter_lastOutletModelObject(self)

    def outletModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelhvac.Splitter_outletModelObjects(self)

    def newOutletPortAfterBranch(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.Splitter_newOutletPortAfterBranch(self, branchIndex)

    def branchIndexForOutletModelObject(self, modelObject: "ModelObject") -> "unsigned int":
        return _openstudiomodelhvac.Splitter_branchIndexForOutletModelObject(self, modelObject)

    def nextBranchIndex(self) -> "unsigned int":
        return _openstudiomodelhvac.Splitter_nextBranchIndex(self)

    def removePortForBranch(self, branchIndex: "unsigned int") -> "void":
        return _openstudiomodelhvac.Splitter_removePortForBranch(self, branchIndex)

    def isRemovable(self) -> "bool":
        return _openstudiomodelhvac.Splitter_isRemovable(self)

# Register Splitter in _openstudiomodelhvac:
_openstudiomodelhvac.Splitter_swigregister(Splitter)


def toSplitter(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Splitter >":
    return _openstudiomodelhvac.toSplitter(idfObject)

def getSplitter(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Splitter >":
    return _openstudiomodelhvac.getSplitter(t_model, t_handle)

def getSplitters(t_model: "Model") -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > >":
    return _openstudiomodelhvac.getSplitters(t_model)

def getSplitterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Splitter >":
    return _openstudiomodelhvac.getSplitterByName(t_model, t_name)

def getSplittersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > >":
    return _openstudiomodelhvac.getSplittersByName(t_model, t_name, t_exactMatch)

def _to_Splitter(self) -> OptionalSplitter:
    return toSplitter(self)
openstudioutilitiesidf.IdfObject.to_Splitter = _to_Splitter

def _getSplitter(self, t_handle: "UUID") -> OptionalSplitter:
    return getSplitter(self, t_handle)
Model.getSplitter = _getSplitter

def _getSplitter(self, t_handle_str: str) -> OptionalSplitter:
    return getSplitter(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSplitter = _getSplitter

def _getSplitters(self) -> SplitterVector:
    return getSplitters(self)
Model.getSplitters = _getSplitters

def _getSplitterByName(self, t_name: str) -> OptionalSplitter:
    return getSplitterByName(self, t_name)
Model.getSplitterByName = _getSplitterByName

def _getSplittersByName(self, t_name: str, t_exactMatch: bool) -> SplitterVector:
    return getSplittersByName(self, t_name, t_exactMatch)
Model.getSplittersByName = _getSplittersByName

class AirLoopHVACSupplyPlenum(Splitter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirLoopHVACSupplyPlenum_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACSupplyPlenum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACSupplyPlenum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType()

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_thermalZone(self)

    def setThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_resetThermalZone(self)

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_inletPort(self)

    def outletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_outletPort(self, branchIndex)

    def nextOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_nextOutletPort(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_addToNode(self, node)

    def addBranchForZone(self, *args) -> "bool":
        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_addBranchForZone(self, *args)

# Register AirLoopHVACSupplyPlenum in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACSupplyPlenum_swigregister(AirLoopHVACSupplyPlenum)

def AirLoopHVACSupplyPlenum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType()


def toAirLoopHVACSupplyPlenum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":
    return _openstudiomodelhvac.toAirLoopHVACSupplyPlenum(idfObject)

def getAirLoopHVACSupplyPlenum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":
    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenum(t_model, t_handle)

def getAirLoopHVACSupplyPlenums(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > >":
    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenums(t_model)

def getAirLoopHVACSupplyPlenumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":
    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenumByName(t_model, t_name)

def getAirLoopHVACSupplyPlenumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > >":
    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenumsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACSupplyPlenum(self) -> OptionalAirLoopHVACSupplyPlenum:
    return toAirLoopHVACSupplyPlenum(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACSupplyPlenum = _to_AirLoopHVACSupplyPlenum

def _getAirLoopHVACSupplyPlenum(self, t_handle: "UUID") -> OptionalAirLoopHVACSupplyPlenum:
    return getAirLoopHVACSupplyPlenum(self, t_handle)
Model.getAirLoopHVACSupplyPlenum = _getAirLoopHVACSupplyPlenum

def _getAirLoopHVACSupplyPlenum(self, t_handle_str: str) -> OptionalAirLoopHVACSupplyPlenum:
    return getAirLoopHVACSupplyPlenum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACSupplyPlenum = _getAirLoopHVACSupplyPlenum

def _getAirLoopHVACSupplyPlenums(self) -> AirLoopHVACSupplyPlenumVector:
    return getAirLoopHVACSupplyPlenums(self)
Model.getAirLoopHVACSupplyPlenums = _getAirLoopHVACSupplyPlenums

def _getAirLoopHVACSupplyPlenumByName(self, t_name: str) -> OptionalAirLoopHVACSupplyPlenum:
    return getAirLoopHVACSupplyPlenumByName(self, t_name)
Model.getAirLoopHVACSupplyPlenumByName = _getAirLoopHVACSupplyPlenumByName

def _getAirLoopHVACSupplyPlenumsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACSupplyPlenumVector:
    return getAirLoopHVACSupplyPlenumsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACSupplyPlenumsByName = _getAirLoopHVACSupplyPlenumsByName

class AirLoopHVACZoneSplitter(Splitter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirLoopHVACZoneSplitter_swiginit(self, _openstudiomodelhvac.new_AirLoopHVACZoneSplitter(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneSplitter

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType()

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_inletPort(self)

    def outletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_outletPort(self, branchIndex)

    def nextOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_nextOutletPort(self)

    def thermalZones(self) -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_thermalZones(self)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_remove(self)

    def disconnect(self) -> "void":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_disconnect(self)

    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_getAirflowNetworkDistributionNode(self)

    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":
        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_airflowNetworkDistributionNode(self)

# Register AirLoopHVACZoneSplitter in _openstudiomodelhvac:
_openstudiomodelhvac.AirLoopHVACZoneSplitter_swigregister(AirLoopHVACZoneSplitter)

def AirLoopHVACZoneSplitter_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType()


def toAirLoopHVACZoneSplitter(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":
    return _openstudiomodelhvac.toAirLoopHVACZoneSplitter(idfObject)

def getAirLoopHVACZoneSplitter(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":
    return _openstudiomodelhvac.getAirLoopHVACZoneSplitter(t_model, t_handle)

def getAirLoopHVACZoneSplitters(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":
    return _openstudiomodelhvac.getAirLoopHVACZoneSplitters(t_model)

def getAirLoopHVACZoneSplitterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":
    return _openstudiomodelhvac.getAirLoopHVACZoneSplitterByName(t_model, t_name)

def getAirLoopHVACZoneSplittersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":
    return _openstudiomodelhvac.getAirLoopHVACZoneSplittersByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACZoneSplitter(self) -> OptionalAirLoopHVACZoneSplitter:
    return toAirLoopHVACZoneSplitter(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACZoneSplitter = _to_AirLoopHVACZoneSplitter

def _getAirLoopHVACZoneSplitter(self, t_handle: "UUID") -> OptionalAirLoopHVACZoneSplitter:
    return getAirLoopHVACZoneSplitter(self, t_handle)
Model.getAirLoopHVACZoneSplitter = _getAirLoopHVACZoneSplitter

def _getAirLoopHVACZoneSplitter(self, t_handle_str: str) -> OptionalAirLoopHVACZoneSplitter:
    return getAirLoopHVACZoneSplitter(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACZoneSplitter = _getAirLoopHVACZoneSplitter

def _getAirLoopHVACZoneSplitters(self) -> AirLoopHVACZoneSplitterVector:
    return getAirLoopHVACZoneSplitters(self)
Model.getAirLoopHVACZoneSplitters = _getAirLoopHVACZoneSplitters

def _getAirLoopHVACZoneSplitterByName(self, t_name: str) -> OptionalAirLoopHVACZoneSplitter:
    return getAirLoopHVACZoneSplitterByName(self, t_name)
Model.getAirLoopHVACZoneSplitterByName = _getAirLoopHVACZoneSplitterByName

def _getAirLoopHVACZoneSplittersByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACZoneSplitterVector:
    return getAirLoopHVACZoneSplittersByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACZoneSplittersByName = _getAirLoopHVACZoneSplittersByName

class ConnectorSplitter(Splitter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ConnectorSplitter_swiginit(self, _openstudiomodelhvac.new_ConnectorSplitter(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorSplitter

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ConnectorSplitter_inletPort(self)

    def outletPort(self, branchIndex: "unsigned int") -> "unsigned int":
        return _openstudiomodelhvac.ConnectorSplitter_outletPort(self, branchIndex)

    def nextOutletPort(self) -> "unsigned int":
        return _openstudiomodelhvac.ConnectorSplitter_nextOutletPort(self)

    def addToNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ConnectorSplitter_addToNode(self, node)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelhvac.ConnectorSplitter_remove(self)

    def clone(self, model: "Model") -> "openstudio::model::ModelObject":
        return _openstudiomodelhvac.ConnectorSplitter_clone(self, model)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ConnectorSplitter_iddObjectType()

# Register ConnectorSplitter in _openstudiomodelhvac:
_openstudiomodelhvac.ConnectorSplitter_swigregister(ConnectorSplitter)

def ConnectorSplitter_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ConnectorSplitter_iddObjectType()


def toConnectorSplitter(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConnectorSplitter >":
    return _openstudiomodelhvac.toConnectorSplitter(idfObject)

def getConnectorSplitter(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ConnectorSplitter >":
    return _openstudiomodelhvac.getConnectorSplitter(t_model, t_handle)

def getConnectorSplitters(t_model: "Model") -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > >":
    return _openstudiomodelhvac.getConnectorSplitters(t_model)

def getConnectorSplitterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ConnectorSplitter >":
    return _openstudiomodelhvac.getConnectorSplitterByName(t_model, t_name)

def getConnectorSplittersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > >":
    return _openstudiomodelhvac.getConnectorSplittersByName(t_model, t_name, t_exactMatch)

def _to_ConnectorSplitter(self) -> OptionalConnectorSplitter:
    return toConnectorSplitter(self)
openstudioutilitiesidf.IdfObject.to_ConnectorSplitter = _to_ConnectorSplitter

def _getConnectorSplitter(self, t_handle: "UUID") -> OptionalConnectorSplitter:
    return getConnectorSplitter(self, t_handle)
Model.getConnectorSplitter = _getConnectorSplitter

def _getConnectorSplitter(self, t_handle_str: str) -> OptionalConnectorSplitter:
    return getConnectorSplitter(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getConnectorSplitter = _getConnectorSplitter

def _getConnectorSplitters(self) -> ConnectorSplitterVector:
    return getConnectorSplitters(self)
Model.getConnectorSplitters = _getConnectorSplitters

def _getConnectorSplitterByName(self, t_name: str) -> OptionalConnectorSplitter:
    return getConnectorSplitterByName(self, t_name)
Model.getConnectorSplitterByName = _getConnectorSplitterByName

def _getConnectorSplittersByName(self, t_name: str, t_exactMatch: bool) -> ConnectorSplitterVector:
    return getConnectorSplittersByName(self, t_name, t_exactMatch)
Model.getConnectorSplittersByName = _getConnectorSplittersByName

class AirTerminalDualDuctConstantVolume(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctConstantVolume(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctConstantVolume

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_isMaximumAirFlowRateAutosized(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_setAvailabilitySchedule(self, schedule)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_autosizeMaximumAirFlowRate(self)

    def hotAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_hotAirInletNode(self)

    def coldAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_coldAirInletNode(self)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_autosizedMaximumAirFlowRate(self)

# Register AirTerminalDualDuctConstantVolume in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctConstantVolume_swigregister(AirTerminalDualDuctConstantVolume)

def AirTerminalDualDuctConstantVolume_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType()


def toAirTerminalDualDuctConstantVolume(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":
    return _openstudiomodelhvac.toAirTerminalDualDuctConstantVolume(idfObject)

def getAirTerminalDualDuctConstantVolume(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":
    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolume(t_model, t_handle)

def getAirTerminalDualDuctConstantVolumes(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumes(t_model)

def getAirTerminalDualDuctConstantVolumeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":
    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumeByName(t_model, t_name)

def getAirTerminalDualDuctConstantVolumesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumesByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalDualDuctConstantVolume(self) -> OptionalAirTerminalDualDuctConstantVolume:
    return toAirTerminalDualDuctConstantVolume(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalDualDuctConstantVolume = _to_AirTerminalDualDuctConstantVolume

def _getAirTerminalDualDuctConstantVolume(self, t_handle: "UUID") -> OptionalAirTerminalDualDuctConstantVolume:
    return getAirTerminalDualDuctConstantVolume(self, t_handle)
Model.getAirTerminalDualDuctConstantVolume = _getAirTerminalDualDuctConstantVolume

def _getAirTerminalDualDuctConstantVolume(self, t_handle_str: str) -> OptionalAirTerminalDualDuctConstantVolume:
    return getAirTerminalDualDuctConstantVolume(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalDualDuctConstantVolume = _getAirTerminalDualDuctConstantVolume

def _getAirTerminalDualDuctConstantVolumes(self) -> AirTerminalDualDuctConstantVolumeVector:
    return getAirTerminalDualDuctConstantVolumes(self)
Model.getAirTerminalDualDuctConstantVolumes = _getAirTerminalDualDuctConstantVolumes

def _getAirTerminalDualDuctConstantVolumeByName(self, t_name: str) -> OptionalAirTerminalDualDuctConstantVolume:
    return getAirTerminalDualDuctConstantVolumeByName(self, t_name)
Model.getAirTerminalDualDuctConstantVolumeByName = _getAirTerminalDualDuctConstantVolumeByName

def _getAirTerminalDualDuctConstantVolumesByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalDualDuctConstantVolumeVector:
    return getAirTerminalDualDuctConstantVolumesByName(self, t_name, t_exactMatch)
Model.getAirTerminalDualDuctConstantVolumesByName = _getAirTerminalDualDuctConstantVolumesByName

class AirTerminalDualDuctVAV(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirTerminalDualDuctVAV_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctVAV(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAV

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_availabilitySchedule(self)

    def maximumDamperAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_maximumDamperAirFlowRate(self)

    def isMaximumDamperAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_isMaximumDamperAirFlowRateAutosized(self)

    def zoneMinimumAirFlowFraction(self) -> "double":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_zoneMinimumAirFlowFraction(self)

    def designSpecificationOutdoorAirObject(self) -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_designSpecificationOutdoorAirObject(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_resetAvailabilitySchedule(self)

    def setMaximumDamperAirFlowRate(self, maximumDamperAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setMaximumDamperAirFlowRate(self, maximumDamperAirFlowRate)

    def autosizeMaximumDamperAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_autosizeMaximumDamperAirFlowRate(self)

    def setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction)

    def setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAir: "DesignSpecificationOutdoorAir") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAir)

    def resetDesignSpecificationOutdoorAirObject(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_resetDesignSpecificationOutdoorAirObject(self)

    def hotAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_hotAirInletNode(self)

    def coldAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_coldAirInletNode(self)

    def autosizedMaximumDamperAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAV_autosizedMaximumDamperAirFlowRate(self)

# Register AirTerminalDualDuctVAV in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctVAV_swigregister(AirTerminalDualDuctVAV)

def AirTerminalDualDuctVAV_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType()


def toAirTerminalDualDuctVAV(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":
    return _openstudiomodelhvac.toAirTerminalDualDuctVAV(idfObject)

def getAirTerminalDualDuctVAV(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAV(t_model, t_handle)

def getAirTerminalDualDuctVAVs(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVs(t_model)

def getAirTerminalDualDuctVAVByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVByName(t_model, t_name)

def getAirTerminalDualDuctVAVsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalDualDuctVAV(self) -> OptionalAirTerminalDualDuctVAV:
    return toAirTerminalDualDuctVAV(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalDualDuctVAV = _to_AirTerminalDualDuctVAV

def _getAirTerminalDualDuctVAV(self, t_handle: "UUID") -> OptionalAirTerminalDualDuctVAV:
    return getAirTerminalDualDuctVAV(self, t_handle)
Model.getAirTerminalDualDuctVAV = _getAirTerminalDualDuctVAV

def _getAirTerminalDualDuctVAV(self, t_handle_str: str) -> OptionalAirTerminalDualDuctVAV:
    return getAirTerminalDualDuctVAV(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalDualDuctVAV = _getAirTerminalDualDuctVAV

def _getAirTerminalDualDuctVAVs(self) -> AirTerminalDualDuctVAVVector:
    return getAirTerminalDualDuctVAVs(self)
Model.getAirTerminalDualDuctVAVs = _getAirTerminalDualDuctVAVs

def _getAirTerminalDualDuctVAVByName(self, t_name: str) -> OptionalAirTerminalDualDuctVAV:
    return getAirTerminalDualDuctVAVByName(self, t_name)
Model.getAirTerminalDualDuctVAVByName = _getAirTerminalDualDuctVAVByName

def _getAirTerminalDualDuctVAVsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalDualDuctVAVVector:
    return getAirTerminalDualDuctVAVsByName(self, t_name, t_exactMatch)
Model.getAirTerminalDualDuctVAVsByName = _getAirTerminalDualDuctVAVsByName

class AirTerminalDualDuctVAVOutdoorAir(Mixer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_swiginit(self, _openstudiomodelhvac.new_AirTerminalDualDuctVAVOutdoorAir(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVOutdoorAir

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType()

    @staticmethod
    def perPersonVentilationRateModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_availabilitySchedule(self)

    def maximumTerminalAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_maximumTerminalAirFlowRate(self)

    def isMaximumTerminalAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_isMaximumTerminalAirFlowRateAutosized(self)

    def perPersonVentilationRateMode(self) -> "std::string":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateMode(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setAvailabilitySchedule(self, schedule)

    def setMaximumTerminalAirFlowRate(self, maximumTerminalAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setMaximumTerminalAirFlowRate(self, maximumTerminalAirFlowRate)

    def autosizeMaximumTerminalAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_autosizeMaximumTerminalAirFlowRate(self)

    def controlForOutdoorAir(self) -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_controlForOutdoorAir(self)

    def setControlForOutdoorAir(self, controlForOutdoorAir: "bool") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setControlForOutdoorAir(self, controlForOutdoorAir)

    def setPerPersonVentilationRateMode(self, perPersonVentilationRateMode: "std::string const &") -> "bool":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setPerPersonVentilationRateMode(self, perPersonVentilationRateMode)

    def outdoorAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_outdoorAirInletNode(self)

    def recirculatedAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_recirculatedAirInletNode(self)

    def autosizedMaximumTerminalAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_autosizedMaximumTerminalAirFlowRate(self)

# Register AirTerminalDualDuctVAVOutdoorAir in _openstudiomodelhvac:
_openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_swigregister(AirTerminalDualDuctVAVOutdoorAir)

def AirTerminalDualDuctVAVOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType()

def AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues()


def toAirTerminalDualDuctVAVOutdoorAir(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":
    return _openstudiomodelhvac.toAirTerminalDualDuctVAVOutdoorAir(idfObject)

def getAirTerminalDualDuctVAVOutdoorAir(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAir(t_model, t_handle)

def getAirTerminalDualDuctVAVOutdoorAirs(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirs(t_model)

def getAirTerminalDualDuctVAVOutdoorAirByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirByName(t_model, t_name)

def getAirTerminalDualDuctVAVOutdoorAirsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > >":
    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalDualDuctVAVOutdoorAir(self) -> OptionalAirTerminalDualDuctVAVOutdoorAir:
    return toAirTerminalDualDuctVAVOutdoorAir(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalDualDuctVAVOutdoorAir = _to_AirTerminalDualDuctVAVOutdoorAir

def _getAirTerminalDualDuctVAVOutdoorAir(self, t_handle: "UUID") -> OptionalAirTerminalDualDuctVAVOutdoorAir:
    return getAirTerminalDualDuctVAVOutdoorAir(self, t_handle)
Model.getAirTerminalDualDuctVAVOutdoorAir = _getAirTerminalDualDuctVAVOutdoorAir

def _getAirTerminalDualDuctVAVOutdoorAir(self, t_handle_str: str) -> OptionalAirTerminalDualDuctVAVOutdoorAir:
    return getAirTerminalDualDuctVAVOutdoorAir(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalDualDuctVAVOutdoorAir = _getAirTerminalDualDuctVAVOutdoorAir

def _getAirTerminalDualDuctVAVOutdoorAirs(self) -> AirTerminalDualDuctVAVOutdoorAirVector:
    return getAirTerminalDualDuctVAVOutdoorAirs(self)
Model.getAirTerminalDualDuctVAVOutdoorAirs = _getAirTerminalDualDuctVAVOutdoorAirs

def _getAirTerminalDualDuctVAVOutdoorAirByName(self, t_name: str) -> OptionalAirTerminalDualDuctVAVOutdoorAir:
    return getAirTerminalDualDuctVAVOutdoorAirByName(self, t_name)
Model.getAirTerminalDualDuctVAVOutdoorAirByName = _getAirTerminalDualDuctVAVOutdoorAirByName

def _getAirTerminalDualDuctVAVOutdoorAirsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalDualDuctVAVOutdoorAirVector:
    return getAirTerminalDualDuctVAVOutdoorAirsByName(self, t_name, t_exactMatch)
Model.getAirTerminalDualDuctVAVOutdoorAirsByName = _getAirTerminalDualDuctVAVOutdoorAirsByName

class CentralHeatPumpSystem(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CentralHeatPumpSystem_swiginit(self, _openstudiomodelhvac.new_CentralHeatPumpSystem(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystem

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType()

    @staticmethod
    def controlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues()

    def controlMethod(self) -> "std::string":
        return _openstudiomodelhvac.CentralHeatPumpSystem_controlMethod(self)

    def ancillaryPower(self) -> "double":
        return _openstudiomodelhvac.CentralHeatPumpSystem_ancillaryPower(self)

    def ancillaryOperationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_ancillaryOperationSchedule(self)

    def setControlMethod(self, controlMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystem_setControlMethod(self, controlMethod)

    def setAncillaryPower(self, ancillaryPower: "double") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystem_setAncillaryPower(self, ancillaryPower)

    def setAncillaryOperationSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystem_setAncillaryOperationSchedule(self, schedule)

    def resetAncillaryOperationSchedule(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystem_resetAncillaryOperationSchedule(self)

    def addModule(self, centralHeatPumpSystemModule: "CentralHeatPumpSystemModule") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystem_addModule(self, centralHeatPumpSystemModule)

    def removeModule(self, centralHeatPumpSystemModule: "CentralHeatPumpSystemModule") -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystem_removeModule(self, centralHeatPumpSystemModule)

    def removeAllModules(self) -> "void":
        return _openstudiomodelhvac.CentralHeatPumpSystem_removeAllModules(self)

    def modules(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_modules(self)

    def coolingPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_coolingPlantLoop(self)

    def sourcePlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_sourcePlantLoop(self)

    def heatingPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.CentralHeatPumpSystem_heatingPlantLoop(self)

# Register CentralHeatPumpSystem in _openstudiomodelhvac:
_openstudiomodelhvac.CentralHeatPumpSystem_swigregister(CentralHeatPumpSystem)

def CentralHeatPumpSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType()

def CentralHeatPumpSystem_controlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues()


def toCentralHeatPumpSystem(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":
    return _openstudiomodelhvac.toCentralHeatPumpSystem(idfObject)

def getCentralHeatPumpSystem(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":
    return _openstudiomodelhvac.getCentralHeatPumpSystem(t_model, t_handle)

def getCentralHeatPumpSystems(t_model: "Model") -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":
    return _openstudiomodelhvac.getCentralHeatPumpSystems(t_model)

def getCentralHeatPumpSystemByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemByName(t_model, t_name)

def getCentralHeatPumpSystemsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemsByName(t_model, t_name, t_exactMatch)

def _to_CentralHeatPumpSystem(self) -> OptionalCentralHeatPumpSystem:
    return toCentralHeatPumpSystem(self)
openstudioutilitiesidf.IdfObject.to_CentralHeatPumpSystem = _to_CentralHeatPumpSystem

def _getCentralHeatPumpSystem(self, t_handle: "UUID") -> OptionalCentralHeatPumpSystem:
    return getCentralHeatPumpSystem(self, t_handle)
Model.getCentralHeatPumpSystem = _getCentralHeatPumpSystem

def _getCentralHeatPumpSystem(self, t_handle_str: str) -> OptionalCentralHeatPumpSystem:
    return getCentralHeatPumpSystem(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCentralHeatPumpSystem = _getCentralHeatPumpSystem

def _getCentralHeatPumpSystems(self) -> CentralHeatPumpSystemVector:
    return getCentralHeatPumpSystems(self)
Model.getCentralHeatPumpSystems = _getCentralHeatPumpSystems

def _getCentralHeatPumpSystemByName(self, t_name: str) -> OptionalCentralHeatPumpSystem:
    return getCentralHeatPumpSystemByName(self, t_name)
Model.getCentralHeatPumpSystemByName = _getCentralHeatPumpSystemByName

def _getCentralHeatPumpSystemsByName(self, t_name: str, t_exactMatch: bool) -> CentralHeatPumpSystemVector:
    return getCentralHeatPumpSystemsByName(self, t_name, t_exactMatch)
Model.getCentralHeatPumpSystemsByName = _getCentralHeatPumpSystemsByName

class CentralHeatPumpSystemModule(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CentralHeatPumpSystemModule_swiginit(self, _openstudiomodelhvac.new_CentralHeatPumpSystemModule(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemModule

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType()

    def chillerHeaterModulesPerformanceComponent(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_chillerHeaterModulesPerformanceComponent(self)

    def chillerHeaterModulesControlSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_chillerHeaterModulesControlSchedule(self)

    def numberofChillerHeaterModules(self) -> "int":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_numberofChillerHeaterModules(self)

    def setChillerHeaterModulesPerformanceComponent(self, chillerHeaterPerformanceElectricEIR: "ChillerHeaterPerformanceElectricEIR") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setChillerHeaterModulesPerformanceComponent(self, chillerHeaterPerformanceElectricEIR)

    def setChillerHeaterModulesControlSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setChillerHeaterModulesControlSchedule(self, schedule)

    def setNumberofChillerHeaterModules(self, numberofChillerHeaterModules: "int") -> "bool":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setNumberofChillerHeaterModules(self, numberofChillerHeaterModules)

    def centralHeatPumpSystem(self) -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":
        return _openstudiomodelhvac.CentralHeatPumpSystemModule_centralHeatPumpSystem(self)

# Register CentralHeatPumpSystemModule in _openstudiomodelhvac:
_openstudiomodelhvac.CentralHeatPumpSystemModule_swigregister(CentralHeatPumpSystemModule)

def CentralHeatPumpSystemModule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType()


def toCentralHeatPumpSystemModule(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":
    return _openstudiomodelhvac.toCentralHeatPumpSystemModule(idfObject)

def getCentralHeatPumpSystemModule(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemModule(t_model, t_handle)

def getCentralHeatPumpSystemModules(t_model: "Model") -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemModules(t_model)

def getCentralHeatPumpSystemModuleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemModuleByName(t_model, t_name)

def getCentralHeatPumpSystemModulesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":
    return _openstudiomodelhvac.getCentralHeatPumpSystemModulesByName(t_model, t_name, t_exactMatch)

def _to_CentralHeatPumpSystemModule(self) -> OptionalCentralHeatPumpSystemModule:
    return toCentralHeatPumpSystemModule(self)
openstudioutilitiesidf.IdfObject.to_CentralHeatPumpSystemModule = _to_CentralHeatPumpSystemModule

def _getCentralHeatPumpSystemModule(self, t_handle: "UUID") -> OptionalCentralHeatPumpSystemModule:
    return getCentralHeatPumpSystemModule(self, t_handle)
Model.getCentralHeatPumpSystemModule = _getCentralHeatPumpSystemModule

def _getCentralHeatPumpSystemModule(self, t_handle_str: str) -> OptionalCentralHeatPumpSystemModule:
    return getCentralHeatPumpSystemModule(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCentralHeatPumpSystemModule = _getCentralHeatPumpSystemModule

def _getCentralHeatPumpSystemModules(self) -> CentralHeatPumpSystemModuleVector:
    return getCentralHeatPumpSystemModules(self)
Model.getCentralHeatPumpSystemModules = _getCentralHeatPumpSystemModules

def _getCentralHeatPumpSystemModuleByName(self, t_name: str) -> OptionalCentralHeatPumpSystemModule:
    return getCentralHeatPumpSystemModuleByName(self, t_name)
Model.getCentralHeatPumpSystemModuleByName = _getCentralHeatPumpSystemModuleByName

def _getCentralHeatPumpSystemModulesByName(self, t_name: str, t_exactMatch: bool) -> CentralHeatPumpSystemModuleVector:
    return getCentralHeatPumpSystemModulesByName(self, t_name, t_exactMatch)
Model.getCentralHeatPumpSystemModulesByName = _getCentralHeatPumpSystemModulesByName

class ChillerHeaterPerformanceElectricEIR(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_swiginit(self, _openstudiomodelhvac.new_ChillerHeaterPerformanceElectricEIR(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerHeaterPerformanceElectricEIR

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType()

    @staticmethod
    def chilledWaterFlowModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues()

    @staticmethod
    def condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues()

    @staticmethod
    def coolingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues()

    @staticmethod
    def heatingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues()

    def referenceCoolingModeEvaporatorCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeEvaporatorCapacity(self)

    def isReferenceCoolingModeEvaporatorCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isReferenceCoolingModeEvaporatorCapacityAutosized(self)

    def referenceCoolingModeCOP(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeCOP(self)

    def referenceCoolingModeLeavingChilledWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeLeavingChilledWaterTemperature(self)

    def referenceCoolingModeEnteringCondenserFluidTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeEnteringCondenserFluidTemperature(self)

    def referenceCoolingModeLeavingCondenserWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeLeavingCondenserWaterTemperature(self)

    def referenceHeatingModeCoolingCapacityRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeCoolingCapacityRatio(self)

    def referenceHeatingModeCoolingPowerInputRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeCoolingPowerInputRatio(self)

    def referenceHeatingModeLeavingChilledWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeLeavingChilledWaterTemperature(self)

    def referenceHeatingModeLeavingCondenserWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeLeavingCondenserWaterTemperature(self)

    def referenceHeatingModeEnteringCondenserFluidTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeEnteringCondenserFluidTemperature(self)

    def heatingModeEnteringChilledWaterTemperatureLowLimit(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeEnteringChilledWaterTemperatureLowLimit(self)

    def chilledWaterFlowModeType(self) -> "std::string":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeType(self)

    def designChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designChilledWaterFlowRate(self)

    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isDesignChilledWaterFlowRateAutosized(self)

    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designCondenserWaterFlowRate(self)

    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isDesignCondenserWaterFlowRateAutosized(self)

    def designHotWaterFlowRate(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designHotWaterFlowRate(self)

    def compressorMotorEfficiency(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_compressorMotorEfficiency(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserType(self)

    def coolingModeTemperatureCurveCondenserWaterIndependentVariable(self) -> "std::string":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariable(self)

    def coolingModeCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeCoolingCapacityFunctionOfTemperatureCurve(self)

    def coolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self)

    def coolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self)

    def coolingModeCoolingCapacityOptimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeCoolingCapacityOptimumPartLoadRatio(self)

    def heatingModeTemperatureCurveCondenserWaterIndependentVariable(self) -> "std::string":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariable(self)

    def heatingModeCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeCoolingCapacityFunctionOfTemperatureCurve(self)

    def heatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self)

    def heatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self)

    def heatingModeCoolingCapacityOptimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeCoolingCapacityOptimumPartLoadRatio(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_sizingFactor(self)

    def setReferenceCoolingModeEvaporatorCapacity(self, referenceCoolingModeEvaporatorCapacity: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeEvaporatorCapacity(self, referenceCoolingModeEvaporatorCapacity)

    def autosizeReferenceCoolingModeEvaporatorCapacity(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeReferenceCoolingModeEvaporatorCapacity(self)

    def setReferenceCoolingModeCOP(self, referenceCoolingModeCOP: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeCOP(self, referenceCoolingModeCOP)

    def setReferenceCoolingModeLeavingChilledWaterTemperature(self, referenceCoolingModeLeavingChilledWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeLeavingChilledWaterTemperature(self, referenceCoolingModeLeavingChilledWaterTemperature)

    def setReferenceCoolingModeEnteringCondenserFluidTemperature(self, referenceCoolingModeEnteringCondenserFluidTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeEnteringCondenserFluidTemperature(self, referenceCoolingModeEnteringCondenserFluidTemperature)

    def setReferenceCoolingModeLeavingCondenserWaterTemperature(self, referenceCoolingModeLeavingCondenserWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeLeavingCondenserWaterTemperature(self, referenceCoolingModeLeavingCondenserWaterTemperature)

    def setReferenceHeatingModeCoolingCapacityRatio(self, referenceHeatingModeCoolingCapacityRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeCoolingCapacityRatio(self, referenceHeatingModeCoolingCapacityRatio)

    def setReferenceHeatingModeCoolingPowerInputRatio(self, referenceHeatingModeCoolingPowerInputRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeCoolingPowerInputRatio(self, referenceHeatingModeCoolingPowerInputRatio)

    def setReferenceHeatingModeLeavingChilledWaterTemperature(self, referenceHeatingModeLeavingChilledWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeLeavingChilledWaterTemperature(self, referenceHeatingModeLeavingChilledWaterTemperature)

    def setReferenceHeatingModeLeavingCondenserWaterTemperature(self, referenceHeatingModeLeavingCondenserWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeLeavingCondenserWaterTemperature(self, referenceHeatingModeLeavingCondenserWaterTemperature)

    def setReferenceHeatingModeEnteringCondenserFluidTemperature(self, referenceHeatingModeEnteringCondenserFluidTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeEnteringCondenserFluidTemperature(self, referenceHeatingModeEnteringCondenserFluidTemperature)

    def setHeatingModeEnteringChilledWaterTemperatureLowLimit(self, heatingModeEnteringChilledWaterTemperatureLowLimit: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeEnteringChilledWaterTemperatureLowLimit(self, heatingModeEnteringChilledWaterTemperatureLowLimit)

    def setChilledWaterFlowModeType(self, chilledWaterFlowModeType: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setChilledWaterFlowModeType(self, chilledWaterFlowModeType)

    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)

    def resetDesignChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_resetDesignChilledWaterFlowRate(self)

    def autosizeDesignChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeDesignChilledWaterFlowRate(self)

    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)

    def resetDesignCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_resetDesignCondenserWaterFlowRate(self)

    def autosizeDesignCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeDesignCondenserWaterFlowRate(self)

    def setDesignHotWaterFlowRate(self, designHotWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignHotWaterFlowRate(self, designHotWaterFlowRate)

    def setCompressorMotorEfficiency(self, compressorMotorEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCompressorMotorEfficiency(self, compressorMotorEfficiency)

    def setCondenserType(self, condenserType: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCondenserType(self, condenserType)

    def setCoolingModeTemperatureCurveCondenserWaterIndependentVariable(self, coolingModeTemperatureCurveCondenserWaterIndependentVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeTemperatureCurveCondenserWaterIndependentVariable(self, coolingModeTemperatureCurveCondenserWaterIndependentVariable)

    def setCoolingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve)

    def setCoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve)

    def setCoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve)

    def setCoolingModeCoolingCapacityOptimumPartLoadRatio(self, coolingModeCoolingCapacityOptimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeCoolingCapacityOptimumPartLoadRatio(self, coolingModeCoolingCapacityOptimumPartLoadRatio)

    def setHeatingModeTemperatureCurveCondenserWaterIndependentVariable(self, heatingModeTemperatureCurveCondenserWaterIndependentVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeTemperatureCurveCondenserWaterIndependentVariable(self, heatingModeTemperatureCurveCondenserWaterIndependentVariable)

    def setHeatingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve)

    def setHeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve)

    def setHeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve)

    def setHeatingModeCoolingCapacityOptimumPartLoadRatio(self, heatingModeCoolingCapacityOptimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeCoolingCapacityOptimumPartLoadRatio(self, heatingModeCoolingCapacityOptimumPartLoadRatio)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setSizingFactor(self, sizingFactor)

    def autosizedReferenceCoolingModeEvaporatorCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedReferenceCoolingModeEvaporatorCapacity(self)

    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedDesignChilledWaterFlowRate(self)

    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedDesignCondenserWaterFlowRate(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_applySizingValues(self)

    def centralHeatPumpSystemModules(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_centralHeatPumpSystemModules(self)

    def centralHeatPumpSystems(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":
        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_centralHeatPumpSystems(self)

# Register ChillerHeaterPerformanceElectricEIR in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_swigregister(ChillerHeaterPerformanceElectricEIR)

def ChillerHeaterPerformanceElectricEIR_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType()

def ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues()

def ChillerHeaterPerformanceElectricEIR_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues()

def ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues()

def ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues()


def toChillerHeaterPerformanceElectricEIR(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":
    return _openstudiomodelhvac.toChillerHeaterPerformanceElectricEIR(idfObject)

def getChillerHeaterPerformanceElectricEIR(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":
    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIR(t_model, t_handle)

def getChillerHeaterPerformanceElectricEIRs(t_model: "Model") -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > >":
    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRs(t_model)

def getChillerHeaterPerformanceElectricEIRByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":
    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRByName(t_model, t_name)

def getChillerHeaterPerformanceElectricEIRsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > >":
    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRsByName(t_model, t_name, t_exactMatch)

def _to_ChillerHeaterPerformanceElectricEIR(self) -> OptionalChillerHeaterPerformanceElectricEIR:
    return toChillerHeaterPerformanceElectricEIR(self)
openstudioutilitiesidf.IdfObject.to_ChillerHeaterPerformanceElectricEIR = _to_ChillerHeaterPerformanceElectricEIR

def _getChillerHeaterPerformanceElectricEIR(self, t_handle: "UUID") -> OptionalChillerHeaterPerformanceElectricEIR:
    return getChillerHeaterPerformanceElectricEIR(self, t_handle)
Model.getChillerHeaterPerformanceElectricEIR = _getChillerHeaterPerformanceElectricEIR

def _getChillerHeaterPerformanceElectricEIR(self, t_handle_str: str) -> OptionalChillerHeaterPerformanceElectricEIR:
    return getChillerHeaterPerformanceElectricEIR(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getChillerHeaterPerformanceElectricEIR = _getChillerHeaterPerformanceElectricEIR

def _getChillerHeaterPerformanceElectricEIRs(self) -> ChillerHeaterPerformanceElectricEIRVector:
    return getChillerHeaterPerformanceElectricEIRs(self)
Model.getChillerHeaterPerformanceElectricEIRs = _getChillerHeaterPerformanceElectricEIRs

def _getChillerHeaterPerformanceElectricEIRByName(self, t_name: str) -> OptionalChillerHeaterPerformanceElectricEIR:
    return getChillerHeaterPerformanceElectricEIRByName(self, t_name)
Model.getChillerHeaterPerformanceElectricEIRByName = _getChillerHeaterPerformanceElectricEIRByName

def _getChillerHeaterPerformanceElectricEIRsByName(self, t_name: str, t_exactMatch: bool) -> ChillerHeaterPerformanceElectricEIRVector:
    return getChillerHeaterPerformanceElectricEIRsByName(self, t_name, t_exactMatch)
Model.getChillerHeaterPerformanceElectricEIRsByName = _getChillerHeaterPerformanceElectricEIRsByName

class ChillerElectricEIR(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.ChillerElectricEIR_swiginit(self, _openstudiomodelhvac.new_ChillerElectricEIR(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerElectricEIR

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ChillerElectricEIR_iddObjectType()

    @staticmethod
    def validCondenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues()

    @staticmethod
    def validChillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues()

    def referenceCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceCapacity(self)

    def isReferenceCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceCapacityAutosized(self)

    def referenceCOP(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceCOP(self)

    def referenceLeavingChilledWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceLeavingChilledWaterTemperature(self)

    def isReferenceLeavingChilledWaterTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceLeavingChilledWaterTemperatureDefaulted(self)

    def referenceEnteringCondenserFluidTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceEnteringCondenserFluidTemperature(self)

    def isReferenceEnteringCondenserFluidTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceEnteringCondenserFluidTemperatureDefaulted(self)

    def referenceChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceChilledWaterFlowRate(self)

    def isReferenceChilledWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceChilledWaterFlowRateAutosized(self)

    def referenceCondenserFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_referenceCondenserFluidFlowRate(self)

    def isReferenceCondenserFluidFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceCondenserFluidFlowRateAutosized(self)

    def coolingCapacityFunctionOfTemperature(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelhvac.ChillerElectricEIR_coolingCapacityFunctionOfTemperature(self)

    def electricInputToCoolingOutputRatioFunctionOfTemperature(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelhvac.ChillerElectricEIR_electricInputToCoolingOutputRatioFunctionOfTemperature(self)

    def electricInputToCoolingOutputRatioFunctionOfPLR(self) -> "openstudio::model::CurveQuadratic":
        return _openstudiomodelhvac.ChillerElectricEIR_electricInputToCoolingOutputRatioFunctionOfPLR(self)

    def minimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_minimumPartLoadRatio(self)

    def isMinimumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isMinimumPartLoadRatioDefaulted(self)

    def maximumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_maximumPartLoadRatio(self)

    def isMaximumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isMaximumPartLoadRatioDefaulted(self)

    def optimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_optimumPartLoadRatio(self)

    def isOptimumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isOptimumPartLoadRatioDefaulted(self)

    def minimumUnloadingRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_minimumUnloadingRatio(self)

    def isMinimumUnloadingRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isMinimumUnloadingRatioDefaulted(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelhvac.ChillerElectricEIR_condenserType(self)

    def isCondenserTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isCondenserTypeDefaulted(self)

    def condenserFanPowerRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_condenserFanPowerRatio(self)

    def isCondenserFanPowerRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isCondenserFanPowerRatioDefaulted(self)

    def fractionofCompressorElectricConsumptionRejectedbyCondenser(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_fractionofCompressorElectricConsumptionRejectedbyCondenser(self)

    def isFractionofCompressorElectricConsumptionRejectedbyCondenserDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isFractionofCompressorElectricConsumptionRejectedbyCondenserDefaulted(self)

    def leavingChilledWaterLowerTemperatureLimit(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_leavingChilledWaterLowerTemperatureLimit(self)

    def isLeavingChilledWaterLowerTemperatureLimitDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isLeavingChilledWaterLowerTemperatureLimitDefaulted(self)

    def chillerFlowMode(self) -> "std::string":
        return _openstudiomodelhvac.ChillerElectricEIR_chillerFlowMode(self)

    def isChillerFlowModeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isChillerFlowModeDefaulted(self)

    def designHeatRecoveryWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_designHeatRecoveryWaterFlowRate(self)

    def isDesignHeatRecoveryWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isDesignHeatRecoveryWaterFlowRateAutosized(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isSizingFactorDefaulted(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterCapacity(self)

    def isBasinHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isBasinHeaterCapacityDefaulted(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterSetpointTemperature(self)

    def isBasinHeaterSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_isBasinHeaterSetpointTemperatureDefaulted(self)

    def basinHeaterSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterSchedule(self)

    def condenserHeatRecoveryRelativeCapacityFraction(self) -> "double":
        return _openstudiomodelhvac.ChillerElectricEIR_condenserHeatRecoveryRelativeCapacityFraction(self)

    def heatRecoveryInletHighTemperatureLimitSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ChillerElectricEIR_heatRecoveryInletHighTemperatureLimitSchedule(self)

    def heatRecoveryLeavingTemperatureSetpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.ChillerElectricEIR_heatRecoveryLeavingTemperatureSetpointNode(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelhvac.ChillerElectricEIR_endUseSubcategory(self)

    def setReferenceCapacity(self, *args) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCapacity(self, *args)

    def autosizeReferenceCapacity(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceCapacity(self)

    def setReferenceCOP(self, referenceCOP: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCOP(self, referenceCOP)

    def setReferenceLeavingChilledWaterTemperature(self, referenceLeavingChilledWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceLeavingChilledWaterTemperature(self, referenceLeavingChilledWaterTemperature)

    def resetReferenceLeavingChilledWaterTemperature(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceLeavingChilledWaterTemperature(self)

    def setReferenceEnteringCondenserFluidTemperature(self, referenceEnteringCondenserFluidTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceEnteringCondenserFluidTemperature(self, referenceEnteringCondenserFluidTemperature)

    def resetReferenceEnteringCondenserFluidTemperature(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceEnteringCondenserFluidTemperature(self)

    def setReferenceChilledWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceChilledWaterFlowRate(self, *args)

    def resetReferenceChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceChilledWaterFlowRate(self)

    def autosizeReferenceChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceChilledWaterFlowRate(self)

    def setReferenceCondenserFluidFlowRate(self, *args) -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCondenserFluidFlowRate(self, *args)

    def resetReferenceCondenserFluidFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceCondenserFluidFlowRate(self)

    def autosizeReferenceCondenserFluidFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceCondenserFluidFlowRate(self)

    def setCoolingCapacityFunctionOfTemperature(self, arg2: "CurveBiquadratic") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setCoolingCapacityFunctionOfTemperature(self, arg2)

    def setElectricInputToCoolingOutputRatioFunctionOfTemperature(self, arg2: "CurveBiquadratic") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setElectricInputToCoolingOutputRatioFunctionOfTemperature(self, arg2)

    def setElectricInputToCoolingOutputRatioFunctionOfPLR(self, arg2: "CurveQuadratic") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setElectricInputToCoolingOutputRatioFunctionOfPLR(self, arg2)

    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setMinimumPartLoadRatio(self, minimumPartLoadRatio)

    def resetMinimumPartLoadRatio(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetMinimumPartLoadRatio(self)

    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setMaximumPartLoadRatio(self, maximumPartLoadRatio)

    def resetMaximumPartLoadRatio(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetMaximumPartLoadRatio(self)

    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setOptimumPartLoadRatio(self, optimumPartLoadRatio)

    def resetOptimumPartLoadRatio(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetOptimumPartLoadRatio(self)

    def setMinimumUnloadingRatio(self, minimumUnloadingRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setMinimumUnloadingRatio(self, minimumUnloadingRatio)

    def resetMinimumUnloadingRatio(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetMinimumUnloadingRatio(self)

    def setCondenserType(self, condenserType: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserType(self, condenserType)

    def resetCondenserType(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserType(self)

    def setCondenserFanPowerRatio(self, condenserFanPowerRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserFanPowerRatio(self, condenserFanPowerRatio)

    def resetCondenserFanPowerRatio(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserFanPowerRatio(self)

    def setFractionofCompressorElectricConsumptionRejectedbyCondenser(self, fractionofCompressorElectricConsumptionRejectedbyCondenser: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setFractionofCompressorElectricConsumptionRejectedbyCondenser(self, fractionofCompressorElectricConsumptionRejectedbyCondenser)

    def resetFractionofCompressorElectricConsumptionRejectedbyCondenser(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetFractionofCompressorElectricConsumptionRejectedbyCondenser(self)

    def setLeavingChilledWaterLowerTemperatureLimit(self, leavingChilledWaterLowerTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setLeavingChilledWaterLowerTemperatureLimit(self, leavingChilledWaterLowerTemperatureLimit)

    def resetLeavingChilledWaterLowerTemperatureLimit(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetLeavingChilledWaterLowerTemperatureLimit(self)

    def setChillerFlowMode(self, chillerFlowMode: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setChillerFlowMode(self, chillerFlowMode)

    def resetChillerFlowMode(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetChillerFlowMode(self)

    def setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate)

    def autosizeDesignHeatRecoveryWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizeDesignHeatRecoveryWaterFlowRate(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetSizingFactor(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterCapacity(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterSetpointTemperature(self)

    def setBasinHeaterSchedule(self, s: "Schedule") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterSchedule(self, s)

    def resetBasinHeaterSchedule(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterSchedule(self)

    def setCondenserHeatRecoveryRelativeCapacityFraction(self, condenserHeatRecoveryRelativeCapacityFraction: "double") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserHeatRecoveryRelativeCapacityFraction(self, condenserHeatRecoveryRelativeCapacityFraction)

    def setHeatRecoveryInletHighTemperatureLimitSchedule(self, s: "Schedule") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setHeatRecoveryInletHighTemperatureLimitSchedule(self, s)

    def resetHeatRecoveryInletHighTemperatureLimitSchedule(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetHeatRecoveryInletHighTemperatureLimitSchedule(self)

    def setHeatRecoveryLeavingTemperatureSetpointNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setHeatRecoveryLeavingTemperatureSetpointNode(self, node)

    def resetHeatRecoveryLeavingTemperatureSetpointNode(self) -> "void":
        return _openstudiomodelhvac.ChillerElectricEIR_resetHeatRecoveryLeavingTemperatureSetpointNode(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelhvac.ChillerElectricEIR_setEndUseSubcategory(self, endUseSubcategory)

    def autosizedReferenceCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceCapacity(self)

    def autosizedReferenceChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceChilledWaterFlowRate(self)

    def autosizedReferenceCondenserFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceCondenserFluidFlowRate(self)

    def autosizedDesignHeatRecoveryWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerElectricEIR_autosizedDesignHeatRecoveryWaterFlowRate(self)

    def chilledWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerElectricEIR_chilledWaterLoop(self)

    def condenserWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerElectricEIR_condenserWaterLoop(self)

    def heatRecoveryLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerElectricEIR_heatRecoveryLoop(self)

# Register ChillerElectricEIR in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerElectricEIR_swigregister(ChillerElectricEIR)

def ChillerElectricEIR_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ChillerElectricEIR_iddObjectType()

def ChillerElectricEIR_validCondenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues()

def ChillerElectricEIR_validChillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues()


def toChillerElectricEIR(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ChillerElectricEIR >":
    return _openstudiomodelhvac.toChillerElectricEIR(idfObject)

def getChillerElectricEIR(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ChillerElectricEIR >":
    return _openstudiomodelhvac.getChillerElectricEIR(t_model, t_handle)

def getChillerElectricEIRs(t_model: "Model") -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > >":
    return _openstudiomodelhvac.getChillerElectricEIRs(t_model)

def getChillerElectricEIRByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ChillerElectricEIR >":
    return _openstudiomodelhvac.getChillerElectricEIRByName(t_model, t_name)

def getChillerElectricEIRsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > >":
    return _openstudiomodelhvac.getChillerElectricEIRsByName(t_model, t_name, t_exactMatch)

def _to_ChillerElectricEIR(self) -> OptionalChillerElectricEIR:
    return toChillerElectricEIR(self)
openstudioutilitiesidf.IdfObject.to_ChillerElectricEIR = _to_ChillerElectricEIR

def _getChillerElectricEIR(self, t_handle: "UUID") -> OptionalChillerElectricEIR:
    return getChillerElectricEIR(self, t_handle)
Model.getChillerElectricEIR = _getChillerElectricEIR

def _getChillerElectricEIR(self, t_handle_str: str) -> OptionalChillerElectricEIR:
    return getChillerElectricEIR(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getChillerElectricEIR = _getChillerElectricEIR

def _getChillerElectricEIRs(self) -> ChillerElectricEIRVector:
    return getChillerElectricEIRs(self)
Model.getChillerElectricEIRs = _getChillerElectricEIRs

def _getChillerElectricEIRByName(self, t_name: str) -> OptionalChillerElectricEIR:
    return getChillerElectricEIRByName(self, t_name)
Model.getChillerElectricEIRByName = _getChillerElectricEIRByName

def _getChillerElectricEIRsByName(self, t_name: str, t_exactMatch: bool) -> ChillerElectricEIRVector:
    return getChillerElectricEIRsByName(self, t_name, t_exactMatch)
Model.getChillerElectricEIRsByName = _getChillerElectricEIRsByName

class CoilCoolingDXMultiSpeedStageData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXMultiSpeedStageData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXMultiSpeedStageData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType()

    def grossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedTotalCoolingCapacity(self)

    def isGrossRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isGrossRatedTotalCoolingCapacityAutosized(self)

    def grossRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedSensibleHeatRatio(self)

    def isGrossRatedSensibleHeatRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isGrossRatedSensibleHeatRatioAutosized(self)

    def grossRatedCoolingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedCoolingCOP(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isRatedAirFlowRateAutosized(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedEvaporatorFanPowerPerVolumeFlowRate(self)

    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_totalCoolingCapacityFunctionofTemperatureCurve(self)

    def totalCoolingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_totalCoolingCapacityFunctionofFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_energyInputRatioFunctionofFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_partLoadFractionCorrelationCurve(self)

    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_nominalTimeforCondensateRemovaltoBegin(self)

    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def maximumCyclingRate(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_maximumCyclingRate(self)

    def latentCapacityTimeConstant(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_latentCapacityTimeConstant(self)

    def ratedWasteHeatFractionofPowerInput(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedWasteHeatFractionofPowerInput(self)

    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_wasteHeatFunctionofTemperatureCurve(self)

    def evaporativeCondenserEffectiveness(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_evaporativeCondenserEffectiveness(self)

    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_evaporativeCondenserAirFlowRate(self)

    def isEvaporativeCondenserAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isEvaporativeCondenserAirFlowRateAutosized(self)

    def ratedEvaporativeCondenserPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedEvaporativeCondenserPumpPowerConsumption(self)

    def isRatedEvaporativeCondenserPumpPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isRatedEvaporativeCondenserPumpPowerConsumptionAutosized(self)

    def setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity)

    def autosizeGrossRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeGrossRatedTotalCoolingCapacity(self)

    def setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio)

    def autosizeGrossRatedSensibleHeatRatio(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeGrossRatedSensibleHeatRatio(self)

    def setGrossRatedCoolingCOP(self, grossRatedCoolingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedCoolingCOP(self, grossRatedCoolingCOP)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeRatedAirFlowRate(self)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate)

    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setPartLoadFractionCorrelationCurve(self, curve)

    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)

    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)

    def setMaximumCyclingRate(self, maximumCyclingRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setMaximumCyclingRate(self, maximumCyclingRate)

    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)

    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)

    def setWasteHeatFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setWasteHeatFunctionofTemperatureCurve(self, curve)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)

    def autosizeEvaporativeCondenserAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeEvaporativeCondenserAirFlowRate(self)

    def setRatedEvaporativeCondenserPumpPowerConsumption(self, ratedEvaporativeCondenserPumpPowerConsumption: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedEvaporativeCondenserPumpPowerConsumption(self, ratedEvaporativeCondenserPumpPowerConsumption)

    def autosizeRatedEvaporativeCondenserPumpPowerConsumption(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeRatedEvaporativeCondenserPumpPowerConsumption(self)

    def parentCoil(self) -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeed >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_parentCoil(self)

    def autosizedGrossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedGrossRatedTotalCoolingCapacity(self)

    def autosizedGrossRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedGrossRatedSensibleHeatRatio(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedRatedAirFlowRate(self)

    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedEvaporativeCondenserAirFlowRate(self)

    def autosizedRatedEvaporativeCondenserPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedRatedEvaporativeCondenserPumpPowerConsumption(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_applySizingValues(self)

# Register CoilCoolingDXMultiSpeedStageData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_swigregister(CoilCoolingDXMultiSpeedStageData)

def CoilCoolingDXMultiSpeedStageData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType()


def toCoilCoolingDXMultiSpeedStageData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.toCoilCoolingDXMultiSpeedStageData(idfObject)

def getCoilCoolingDXMultiSpeedStageData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageData(t_model, t_handle)

def getCoilCoolingDXMultiSpeedStageDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > >":
    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatas(t_model)

def getCoilCoolingDXMultiSpeedStageDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDataByName(t_model, t_name)

def getCoilCoolingDXMultiSpeedStageDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > >":
    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXMultiSpeedStageData(self) -> OptionalCoilCoolingDXMultiSpeedStageData:
    return toCoilCoolingDXMultiSpeedStageData(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXMultiSpeedStageData = _to_CoilCoolingDXMultiSpeedStageData

def _getCoilCoolingDXMultiSpeedStageData(self, t_handle: "UUID") -> OptionalCoilCoolingDXMultiSpeedStageData:
    return getCoilCoolingDXMultiSpeedStageData(self, t_handle)
Model.getCoilCoolingDXMultiSpeedStageData = _getCoilCoolingDXMultiSpeedStageData

def _getCoilCoolingDXMultiSpeedStageData(self, t_handle_str: str) -> OptionalCoilCoolingDXMultiSpeedStageData:
    return getCoilCoolingDXMultiSpeedStageData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXMultiSpeedStageData = _getCoilCoolingDXMultiSpeedStageData

def _getCoilCoolingDXMultiSpeedStageDatas(self) -> CoilCoolingDXMultiSpeedStageDataVector:
    return getCoilCoolingDXMultiSpeedStageDatas(self)
Model.getCoilCoolingDXMultiSpeedStageDatas = _getCoilCoolingDXMultiSpeedStageDatas

def _getCoilCoolingDXMultiSpeedStageDataByName(self, t_name: str) -> OptionalCoilCoolingDXMultiSpeedStageData:
    return getCoilCoolingDXMultiSpeedStageDataByName(self, t_name)
Model.getCoilCoolingDXMultiSpeedStageDataByName = _getCoilCoolingDXMultiSpeedStageDataByName

def _getCoilCoolingDXMultiSpeedStageDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXMultiSpeedStageDataVector:
    return getCoilCoolingDXMultiSpeedStageDatasByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXMultiSpeedStageDatasByName = _getCoilCoolingDXMultiSpeedStageDatasByName

class CoilCoolingDXVariableRefrigerantFlow(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXVariableRefrigerantFlow(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableRefrigerantFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setAvailabilitySchedule(self, schedule)

    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedTotalCoolingCapacity(self)

    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedTotalCoolingCapacityAutosized(self)

    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)

    def autosizeRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedTotalCoolingCapacity(self)

    def ratedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedSensibleHeatRatio(self)

    def isRatedSensibleHeatRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedSensibleHeatRatioAutosized(self)

    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)

    def autosizeRatedSensibleHeatRatio(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedSensibleHeatRatio(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedAirFlowRateAutosized(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedAirFlowRate(self)

    def coolingCapacityRatioModifierFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_coolingCapacityRatioModifierFunctionofTemperatureCurve(self)

    def setCoolingCapacityRatioModifierFunctionofTemperatureCurve(self, lcurve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setCoolingCapacityRatioModifierFunctionofTemperatureCurve(self, lcurve)

    def coolingCapacityModifierCurveFunctionofFlowFraction(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_coolingCapacityModifierCurveFunctionofFlowFraction(self)

    def setCoolingCapacityModifierCurveFunctionofFlowFraction(self, lcurve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setCoolingCapacityModifierCurveFunctionofFlowFraction(self, lcurve)

    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedTotalCoolingCapacity(self)

    def autosizedRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedSensibleHeatRatio(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedAirFlowRate(self)

# Register CoilCoolingDXVariableRefrigerantFlow in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_swigregister(CoilCoolingDXVariableRefrigerantFlow)

def CoilCoolingDXVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType()


def toCoilCoolingDXVariableRefrigerantFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.toCoilCoolingDXVariableRefrigerantFlow(idfObject)

def getCoilCoolingDXVariableRefrigerantFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlow(t_model, t_handle)

def getCoilCoolingDXVariableRefrigerantFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlows(t_model)

def getCoilCoolingDXVariableRefrigerantFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowByName(t_model, t_name)

def getCoilCoolingDXVariableRefrigerantFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXVariableRefrigerantFlow(self) -> OptionalCoilCoolingDXVariableRefrigerantFlow:
    return toCoilCoolingDXVariableRefrigerantFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXVariableRefrigerantFlow = _to_CoilCoolingDXVariableRefrigerantFlow

def _getCoilCoolingDXVariableRefrigerantFlow(self, t_handle: "UUID") -> OptionalCoilCoolingDXVariableRefrigerantFlow:
    return getCoilCoolingDXVariableRefrigerantFlow(self, t_handle)
Model.getCoilCoolingDXVariableRefrigerantFlow = _getCoilCoolingDXVariableRefrigerantFlow

def _getCoilCoolingDXVariableRefrigerantFlow(self, t_handle_str: str) -> OptionalCoilCoolingDXVariableRefrigerantFlow:
    return getCoilCoolingDXVariableRefrigerantFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXVariableRefrigerantFlow = _getCoilCoolingDXVariableRefrigerantFlow

def _getCoilCoolingDXVariableRefrigerantFlows(self) -> CoilCoolingDXVariableRefrigerantFlowVector:
    return getCoilCoolingDXVariableRefrigerantFlows(self)
Model.getCoilCoolingDXVariableRefrigerantFlows = _getCoilCoolingDXVariableRefrigerantFlows

def _getCoilCoolingDXVariableRefrigerantFlowByName(self, t_name: str) -> OptionalCoilCoolingDXVariableRefrigerantFlow:
    return getCoilCoolingDXVariableRefrigerantFlowByName(self, t_name)
Model.getCoilCoolingDXVariableRefrigerantFlowByName = _getCoilCoolingDXVariableRefrigerantFlowByName

def _getCoilCoolingDXVariableRefrigerantFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXVariableRefrigerantFlowVector:
    return getCoilCoolingDXVariableRefrigerantFlowsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXVariableRefrigerantFlowsByName = _getCoilCoolingDXVariableRefrigerantFlowsByName

class CoilCoolingDXVariableSpeedSpeedData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_swiginit(self, _openstudiomodelhvac.new_CoilCoolingDXVariableSpeedSpeedData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableSpeedSpeedData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType()

    def referenceUnitGrossRatedTotalCoolingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedTotalCoolingCapacity(self)

    def referenceUnitGrossRatedSensibleHeatRatio(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedSensibleHeatRatio(self)

    def referenceUnitGrossRatedCoolingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedCoolingCOP(self)

    def referenceUnitRatedAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedAirFlowRate(self)

    def referenceUnitRatedCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedCondenserAirFlowRate(self)

    def referenceUnitRatedPadEffectivenessofEvapPrecooling(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedPadEffectivenessofEvapPrecooling(self)

    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_totalCoolingCapacityFunctionofTemperatureCurve(self)

    def totalCoolingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_totalCoolingCapacityFunctionofAirFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)

    def setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity)

    def setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio)

    def setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP)

    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)

    def setReferenceUnitRatedCondenserAirFlowRate(self, referenceUnitRatedCondenserAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedCondenserAirFlowRate(self, referenceUnitRatedCondenserAirFlowRate)

    def resetReferenceUnitRatedCondenserAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_resetReferenceUnitRatedCondenserAirFlowRate(self)

    def setReferenceUnitRatedPadEffectivenessofEvapPrecooling(self, referenceUnitRatedPadEffectivenessofEvapPrecooling: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedPadEffectivenessofEvapPrecooling(self, referenceUnitRatedPadEffectivenessofEvapPrecooling)

    def resetReferenceUnitRatedPadEffectivenessofEvapPrecooling(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_resetReferenceUnitRatedPadEffectivenessofEvapPrecooling(self)

    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

# Register CoilCoolingDXVariableSpeedSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_swigregister(CoilCoolingDXVariableSpeedSpeedData)

def CoilCoolingDXVariableSpeedSpeedData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType()


def toCoilCoolingDXVariableSpeedSpeedData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.toCoilCoolingDXVariableSpeedSpeedData(idfObject)

def getCoilCoolingDXVariableSpeedSpeedData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedData(t_model, t_handle)

def getCoilCoolingDXVariableSpeedSpeedDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatas(t_model)

def getCoilCoolingDXVariableSpeedSpeedDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDataByName(t_model, t_name)

def getCoilCoolingDXVariableSpeedSpeedDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > >":
    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXVariableSpeedSpeedData(self) -> OptionalCoilCoolingDXVariableSpeedSpeedData:
    return toCoilCoolingDXVariableSpeedSpeedData(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXVariableSpeedSpeedData = _to_CoilCoolingDXVariableSpeedSpeedData

def _getCoilCoolingDXVariableSpeedSpeedData(self, t_handle: "UUID") -> OptionalCoilCoolingDXVariableSpeedSpeedData:
    return getCoilCoolingDXVariableSpeedSpeedData(self, t_handle)
Model.getCoilCoolingDXVariableSpeedSpeedData = _getCoilCoolingDXVariableSpeedSpeedData

def _getCoilCoolingDXVariableSpeedSpeedData(self, t_handle_str: str) -> OptionalCoilCoolingDXVariableSpeedSpeedData:
    return getCoilCoolingDXVariableSpeedSpeedData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXVariableSpeedSpeedData = _getCoilCoolingDXVariableSpeedSpeedData

def _getCoilCoolingDXVariableSpeedSpeedDatas(self) -> CoilCoolingDXVariableSpeedSpeedDataVector:
    return getCoilCoolingDXVariableSpeedSpeedDatas(self)
Model.getCoilCoolingDXVariableSpeedSpeedDatas = _getCoilCoolingDXVariableSpeedSpeedDatas

def _getCoilCoolingDXVariableSpeedSpeedDataByName(self, t_name: str) -> OptionalCoilCoolingDXVariableSpeedSpeedData:
    return getCoilCoolingDXVariableSpeedSpeedDataByName(self, t_name)
Model.getCoilCoolingDXVariableSpeedSpeedDataByName = _getCoilCoolingDXVariableSpeedSpeedDataByName

def _getCoilCoolingDXVariableSpeedSpeedDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXVariableSpeedSpeedDataVector:
    return getCoilCoolingDXVariableSpeedSpeedDatasByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXVariableSpeedSpeedDatasByName = _getCoilCoolingDXVariableSpeedSpeedDatasByName

class CoilCoolingWater(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWater_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWater(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingWater_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilCoolingWater_availabilitySchedule(self)

    def availableSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilCoolingWater_availableSchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setAvailabilitySchedule(self, schedule)

    def setAvailableSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setAvailableSchedule(self, schedule)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designWaterFlowRate(self)

    def setDesignWaterFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignWaterFlowRate(self, value)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignWaterFlowRateAutosized(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignWaterFlowRate(self)

    def designAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designAirFlowRate(self)

    def setDesignAirFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignAirFlowRate(self, value)

    def isDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignAirFlowRateAutosized(self)

    def autosizeDesignAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignAirFlowRate(self)

    def designInletWaterTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designInletWaterTemperature(self)

    def setDesignInletWaterTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletWaterTemperature(self, value)

    def isDesignInletWaterTemperatureAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletWaterTemperatureAutosized(self)

    def autosizeDesignInletWaterTemperature(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletWaterTemperature(self)

    def designInletAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designInletAirTemperature(self)

    def setDesignInletAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletAirTemperature(self, value)

    def isDesignInletAirTemperatureAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletAirTemperatureAutosized(self)

    def autosizeDesignInletAirTemperature(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletAirTemperature(self)

    def designOutletAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designOutletAirTemperature(self)

    def setDesignOutletAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignOutletAirTemperature(self, value)

    def isDesignOutletAirTemperatureAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignOutletAirTemperatureAutosized(self)

    def autosizeDesignOutletAirTemperature(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignOutletAirTemperature(self)

    def designInletAirHumidityRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designInletAirHumidityRatio(self)

    def setDesignInletAirHumidityRatio(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletAirHumidityRatio(self, value)

    def isDesignInletAirHumidityRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletAirHumidityRatioAutosized(self)

    def autosizeDesignInletAirHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletAirHumidityRatio(self)

    def designOutletAirHumidityRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_designOutletAirHumidityRatio(self)

    def setDesignOutletAirHumidityRatio(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setDesignOutletAirHumidityRatio(self, value)

    def isDesignOutletAirHumidityRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_isDesignOutletAirHumidityRatioAutosized(self)

    def autosizeDesignOutletAirHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignOutletAirHumidityRatio(self)

    def typeOfAnalysis(self) -> "std::string":
        return _openstudiomodelhvac.CoilCoolingWater_typeOfAnalysis(self)

    def setTypeOfAnalysis(self, value: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setTypeOfAnalysis(self, value)

    def heatExchangerConfiguration(self) -> "std::string":
        return _openstudiomodelhvac.CoilCoolingWater_heatExchangerConfiguration(self)

    def setHeatExchangerConfiguration(self, value: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWater_setHeatExchangerConfiguration(self, value)

    def controllerWaterCoil(self) -> "boost::optional< openstudio::model::ControllerWaterCoil >":
        return _openstudiomodelhvac.CoilCoolingWater_controllerWaterCoil(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelhvac.CoilCoolingWater_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelhvac.CoilCoolingWater_airflowNetworkEquivalentDuct(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignWaterFlowRate(self)

    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignAirFlowRate(self)

    def autosizedDesignInletWaterTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletWaterTemperature(self)

    def autosizedDesignInletAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletAirTemperature(self)

    def autosizedDesignOutletAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignOutletAirTemperature(self)

    def autosizedDesignInletAirHumidityRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletAirHumidityRatio(self)

    def autosizedDesignOutletAirHumidityRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignOutletAirHumidityRatio(self)

# Register CoilCoolingWater in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWater_swigregister(CoilCoolingWater)

def CoilCoolingWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingWater_iddObjectType()


def toCoilCoolingWater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingWater >":
    return _openstudiomodelhvac.toCoilCoolingWater(idfObject)

def getCoilCoolingWater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingWater >":
    return _openstudiomodelhvac.getCoilCoolingWater(t_model, t_handle)

def getCoilCoolingWaters(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > >":
    return _openstudiomodelhvac.getCoilCoolingWaters(t_model)

def getCoilCoolingWaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingWater >":
    return _openstudiomodelhvac.getCoilCoolingWaterByName(t_model, t_name)

def getCoilCoolingWatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > >":
    return _openstudiomodelhvac.getCoilCoolingWatersByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingWater(self) -> OptionalCoilCoolingWater:
    return toCoilCoolingWater(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingWater = _to_CoilCoolingWater

def _getCoilCoolingWater(self, t_handle: "UUID") -> OptionalCoilCoolingWater:
    return getCoilCoolingWater(self, t_handle)
Model.getCoilCoolingWater = _getCoilCoolingWater

def _getCoilCoolingWater(self, t_handle_str: str) -> OptionalCoilCoolingWater:
    return getCoilCoolingWater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingWater = _getCoilCoolingWater

def _getCoilCoolingWaters(self) -> CoilCoolingWaterVector:
    return getCoilCoolingWaters(self)
Model.getCoilCoolingWaters = _getCoilCoolingWaters

def _getCoilCoolingWaterByName(self, t_name: str) -> OptionalCoilCoolingWater:
    return getCoilCoolingWaterByName(self, t_name)
Model.getCoilCoolingWaterByName = _getCoilCoolingWaterByName

def _getCoilCoolingWatersByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingWaterVector:
    return getCoilCoolingWatersByName(self, t_name, t_exactMatch)
Model.getCoilCoolingWatersByName = _getCoilCoolingWatersByName

class CoilCoolingWaterToAirHeatPumpEquationFit(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpEquationFit(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpEquationFit

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType()

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedAirFlowRate(self)

    def isRatedAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateDefaulted(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateAutosized(self)

    def ratedWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedWaterFlowRate(self)

    def isRatedWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateDefaulted(self)

    def isRatedWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateAutosized(self)

    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedTotalCoolingCapacity(self)

    def isRatedTotalCoolingCapacityDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedTotalCoolingCapacityDefaulted(self)

    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedTotalCoolingCapacityAutosized(self)

    def ratedSensibleCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedSensibleCoolingCapacity(self)

    def isRatedSensibleCoolingCapacityDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedSensibleCoolingCapacityDefaulted(self)

    def isRatedSensibleCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedSensibleCoolingCapacityAutosized(self)

    def ratedCoolingCoefficientofPerformance(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedCoolingCoefficientofPerformance(self)

    def isRatedCoolingCoefficientofPerformanceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedCoolingCoefficientofPerformanceDefaulted(self)

    def totalCoolingCapacityCoefficient1(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient1(self)

    def totalCoolingCapacityCoefficient2(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient2(self)

    def totalCoolingCapacityCoefficient3(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient3(self)

    def totalCoolingCapacityCoefficient4(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient4(self)

    def totalCoolingCapacityCoefficient5(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient5(self)

    def sensibleCoolingCapacityCoefficient1(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient1(self)

    def sensibleCoolingCapacityCoefficient2(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient2(self)

    def sensibleCoolingCapacityCoefficient3(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient3(self)

    def sensibleCoolingCapacityCoefficient4(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient4(self)

    def sensibleCoolingCapacityCoefficient5(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient5(self)

    def sensibleCoolingCapacityCoefficient6(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient6(self)

    def coolingPowerConsumptionCoefficient1(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient1(self)

    def coolingPowerConsumptionCoefficient2(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient2(self)

    def coolingPowerConsumptionCoefficient3(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient3(self)

    def coolingPowerConsumptionCoefficient4(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient4(self)

    def coolingPowerConsumptionCoefficient5(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient5(self)

    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_nominalTimeforCondensateRemovaltoBegin(self)

    def isNominalTimeforCondensateRemovaltoBeginDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isNominalTimeforCondensateRemovaltoBeginDefaulted(self)

    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def isRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacityDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacityDefaulted(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedAirFlowRate(self, ratedAirFlowRate)

    def resetRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedAirFlowRate(self)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedAirFlowRate(self)

    def setRatedWaterFlowRate(self, ratedWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedWaterFlowRate(self, ratedWaterFlowRate)

    def resetRatedWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedWaterFlowRate(self)

    def autosizeRatedWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedWaterFlowRate(self)

    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)

    def resetRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedTotalCoolingCapacity(self)

    def autosizeRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedTotalCoolingCapacity(self)

    def setRatedSensibleCoolingCapacity(self, ratedSensibleCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedSensibleCoolingCapacity(self, ratedSensibleCoolingCapacity)

    def resetRatedSensibleCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedSensibleCoolingCapacity(self)

    def autosizeRatedSensibleCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedSensibleCoolingCapacity(self)

    def setRatedCoolingCoefficientofPerformance(self, ratedCoolingCoefficientofPerformance: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedCoolingCoefficientofPerformance(self, ratedCoolingCoefficientofPerformance)

    def setTotalCoolingCapacityCoefficient1(self, totalCoolingCapacityCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient1(self, totalCoolingCapacityCoefficient1)

    def setTotalCoolingCapacityCoefficient2(self, totalCoolingCapacityCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient2(self, totalCoolingCapacityCoefficient2)

    def setTotalCoolingCapacityCoefficient3(self, totalCoolingCapacityCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient3(self, totalCoolingCapacityCoefficient3)

    def setTotalCoolingCapacityCoefficient4(self, totalCoolingCapacityCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient4(self, totalCoolingCapacityCoefficient4)

    def setTotalCoolingCapacityCoefficient5(self, totalCoolingCapacityCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient5(self, totalCoolingCapacityCoefficient5)

    def setSensibleCoolingCapacityCoefficient1(self, sensibleCoolingCapacityCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient1(self, sensibleCoolingCapacityCoefficient1)

    def setSensibleCoolingCapacityCoefficient2(self, sensibleCoolingCapacityCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient2(self, sensibleCoolingCapacityCoefficient2)

    def setSensibleCoolingCapacityCoefficient3(self, sensibleCoolingCapacityCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient3(self, sensibleCoolingCapacityCoefficient3)

    def setSensibleCoolingCapacityCoefficient4(self, sensibleCoolingCapacityCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient4(self, sensibleCoolingCapacityCoefficient4)

    def setSensibleCoolingCapacityCoefficient5(self, sensibleCoolingCapacityCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient5(self, sensibleCoolingCapacityCoefficient5)

    def setSensibleCoolingCapacityCoefficient6(self, sensibleCoolingCapacityCoefficient6: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient6(self, sensibleCoolingCapacityCoefficient6)

    def setCoolingPowerConsumptionCoefficient1(self, coolingPowerConsumptionCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient1(self, coolingPowerConsumptionCoefficient1)

    def setCoolingPowerConsumptionCoefficient2(self, coolingPowerConsumptionCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient2(self, coolingPowerConsumptionCoefficient2)

    def setCoolingPowerConsumptionCoefficient3(self, coolingPowerConsumptionCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient3(self, coolingPowerConsumptionCoefficient3)

    def setCoolingPowerConsumptionCoefficient4(self, coolingPowerConsumptionCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient4(self, coolingPowerConsumptionCoefficient4)

    def setCoolingPowerConsumptionCoefficient5(self, coolingPowerConsumptionCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient5(self, coolingPowerConsumptionCoefficient5)

    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)

    def resetNominalTimeforCondensateRemovaltoBegin(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetNominalTimeforCondensateRemovaltoBegin(self)

    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)

    def resetRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedAirFlowRate(self)

    def autosizedRatedWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedWaterFlowRate(self)

    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedTotalCoolingCapacity(self)

    def autosizedRatedSensibleCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedSensibleCoolingCapacity(self)

# Register CoilCoolingWaterToAirHeatPumpEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_swigregister(CoilCoolingWaterToAirHeatPumpEquationFit)

def CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType()


def toCoilCoolingWaterToAirHeatPumpEquationFit(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpEquationFit(idfObject)

def getCoilCoolingWaterToAirHeatPumpEquationFit(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFit(t_model, t_handle)

def getCoilCoolingWaterToAirHeatPumpEquationFits(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFits(t_model)

def getCoilCoolingWaterToAirHeatPumpEquationFitByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitByName(t_model, t_name)

def getCoilCoolingWaterToAirHeatPumpEquationFitsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingWaterToAirHeatPumpEquationFit(self) -> OptionalCoilCoolingWaterToAirHeatPumpEquationFit:
    return toCoilCoolingWaterToAirHeatPumpEquationFit(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingWaterToAirHeatPumpEquationFit = _to_CoilCoolingWaterToAirHeatPumpEquationFit

def _getCoilCoolingWaterToAirHeatPumpEquationFit(self, t_handle: "UUID") -> OptionalCoilCoolingWaterToAirHeatPumpEquationFit:
    return getCoilCoolingWaterToAirHeatPumpEquationFit(self, t_handle)
Model.getCoilCoolingWaterToAirHeatPumpEquationFit = _getCoilCoolingWaterToAirHeatPumpEquationFit

def _getCoilCoolingWaterToAirHeatPumpEquationFit(self, t_handle_str: str) -> OptionalCoilCoolingWaterToAirHeatPumpEquationFit:
    return getCoilCoolingWaterToAirHeatPumpEquationFit(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingWaterToAirHeatPumpEquationFit = _getCoilCoolingWaterToAirHeatPumpEquationFit

def _getCoilCoolingWaterToAirHeatPumpEquationFits(self) -> CoilCoolingWaterToAirHeatPumpEquationFitVector:
    return getCoilCoolingWaterToAirHeatPumpEquationFits(self)
Model.getCoilCoolingWaterToAirHeatPumpEquationFits = _getCoilCoolingWaterToAirHeatPumpEquationFits

def _getCoilCoolingWaterToAirHeatPumpEquationFitByName(self, t_name: str) -> OptionalCoilCoolingWaterToAirHeatPumpEquationFit:
    return getCoilCoolingWaterToAirHeatPumpEquationFitByName(self, t_name)
Model.getCoilCoolingWaterToAirHeatPumpEquationFitByName = _getCoilCoolingWaterToAirHeatPumpEquationFitByName

def _getCoilCoolingWaterToAirHeatPumpEquationFitsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingWaterToAirHeatPumpEquationFitVector:
    return getCoilCoolingWaterToAirHeatPumpEquationFitsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingWaterToAirHeatPumpEquationFitsByName = _getCoilCoolingWaterToAirHeatPumpEquationFitsByName

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()

    def nominalSpeedLevel(self) -> "int":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_nominalSpeedLevel(self)

    def grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self)

    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def ratedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ratedWaterFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def nominalTimeforCondensatetoBeginLeavingtheCoil(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_nominalTimeforCondensatetoBeginLeavingtheCoil(self)

    def initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self)

    def useHotGasReheat(self) -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_useHotGasReheat(self)

    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_energyPartLoadFractionCurve(self)

    def setNominalSpeedLevel(self, nominalSpeedLevel: "int") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalSpeedLevel(self, nominalSpeedLevel)

    def setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel)

    def autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

    def setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil)

    def setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity)

    def setUseHotGasReheat(self, useHotGasReheat: "bool") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setUseHotGasReheat(self, useHotGasReheat)

    def setEnergyPartLoadFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setEnergyPartLoadFractionCurve(self, curve)

    def speeds(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_speeds(self)

    def addSpeed(self, speed: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_addSpeed(self, speed)

    def removeSpeed(self, speed: "CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_removeSpeed(self, speed)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_removeAllSpeeds(self)

    def autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

# Register CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit)

def CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()


def toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(t_model, t_handle)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(t_model)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model, t_name)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit:
    return toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = _to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle: "UUID") -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle_str: str) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(self) -> CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(self)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(self, t_name: str) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(self, t_name)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swiginit(self, _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()

    def referenceUnitGrossRatedTotalCoolingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedTotalCoolingCapacity(self)

    def referenceUnitGrossRatedSensibleHeatRatio(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedSensibleHeatRatio(self)

    def referenceUnitGrossRatedCoolingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedCoolingCOP(self)

    def referenceUnitRatedAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedAirFlowRate(self)

    def referenceUnitRatedWaterFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedWaterFlowRate(self)

    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofTemperatureCurve(self)

    def totalCoolingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofAirFlowFractionCurve(self)

    def totalCoolingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofWaterFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)

    def energyInputRatioFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofWaterFlowFractionCurve(self)

    def referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self) -> "double":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self)

    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_wasteHeatFunctionofTemperatureCurve(self)

    def setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity)

    def setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio)

    def setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP)

    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)

    def setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate)

    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setTotalCoolingCapacityFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofWaterFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve)

    def setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions: "double") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions)

    def setWasteHeatFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setWasteHeatFunctionofTemperatureCurve(self, curve)

# Register CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)

def CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()


def toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model, t_handle)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model, t_name)

def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _to_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle: "UUID") -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle_str: str) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(self) -> CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(self)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(self, t_name: str) -> OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(self, t_name)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName

def _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector:
    return getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(self, t_name, t_exactMatch)
Model.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName = _getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName

class CoilHeatingDXMultiSpeedStageData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXMultiSpeedStageData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXMultiSpeedStageData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType()

    def grossRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_grossRatedHeatingCapacity(self)

    def isGrossRatedHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_isGrossRatedHeatingCapacityAutosized(self)

    def grossRatedHeatingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_grossRatedHeatingCOP(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_isRatedAirFlowRateAutosized(self)

    def ratedSupplyAirFanPowerPerVolumeFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedSupplyAirFanPowerPerVolumeFlowRate(self)

    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_heatingCapacityFunctionofTemperatureCurve(self)

    def heatingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_heatingCapacityFunctionofFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_energyInputRatioFunctionofFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_partLoadFractionCorrelationCurve(self)

    def ratedWasteHeatFractionofPowerInput(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedWasteHeatFractionofPowerInput(self)

    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_wasteHeatFunctionofTemperatureCurve(self)

    def setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity)

    def autosizeGrossRatedHeatingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizeGrossRatedHeatingCapacity(self)

    def setGrossRatedHeatingCOP(self, grossRatedHeatingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setGrossRatedHeatingCOP(self, grossRatedHeatingCOP)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizeRatedAirFlowRate(self)

    def setRatedSupplyAirFanPowerPerVolumeFlowRate(self, ratedSupplyAirFanPowerPerVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedSupplyAirFanPowerPerVolumeFlowRate(self, ratedSupplyAirFanPowerPerVolumeFlowRate)

    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def setHeatingCapacityFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setHeatingCapacityFunctionofFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setPartLoadFractionCorrelationCurve(self, curve)

    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)

    def setWasteHeatFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setWasteHeatFunctionofTemperatureCurve(self, curve)

    def autosizedGrossRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizedGrossRatedHeatingCapacity(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizedRatedAirFlowRate(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_applySizingValues(self)

# Register CoilHeatingDXMultiSpeedStageData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_swigregister(CoilHeatingDXMultiSpeedStageData)

def CoilHeatingDXMultiSpeedStageData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType()


def toCoilHeatingDXMultiSpeedStageData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.toCoilHeatingDXMultiSpeedStageData(idfObject)

def getCoilHeatingDXMultiSpeedStageData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageData(t_model, t_handle)

def getCoilHeatingDXMultiSpeedStageDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > >":
    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatas(t_model)

def getCoilHeatingDXMultiSpeedStageDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":
    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDataByName(t_model, t_name)

def getCoilHeatingDXMultiSpeedStageDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > >":
    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXMultiSpeedStageData(self) -> OptionalCoilHeatingDXMultiSpeedStageData:
    return toCoilHeatingDXMultiSpeedStageData(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXMultiSpeedStageData = _to_CoilHeatingDXMultiSpeedStageData

def _getCoilHeatingDXMultiSpeedStageData(self, t_handle: "UUID") -> OptionalCoilHeatingDXMultiSpeedStageData:
    return getCoilHeatingDXMultiSpeedStageData(self, t_handle)
Model.getCoilHeatingDXMultiSpeedStageData = _getCoilHeatingDXMultiSpeedStageData

def _getCoilHeatingDXMultiSpeedStageData(self, t_handle_str: str) -> OptionalCoilHeatingDXMultiSpeedStageData:
    return getCoilHeatingDXMultiSpeedStageData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXMultiSpeedStageData = _getCoilHeatingDXMultiSpeedStageData

def _getCoilHeatingDXMultiSpeedStageDatas(self) -> CoilHeatingDXMultiSpeedStageDataVector:
    return getCoilHeatingDXMultiSpeedStageDatas(self)
Model.getCoilHeatingDXMultiSpeedStageDatas = _getCoilHeatingDXMultiSpeedStageDatas

def _getCoilHeatingDXMultiSpeedStageDataByName(self, t_name: str) -> OptionalCoilHeatingDXMultiSpeedStageData:
    return getCoilHeatingDXMultiSpeedStageDataByName(self, t_name)
Model.getCoilHeatingDXMultiSpeedStageDataByName = _getCoilHeatingDXMultiSpeedStageDataByName

def _getCoilHeatingDXMultiSpeedStageDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXMultiSpeedStageDataVector:
    return getCoilHeatingDXMultiSpeedStageDatasByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXMultiSpeedStageDatasByName = _getCoilHeatingDXMultiSpeedStageDatasByName

class CoilHeatingDXVariableRefrigerantFlow(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXVariableRefrigerantFlow(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableRefrigerantFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setAvailabilitySchedule(self, schedule)

    def ratedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_ratedTotalHeatingCapacity(self)

    def isRatedTotalHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_isRatedTotalHeatingCapacityAutosized(self)

    def setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity)

    def autosizeRatedTotalHeatingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizeRatedTotalHeatingCapacity(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_isRatedAirFlowRateAutosized(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizeRatedAirFlowRate(self)

    def heatingCapacityRatioModifierFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_heatingCapacityRatioModifierFunctionofTemperatureCurve(self)

    def setHeatingCapacityRatioModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setHeatingCapacityRatioModifierFunctionofTemperatureCurve(self, curve)

    def heatingCapacityModifierFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_heatingCapacityModifierFunctionofFlowFractionCurve(self)

    def setHeatingCapacityModifierFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setHeatingCapacityModifierFunctionofFlowFractionCurve(self, curve)

    def autosizedRatedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizedRatedTotalHeatingCapacity(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizedRatedAirFlowRate(self)

# Register CoilHeatingDXVariableRefrigerantFlow in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_swigregister(CoilHeatingDXVariableRefrigerantFlow)

def CoilHeatingDXVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType()


def toCoilHeatingDXVariableRefrigerantFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.toCoilHeatingDXVariableRefrigerantFlow(idfObject)

def getCoilHeatingDXVariableRefrigerantFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlow(t_model, t_handle)

def getCoilHeatingDXVariableRefrigerantFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlows(t_model)

def getCoilHeatingDXVariableRefrigerantFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowByName(t_model, t_name)

def getCoilHeatingDXVariableRefrigerantFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXVariableRefrigerantFlow(self) -> OptionalCoilHeatingDXVariableRefrigerantFlow:
    return toCoilHeatingDXVariableRefrigerantFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXVariableRefrigerantFlow = _to_CoilHeatingDXVariableRefrigerantFlow

def _getCoilHeatingDXVariableRefrigerantFlow(self, t_handle: "UUID") -> OptionalCoilHeatingDXVariableRefrigerantFlow:
    return getCoilHeatingDXVariableRefrigerantFlow(self, t_handle)
Model.getCoilHeatingDXVariableRefrigerantFlow = _getCoilHeatingDXVariableRefrigerantFlow

def _getCoilHeatingDXVariableRefrigerantFlow(self, t_handle_str: str) -> OptionalCoilHeatingDXVariableRefrigerantFlow:
    return getCoilHeatingDXVariableRefrigerantFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXVariableRefrigerantFlow = _getCoilHeatingDXVariableRefrigerantFlow

def _getCoilHeatingDXVariableRefrigerantFlows(self) -> CoilHeatingDXVariableRefrigerantFlowVector:
    return getCoilHeatingDXVariableRefrigerantFlows(self)
Model.getCoilHeatingDXVariableRefrigerantFlows = _getCoilHeatingDXVariableRefrigerantFlows

def _getCoilHeatingDXVariableRefrigerantFlowByName(self, t_name: str) -> OptionalCoilHeatingDXVariableRefrigerantFlow:
    return getCoilHeatingDXVariableRefrigerantFlowByName(self, t_name)
Model.getCoilHeatingDXVariableRefrigerantFlowByName = _getCoilHeatingDXVariableRefrigerantFlowByName

def _getCoilHeatingDXVariableRefrigerantFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXVariableRefrigerantFlowVector:
    return getCoilHeatingDXVariableRefrigerantFlowsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXVariableRefrigerantFlowsByName = _getCoilHeatingDXVariableRefrigerantFlowsByName

class CoilHeatingGasMultiStageStageData(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_swiginit(self, _openstudiomodelhvac.new_CoilHeatingGasMultiStageStageData(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingGasMultiStageStageData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType()

    def gasBurnerEfficiency(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_gasBurnerEfficiency(self)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_isNominalCapacityAutosized(self)

    def parasiticElectricLoad(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_parasiticElectricLoad(self)

    def setGasBurnerEfficiency(self, GasBurnerEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setGasBurnerEfficiency(self, GasBurnerEfficiency)

    def setNominalCapacity(self, StageNominalCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setNominalCapacity(self, StageNominalCapacity)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosizeNominalCapacity(self)

    def setParasiticElectricLoad(self, StageParasiticElectricLoad: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setParasiticElectricLoad(self, StageParasiticElectricLoad)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosizedNominalCapacity(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_applySizingValues(self)

# Register CoilHeatingGasMultiStageStageData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingGasMultiStageStageData_swigregister(CoilHeatingGasMultiStageStageData)

def CoilHeatingGasMultiStageStageData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType()


def toCoilHeatingGasMultiStageStageData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":
    return _openstudiomodelhvac.toCoilHeatingGasMultiStageStageData(idfObject)

def getCoilHeatingGasMultiStageStageData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":
    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageData(t_model, t_handle)

def getCoilHeatingGasMultiStageStageDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > >":
    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatas(t_model)

def getCoilHeatingGasMultiStageStageDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":
    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDataByName(t_model, t_name)

def getCoilHeatingGasMultiStageStageDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > >":
    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingGasMultiStageStageData(self) -> OptionalCoilHeatingGasMultiStageStageData:
    return toCoilHeatingGasMultiStageStageData(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingGasMultiStageStageData = _to_CoilHeatingGasMultiStageStageData

def _getCoilHeatingGasMultiStageStageData(self, t_handle: "UUID") -> OptionalCoilHeatingGasMultiStageStageData:
    return getCoilHeatingGasMultiStageStageData(self, t_handle)
Model.getCoilHeatingGasMultiStageStageData = _getCoilHeatingGasMultiStageStageData

def _getCoilHeatingGasMultiStageStageData(self, t_handle_str: str) -> OptionalCoilHeatingGasMultiStageStageData:
    return getCoilHeatingGasMultiStageStageData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingGasMultiStageStageData = _getCoilHeatingGasMultiStageStageData

def _getCoilHeatingGasMultiStageStageDatas(self) -> CoilHeatingGasMultiStageStageDataVector:
    return getCoilHeatingGasMultiStageStageDatas(self)
Model.getCoilHeatingGasMultiStageStageDatas = _getCoilHeatingGasMultiStageStageDatas

def _getCoilHeatingGasMultiStageStageDataByName(self, t_name: str) -> OptionalCoilHeatingGasMultiStageStageData:
    return getCoilHeatingGasMultiStageStageDataByName(self, t_name)
Model.getCoilHeatingGasMultiStageStageDataByName = _getCoilHeatingGasMultiStageStageDataByName

def _getCoilHeatingGasMultiStageStageDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingGasMultiStageStageDataVector:
    return getCoilHeatingGasMultiStageStageDatasByName(self, t_name, t_exactMatch)
Model.getCoilHeatingGasMultiStageStageDatasByName = _getCoilHeatingGasMultiStageStageDatasByName

class CoilHeatingDXVariableSpeedSpeedData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_swiginit(self, _openstudiomodelhvac.new_CoilHeatingDXVariableSpeedSpeedData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableSpeedSpeedData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType()

    def referenceUnitGrossRatedHeatingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitGrossRatedHeatingCapacity(self)

    def referenceUnitGrossRatedHeatingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitGrossRatedHeatingCOP(self)

    def referenceUnitRatedAirFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitRatedAirFlowRate(self)

    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_heatingCapacityFunctionofTemperatureCurve(self)

    def totalHeatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_totalHeatingCapacityFunctionofAirFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)

    def setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity)

    def setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP)

    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)

    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

# Register CoilHeatingDXVariableSpeedSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_swigregister(CoilHeatingDXVariableSpeedSpeedData)

def CoilHeatingDXVariableSpeedSpeedData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType()


def toCoilHeatingDXVariableSpeedSpeedData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.toCoilHeatingDXVariableSpeedSpeedData(idfObject)

def getCoilHeatingDXVariableSpeedSpeedData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedData(t_model, t_handle)

def getCoilHeatingDXVariableSpeedSpeedDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatas(t_model)

def getCoilHeatingDXVariableSpeedSpeedDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDataByName(t_model, t_name)

def getCoilHeatingDXVariableSpeedSpeedDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > >":
    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXVariableSpeedSpeedData(self) -> OptionalCoilHeatingDXVariableSpeedSpeedData:
    return toCoilHeatingDXVariableSpeedSpeedData(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXVariableSpeedSpeedData = _to_CoilHeatingDXVariableSpeedSpeedData

def _getCoilHeatingDXVariableSpeedSpeedData(self, t_handle: "UUID") -> OptionalCoilHeatingDXVariableSpeedSpeedData:
    return getCoilHeatingDXVariableSpeedSpeedData(self, t_handle)
Model.getCoilHeatingDXVariableSpeedSpeedData = _getCoilHeatingDXVariableSpeedSpeedData

def _getCoilHeatingDXVariableSpeedSpeedData(self, t_handle_str: str) -> OptionalCoilHeatingDXVariableSpeedSpeedData:
    return getCoilHeatingDXVariableSpeedSpeedData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXVariableSpeedSpeedData = _getCoilHeatingDXVariableSpeedSpeedData

def _getCoilHeatingDXVariableSpeedSpeedDatas(self) -> CoilHeatingDXVariableSpeedSpeedDataVector:
    return getCoilHeatingDXVariableSpeedSpeedDatas(self)
Model.getCoilHeatingDXVariableSpeedSpeedDatas = _getCoilHeatingDXVariableSpeedSpeedDatas

def _getCoilHeatingDXVariableSpeedSpeedDataByName(self, t_name: str) -> OptionalCoilHeatingDXVariableSpeedSpeedData:
    return getCoilHeatingDXVariableSpeedSpeedDataByName(self, t_name)
Model.getCoilHeatingDXVariableSpeedSpeedDataByName = _getCoilHeatingDXVariableSpeedSpeedDataByName

def _getCoilHeatingDXVariableSpeedSpeedDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXVariableSpeedSpeedDataVector:
    return getCoilHeatingDXVariableSpeedSpeedDatasByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXVariableSpeedSpeedDatasByName = _getCoilHeatingDXVariableSpeedSpeedDatasByName

class CoilHeatingWater(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWater_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWater(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingWater_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilHeatingWater_availabilitySchedule(self)

    def availableSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.CoilHeatingWater_availableSchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setAvailabilitySchedule(self, schedule)

    def setAvailableSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setAvailableSchedule(self, schedule)

    def uFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_uFactorTimesAreaValue(self)

    def setUFactorTimesAreaValue(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setUFactorTimesAreaValue(self, value)

    def isUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_isUFactorTimesAreaValueAutosized(self)

    def autosizeUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWater_autosizeUFactorTimesAreaValue(self)

    def maximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_maximumWaterFlowRate(self)

    def setMaximumWaterFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setMaximumWaterFlowRate(self, value)

    def isMaximumWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_isMaximumWaterFlowRateAutosized(self)

    def autosizeMaximumWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWater_autosizeMaximumWaterFlowRate(self)

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelhvac.CoilHeatingWater_performanceInputMethod(self)

    def setPerformanceInputMethod(self, value: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setPerformanceInputMethod(self, value)

    def ratedCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_ratedCapacity(self)

    def setRatedCapacity(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedCapacity(self, value)

    def isRatedCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_isRatedCapacityAutosized(self)

    def autosizeRatedCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWater_autosizeRatedCapacity(self)

    def ratedInletWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWater_ratedInletWaterTemperature(self)

    def setRatedInletWaterTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedInletWaterTemperature(self, value)

    def ratedInletAirTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWater_ratedInletAirTemperature(self)

    def setRatedInletAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedInletAirTemperature(self, value)

    def ratedOutletWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWater_ratedOutletWaterTemperature(self)

    def setRatedOutletWaterTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedOutletWaterTemperature(self, value)

    def ratedOutletAirTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWater_ratedOutletAirTemperature(self)

    def setRatedOutletAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedOutletAirTemperature(self, value)

    def ratedRatioForAirAndWaterConvection(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWater_ratedRatioForAirAndWaterConvection(self)

    def setRatedRatioForAirAndWaterConvection(self, value: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWater_setRatedRatioForAirAndWaterConvection(self, value)

    def controllerWaterCoil(self) -> "boost::optional< openstudio::model::ControllerWaterCoil >":
        return _openstudiomodelhvac.CoilHeatingWater_controllerWaterCoil(self)

    def autosizedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_autosizedUFactorTimesAreaValue(self)

    def autosizedMaximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_autosizedMaximumWaterFlowRate(self)

    def autosizedRatedCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWater_autosizedRatedCapacity(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelhvac.CoilHeatingWater_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelhvac.CoilHeatingWater_airflowNetworkEquivalentDuct(self)

# Register CoilHeatingWater in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWater_swigregister(CoilHeatingWater)

def CoilHeatingWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingWater_iddObjectType()


def toCoilHeatingWater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWater >":
    return _openstudiomodelhvac.toCoilHeatingWater(idfObject)

def getCoilHeatingWater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWater >":
    return _openstudiomodelhvac.getCoilHeatingWater(t_model, t_handle)

def getCoilHeatingWaters(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > >":
    return _openstudiomodelhvac.getCoilHeatingWaters(t_model)

def getCoilHeatingWaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWater >":
    return _openstudiomodelhvac.getCoilHeatingWaterByName(t_model, t_name)

def getCoilHeatingWatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > >":
    return _openstudiomodelhvac.getCoilHeatingWatersByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWater(self) -> OptionalCoilHeatingWater:
    return toCoilHeatingWater(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWater = _to_CoilHeatingWater

def _getCoilHeatingWater(self, t_handle: "UUID") -> OptionalCoilHeatingWater:
    return getCoilHeatingWater(self, t_handle)
Model.getCoilHeatingWater = _getCoilHeatingWater

def _getCoilHeatingWater(self, t_handle_str: str) -> OptionalCoilHeatingWater:
    return getCoilHeatingWater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWater = _getCoilHeatingWater

def _getCoilHeatingWaters(self) -> CoilHeatingWaterVector:
    return getCoilHeatingWaters(self)
Model.getCoilHeatingWaters = _getCoilHeatingWaters

def _getCoilHeatingWaterByName(self, t_name: str) -> OptionalCoilHeatingWater:
    return getCoilHeatingWaterByName(self, t_name)
Model.getCoilHeatingWaterByName = _getCoilHeatingWaterByName

def _getCoilHeatingWatersByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterVector:
    return getCoilHeatingWatersByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWatersByName = _getCoilHeatingWatersByName

class CoilHeatingWaterToAirHeatPumpEquationFit(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpEquationFit(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpEquationFit

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType()

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedAirFlowRate(self)

    def isRatedAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateDefaulted(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateAutosized(self)

    def ratedWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedWaterFlowRate(self)

    def isRatedWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateDefaulted(self)

    def isRatedWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateAutosized(self)

    def ratedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedHeatingCapacity(self)

    def isRatedHeatingCapacityDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCapacityDefaulted(self)

    def isRatedHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCapacityAutosized(self)

    def ratedHeatingCoefficientofPerformance(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedHeatingCoefficientofPerformance(self)

    def isRatedHeatingCoefficientofPerformanceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCoefficientofPerformanceDefaulted(self)

    def heatingCapacityCoefficient1(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient1(self)

    def heatingCapacityCoefficient2(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient2(self)

    def heatingCapacityCoefficient3(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient3(self)

    def heatingCapacityCoefficient4(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient4(self)

    def heatingCapacityCoefficient5(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient5(self)

    def heatingPowerConsumptionCoefficient1(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient1(self)

    def heatingPowerConsumptionCoefficient2(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient2(self)

    def heatingPowerConsumptionCoefficient3(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient3(self)

    def heatingPowerConsumptionCoefficient4(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient4(self)

    def heatingPowerConsumptionCoefficient5(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient5(self)

    def setRatedAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedAirFlowRate(self, *args)

    def resetRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedAirFlowRate(self)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedAirFlowRate(self)

    def setRatedWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedWaterFlowRate(self, *args)

    def resetRatedWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedWaterFlowRate(self)

    def autosizeRatedWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedWaterFlowRate(self)

    def setRatedHeatingCapacity(self, *args) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedHeatingCapacity(self, *args)

    def resetRatedHeatingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedHeatingCapacity(self)

    def autosizeRatedHeatingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedHeatingCapacity(self)

    def setRatedHeatingCoefficientofPerformance(self, ratedHeatingCoefficientofPerformance: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedHeatingCoefficientofPerformance(self, ratedHeatingCoefficientofPerformance)

    def resetRatedHeatingCoefficientofPerformance(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedHeatingCoefficientofPerformance(self)

    def setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1)

    def setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2)

    def setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3)

    def setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4)

    def setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5)

    def setHeatingPowerConsumptionCoefficient1(self, heatingPowerConsumptionCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient1(self, heatingPowerConsumptionCoefficient1)

    def setHeatingPowerConsumptionCoefficient2(self, heatingPowerConsumptionCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient2(self, heatingPowerConsumptionCoefficient2)

    def setHeatingPowerConsumptionCoefficient3(self, heatingPowerConsumptionCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient3(self, heatingPowerConsumptionCoefficient3)

    def setHeatingPowerConsumptionCoefficient4(self, heatingPowerConsumptionCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient4(self, heatingPowerConsumptionCoefficient4)

    def setHeatingPowerConsumptionCoefficient5(self, heatingPowerConsumptionCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient5(self, heatingPowerConsumptionCoefficient5)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedAirFlowRate(self)

    def autosizedRatedWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedWaterFlowRate(self)

    def autosizedRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedHeatingCapacity(self)

# Register CoilHeatingWaterToAirHeatPumpEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_swigregister(CoilHeatingWaterToAirHeatPumpEquationFit)

def CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType()


def toCoilHeatingWaterToAirHeatPumpEquationFit(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpEquationFit(idfObject)

def getCoilHeatingWaterToAirHeatPumpEquationFit(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFit(t_model, t_handle)

def getCoilHeatingWaterToAirHeatPumpEquationFits(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFits(t_model)

def getCoilHeatingWaterToAirHeatPumpEquationFitByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitByName(t_model, t_name)

def getCoilHeatingWaterToAirHeatPumpEquationFitsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWaterToAirHeatPumpEquationFit(self) -> OptionalCoilHeatingWaterToAirHeatPumpEquationFit:
    return toCoilHeatingWaterToAirHeatPumpEquationFit(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWaterToAirHeatPumpEquationFit = _to_CoilHeatingWaterToAirHeatPumpEquationFit

def _getCoilHeatingWaterToAirHeatPumpEquationFit(self, t_handle: "UUID") -> OptionalCoilHeatingWaterToAirHeatPumpEquationFit:
    return getCoilHeatingWaterToAirHeatPumpEquationFit(self, t_handle)
Model.getCoilHeatingWaterToAirHeatPumpEquationFit = _getCoilHeatingWaterToAirHeatPumpEquationFit

def _getCoilHeatingWaterToAirHeatPumpEquationFit(self, t_handle_str: str) -> OptionalCoilHeatingWaterToAirHeatPumpEquationFit:
    return getCoilHeatingWaterToAirHeatPumpEquationFit(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWaterToAirHeatPumpEquationFit = _getCoilHeatingWaterToAirHeatPumpEquationFit

def _getCoilHeatingWaterToAirHeatPumpEquationFits(self) -> CoilHeatingWaterToAirHeatPumpEquationFitVector:
    return getCoilHeatingWaterToAirHeatPumpEquationFits(self)
Model.getCoilHeatingWaterToAirHeatPumpEquationFits = _getCoilHeatingWaterToAirHeatPumpEquationFits

def _getCoilHeatingWaterToAirHeatPumpEquationFitByName(self, t_name: str) -> OptionalCoilHeatingWaterToAirHeatPumpEquationFit:
    return getCoilHeatingWaterToAirHeatPumpEquationFitByName(self, t_name)
Model.getCoilHeatingWaterToAirHeatPumpEquationFitByName = _getCoilHeatingWaterToAirHeatPumpEquationFitByName

def _getCoilHeatingWaterToAirHeatPumpEquationFitsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterToAirHeatPumpEquationFitVector:
    return getCoilHeatingWaterToAirHeatPumpEquationFitsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWaterToAirHeatPumpEquationFitsByName = _getCoilHeatingWaterToAirHeatPumpEquationFitsByName

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(WaterToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()

    def nominalSpeedLevel(self) -> "int":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_nominalSpeedLevel(self)

    def ratedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self)

    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def ratedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedWaterFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_energyPartLoadFractionCurve(self)

    def setNominalSpeedLevel(self, nominalSpeedLevel: "int") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalSpeedLevel(self, nominalSpeedLevel)

    def setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel)

    def autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

    def setEnergyPartLoadFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setEnergyPartLoadFractionCurve(self, curve)

    def speeds(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_speeds(self)

    def addSpeed(self, speed: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_addSpeed(self, speed)

    def removeSpeed(self, speed: "CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData") -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_removeSpeed(self, speed)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_removeAllSpeeds(self)

    def autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

# Register CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit)

def CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()


def toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(t_model, t_handle)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(t_model)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model, t_name)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit:
    return toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = _to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle: "UUID") -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self, t_handle_str: str) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(self) -> CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(self)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(self, t_name: str) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(self, t_name)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swiginit(self, _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()

    def referenceUnitGrossRatedHeatingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedHeatingCapacity(self)

    def referenceUnitGrossRatedHeatingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedHeatingCOP(self)

    def referenceUnitRatedAirFlow(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedAirFlow(self)

    def referenceUnitRatedWaterFlowRate(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedWaterFlowRate(self)

    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_heatingCapacityFunctionofTemperatureCurve(self)

    def totalHeatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalHeatingCapacityFunctionofAirFlowFractionCurve(self)

    def heatingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_heatingCapacityFunctionofWaterFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)

    def energyInputRatioFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofWaterFlowFractionCurve(self)

    def referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self) -> "double":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self)

    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_wasteHeatFunctionofTemperatureCurve(self)

    def setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity)

    def setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP)

    def setReferenceUnitRatedAirFlow(self, referenceUnitRatedAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedAirFlow(self, referenceUnitRatedAirFlow)

    def setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate)

    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve)

    def setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions: "double") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions)

    def setWasteHeatFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setWasteHeatFunctionofTemperatureCurve(self, curve)

# Register CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData in _openstudiomodelhvac:
_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)

def CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()


def toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model, t_handle)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model, t_name)

def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":
    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _to_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle: "UUID") -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, t_handle_str: str) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(self) -> CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(self)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(self, t_name: str) -> OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(self, t_name)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName

def _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector:
    return getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName = _getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName

class CoilPerformanceDXCooling(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilPerformanceDXCooling_swiginit(self, _openstudiomodelhvac.new_CoilPerformanceDXCooling(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilPerformanceDXCooling

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType()

    @staticmethod
    def condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues()

    def grossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedTotalCoolingCapacity(self)

    def isGrossRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_isGrossRatedTotalCoolingCapacityAutosized(self)

    def grossRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedSensibleHeatRatio(self)

    def isGrossRatedSensibleHeatRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_isGrossRatedSensibleHeatRatioAutosized(self)

    def grossRatedCoolingCOP(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedCoolingCOP(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_isRatedAirFlowRateAutosized(self)

    def fractionofAirFlowBypassedAroundCoil(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_fractionofAirFlowBypassedAroundCoil(self)

    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_totalCoolingCapacityFunctionofTemperatureCurve(self)

    def totalCoolingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_totalCoolingCapacityFunctionofFlowFractionCurve(self)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_energyInputRatioFunctionofTemperatureCurve(self)

    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_energyInputRatioFunctionofFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_partLoadFractionCorrelationCurve(self)

    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_nominalTimeforCondensateRemovaltoBegin(self)

    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def maximumCyclingRate(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_maximumCyclingRate(self)

    def latentCapacityTimeConstant(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_latentCapacityTimeConstant(self)

    def condenserAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserAirInletNode(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserType(self)

    def evaporativeCondenserEffectiveness(self) -> "double":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserEffectiveness(self)

    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserAirFlowRate(self)

    def isEvaporativeCondenserAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_isEvaporativeCondenserAirFlowRateAutosized(self)

    def evaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserPumpRatedPowerConsumption(self)

    def isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self)

    def sensibleHeatRatioFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_sensibleHeatRatioFunctionofTemperatureCurve(self)

    def sensibleHeatRatioFunctionofFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_sensibleHeatRatioFunctionofFlowFractionCurve(self)

    def setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity)

    def autosizeGrossRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeGrossRatedTotalCoolingCapacity(self)

    def setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio)

    def autosizeGrossRatedSensibleHeatRatio(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeGrossRatedSensibleHeatRatio(self)

    def setGrossRatedCoolingCOP(self, grossRatedCoolingCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedCoolingCOP(self, grossRatedCoolingCOP)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeRatedAirFlowRate(self)

    def setFractionofAirFlowBypassedAroundCoil(self, fractionofAirFlowBypassedAroundCoil: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setFractionofAirFlowBypassedAroundCoil(self, fractionofAirFlowBypassedAroundCoil)

    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setPartLoadFractionCorrelationCurve(self, curve)

    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)

    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)

    def setMaximumCyclingRate(self, maximumCyclingRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setMaximumCyclingRate(self, maximumCyclingRate)

    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)

    def setCondenserAirInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setCondenserAirInletNode(self, node)

    def resetCondenserAirInletNode(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetCondenserAirInletNode(self)

    def setCondenserType(self, condenserType: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setCondenserType(self, condenserType)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)

    def autosizeEvaporativeCondenserAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeEvaporativeCondenserAirFlowRate(self)

    def setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption: "double") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption)

    def autosizeEvaporativeCondenserPumpRatedPowerConsumption(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeEvaporativeCondenserPumpRatedPowerConsumption(self)

    def setSensibleHeatRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setSensibleHeatRatioFunctionofTemperatureCurve(self, curve)

    def resetSensibleHeatRatioFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetSensibleHeatRatioFunctionofTemperatureCurve(self)

    def setSensibleHeatRatioFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_setSensibleHeatRatioFunctionofFlowFractionCurve(self, curve)

    def resetSensibleHeatRatioFunctionofFlowFractionCurve(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetSensibleHeatRatioFunctionofFlowFractionCurve(self)

    def autosizedGrossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedGrossRatedTotalCoolingCapacity(self)

    def autosizedGrossRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedGrossRatedSensibleHeatRatio(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedRatedAirFlowRate(self)

    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedEvaporativeCondenserAirFlowRate(self)

    def autosizedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def autosize(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelhvac.CoilPerformanceDXCooling_applySizingValues(self)

# Register CoilPerformanceDXCooling in _openstudiomodelhvac:
_openstudiomodelhvac.CoilPerformanceDXCooling_swigregister(CoilPerformanceDXCooling)

def CoilPerformanceDXCooling_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType()

def CoilPerformanceDXCooling_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues()


def toCoilPerformanceDXCooling(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
    return _openstudiomodelhvac.toCoilPerformanceDXCooling(idfObject)

def getCoilPerformanceDXCooling(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
    return _openstudiomodelhvac.getCoilPerformanceDXCooling(t_model, t_handle)

def getCoilPerformanceDXCoolings(t_model: "Model") -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > >":
    return _openstudiomodelhvac.getCoilPerformanceDXCoolings(t_model)

def getCoilPerformanceDXCoolingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
    return _openstudiomodelhvac.getCoilPerformanceDXCoolingByName(t_model, t_name)

def getCoilPerformanceDXCoolingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > >":
    return _openstudiomodelhvac.getCoilPerformanceDXCoolingsByName(t_model, t_name, t_exactMatch)

def _to_CoilPerformanceDXCooling(self) -> OptionalCoilPerformanceDXCooling:
    return toCoilPerformanceDXCooling(self)
openstudioutilitiesidf.IdfObject.to_CoilPerformanceDXCooling = _to_CoilPerformanceDXCooling

def _getCoilPerformanceDXCooling(self, t_handle: "UUID") -> OptionalCoilPerformanceDXCooling:
    return getCoilPerformanceDXCooling(self, t_handle)
Model.getCoilPerformanceDXCooling = _getCoilPerformanceDXCooling

def _getCoilPerformanceDXCooling(self, t_handle_str: str) -> OptionalCoilPerformanceDXCooling:
    return getCoilPerformanceDXCooling(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilPerformanceDXCooling = _getCoilPerformanceDXCooling

def _getCoilPerformanceDXCoolings(self) -> CoilPerformanceDXCoolingVector:
    return getCoilPerformanceDXCoolings(self)
Model.getCoilPerformanceDXCoolings = _getCoilPerformanceDXCoolings

def _getCoilPerformanceDXCoolingByName(self, t_name: str) -> OptionalCoilPerformanceDXCooling:
    return getCoilPerformanceDXCoolingByName(self, t_name)
Model.getCoilPerformanceDXCoolingByName = _getCoilPerformanceDXCoolingByName

def _getCoilPerformanceDXCoolingsByName(self, t_name: str, t_exactMatch: bool) -> CoilPerformanceDXCoolingVector:
    return getCoilPerformanceDXCoolingsByName(self, t_name, t_exactMatch)
Model.getCoilPerformanceDXCoolingsByName = _getCoilPerformanceDXCoolingsByName

class CoilWaterHeatingAirToWaterHeatPump(HVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_swiginit(self, _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPump(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPump

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType()

    @staticmethod
    def evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues()

    def ratedHeatingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedHeatingCapacity(self)

    def ratedCOP(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCOP(self)

    def ratedSensibleHeatRatio(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedSensibleHeatRatio(self)

    def ratedEvaporatorInletAirDryBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorInletAirDryBulbTemperature(self)

    def ratedEvaporatorInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorInletAirWetBulbTemperature(self)

    def ratedCondenserInletWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCondenserInletWaterTemperature(self)

    def ratedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorAirFlowRate(self)

    def isRatedEvaporatorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_isRatedEvaporatorAirFlowRateAutosized(self)

    def ratedCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCondenserWaterFlowRate(self)

    def isRatedCondenserWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_isRatedCondenserWaterFlowRateAutosized(self)

    def evaporatorFanPowerIncludedinRatedCOP(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorFanPowerIncludedinRatedCOP(self)

    def condenserPumpPowerIncludedinRatedCOP(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserPumpPowerIncludedinRatedCOP(self)

    def condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self)

    def condenserWaterPumpPower(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserWaterPumpPower(self)

    def fractionofCondenserPumpHeattoWater(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_fractionofCondenserPumpHeattoWater(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_crankcaseHeaterCapacity(self)

    def maximumAmbientTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_maximumAmbientTemperatureforCrankcaseHeaterOperation(self)

    def evaporatorAirTemperatureTypeforCurveObjects(self) -> "std::string":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjects(self)

    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofTemperatureCurve(self)

    def heatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofAirFlowFractionCurve(self)

    def heatingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofWaterFlowFractionCurve(self)

    def heatingCOPFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofTemperatureCurve(self)

    def heatingCOPFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofAirFlowFractionCurve(self)

    def heatingCOPFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofWaterFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_partLoadFractionCorrelationCurve(self)

    def setRatedHeatingCapacity(self, ratedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedHeatingCapacity(self, ratedHeatingCapacity)

    def setRatedCOP(self, ratedCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCOP(self, ratedCOP)

    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)

    def setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature)

    def setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature)

    def setRatedCondenserInletWaterTemperature(self, ratedCondenserInletWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCondenserInletWaterTemperature(self, ratedCondenserInletWaterTemperature)

    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)

    def autosizeRatedEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizeRatedEvaporatorAirFlowRate(self)

    def setRatedCondenserWaterFlowRate(self, ratedCondenserWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCondenserWaterFlowRate(self, ratedCondenserWaterFlowRate)

    def autosizeRatedCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizeRatedCondenserWaterFlowRate(self)

    def setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP: "bool") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP)

    def setCondenserPumpPowerIncludedinRatedCOP(self, condenserPumpPowerIncludedinRatedCOP: "bool") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserPumpPowerIncludedinRatedCOP(self, condenserPumpPowerIncludedinRatedCOP)

    def setCondenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self, condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP: "bool") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self, condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP)

    def setCondenserWaterPumpPower(self, condenserWaterPumpPower: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserWaterPumpPower(self, condenserWaterPumpPower)

    def setFractionofCondenserPumpHeattoWater(self, fractionofCondenserPumpHeattoWater: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setFractionofCondenserPumpHeattoWater(self, fractionofCondenserPumpHeattoWater)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation)

    def setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects)

    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve)

    def setHeatingCOPFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofTemperatureCurve(self, curve)

    def setHeatingCOPFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofAirFlowFractionCurve(self, curve)

    def setHeatingCOPFunctionofWaterFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofWaterFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setPartLoadFractionCorrelationCurve(self, curve)

    def autosizedRatedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizedRatedEvaporatorAirFlowRate(self)

    def autosizedRatedCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizedRatedCondenserWaterFlowRate(self)

# Register CoilWaterHeatingAirToWaterHeatPump in _openstudiomodelhvac:
_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_swigregister(CoilWaterHeatingAirToWaterHeatPump)

def CoilWaterHeatingAirToWaterHeatPump_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType()

def CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues()


def toCoilWaterHeatingAirToWaterHeatPump(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":
    return _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPump(idfObject)

def getCoilWaterHeatingAirToWaterHeatPump(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPump(t_model, t_handle)

def getCoilWaterHeatingAirToWaterHeatPumps(t_model: "Model") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumps(t_model)

def getCoilWaterHeatingAirToWaterHeatPumpByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpByName(t_model, t_name)

def getCoilWaterHeatingAirToWaterHeatPumpsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpsByName(t_model, t_name, t_exactMatch)

def _to_CoilWaterHeatingAirToWaterHeatPump(self) -> OptionalCoilWaterHeatingAirToWaterHeatPump:
    return toCoilWaterHeatingAirToWaterHeatPump(self)
openstudioutilitiesidf.IdfObject.to_CoilWaterHeatingAirToWaterHeatPump = _to_CoilWaterHeatingAirToWaterHeatPump

def _getCoilWaterHeatingAirToWaterHeatPump(self, t_handle: "UUID") -> OptionalCoilWaterHeatingAirToWaterHeatPump:
    return getCoilWaterHeatingAirToWaterHeatPump(self, t_handle)
Model.getCoilWaterHeatingAirToWaterHeatPump = _getCoilWaterHeatingAirToWaterHeatPump

def _getCoilWaterHeatingAirToWaterHeatPump(self, t_handle_str: str) -> OptionalCoilWaterHeatingAirToWaterHeatPump:
    return getCoilWaterHeatingAirToWaterHeatPump(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilWaterHeatingAirToWaterHeatPump = _getCoilWaterHeatingAirToWaterHeatPump

def _getCoilWaterHeatingAirToWaterHeatPumps(self) -> CoilWaterHeatingAirToWaterHeatPumpVector:
    return getCoilWaterHeatingAirToWaterHeatPumps(self)
Model.getCoilWaterHeatingAirToWaterHeatPumps = _getCoilWaterHeatingAirToWaterHeatPumps

def _getCoilWaterHeatingAirToWaterHeatPumpByName(self, t_name: str) -> OptionalCoilWaterHeatingAirToWaterHeatPump:
    return getCoilWaterHeatingAirToWaterHeatPumpByName(self, t_name)
Model.getCoilWaterHeatingAirToWaterHeatPumpByName = _getCoilWaterHeatingAirToWaterHeatPumpByName

def _getCoilWaterHeatingAirToWaterHeatPumpsByName(self, t_name: str, t_exactMatch: bool) -> CoilWaterHeatingAirToWaterHeatPumpVector:
    return getCoilWaterHeatingAirToWaterHeatPumpsByName(self, t_name, t_exactMatch)
Model.getCoilWaterHeatingAirToWaterHeatPumpsByName = _getCoilWaterHeatingAirToWaterHeatPumpsByName

class CoilWaterHeatingAirToWaterHeatPumpWrapped(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_swiginit(self, _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpWrapped(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpWrapped

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType()

    @staticmethod
    def evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues()

    def ratedHeatingCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedHeatingCapacity(self)

    def ratedCOP(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedCOP(self)

    def ratedSensibleHeatRatio(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedSensibleHeatRatio(self)

    def ratedEvaporatorInletAirDryBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorInletAirDryBulbTemperature(self)

    def ratedEvaporatorInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorInletAirWetBulbTemperature(self)

    def ratedCondenserWaterTemperature(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedCondenserWaterTemperature(self)

    def ratedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorAirFlowRate(self)

    def isRatedEvaporatorAirFlowRateAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_isRatedEvaporatorAirFlowRateAutocalculated(self)

    def evaporatorFanPowerIncludedinRatedCOP(self) -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorFanPowerIncludedinRatedCOP(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_crankcaseHeaterCapacity(self)

    def maximumAmbientTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_maximumAmbientTemperatureforCrankcaseHeaterOperation(self)

    def evaporatorAirTemperatureTypeforCurveObjects(self) -> "std::string":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjects(self)

    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCapacityFunctionofTemperatureCurve(self)

    def heatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCapacityFunctionofAirFlowFractionCurve(self)

    def heatingCOPFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCOPFunctionofTemperatureCurve(self)

    def heatingCOPFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCOPFunctionofAirFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_partLoadFractionCorrelationCurve(self)

    def setRatedHeatingCapacity(self, ratedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedHeatingCapacity(self, ratedHeatingCapacity)

    def setRatedCOP(self, ratedCOP: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedCOP(self, ratedCOP)

    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)

    def setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature)

    def setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature)

    def setRatedCondenserWaterTemperature(self, ratedCondenserWaterTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedCondenserWaterTemperature(self, ratedCondenserWaterTemperature)

    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)

    def autocalculateRatedEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_autocalculateRatedEvaporatorAirFlowRate(self)

    def setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP: "bool") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation)

    def setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects: "std::string") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects)

    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)

    def setHeatingCOPFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCOPFunctionofTemperatureCurve(self, curve)

    def setHeatingCOPFunctionofAirFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCOPFunctionofAirFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setPartLoadFractionCorrelationCurve(self, curve)

# Register CoilWaterHeatingAirToWaterHeatPumpWrapped in _openstudiomodelhvac:
_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister(CoilWaterHeatingAirToWaterHeatPumpWrapped)

def CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType()

def CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues()


def toCoilWaterHeatingAirToWaterHeatPumpWrapped(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":
    return _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPumpWrapped(idfObject)

def getCoilWaterHeatingAirToWaterHeatPumpWrapped(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrapped(t_model, t_handle)

def getCoilWaterHeatingAirToWaterHeatPumpWrappeds(t_model: "Model") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappeds(t_model)

def getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(t_model, t_name)

def getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > >":
    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(t_model, t_name, t_exactMatch)

def _to_CoilWaterHeatingAirToWaterHeatPumpWrapped(self) -> OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped:
    return toCoilWaterHeatingAirToWaterHeatPumpWrapped(self)
openstudioutilitiesidf.IdfObject.to_CoilWaterHeatingAirToWaterHeatPumpWrapped = _to_CoilWaterHeatingAirToWaterHeatPumpWrapped

def _getCoilWaterHeatingAirToWaterHeatPumpWrapped(self, t_handle: "UUID") -> OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped:
    return getCoilWaterHeatingAirToWaterHeatPumpWrapped(self, t_handle)
Model.getCoilWaterHeatingAirToWaterHeatPumpWrapped = _getCoilWaterHeatingAirToWaterHeatPumpWrapped

def _getCoilWaterHeatingAirToWaterHeatPumpWrapped(self, t_handle_str: str) -> OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped:
    return getCoilWaterHeatingAirToWaterHeatPumpWrapped(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilWaterHeatingAirToWaterHeatPumpWrapped = _getCoilWaterHeatingAirToWaterHeatPumpWrapped

def _getCoilWaterHeatingAirToWaterHeatPumpWrappeds(self) -> CoilWaterHeatingAirToWaterHeatPumpWrappedVector:
    return getCoilWaterHeatingAirToWaterHeatPumpWrappeds(self)
Model.getCoilWaterHeatingAirToWaterHeatPumpWrappeds = _getCoilWaterHeatingAirToWaterHeatPumpWrappeds

def _getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(self, t_name: str) -> OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped:
    return getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(self, t_name)
Model.getCoilWaterHeatingAirToWaterHeatPumpWrappedByName = _getCoilWaterHeatingAirToWaterHeatPumpWrappedByName

def _getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(self, t_name: str, t_exactMatch: bool) -> CoilWaterHeatingAirToWaterHeatPumpWrappedVector:
    return getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(self, t_name, t_exactMatch)
Model.getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName = _getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName

class CoolingTowerPerformanceYorkCalc(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_swiginit(self, _openstudiomodelhvac.new_CoolingTowerPerformanceYorkCalc(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceYorkCalc

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType()

    def minimumInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumInletAirWetBulbTemperature(self)

    def maximumInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumInletAirWetBulbTemperature(self)

    def minimumRangeTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumRangeTemperature(self)

    def maximumRangeTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumRangeTemperature(self)

    def minimumApproachTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumApproachTemperature(self)

    def maximumApproachTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumApproachTemperature(self)

    def minimumWaterFlowRateRatio(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumWaterFlowRateRatio(self)

    def maximumWaterFlowRateRatio(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumWaterFlowRateRatio(self)

    def maximumLiquidtoGasRatio(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumLiquidtoGasRatio(self)

    def coefficient1(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient1(self)

    def coefficient2(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient2(self)

    def coefficient3(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient3(self)

    def coefficient4(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient4(self)

    def coefficient5(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient5(self)

    def coefficient6(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient6(self)

    def coefficient7(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient7(self)

    def coefficient8(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient8(self)

    def coefficient9(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient9(self)

    def coefficient10(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient10(self)

    def coefficient11(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient11(self)

    def coefficient12(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient12(self)

    def coefficient13(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient13(self)

    def coefficient14(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient14(self)

    def coefficient15(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient15(self)

    def coefficient16(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient16(self)

    def coefficient17(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient17(self)

    def coefficient18(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient18(self)

    def coefficient19(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient19(self)

    def coefficient20(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient20(self)

    def coefficient21(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient21(self)

    def coefficient22(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient22(self)

    def coefficient23(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient23(self)

    def coefficient24(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient24(self)

    def coefficient25(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient25(self)

    def coefficient26(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient26(self)

    def coefficient27(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient27(self)

    def setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature)

    def setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature)

    def setMinimumRangeTemperature(self, minimumRangeTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumRangeTemperature(self, minimumRangeTemperature)

    def setMaximumRangeTemperature(self, maximumRangeTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumRangeTemperature(self, maximumRangeTemperature)

    def setMinimumApproachTemperature(self, minimumApproachTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumApproachTemperature(self, minimumApproachTemperature)

    def setMaximumApproachTemperature(self, maximumApproachTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumApproachTemperature(self, maximumApproachTemperature)

    def setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio)

    def setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio)

    def setMaximumLiquidtoGasRatio(self, maximumLiquidtoGasRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumLiquidtoGasRatio(self, maximumLiquidtoGasRatio)

    def setCoefficient1(self, coefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient1(self, coefficient1)

    def setCoefficient2(self, coefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient2(self, coefficient2)

    def setCoefficient3(self, coefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient3(self, coefficient3)

    def setCoefficient4(self, coefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient4(self, coefficient4)

    def setCoefficient5(self, coefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient5(self, coefficient5)

    def setCoefficient6(self, coefficient6: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient6(self, coefficient6)

    def setCoefficient7(self, coefficient7: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient7(self, coefficient7)

    def setCoefficient8(self, coefficient8: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient8(self, coefficient8)

    def setCoefficient9(self, coefficient9: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient9(self, coefficient9)

    def setCoefficient10(self, coefficient10: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient10(self, coefficient10)

    def setCoefficient11(self, coefficient11: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient11(self, coefficient11)

    def setCoefficient12(self, coefficient12: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient12(self, coefficient12)

    def setCoefficient13(self, coefficient13: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient13(self, coefficient13)

    def setCoefficient14(self, coefficient14: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient14(self, coefficient14)

    def setCoefficient15(self, coefficient15: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient15(self, coefficient15)

    def setCoefficient16(self, coefficient16: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient16(self, coefficient16)

    def setCoefficient17(self, coefficient17: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient17(self, coefficient17)

    def setCoefficient18(self, coefficient18: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient18(self, coefficient18)

    def setCoefficient19(self, coefficient19: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient19(self, coefficient19)

    def setCoefficient20(self, coefficient20: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient20(self, coefficient20)

    def setCoefficient21(self, coefficient21: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient21(self, coefficient21)

    def setCoefficient22(self, coefficient22: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient22(self, coefficient22)

    def setCoefficient23(self, coefficient23: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient23(self, coefficient23)

    def setCoefficient24(self, coefficient24: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient24(self, coefficient24)

    def setCoefficient25(self, coefficient25: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient25(self, coefficient25)

    def setCoefficient26(self, coefficient26: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient26(self, coefficient26)

    def setCoefficient27(self, coefficient27: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient27(self, coefficient27)

# Register CoolingTowerPerformanceYorkCalc in _openstudiomodelhvac:
_openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_swigregister(CoolingTowerPerformanceYorkCalc)

def CoolingTowerPerformanceYorkCalc_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType()


def toCoolingTowerPerformanceYorkCalc(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":
    return _openstudiomodelhvac.toCoolingTowerPerformanceYorkCalc(idfObject)

def getCoolingTowerPerformanceYorkCalc(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalc(t_model, t_handle)

def getCoolingTowerPerformanceYorkCalcs(t_model: "Model") -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcs(t_model)

def getCoolingTowerPerformanceYorkCalcByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcByName(t_model, t_name)

def getCoolingTowerPerformanceYorkCalcsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcsByName(t_model, t_name, t_exactMatch)

def _to_CoolingTowerPerformanceYorkCalc(self) -> OptionalCoolingTowerPerformanceYorkCalc:
    return toCoolingTowerPerformanceYorkCalc(self)
openstudioutilitiesidf.IdfObject.to_CoolingTowerPerformanceYorkCalc = _to_CoolingTowerPerformanceYorkCalc

def _getCoolingTowerPerformanceYorkCalc(self, t_handle: "UUID") -> OptionalCoolingTowerPerformanceYorkCalc:
    return getCoolingTowerPerformanceYorkCalc(self, t_handle)
Model.getCoolingTowerPerformanceYorkCalc = _getCoolingTowerPerformanceYorkCalc

def _getCoolingTowerPerformanceYorkCalc(self, t_handle_str: str) -> OptionalCoolingTowerPerformanceYorkCalc:
    return getCoolingTowerPerformanceYorkCalc(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoolingTowerPerformanceYorkCalc = _getCoolingTowerPerformanceYorkCalc

def _getCoolingTowerPerformanceYorkCalcs(self) -> CoolingTowerPerformanceYorkCalcVector:
    return getCoolingTowerPerformanceYorkCalcs(self)
Model.getCoolingTowerPerformanceYorkCalcs = _getCoolingTowerPerformanceYorkCalcs

def _getCoolingTowerPerformanceYorkCalcByName(self, t_name: str) -> OptionalCoolingTowerPerformanceYorkCalc:
    return getCoolingTowerPerformanceYorkCalcByName(self, t_name)
Model.getCoolingTowerPerformanceYorkCalcByName = _getCoolingTowerPerformanceYorkCalcByName

def _getCoolingTowerPerformanceYorkCalcsByName(self, t_name: str, t_exactMatch: bool) -> CoolingTowerPerformanceYorkCalcVector:
    return getCoolingTowerPerformanceYorkCalcsByName(self, t_name, t_exactMatch)
Model.getCoolingTowerPerformanceYorkCalcsByName = _getCoolingTowerPerformanceYorkCalcsByName

class CoolingTowerPerformanceCoolTools(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_swiginit(self, _openstudiomodelhvac.new_CoolingTowerPerformanceCoolTools(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceCoolTools

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType()

    def minimumInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumInletAirWetBulbTemperature(self)

    def maximumInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumInletAirWetBulbTemperature(self)

    def minimumRangeTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumRangeTemperature(self)

    def maximumRangeTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumRangeTemperature(self)

    def minimumApproachTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumApproachTemperature(self)

    def maximumApproachTemperature(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumApproachTemperature(self)

    def minimumWaterFlowRateRatio(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumWaterFlowRateRatio(self)

    def maximumWaterFlowRateRatio(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumWaterFlowRateRatio(self)

    def coefficient1(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient1(self)

    def coefficient2(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient2(self)

    def coefficient3(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient3(self)

    def coefficient4(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient4(self)

    def coefficient5(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient5(self)

    def coefficient6(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient6(self)

    def coefficient7(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient7(self)

    def coefficient8(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient8(self)

    def coefficient9(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient9(self)

    def coefficient10(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient10(self)

    def coefficient11(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient11(self)

    def coefficient12(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient12(self)

    def coefficient13(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient13(self)

    def coefficient14(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient14(self)

    def coefficient15(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient15(self)

    def coefficient16(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient16(self)

    def coefficient17(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient17(self)

    def coefficient18(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient18(self)

    def coefficient19(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient19(self)

    def coefficient20(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient20(self)

    def coefficient21(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient21(self)

    def coefficient22(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient22(self)

    def coefficient23(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient23(self)

    def coefficient24(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient24(self)

    def coefficient25(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient25(self)

    def coefficient26(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient26(self)

    def coefficient27(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient27(self)

    def coefficient28(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient28(self)

    def coefficient29(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient29(self)

    def coefficient30(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient30(self)

    def coefficient31(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient31(self)

    def coefficient32(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient32(self)

    def coefficient33(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient33(self)

    def coefficient34(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient34(self)

    def coefficient35(self) -> "double":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient35(self)

    def setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature)

    def setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature)

    def setMinimumRangeTemperature(self, minimumRangeTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumRangeTemperature(self, minimumRangeTemperature)

    def setMaximumRangeTemperature(self, maximumRangeTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumRangeTemperature(self, maximumRangeTemperature)

    def setMinimumApproachTemperature(self, minimumApproachTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumApproachTemperature(self, minimumApproachTemperature)

    def setMaximumApproachTemperature(self, maximumApproachTemperature: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumApproachTemperature(self, maximumApproachTemperature)

    def setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio)

    def setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio)

    def setCoefficient1(self, coefficient1: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient1(self, coefficient1)

    def setCoefficient2(self, coefficient2: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient2(self, coefficient2)

    def setCoefficient3(self, coefficient3: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient3(self, coefficient3)

    def setCoefficient4(self, coefficient4: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient4(self, coefficient4)

    def setCoefficient5(self, coefficient5: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient5(self, coefficient5)

    def setCoefficient6(self, coefficient6: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient6(self, coefficient6)

    def setCoefficient7(self, coefficient7: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient7(self, coefficient7)

    def setCoefficient8(self, coefficient8: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient8(self, coefficient8)

    def setCoefficient9(self, coefficient9: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient9(self, coefficient9)

    def setCoefficient10(self, coefficient10: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient10(self, coefficient10)

    def setCoefficient11(self, coefficient11: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient11(self, coefficient11)

    def setCoefficient12(self, coefficient12: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient12(self, coefficient12)

    def setCoefficient13(self, coefficient13: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient13(self, coefficient13)

    def setCoefficient14(self, coefficient14: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient14(self, coefficient14)

    def setCoefficient15(self, coefficient15: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient15(self, coefficient15)

    def setCoefficient16(self, coefficient16: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient16(self, coefficient16)

    def setCoefficient17(self, coefficient17: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient17(self, coefficient17)

    def setCoefficient18(self, coefficient18: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient18(self, coefficient18)

    def setCoefficient19(self, coefficient19: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient19(self, coefficient19)

    def setCoefficient20(self, coefficient20: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient20(self, coefficient20)

    def setCoefficient21(self, coefficient21: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient21(self, coefficient21)

    def setCoefficient22(self, coefficient22: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient22(self, coefficient22)

    def setCoefficient23(self, coefficient23: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient23(self, coefficient23)

    def setCoefficient24(self, coefficient24: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient24(self, coefficient24)

    def setCoefficient25(self, coefficient25: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient25(self, coefficient25)

    def setCoefficient26(self, coefficient26: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient26(self, coefficient26)

    def setCoefficient27(self, coefficient27: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient27(self, coefficient27)

    def setCoefficient28(self, coefficient28: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient28(self, coefficient28)

    def setCoefficient29(self, coefficient29: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient29(self, coefficient29)

    def setCoefficient30(self, coefficient30: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient30(self, coefficient30)

    def setCoefficient31(self, coefficient31: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient31(self, coefficient31)

    def setCoefficient32(self, coefficient32: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient32(self, coefficient32)

    def setCoefficient33(self, coefficient33: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient33(self, coefficient33)

    def setCoefficient34(self, coefficient34: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient34(self, coefficient34)

    def setCoefficient35(self, coefficient35: "double") -> "bool":
        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient35(self, coefficient35)

# Register CoolingTowerPerformanceCoolTools in _openstudiomodelhvac:
_openstudiomodelhvac.CoolingTowerPerformanceCoolTools_swigregister(CoolingTowerPerformanceCoolTools)

def CoolingTowerPerformanceCoolTools_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType()


def toCoolingTowerPerformanceCoolTools(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":
    return _openstudiomodelhvac.toCoolingTowerPerformanceCoolTools(idfObject)

def getCoolingTowerPerformanceCoolTools(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolTools(t_model, t_handle)

def getCoolingTowerPerformanceCoolToolss(t_model: "Model") -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolss(t_model)

def getCoolingTowerPerformanceCoolToolsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolsByName(t_model, t_name)

def getCoolingTowerPerformanceCoolToolssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > >":
    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolssByName(t_model, t_name, t_exactMatch)

def _to_CoolingTowerPerformanceCoolTools(self) -> OptionalCoolingTowerPerformanceCoolTools:
    return toCoolingTowerPerformanceCoolTools(self)
openstudioutilitiesidf.IdfObject.to_CoolingTowerPerformanceCoolTools = _to_CoolingTowerPerformanceCoolTools

def _getCoolingTowerPerformanceCoolTools(self, t_handle: "UUID") -> OptionalCoolingTowerPerformanceCoolTools:
    return getCoolingTowerPerformanceCoolTools(self, t_handle)
Model.getCoolingTowerPerformanceCoolTools = _getCoolingTowerPerformanceCoolTools

def _getCoolingTowerPerformanceCoolTools(self, t_handle_str: str) -> OptionalCoolingTowerPerformanceCoolTools:
    return getCoolingTowerPerformanceCoolTools(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoolingTowerPerformanceCoolTools = _getCoolingTowerPerformanceCoolTools

def _getCoolingTowerPerformanceCoolToolss(self) -> CoolingTowerPerformanceCoolToolsVector:
    return getCoolingTowerPerformanceCoolToolss(self)
Model.getCoolingTowerPerformanceCoolToolss = _getCoolingTowerPerformanceCoolToolss

def _getCoolingTowerPerformanceCoolToolsByName(self, t_name: str) -> OptionalCoolingTowerPerformanceCoolTools:
    return getCoolingTowerPerformanceCoolToolsByName(self, t_name)
Model.getCoolingTowerPerformanceCoolToolsByName = _getCoolingTowerPerformanceCoolToolsByName

def _getCoolingTowerPerformanceCoolToolssByName(self, t_name: str, t_exactMatch: bool) -> CoolingTowerPerformanceCoolToolsVector:
    return getCoolingTowerPerformanceCoolToolssByName(self, t_name, t_exactMatch)
Model.getCoolingTowerPerformanceCoolToolssByName = _getCoolingTowerPerformanceCoolToolssByName

class SupplyAirflowRatioField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.SupplyAirflowRatioField_swiginit(self, _openstudiomodelhvac.new_SupplyAirflowRatioField(*args))

    @staticmethod
    def fromHeatingRatio(heatingRatio: "double") -> "openstudio::model::SupplyAirflowRatioField":
        return _openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio(heatingRatio)

    @staticmethod
    def fromCoolingRatio(coolingRatio: "double") -> "openstudio::model::SupplyAirflowRatioField":
        return _openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio(coolingRatio)

    def heatingRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SupplyAirflowRatioField_heatingRatio(self)

    def coolingRatio(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SupplyAirflowRatioField_coolingRatio(self)

    def isHeatingRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.SupplyAirflowRatioField_isHeatingRatioAutosized(self)

    def isCoolingRatioAutosized(self) -> "bool":
        return _openstudiomodelhvac.SupplyAirflowRatioField_isCoolingRatioAutosized(self)
    __swig_destroy__ = _openstudiomodelhvac.delete_SupplyAirflowRatioField

# Register SupplyAirflowRatioField in _openstudiomodelhvac:
_openstudiomodelhvac.SupplyAirflowRatioField_swigregister(SupplyAirflowRatioField)

def SupplyAirflowRatioField_fromHeatingRatio(heatingRatio: "double") -> "openstudio::model::SupplyAirflowRatioField":
    return _openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio(heatingRatio)

def SupplyAirflowRatioField_fromCoolingRatio(coolingRatio: "double") -> "openstudio::model::SupplyAirflowRatioField":
    return _openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio(coolingRatio)

class UnitarySystemPerformanceMultispeed(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_swiginit(self, _openstudiomodelhvac.new_UnitarySystemPerformanceMultispeed(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_UnitarySystemPerformanceMultispeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType()

    def singleModeOperation(self) -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_singleModeOperation(self)

    def supplyAirflowRatioFields(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField,std::allocator< openstudio::model::SupplyAirflowRatioField > >":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_supplyAirflowRatioFields(self)

    def setSingleModeOperation(self, singleMode: "bool") -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_setSingleModeOperation(self, singleMode)

    def resetSingleModeOperation(self) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_resetSingleModeOperation(self)

    def setSupplyAirflowRatioFields(self, airflowRatioFields: "SupplyAirflowRatioFieldVector") -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_setSupplyAirflowRatioFields(self, airflowRatioFields)

    def addSupplyAirflowRatioField(self, *args) -> "bool":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_addSupplyAirflowRatioField(self, *args)

    def resetSupplyAirflowRatioFields(self) -> "void":
        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_resetSupplyAirflowRatioFields(self)

# Register UnitarySystemPerformanceMultispeed in _openstudiomodelhvac:
_openstudiomodelhvac.UnitarySystemPerformanceMultispeed_swigregister(UnitarySystemPerformanceMultispeed)

def UnitarySystemPerformanceMultispeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType()


def toUnitarySystemPerformanceMultispeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":
    return _openstudiomodelhvac.toUnitarySystemPerformanceMultispeed(idfObject)

def getUnitarySystemPerformanceMultispeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":
    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeed(t_model, t_handle)

def getUnitarySystemPerformanceMultispeeds(t_model: "Model") -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > >":
    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeeds(t_model)

def getUnitarySystemPerformanceMultispeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":
    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedByName(t_model, t_name)

def getUnitarySystemPerformanceMultispeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > >":
    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedsByName(t_model, t_name, t_exactMatch)

def _to_UnitarySystemPerformanceMultispeed(self) -> OptionalUnitarySystemPerformanceMultispeed:
    return toUnitarySystemPerformanceMultispeed(self)
openstudioutilitiesidf.IdfObject.to_UnitarySystemPerformanceMultispeed = _to_UnitarySystemPerformanceMultispeed

def _getUnitarySystemPerformanceMultispeed(self, t_handle: "UUID") -> OptionalUnitarySystemPerformanceMultispeed:
    return getUnitarySystemPerformanceMultispeed(self, t_handle)
Model.getUnitarySystemPerformanceMultispeed = _getUnitarySystemPerformanceMultispeed

def _getUnitarySystemPerformanceMultispeed(self, t_handle_str: str) -> OptionalUnitarySystemPerformanceMultispeed:
    return getUnitarySystemPerformanceMultispeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getUnitarySystemPerformanceMultispeed = _getUnitarySystemPerformanceMultispeed

def _getUnitarySystemPerformanceMultispeeds(self) -> UnitarySystemPerformanceMultispeedVector:
    return getUnitarySystemPerformanceMultispeeds(self)
Model.getUnitarySystemPerformanceMultispeeds = _getUnitarySystemPerformanceMultispeeds

def _getUnitarySystemPerformanceMultispeedByName(self, t_name: str) -> OptionalUnitarySystemPerformanceMultispeed:
    return getUnitarySystemPerformanceMultispeedByName(self, t_name)
Model.getUnitarySystemPerformanceMultispeedByName = _getUnitarySystemPerformanceMultispeedByName

def _getUnitarySystemPerformanceMultispeedsByName(self, t_name: str, t_exactMatch: bool) -> UnitarySystemPerformanceMultispeedVector:
    return getUnitarySystemPerformanceMultispeedsByName(self, t_name, t_exactMatch)
Model.getUnitarySystemPerformanceMultispeedsByName = _getUnitarySystemPerformanceMultispeedsByName

class ZoneMixing(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thermalZone: "ThermalZone"):
        _openstudiomodelhvac.ZoneMixing_swiginit(self, _openstudiomodelhvac.new_ZoneMixing(thermalZone))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneMixing

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneMixing_iddObjectType()

    def zone(self) -> "openstudio::model::ThermalZone":
        return _openstudiomodelhvac.ZoneMixing_zone(self)

    def schedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.ZoneMixing_schedule(self)

    def designFlowRateCalculationMethod(self) -> "std::string":
        return _openstudiomodelhvac.ZoneMixing_designFlowRateCalculationMethod(self)

    def designFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneMixing_designFlowRate(self)

    def flowRateperZoneFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneMixing_flowRateperZoneFloorArea(self)

    def flowRateperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneMixing_flowRateperPerson(self)

    def airChangesperHour(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneMixing_airChangesperHour(self)

    def sourceZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.ZoneMixing_sourceZone(self)

    def deltaTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneMixing_deltaTemperature(self)

    def deltaTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_deltaTemperatureSchedule(self)

    def minimumZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_minimumZoneTemperatureSchedule(self)

    def maximumZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_maximumZoneTemperatureSchedule(self)

    def minimumSourceZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_minimumSourceZoneTemperatureSchedule(self)

    def maximumSourceZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_maximumSourceZoneTemperatureSchedule(self)

    def minimumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_minimumOutdoorTemperatureSchedule(self)

    def maximumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneMixing_maximumOutdoorTemperatureSchedule(self)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setSchedule(self, schedule)

    def setDesignFlowRate(self, designFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setDesignFlowRate(self, designFlowRate)

    def setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea)

    def setFlowRateperPerson(self, flowRateperPerson: "double") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setFlowRateperPerson(self, flowRateperPerson)

    def setAirChangesperHour(self, airChangesperHour: "double") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setAirChangesperHour(self, airChangesperHour)

    def setSourceZone(self, zone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setSourceZone(self, zone)

    def resetSourceZone(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetSourceZone(self)

    def setDeltaTemperature(self, deltaTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setDeltaTemperature(self, deltaTemperature)

    def resetDeltaTemperature(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetDeltaTemperature(self)

    def setDeltaTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setDeltaTemperatureSchedule(self, schedule)

    def resetDeltaTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetDeltaTemperatureSchedule(self)

    def setMinimumZoneTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMinimumZoneTemperatureSchedule(self, schedule)

    def resetMinimumZoneTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMinimumZoneTemperatureSchedule(self)

    def setMaximumZoneTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMaximumZoneTemperatureSchedule(self, schedule)

    def resetMaximumZoneTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMaximumZoneTemperatureSchedule(self)

    def setMinimumSourceZoneTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMinimumSourceZoneTemperatureSchedule(self, schedule)

    def resetMinimumSourceZoneTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMinimumSourceZoneTemperatureSchedule(self)

    def setMaximumSourceZoneTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMaximumSourceZoneTemperatureSchedule(self, schedule)

    def resetMaximumSourceZoneTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMaximumSourceZoneTemperatureSchedule(self)

    def setMinimumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMinimumOutdoorTemperatureSchedule(self, schedule)

    def resetMinimumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMinimumOutdoorTemperatureSchedule(self)

    def setMaximumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneMixing_setMaximumOutdoorTemperatureSchedule(self, schedule)

    def resetMaximumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneMixing_resetMaximumOutdoorTemperatureSchedule(self)

# Register ZoneMixing in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneMixing_swigregister(ZoneMixing)

def ZoneMixing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneMixing_iddObjectType()


def toZoneMixing(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneMixing >":
    return _openstudiomodelhvac.toZoneMixing(idfObject)

def getZoneMixing(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneMixing >":
    return _openstudiomodelhvac.getZoneMixing(t_model, t_handle)

def getZoneMixings(t_model: "Model") -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":
    return _openstudiomodelhvac.getZoneMixings(t_model)

def getZoneMixingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneMixing >":
    return _openstudiomodelhvac.getZoneMixingByName(t_model, t_name)

def getZoneMixingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":
    return _openstudiomodelhvac.getZoneMixingsByName(t_model, t_name, t_exactMatch)

def _to_ZoneMixing(self) -> OptionalZoneMixing:
    return toZoneMixing(self)
openstudioutilitiesidf.IdfObject.to_ZoneMixing = _to_ZoneMixing

def _getZoneMixing(self, t_handle: "UUID") -> OptionalZoneMixing:
    return getZoneMixing(self, t_handle)
Model.getZoneMixing = _getZoneMixing

def _getZoneMixing(self, t_handle_str: str) -> OptionalZoneMixing:
    return getZoneMixing(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneMixing = _getZoneMixing

def _getZoneMixings(self) -> ZoneMixingVector:
    return getZoneMixings(self)
Model.getZoneMixings = _getZoneMixings

def _getZoneMixingByName(self, t_name: str) -> OptionalZoneMixing:
    return getZoneMixingByName(self, t_name)
Model.getZoneMixingByName = _getZoneMixingByName

def _getZoneMixingsByName(self, t_name: str, t_exactMatch: bool) -> ZoneMixingVector:
    return getZoneMixingsByName(self, t_name, t_exactMatch)
Model.getZoneMixingsByName = _getZoneMixingsByName

class ZoneVentilationDesignFlowRate(ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ZoneVentilationDesignFlowRate_swiginit(self, _openstudiomodelhvac.new_ZoneVentilationDesignFlowRate(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationDesignFlowRate

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType()

    @staticmethod
    def designFlowRateCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues()

    @staticmethod
    def ventilationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues()

    def schedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_schedule(self)

    def designFlowRateCalculationMethod(self) -> "std::string":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethod(self)

    def designFlowRate(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRate(self)

    def flowRateperZoneFloorArea(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_flowRateperZoneFloorArea(self)

    def flowRateperPerson(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_flowRateperPerson(self)

    def airChangesperHour(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_airChangesperHour(self)

    def ventilationType(self) -> "std::string":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationType(self)

    def fanPressureRise(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_fanPressureRise(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_fanTotalEfficiency(self)

    def constantTermCoefficient(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_constantTermCoefficient(self)

    def temperatureTermCoefficient(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_temperatureTermCoefficient(self)

    def velocityTermCoefficient(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_velocityTermCoefficient(self)

    def velocitySquaredTermCoefficient(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_velocitySquaredTermCoefficient(self)

    def minimumIndoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumIndoorTemperature(self)

    def minimumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumIndoorTemperatureSchedule(self)

    def maximumIndoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumIndoorTemperature(self)

    def maximumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumIndoorTemperatureSchedule(self)

    def deltaTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_deltaTemperature(self)

    def deltaTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_deltaTemperatureSchedule(self)

    def minimumOutdoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumOutdoorTemperature(self)

    def minimumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumOutdoorTemperatureSchedule(self)

    def maximumOutdoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumOutdoorTemperature(self)

    def maximumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumOutdoorTemperatureSchedule(self)

    def maximumWindSpeed(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumWindSpeed(self)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setSchedule(self, schedule)

    def setDesignFlowRateCalculationMethod(self, designFlowRateCalculationMethod: "std::string") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDesignFlowRateCalculationMethod(self, designFlowRateCalculationMethod)

    def setDesignFlowRate(self, designFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDesignFlowRate(self, designFlowRate)

    def setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea)

    def setFlowRateperPerson(self, flowRateperPerson: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFlowRateperPerson(self, flowRateperPerson)

    def setAirChangesperHour(self, airChangesperHour: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setAirChangesperHour(self, airChangesperHour)

    def setVentilationType(self, ventilationType: "std::string") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVentilationType(self, ventilationType)

    def setFanPressureRise(self, fanPressureRise: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFanPressureRise(self, fanPressureRise)

    def setFanTotalEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFanTotalEfficiency(self, fanTotalEfficiency)

    def setConstantTermCoefficient(self, constantTermCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setConstantTermCoefficient(self, constantTermCoefficient)

    def setTemperatureTermCoefficient(self, temperatureTermCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setTemperatureTermCoefficient(self, temperatureTermCoefficient)

    def setVelocityTermCoefficient(self, velocityTermCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVelocityTermCoefficient(self, velocityTermCoefficient)

    def setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient)

    def setMinimumIndoorTemperature(self, minimumIndoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumIndoorTemperature(self, minimumIndoorTemperature)

    def setMinimumIndoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumIndoorTemperatureSchedule(self, schedule)

    def resetMinimumIndoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMinimumIndoorTemperatureSchedule(self)

    def setMaximumIndoorTemperature(self, maximumIndoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumIndoorTemperature(self, maximumIndoorTemperature)

    def setMaximumIndoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumIndoorTemperatureSchedule(self, schedule)

    def resetMaximumIndoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMaximumIndoorTemperatureSchedule(self)

    def setDeltaTemperature(self, deltaTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDeltaTemperature(self, deltaTemperature)

    def setDeltaTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDeltaTemperatureSchedule(self, schedule)

    def resetDeltaTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetDeltaTemperatureSchedule(self)

    def setMinimumOutdoorTemperature(self, minimumOutdoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumOutdoorTemperature(self, minimumOutdoorTemperature)

    def setMinimumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumOutdoorTemperatureSchedule(self, schedule)

    def resetMinimumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMinimumOutdoorTemperatureSchedule(self)

    def setMaximumOutdoorTemperature(self, maximumOutdoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumOutdoorTemperature(self, maximumOutdoorTemperature)

    def setMaximumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumOutdoorTemperatureSchedule(self, schedule)

    def resetMaximumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMaximumOutdoorTemperatureSchedule(self)

    def setMaximumWindSpeed(self, maximumWindSpeed: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumWindSpeed(self, maximumWindSpeed)

# Register ZoneVentilationDesignFlowRate in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneVentilationDesignFlowRate_swigregister(ZoneVentilationDesignFlowRate)

def ZoneVentilationDesignFlowRate_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType()

def ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues()

def ZoneVentilationDesignFlowRate_ventilationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues()


def toZoneVentilationDesignFlowRate(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":
    return _openstudiomodelhvac.toZoneVentilationDesignFlowRate(idfObject)

def getZoneVentilationDesignFlowRate(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":
    return _openstudiomodelhvac.getZoneVentilationDesignFlowRate(t_model, t_handle)

def getZoneVentilationDesignFlowRates(t_model: "Model") -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > >":
    return _openstudiomodelhvac.getZoneVentilationDesignFlowRates(t_model)

def getZoneVentilationDesignFlowRateByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":
    return _openstudiomodelhvac.getZoneVentilationDesignFlowRateByName(t_model, t_name)

def getZoneVentilationDesignFlowRatesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > >":
    return _openstudiomodelhvac.getZoneVentilationDesignFlowRatesByName(t_model, t_name, t_exactMatch)

def _to_ZoneVentilationDesignFlowRate(self) -> OptionalZoneVentilationDesignFlowRate:
    return toZoneVentilationDesignFlowRate(self)
openstudioutilitiesidf.IdfObject.to_ZoneVentilationDesignFlowRate = _to_ZoneVentilationDesignFlowRate

def _getZoneVentilationDesignFlowRate(self, t_handle: "UUID") -> OptionalZoneVentilationDesignFlowRate:
    return getZoneVentilationDesignFlowRate(self, t_handle)
Model.getZoneVentilationDesignFlowRate = _getZoneVentilationDesignFlowRate

def _getZoneVentilationDesignFlowRate(self, t_handle_str: str) -> OptionalZoneVentilationDesignFlowRate:
    return getZoneVentilationDesignFlowRate(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneVentilationDesignFlowRate = _getZoneVentilationDesignFlowRate

def _getZoneVentilationDesignFlowRates(self) -> ZoneVentilationDesignFlowRateVector:
    return getZoneVentilationDesignFlowRates(self)
Model.getZoneVentilationDesignFlowRates = _getZoneVentilationDesignFlowRates

def _getZoneVentilationDesignFlowRateByName(self, t_name: str) -> OptionalZoneVentilationDesignFlowRate:
    return getZoneVentilationDesignFlowRateByName(self, t_name)
Model.getZoneVentilationDesignFlowRateByName = _getZoneVentilationDesignFlowRateByName

def _getZoneVentilationDesignFlowRatesByName(self, t_name: str, t_exactMatch: bool) -> ZoneVentilationDesignFlowRateVector:
    return getZoneVentilationDesignFlowRatesByName(self, t_name, t_exactMatch)
Model.getZoneVentilationDesignFlowRatesByName = _getZoneVentilationDesignFlowRatesByName

class ZoneVentilationWindandStackOpenArea(ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_swiginit(self, _openstudiomodelhvac.new_ZoneVentilationWindandStackOpenArea(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationWindandStackOpenArea

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_iddObjectType()

    def openingArea(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_openingArea(self)

    def openingAreaFractionSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_openingAreaFractionSchedule(self)

    def openingEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_openingEffectiveness(self)

    def isOpeningEffectivenessAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_isOpeningEffectivenessAutocalculated(self)

    def effectiveAngle(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_effectiveAngle(self)

    def heightDifference(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_heightDifference(self)

    def dischargeCoefficientforOpening(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_dischargeCoefficientforOpening(self)

    def isDischargeCoefficientforOpeningAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_isDischargeCoefficientforOpeningAutocalculated(self)

    def minimumIndoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_minimumIndoorTemperature(self)

    def minimumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_minimumIndoorTemperatureSchedule(self)

    def maximumIndoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_maximumIndoorTemperature(self)

    def maximumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_maximumIndoorTemperatureSchedule(self)

    def deltaTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_deltaTemperature(self)

    def deltaTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_deltaTemperatureSchedule(self)

    def minimumOutdoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_minimumOutdoorTemperature(self)

    def minimumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_minimumOutdoorTemperatureSchedule(self)

    def maximumOutdoorTemperature(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_maximumOutdoorTemperature(self)

    def maximumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_maximumOutdoorTemperatureSchedule(self)

    def maximumWindSpeed(self) -> "double":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_maximumWindSpeed(self)

    def setOpeningArea(self, openingArea: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setOpeningArea(self, openingArea)

    def setOpeningAreaFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setOpeningAreaFractionSchedule(self, schedule)

    def setOpeningEffectiveness(self, openingEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setOpeningEffectiveness(self, openingEffectiveness)

    def autocalculateOpeningEffectiveness(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_autocalculateOpeningEffectiveness(self)

    def setEffectiveAngle(self, effectiveAngle: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setEffectiveAngle(self, effectiveAngle)

    def setHeightDifference(self, heightDifference: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setHeightDifference(self, heightDifference)

    def setDischargeCoefficientforOpening(self, dischargeCoefficientforOpening: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setDischargeCoefficientforOpening(self, dischargeCoefficientforOpening)

    def autocalculateDischargeCoefficientforOpening(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_autocalculateDischargeCoefficientforOpening(self)

    def setMinimumIndoorTemperature(self, minimumIndoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMinimumIndoorTemperature(self, minimumIndoorTemperature)

    def setMinimumIndoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMinimumIndoorTemperatureSchedule(self, schedule)

    def resetMinimumIndoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_resetMinimumIndoorTemperatureSchedule(self)

    def setMaximumIndoorTemperature(self, maximumIndoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMaximumIndoorTemperature(self, maximumIndoorTemperature)

    def setMaximumIndoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMaximumIndoorTemperatureSchedule(self, schedule)

    def resetMaximumIndoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_resetMaximumIndoorTemperatureSchedule(self)

    def setDeltaTemperature(self, deltaTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setDeltaTemperature(self, deltaTemperature)

    def setDeltaTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setDeltaTemperatureSchedule(self, schedule)

    def resetDeltaTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_resetDeltaTemperatureSchedule(self)

    def setMinimumOutdoorTemperature(self, minimumOutdoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMinimumOutdoorTemperature(self, minimumOutdoorTemperature)

    def setMinimumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMinimumOutdoorTemperatureSchedule(self, schedule)

    def resetMinimumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_resetMinimumOutdoorTemperatureSchedule(self)

    def setMaximumOutdoorTemperature(self, maximumOutdoorTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMaximumOutdoorTemperature(self, maximumOutdoorTemperature)

    def setMaximumOutdoorTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMaximumOutdoorTemperatureSchedule(self, schedule)

    def resetMaximumOutdoorTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_resetMaximumOutdoorTemperatureSchedule(self)

    def setMaximumWindSpeed(self, maximumWindSpeed: "double") -> "bool":
        return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_setMaximumWindSpeed(self, maximumWindSpeed)

# Register ZoneVentilationWindandStackOpenArea in _openstudiomodelhvac:
_openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_swigregister(ZoneVentilationWindandStackOpenArea)

def ZoneVentilationWindandStackOpenArea_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ZoneVentilationWindandStackOpenArea_iddObjectType()


def toZoneVentilationWindandStackOpenArea(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneVentilationWindandStackOpenArea >":
    return _openstudiomodelhvac.toZoneVentilationWindandStackOpenArea(idfObject)

def getZoneVentilationWindandStackOpenArea(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ZoneVentilationWindandStackOpenArea >":
    return _openstudiomodelhvac.getZoneVentilationWindandStackOpenArea(t_model, t_handle)

def getZoneVentilationWindandStackOpenAreas(t_model: "Model") -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea,std::allocator< openstudio::model::ZoneVentilationWindandStackOpenArea > >":
    return _openstudiomodelhvac.getZoneVentilationWindandStackOpenAreas(t_model)

def getZoneVentilationWindandStackOpenAreaByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ZoneVentilationWindandStackOpenArea >":
    return _openstudiomodelhvac.getZoneVentilationWindandStackOpenAreaByName(t_model, t_name)

def getZoneVentilationWindandStackOpenAreasByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ZoneVentilationWindandStackOpenArea,std::allocator< openstudio::model::ZoneVentilationWindandStackOpenArea > >":
    return _openstudiomodelhvac.getZoneVentilationWindandStackOpenAreasByName(t_model, t_name, t_exactMatch)

def _to_ZoneVentilationWindandStackOpenArea(self) -> OptionalZoneVentilationWindandStackOpenArea:
    return toZoneVentilationWindandStackOpenArea(self)
openstudioutilitiesidf.IdfObject.to_ZoneVentilationWindandStackOpenArea = _to_ZoneVentilationWindandStackOpenArea

def _getZoneVentilationWindandStackOpenArea(self, t_handle: "UUID") -> OptionalZoneVentilationWindandStackOpenArea:
    return getZoneVentilationWindandStackOpenArea(self, t_handle)
Model.getZoneVentilationWindandStackOpenArea = _getZoneVentilationWindandStackOpenArea

def _getZoneVentilationWindandStackOpenArea(self, t_handle_str: str) -> OptionalZoneVentilationWindandStackOpenArea:
    return getZoneVentilationWindandStackOpenArea(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getZoneVentilationWindandStackOpenArea = _getZoneVentilationWindandStackOpenArea

def _getZoneVentilationWindandStackOpenAreas(self) -> ZoneVentilationWindandStackOpenAreaVector:
    return getZoneVentilationWindandStackOpenAreas(self)
Model.getZoneVentilationWindandStackOpenAreas = _getZoneVentilationWindandStackOpenAreas

def _getZoneVentilationWindandStackOpenAreaByName(self, t_name: str) -> OptionalZoneVentilationWindandStackOpenArea:
    return getZoneVentilationWindandStackOpenAreaByName(self, t_name)
Model.getZoneVentilationWindandStackOpenAreaByName = _getZoneVentilationWindandStackOpenAreaByName

def _getZoneVentilationWindandStackOpenAreasByName(self, t_name: str, t_exactMatch: bool) -> ZoneVentilationWindandStackOpenAreaVector:
    return getZoneVentilationWindandStackOpenAreasByName(self, t_name, t_exactMatch)
Model.getZoneVentilationWindandStackOpenAreasByName = _getZoneVentilationWindandStackOpenAreasByName

class WaterHeaterMixed(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.WaterHeaterMixed_swiginit(self, _openstudiomodelhvac.new_WaterHeaterMixed(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterMixed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.WaterHeaterMixed_iddObjectType()

    @staticmethod
    def heaterControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues()

    @staticmethod
    def heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues()

    @staticmethod
    def offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues()

    @staticmethod
    def onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues()

    @staticmethod
    def ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues()

    @staticmethod
    def sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues()

    def tankVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_tankVolume(self)

    def isTankVolumeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isTankVolumeDefaulted(self)

    def isTankVolumeAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isTankVolumeAutosized(self)

    def setpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterMixed_setpointTemperatureSchedule(self)

    def deadbandTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_deadbandTemperatureDifference(self)

    def isDeadbandTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isDeadbandTemperatureDifferenceDefaulted(self)

    def maximumTemperatureLimit(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_maximumTemperatureLimit(self)

    def heaterControlType(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterControlType(self)

    def isHeaterControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterControlTypeDefaulted(self)

    def heaterMaximumCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterMaximumCapacity(self)

    def isHeaterMaximumCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterMaximumCapacityAutosized(self)

    def heaterMinimumCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterMinimumCapacity(self)

    def heaterIgnitionMinimumFlowRate(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterIgnitionMinimumFlowRate(self)

    def isHeaterIgnitionMinimumFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterIgnitionMinimumFlowRateDefaulted(self)

    def heaterIgnitionDelay(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterIgnitionDelay(self)

    def isHeaterIgnitionDelayDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterIgnitionDelayDefaulted(self)

    def heaterFuelType(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterFuelType(self)

    def heaterThermalEfficiency(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_heaterThermalEfficiency(self)

    def partLoadFactorCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":
        return _openstudiomodelhvac.WaterHeaterMixed_partLoadFactorCurve(self)

    def offCycleParasiticFuelConsumptionRate(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelConsumptionRate(self)

    def isOffCycleParasiticFuelConsumptionRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleParasiticFuelConsumptionRateDefaulted(self)

    def offCycleParasiticFuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelType(self)

    def offCycleParasiticHeatFractiontoTank(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticHeatFractiontoTank(self)

    def isOffCycleParasiticHeatFractiontoTankDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleParasiticHeatFractiontoTankDefaulted(self)

    def onCycleParasiticFuelConsumptionRate(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelConsumptionRate(self)

    def isOnCycleParasiticFuelConsumptionRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleParasiticFuelConsumptionRateDefaulted(self)

    def onCycleParasiticFuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelType(self)

    def onCycleParasiticHeatFractiontoTank(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticHeatFractiontoTank(self)

    def isOnCycleParasiticHeatFractiontoTankDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleParasiticHeatFractiontoTankDefaulted(self)

    def ambientTemperatureIndicator(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicator(self)

    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureSchedule(self)

    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureThermalZone(self)

    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureOutdoorAirNodeName(self)

    def offCycleLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleLossCoefficienttoAmbientTemperature(self)

    def offCycleLossFractiontoThermalZone(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_offCycleLossFractiontoThermalZone(self)

    def isOffCycleLossFractiontoThermalZoneDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleLossFractiontoThermalZoneDefaulted(self)

    def onCycleLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleLossCoefficienttoAmbientTemperature(self)

    def onCycleLossFractiontoThermalZone(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_onCycleLossFractiontoThermalZone(self)

    def isOnCycleLossFractiontoThermalZoneDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleLossFractiontoThermalZoneDefaulted(self)

    def peakUseFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_peakUseFlowRate(self)

    def useFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterMixed_useFlowRateFractionSchedule(self)

    def coldWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterMixed_coldWaterSupplyTemperatureSchedule(self)

    def useSideEffectiveness(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_useSideEffectiveness(self)

    def isUseSideEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideEffectivenessDefaulted(self)

    def sourceSideEffectiveness(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideEffectiveness(self)

    def isSourceSideEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideEffectivenessDefaulted(self)

    def useSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_useSideDesignFlowRate(self)

    def isUseSideDesignFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideDesignFlowRateDefaulted(self)

    def isUseSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideDesignFlowRateAutosized(self)

    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideDesignFlowRate(self)

    def isSourceSideDesignFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideDesignFlowRateDefaulted(self)

    def isSourceSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideDesignFlowRateAutosized(self)

    def indirectWaterHeatingRecoveryTime(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterMixed_indirectWaterHeatingRecoveryTime(self)

    def isIndirectWaterHeatingRecoveryTimeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_isIndirectWaterHeatingRecoveryTimeDefaulted(self)

    def sourceSideFlowControlMode(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlMode(self)

    def indirectAlternateSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterMixed_indirectAlternateSetpointTemperatureSchedule(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterMixed_endUseSubcategory(self)

    def setTankVolume(self, tankVolume: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setTankVolume(self, tankVolume)

    def resetTankVolume(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetTankVolume(self)

    def autosizeTankVolume(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizeTankVolume(self)

    def setSetpointTemperatureSchedule(self, setpointTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setSetpointTemperatureSchedule(self, setpointTemperatureSchedule)

    def resetSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetSetpointTemperatureSchedule(self)

    def setDeadbandTemperatureDifference(self, deadbandTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setDeadbandTemperatureDifference(self, deadbandTemperatureDifference)

    def resetDeadbandTemperatureDifference(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetDeadbandTemperatureDifference(self)

    def setMaximumTemperatureLimit(self, maximumTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setMaximumTemperatureLimit(self, maximumTemperatureLimit)

    def resetMaximumTemperatureLimit(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetMaximumTemperatureLimit(self)

    def setHeaterControlType(self, heaterControlType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterControlType(self, heaterControlType)

    def resetHeaterControlType(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterControlType(self)

    def setHeaterMaximumCapacity(self, heaterMaximumCapacity: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterMaximumCapacity(self, heaterMaximumCapacity)

    def resetHeaterMaximumCapacity(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterMaximumCapacity(self)

    def autosizeHeaterMaximumCapacity(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizeHeaterMaximumCapacity(self)

    def setHeaterMinimumCapacity(self, heaterMinimumCapacity: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterMinimumCapacity(self, heaterMinimumCapacity)

    def resetHeaterMinimumCapacity(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterMinimumCapacity(self)

    def setHeaterIgnitionMinimumFlowRate(self, heaterIgnitionMinimumFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterIgnitionMinimumFlowRate(self, heaterIgnitionMinimumFlowRate)

    def resetHeaterIgnitionMinimumFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterIgnitionMinimumFlowRate(self)

    def setHeaterIgnitionDelay(self, heaterIgnitionDelay: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterIgnitionDelay(self, heaterIgnitionDelay)

    def resetHeaterIgnitionDelay(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterIgnitionDelay(self)

    def setHeaterFuelType(self, heaterFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterFuelType(self, heaterFuelType)

    def setHeaterThermalEfficiency(self, heaterThermalEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterThermalEfficiency(self, heaterThermalEfficiency)

    def resetHeaterThermalEfficiency(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterThermalEfficiency(self)

    def setPartLoadFactorCurve(self, partLoadFactorCurve: "CurveCubic") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setPartLoadFactorCurve(self, partLoadFactorCurve)

    def resetPartLoadFactorCurve(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetPartLoadFactorCurve(self)

    def setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate)

    def resetOffCycleParasiticFuelConsumptionRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticFuelConsumptionRate(self)

    def setOffCycleParasiticFuelType(self, offCycleParasiticFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticFuelType(self, offCycleParasiticFuelType)

    def resetOffCycleParasiticFuelType(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticFuelType(self)

    def setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank)

    def resetOffCycleParasiticHeatFractiontoTank(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticHeatFractiontoTank(self)

    def setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate)

    def resetOnCycleParasiticFuelConsumptionRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticFuelConsumptionRate(self)

    def setOnCycleParasiticFuelType(self, onCycleParasiticFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticFuelType(self, onCycleParasiticFuelType)

    def resetOnCycleParasiticFuelType(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticFuelType(self)

    def setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank)

    def resetOnCycleParasiticHeatFractiontoTank(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticHeatFractiontoTank(self)

    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)

    def setAmbientTemperatureSchedule(self, ambientTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureSchedule(self, ambientTemperatureSchedule)

    def resetAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureSchedule(self)

    def setAmbientTemperatureThermalZone(self, ambientTemperatureThermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureThermalZone(self, ambientTemperatureThermalZone)

    def resetAmbientTemperatureThermalZone(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureThermalZone(self)

    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)

    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureOutdoorAirNodeName(self)

    def setOffCycleLossCoefficienttoAmbientTemperature(self, offCycleLossCoefficienttoAmbientTemperature: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleLossCoefficienttoAmbientTemperature(self, offCycleLossCoefficienttoAmbientTemperature)

    def resetOffCycleLossCoefficienttoAmbientTemperature(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleLossCoefficienttoAmbientTemperature(self)

    def setOffCycleLossFractiontoThermalZone(self, offCycleLossFractiontoThermalZone: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleLossFractiontoThermalZone(self, offCycleLossFractiontoThermalZone)

    def resetOffCycleLossFractiontoThermalZone(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleLossFractiontoThermalZone(self)

    def setOnCycleLossCoefficienttoAmbientTemperature(self, onCycleLossCoefficienttoAmbientTemperature: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleLossCoefficienttoAmbientTemperature(self, onCycleLossCoefficienttoAmbientTemperature)

    def resetOnCycleLossCoefficienttoAmbientTemperature(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleLossCoefficienttoAmbientTemperature(self)

    def setOnCycleLossFractiontoThermalZone(self, onCycleLossFractiontoThermalZone: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleLossFractiontoThermalZone(self, onCycleLossFractiontoThermalZone)

    def resetOnCycleLossFractiontoThermalZone(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleLossFractiontoThermalZone(self)

    def setPeakUseFlowRate(self, peakUseFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setPeakUseFlowRate(self, peakUseFlowRate)

    def resetPeakUseFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetPeakUseFlowRate(self)

    def setUseFlowRateFractionSchedule(self, useFlowRateFractionSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setUseFlowRateFractionSchedule(self, useFlowRateFractionSchedule)

    def resetUseFlowRateFractionSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetUseFlowRateFractionSchedule(self)

    def setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule)

    def resetColdWaterSupplyTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetColdWaterSupplyTemperatureSchedule(self)

    def setUseSideEffectiveness(self, useSideEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setUseSideEffectiveness(self, useSideEffectiveness)

    def resetUseSideEffectiveness(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetUseSideEffectiveness(self)

    def setSourceSideEffectiveness(self, sourceSideEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideEffectiveness(self, sourceSideEffectiveness)

    def resetSourceSideEffectiveness(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetSourceSideEffectiveness(self)

    def setUseSideDesignFlowRate(self, useSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setUseSideDesignFlowRate(self, useSideDesignFlowRate)

    def resetUseSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetUseSideDesignFlowRate(self)

    def autosizeUseSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizeUseSideDesignFlowRate(self)

    def setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate)

    def resetSourceSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetSourceSideDesignFlowRate(self)

    def autosizeSourceSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizeSourceSideDesignFlowRate(self)

    def setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime)

    def resetIndirectWaterHeatingRecoveryTime(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetIndirectWaterHeatingRecoveryTime(self)

    def autosizedTankVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizedTankVolume(self)

    def autosizedHeaterMaximumCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizedHeaterMaximumCapacity(self)

    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizedUseSideDesignFlowRate(self)

    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterMixed_autosizedSourceSideDesignFlowRate(self)

    def setSourceSideFlowControlMode(self, sourceSideFlowControlMode: "std::string const &") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideFlowControlMode(self, sourceSideFlowControlMode)

    def setIndirectAlternateSetpointTemperatureSchedule(self, indirectAlternateSetpointTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setIndirectAlternateSetpointTemperatureSchedule(self, indirectAlternateSetpointTemperatureSchedule)

    def resetIndirectAlternateSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterMixed_resetIndirectAlternateSetpointTemperatureSchedule(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelhvac.WaterHeaterMixed_setEndUseSubcategory(self, endUseSubcategory)

# Register WaterHeaterMixed in _openstudiomodelhvac:
_openstudiomodelhvac.WaterHeaterMixed_swigregister(WaterHeaterMixed)

def WaterHeaterMixed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.WaterHeaterMixed_iddObjectType()

def WaterHeaterMixed_heaterControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues()

def WaterHeaterMixed_heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues()

def WaterHeaterMixed_offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues()

def WaterHeaterMixed_onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues()

def WaterHeaterMixed_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues()

def WaterHeaterMixed_sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues()


def toWaterHeaterMixed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterHeaterMixed >":
    return _openstudiomodelhvac.toWaterHeaterMixed(idfObject)

def getWaterHeaterMixed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterHeaterMixed >":
    return _openstudiomodelhvac.getWaterHeaterMixed(t_model, t_handle)

def getWaterHeaterMixeds(t_model: "Model") -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > >":
    return _openstudiomodelhvac.getWaterHeaterMixeds(t_model)

def getWaterHeaterMixedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterHeaterMixed >":
    return _openstudiomodelhvac.getWaterHeaterMixedByName(t_model, t_name)

def getWaterHeaterMixedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > >":
    return _openstudiomodelhvac.getWaterHeaterMixedsByName(t_model, t_name, t_exactMatch)

def _to_WaterHeaterMixed(self) -> OptionalWaterHeaterMixed:
    return toWaterHeaterMixed(self)
openstudioutilitiesidf.IdfObject.to_WaterHeaterMixed = _to_WaterHeaterMixed

def _getWaterHeaterMixed(self, t_handle: "UUID") -> OptionalWaterHeaterMixed:
    return getWaterHeaterMixed(self, t_handle)
Model.getWaterHeaterMixed = _getWaterHeaterMixed

def _getWaterHeaterMixed(self, t_handle_str: str) -> OptionalWaterHeaterMixed:
    return getWaterHeaterMixed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterHeaterMixed = _getWaterHeaterMixed

def _getWaterHeaterMixeds(self) -> WaterHeaterMixedVector:
    return getWaterHeaterMixeds(self)
Model.getWaterHeaterMixeds = _getWaterHeaterMixeds

def _getWaterHeaterMixedByName(self, t_name: str) -> OptionalWaterHeaterMixed:
    return getWaterHeaterMixedByName(self, t_name)
Model.getWaterHeaterMixedByName = _getWaterHeaterMixedByName

def _getWaterHeaterMixedsByName(self, t_name: str, t_exactMatch: bool) -> WaterHeaterMixedVector:
    return getWaterHeaterMixedsByName(self, t_name, t_exactMatch)
Model.getWaterHeaterMixedsByName = _getWaterHeaterMixedsByName

class WaterHeaterStratified(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.WaterHeaterStratified_swiginit(self, _openstudiomodelhvac.new_WaterHeaterStratified(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterStratified

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.WaterHeaterStratified_iddObjectType()

    @staticmethod
    def tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_tankShapeValues()

    @staticmethod
    def heaterPriorityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues()

    @staticmethod
    def heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues()

    @staticmethod
    def offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues()

    @staticmethod
    def onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues()

    @staticmethod
    def ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues()

    @staticmethod
    def inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_inletModeValues()

    @staticmethod
    def sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues()

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_endUseSubcategory(self)

    def tankVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_tankVolume(self)

    def isTankVolumeAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isTankVolumeAutosized(self)

    def tankHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_tankHeight(self)

    def isTankHeightAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isTankHeightAutosized(self)

    def tankShape(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_tankShape(self)

    def tankPerimeter(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_tankPerimeter(self)

    def maximumTemperatureLimit(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_maximumTemperatureLimit(self)

    def heaterPriorityControl(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControl(self)

    def heater1SetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.WaterHeaterStratified_heater1SetpointTemperatureSchedule(self)

    def heater1DeadbandTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heater1DeadbandTemperatureDifference(self)

    def heater1Capacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_heater1Capacity(self)

    def isHeater1CapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isHeater1CapacityAutosized(self)

    def heater1Height(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heater1Height(self)

    def heater2SetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.WaterHeaterStratified_heater2SetpointTemperatureSchedule(self)

    def heater2DeadbandTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heater2DeadbandTemperatureDifference(self)

    def heater2Capacity(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heater2Capacity(self)

    def heater2Height(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heater2Height(self)

    def heaterFuelType(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_heaterFuelType(self)

    def heaterThermalEfficiency(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_heaterThermalEfficiency(self)

    def offCycleParasiticFuelConsumptionRate(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelConsumptionRate(self)

    def offCycleParasiticFuelType(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelType(self)

    def offCycleParasiticHeatFractiontoTank(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticHeatFractiontoTank(self)

    def offCycleParasiticHeight(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticHeight(self)

    def onCycleParasiticFuelConsumptionRate(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelConsumptionRate(self)

    def onCycleParasiticFuelType(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelType(self)

    def onCycleParasiticHeatFractiontoTank(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticHeatFractiontoTank(self)

    def onCycleParasiticHeight(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticHeight(self)

    def ambientTemperatureIndicator(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicator(self)

    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureSchedule(self)

    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureThermalZone(self)

    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureOutdoorAirNodeName(self)

    def uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)

    def skinLossFractiontoZone(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_skinLossFractiontoZone(self)

    def offCycleFlueLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleFlueLossCoefficienttoAmbientTemperature(self)

    def offCycleFlueLossFractiontoZone(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_offCycleFlueLossFractiontoZone(self)

    def peakUseFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_peakUseFlowRate(self)

    def useFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterStratified_useFlowRateFractionSchedule(self)

    def coldWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterStratified_coldWaterSupplyTemperatureSchedule(self)

    def useSideEffectiveness(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_useSideEffectiveness(self)

    def useSideInletHeight(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_useSideInletHeight(self)

    def useSideOutletHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_useSideOutletHeight(self)

    def isUseSideOutletHeightAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isUseSideOutletHeightAutocalculated(self)

    def sourceSideEffectiveness(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideEffectiveness(self)

    def sourceSideInletHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideInletHeight(self)

    def isSourceSideInletHeightAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isSourceSideInletHeightAutocalculated(self)

    def sourceSideOutletHeight(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideOutletHeight(self)

    def inletMode(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_inletMode(self)

    def useSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_useSideDesignFlowRate(self)

    def isUseSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isUseSideDesignFlowRateAutosized(self)

    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideDesignFlowRate(self)

    def isSourceSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_isSourceSideDesignFlowRateAutosized(self)

    def indirectWaterHeatingRecoveryTime(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_indirectWaterHeatingRecoveryTime(self)

    def numberofNodes(self) -> "int":
        return _openstudiomodelhvac.WaterHeaterStratified_numberofNodes(self)

    def additionalDestratificationConductivity(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_additionalDestratificationConductivity(self)

    def node1AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node1AdditionalLossCoefficient(self)

    def node2AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node2AdditionalLossCoefficient(self)

    def node3AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node3AdditionalLossCoefficient(self)

    def node4AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node4AdditionalLossCoefficient(self)

    def node5AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node5AdditionalLossCoefficient(self)

    def node6AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node6AdditionalLossCoefficient(self)

    def node7AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node7AdditionalLossCoefficient(self)

    def node8AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node8AdditionalLossCoefficient(self)

    def node9AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node9AdditionalLossCoefficient(self)

    def node10AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node10AdditionalLossCoefficient(self)

    def node11AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node11AdditionalLossCoefficient(self)

    def node12AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.WaterHeaterStratified_node12AdditionalLossCoefficient(self)

    def sourceSideFlowControlMode(self) -> "std::string":
        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlMode(self)

    def indirectAlternateSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterHeaterStratified_indirectAlternateSetpointTemperatureSchedule(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setEndUseSubcategory(self, endUseSubcategory)

    def setTankVolume(self, tankVolume: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setTankVolume(self, tankVolume)

    def autosizeTankVolume(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizeTankVolume(self)

    def setTankHeight(self, tankHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setTankHeight(self, tankHeight)

    def autosizeTankHeight(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizeTankHeight(self)

    def setTankShape(self, tankShape: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setTankShape(self, tankShape)

    def setTankPerimeter(self, tankPerimeter: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setTankPerimeter(self, tankPerimeter)

    def resetTankPerimeter(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetTankPerimeter(self)

    def setMaximumTemperatureLimit(self, maximumTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setMaximumTemperatureLimit(self, maximumTemperatureLimit)

    def setHeaterPriorityControl(self, heaterPriorityControl: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterPriorityControl(self, heaterPriorityControl)

    def setHeater1SetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1SetpointTemperatureSchedule(self, schedule)

    def setHeater1DeadbandTemperatureDifference(self, heater1DeadbandTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1DeadbandTemperatureDifference(self, heater1DeadbandTemperatureDifference)

    def setHeater1Capacity(self, heater1Capacity: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1Capacity(self, heater1Capacity)

    def autosizeHeater1Capacity(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizeHeater1Capacity(self)

    def setHeater1Height(self, heater1Height: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1Height(self, heater1Height)

    def setHeater2SetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2SetpointTemperatureSchedule(self, schedule)

    def setHeater2DeadbandTemperatureDifference(self, heater2DeadbandTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2DeadbandTemperatureDifference(self, heater2DeadbandTemperatureDifference)

    def setHeater2Capacity(self, heater2Capacity: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2Capacity(self, heater2Capacity)

    def setHeater2Height(self, heater2Height: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2Height(self, heater2Height)

    def setHeaterFuelType(self, heaterFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterFuelType(self, heaterFuelType)

    def setHeaterThermalEfficiency(self, heaterThermalEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterThermalEfficiency(self, heaterThermalEfficiency)

    def setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate)

    def setOffCycleParasiticFuelType(self, offCycleParasiticFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticFuelType(self, offCycleParasiticFuelType)

    def setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank)

    def setOffCycleParasiticHeight(self, offCycleParasiticHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticHeight(self, offCycleParasiticHeight)

    def setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate)

    def setOnCycleParasiticFuelType(self, onCycleParasiticFuelType: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticFuelType(self, onCycleParasiticFuelType)

    def setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank)

    def setOnCycleParasiticHeight(self, onCycleParasiticHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticHeight(self, onCycleParasiticHeight)

    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)

    def setAmbientTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureSchedule(self, schedule)

    def resetAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureSchedule(self)

    def setAmbientTemperatureThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureThermalZone(self, thermalZone)

    def resetAmbientTemperatureThermalZone(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureThermalZone(self)

    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)

    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureOutdoorAirNodeName(self)

    def setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature)

    def resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)

    def setSkinLossFractiontoZone(self, skinLossFractiontoZone: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSkinLossFractiontoZone(self, skinLossFractiontoZone)

    def setOffCycleFlueLossCoefficienttoAmbientTemperature(self, offCycleFlueLossCoefficienttoAmbientTemperature: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleFlueLossCoefficienttoAmbientTemperature(self, offCycleFlueLossCoefficienttoAmbientTemperature)

    def resetOffCycleFlueLossCoefficienttoAmbientTemperature(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetOffCycleFlueLossCoefficienttoAmbientTemperature(self)

    def setOffCycleFlueLossFractiontoZone(self, offCycleFlueLossFractiontoZone: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleFlueLossFractiontoZone(self, offCycleFlueLossFractiontoZone)

    def setPeakUseFlowRate(self, peakUseFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setPeakUseFlowRate(self, peakUseFlowRate)

    def resetPeakUseFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetPeakUseFlowRate(self)

    def setUseFlowRateFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUseFlowRateFractionSchedule(self, schedule)

    def resetUseFlowRateFractionSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetUseFlowRateFractionSchedule(self)

    def setColdWaterSupplyTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setColdWaterSupplyTemperatureSchedule(self, schedule)

    def resetColdWaterSupplyTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetColdWaterSupplyTemperatureSchedule(self)

    def setUseSideEffectiveness(self, useSideEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideEffectiveness(self, useSideEffectiveness)

    def setUseSideInletHeight(self, useSideInletHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideInletHeight(self, useSideInletHeight)

    def setUseSideOutletHeight(self, useSideOutletHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideOutletHeight(self, useSideOutletHeight)

    def autocalculateUseSideOutletHeight(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autocalculateUseSideOutletHeight(self)

    def setSourceSideEffectiveness(self, sourceSideEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideEffectiveness(self, sourceSideEffectiveness)

    def setSourceSideInletHeight(self, sourceSideInletHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideInletHeight(self, sourceSideInletHeight)

    def autocalculateSourceSideInletHeight(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autocalculateSourceSideInletHeight(self)

    def setSourceSideOutletHeight(self, sourceSideOutletHeight: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideOutletHeight(self, sourceSideOutletHeight)

    def setInletMode(self, inletMode: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setInletMode(self, inletMode)

    def setUseSideDesignFlowRate(self, useSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideDesignFlowRate(self, useSideDesignFlowRate)

    def autosizeUseSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizeUseSideDesignFlowRate(self)

    def setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate)

    def autosizeSourceSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizeSourceSideDesignFlowRate(self)

    def setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime)

    def setNumberofNodes(self, numberofNodes: "int") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNumberofNodes(self, numberofNodes)

    def setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity)

    def setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient)

    def setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient)

    def setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient)

    def setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient)

    def setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient)

    def setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient)

    def setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient)

    def setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient)

    def setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient)

    def setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient)

    def setNode11AdditionalLossCoefficient(self, node11AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode11AdditionalLossCoefficient(self, node11AdditionalLossCoefficient)

    def setNode12AdditionalLossCoefficient(self, node12AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setNode12AdditionalLossCoefficient(self, node12AdditionalLossCoefficient)

    def setSourceSideFlowControlMode(self, sourceSideFlowControlMode: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideFlowControlMode(self, sourceSideFlowControlMode)

    def setIndirectAlternateSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterHeaterStratified_setIndirectAlternateSetpointTemperatureSchedule(self, schedule)

    def resetIndirectAlternateSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterHeaterStratified_resetIndirectAlternateSetpointTemperatureSchedule(self)

    def autosizedTankVolume(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizedTankVolume(self)

    def autosizedTankHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizedTankHeight(self)

    def autosizedHeater1Capacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizedHeater1Capacity(self)

    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizedUseSideDesignFlowRate(self)

    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.WaterHeaterStratified_autosizedSourceSideDesignFlowRate(self)

# Register WaterHeaterStratified in _openstudiomodelhvac:
_openstudiomodelhvac.WaterHeaterStratified_swigregister(WaterHeaterStratified)

def WaterHeaterStratified_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.WaterHeaterStratified_iddObjectType()

def WaterHeaterStratified_tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_tankShapeValues()

def WaterHeaterStratified_heaterPriorityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues()

def WaterHeaterStratified_heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues()

def WaterHeaterStratified_offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues()

def WaterHeaterStratified_onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues()

def WaterHeaterStratified_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues()

def WaterHeaterStratified_inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_inletModeValues()

def WaterHeaterStratified_sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues()


def toWaterHeaterStratified(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterHeaterStratified >":
    return _openstudiomodelhvac.toWaterHeaterStratified(idfObject)

def getWaterHeaterStratified(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterHeaterStratified >":
    return _openstudiomodelhvac.getWaterHeaterStratified(t_model, t_handle)

def getWaterHeaterStratifieds(t_model: "Model") -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > >":
    return _openstudiomodelhvac.getWaterHeaterStratifieds(t_model)

def getWaterHeaterStratifiedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterHeaterStratified >":
    return _openstudiomodelhvac.getWaterHeaterStratifiedByName(t_model, t_name)

def getWaterHeaterStratifiedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > >":
    return _openstudiomodelhvac.getWaterHeaterStratifiedsByName(t_model, t_name, t_exactMatch)

def _to_WaterHeaterStratified(self) -> OptionalWaterHeaterStratified:
    return toWaterHeaterStratified(self)
openstudioutilitiesidf.IdfObject.to_WaterHeaterStratified = _to_WaterHeaterStratified

def _getWaterHeaterStratified(self, t_handle: "UUID") -> OptionalWaterHeaterStratified:
    return getWaterHeaterStratified(self, t_handle)
Model.getWaterHeaterStratified = _getWaterHeaterStratified

def _getWaterHeaterStratified(self, t_handle_str: str) -> OptionalWaterHeaterStratified:
    return getWaterHeaterStratified(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterHeaterStratified = _getWaterHeaterStratified

def _getWaterHeaterStratifieds(self) -> WaterHeaterStratifiedVector:
    return getWaterHeaterStratifieds(self)
Model.getWaterHeaterStratifieds = _getWaterHeaterStratifieds

def _getWaterHeaterStratifiedByName(self, t_name: str) -> OptionalWaterHeaterStratified:
    return getWaterHeaterStratifiedByName(self, t_name)
Model.getWaterHeaterStratifiedByName = _getWaterHeaterStratifiedByName

def _getWaterHeaterStratifiedsByName(self, t_name: str, t_exactMatch: bool) -> WaterHeaterStratifiedVector:
    return getWaterHeaterStratifiedsByName(self, t_name, t_exactMatch)
Model.getWaterHeaterStratifiedsByName = _getWaterHeaterStratifiedsByName

class WaterUseEquipmentDefinition(openstudiomodelresources.SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.WaterUseEquipmentDefinition_swiginit(self, _openstudiomodelhvac.new_WaterUseEquipmentDefinition(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentDefinition

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType()

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_isEndUseSubcategoryDefaulted(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetEndUseSubcategory(self)

    def peakFlowRate(self) -> "double":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_peakFlowRate(self)

    def setPeakFlowRate(self, peakFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setPeakFlowRate(self, peakFlowRate)

    def targetTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_targetTemperatureSchedule(self)

    def setTargetTemperatureSchedule(self, targetTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setTargetTemperatureSchedule(self, targetTemperatureSchedule)

    def resetTargetTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetTargetTemperatureSchedule(self)

    def sensibleFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_sensibleFractionSchedule(self)

    def setSensibleFractionSchedule(self, sensibleFractionSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setSensibleFractionSchedule(self, sensibleFractionSchedule)

    def resetSensibleFractionSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetSensibleFractionSchedule(self)

    def latentFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_latentFractionSchedule(self)

    def setLatentFractionSchedule(self, latentFractionSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setLatentFractionSchedule(self, latentFractionSchedule)

    def resetLatentFractionSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetLatentFractionSchedule(self)

# Register WaterUseEquipmentDefinition in _openstudiomodelhvac:
_openstudiomodelhvac.WaterUseEquipmentDefinition_swigregister(WaterUseEquipmentDefinition)

def WaterUseEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType()


def toWaterUseEquipmentDefinition(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":
    return _openstudiomodelhvac.toWaterUseEquipmentDefinition(idfObject)

def getWaterUseEquipmentDefinition(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":
    return _openstudiomodelhvac.getWaterUseEquipmentDefinition(t_model, t_handle)

def getWaterUseEquipmentDefinitions(t_model: "Model") -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > >":
    return _openstudiomodelhvac.getWaterUseEquipmentDefinitions(t_model)

def getWaterUseEquipmentDefinitionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":
    return _openstudiomodelhvac.getWaterUseEquipmentDefinitionByName(t_model, t_name)

def getWaterUseEquipmentDefinitionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > >":
    return _openstudiomodelhvac.getWaterUseEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_WaterUseEquipmentDefinition(self) -> OptionalWaterUseEquipmentDefinition:
    return toWaterUseEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_WaterUseEquipmentDefinition = _to_WaterUseEquipmentDefinition

def _getWaterUseEquipmentDefinition(self, t_handle: "UUID") -> OptionalWaterUseEquipmentDefinition:
    return getWaterUseEquipmentDefinition(self, t_handle)
Model.getWaterUseEquipmentDefinition = _getWaterUseEquipmentDefinition

def _getWaterUseEquipmentDefinition(self, t_handle_str: str) -> OptionalWaterUseEquipmentDefinition:
    return getWaterUseEquipmentDefinition(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterUseEquipmentDefinition = _getWaterUseEquipmentDefinition

def _getWaterUseEquipmentDefinitions(self) -> WaterUseEquipmentDefinitionVector:
    return getWaterUseEquipmentDefinitions(self)
Model.getWaterUseEquipmentDefinitions = _getWaterUseEquipmentDefinitions

def _getWaterUseEquipmentDefinitionByName(self, t_name: str) -> OptionalWaterUseEquipmentDefinition:
    return getWaterUseEquipmentDefinitionByName(self, t_name)
Model.getWaterUseEquipmentDefinitionByName = _getWaterUseEquipmentDefinitionByName

def _getWaterUseEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> WaterUseEquipmentDefinitionVector:
    return getWaterUseEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getWaterUseEquipmentDefinitionsByName = _getWaterUseEquipmentDefinitionsByName

class WaterUseEquipment(openstudiomodelgeometry.SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, waterUseEquipmentDefinition: "WaterUseEquipmentDefinition"):
        _openstudiomodelhvac.WaterUseEquipment_swiginit(self, _openstudiomodelhvac.new_WaterUseEquipment(waterUseEquipmentDefinition))
    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipment

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.WaterUseEquipment_iddObjectType()

    def flowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.WaterUseEquipment_flowRateFractionSchedule(self)

    def setFlowRateFractionSchedule(self, flowRateFractionSchedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipment_setFlowRateFractionSchedule(self, flowRateFractionSchedule)

    def resetFlowRateFractionSchedule(self) -> "void":
        return _openstudiomodelhvac.WaterUseEquipment_resetFlowRateFractionSchedule(self)

    def waterUseEquipmentDefinition(self) -> "openstudio::model::WaterUseEquipmentDefinition":
        return _openstudiomodelhvac.WaterUseEquipment_waterUseEquipmentDefinition(self)

    def setWaterUseEquipmentDefinition(self, definition: "WaterUseEquipmentDefinition") -> "bool":
        return _openstudiomodelhvac.WaterUseEquipment_setWaterUseEquipmentDefinition(self, definition)

    def waterUseConnections(self) -> "boost::optional< openstudio::model::WaterUseConnections >":
        return _openstudiomodelhvac.WaterUseEquipment_waterUseConnections(self)

# Register WaterUseEquipment in _openstudiomodelhvac:
_openstudiomodelhvac.WaterUseEquipment_swigregister(WaterUseEquipment)

def WaterUseEquipment_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.WaterUseEquipment_iddObjectType()


def toWaterUseEquipment(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterUseEquipment >":
    return _openstudiomodelhvac.toWaterUseEquipment(idfObject)

def getWaterUseEquipment(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterUseEquipment >":
    return _openstudiomodelhvac.getWaterUseEquipment(t_model, t_handle)

def getWaterUseEquipments(t_model: "Model") -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > >":
    return _openstudiomodelhvac.getWaterUseEquipments(t_model)

def getWaterUseEquipmentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterUseEquipment >":
    return _openstudiomodelhvac.getWaterUseEquipmentByName(t_model, t_name)

def getWaterUseEquipmentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > >":
    return _openstudiomodelhvac.getWaterUseEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_WaterUseEquipment(self) -> OptionalWaterUseEquipment:
    return toWaterUseEquipment(self)
openstudioutilitiesidf.IdfObject.to_WaterUseEquipment = _to_WaterUseEquipment

def _getWaterUseEquipment(self, t_handle: "UUID") -> OptionalWaterUseEquipment:
    return getWaterUseEquipment(self, t_handle)
Model.getWaterUseEquipment = _getWaterUseEquipment

def _getWaterUseEquipment(self, t_handle_str: str) -> OptionalWaterUseEquipment:
    return getWaterUseEquipment(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterUseEquipment = _getWaterUseEquipment

def _getWaterUseEquipments(self) -> WaterUseEquipmentVector:
    return getWaterUseEquipments(self)
Model.getWaterUseEquipments = _getWaterUseEquipments

def _getWaterUseEquipmentByName(self, t_name: str) -> OptionalWaterUseEquipment:
    return getWaterUseEquipmentByName(self, t_name)
Model.getWaterUseEquipmentByName = _getWaterUseEquipmentByName

def _getWaterUseEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> WaterUseEquipmentVector:
    return getWaterUseEquipmentsByName(self, t_name, t_exactMatch)
Model.getWaterUseEquipmentsByName = _getWaterUseEquipmentsByName

class HeatExchangerAirToAirSensibleAndLatent(AirToAirComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_swiginit(self, _openstudiomodelhvac.new_HeatExchangerAirToAirSensibleAndLatent(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerAirToAirSensibleAndLatent

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType()

    @staticmethod
    def heatExchangerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues()

    @staticmethod
    def frostControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setAvailabilitySchedule(self, schedule)

    def nominalSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_nominalSupplyAirFlowRate(self)

    def isNominalSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_isNominalSupplyAirFlowRateAutosized(self)

    def setNominalSupplyAirFlowRate(self, nominalSupplyAirFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setNominalSupplyAirFlowRate(self, nominalSupplyAirFlowRate)

    def autosizeNominalSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_autosizeNominalSupplyAirFlowRate(self)

    def sensibleEffectivenessat100HeatingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat100HeatingAirFlow(self)

    def setSensibleEffectivenessat100HeatingAirFlow(self, sensibleEffectivenessat100HeatingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat100HeatingAirFlow(self, sensibleEffectivenessat100HeatingAirFlow)

    def latentEffectivenessat100HeatingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat100HeatingAirFlow(self)

    def setLatentEffectivenessat100HeatingAirFlow(self, latentEffectivenessat100HeatingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat100HeatingAirFlow(self, latentEffectivenessat100HeatingAirFlow)

    def sensibleEffectivenessat75HeatingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat75HeatingAirFlow(self)

    def setSensibleEffectivenessat75HeatingAirFlow(self, sensibleEffectivenessat75HeatingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat75HeatingAirFlow(self, sensibleEffectivenessat75HeatingAirFlow)

    def latentEffectivenessat75HeatingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat75HeatingAirFlow(self)

    def setLatentEffectivenessat75HeatingAirFlow(self, latentEffectivenessat75HeatingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat75HeatingAirFlow(self, latentEffectivenessat75HeatingAirFlow)

    def sensibleEffectivenessat100CoolingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat100CoolingAirFlow(self)

    def setSensibleEffectivenessat100CoolingAirFlow(self, sensibleEffectivenessat100CoolingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat100CoolingAirFlow(self, sensibleEffectivenessat100CoolingAirFlow)

    def latentEffectivenessat100CoolingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat100CoolingAirFlow(self)

    def setLatentEffectivenessat100CoolingAirFlow(self, latentEffectivenessat100CoolingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat100CoolingAirFlow(self, latentEffectivenessat100CoolingAirFlow)

    def sensibleEffectivenessat75CoolingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat75CoolingAirFlow(self)

    def setSensibleEffectivenessat75CoolingAirFlow(self, sensibleEffectivenessat75CoolingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat75CoolingAirFlow(self, sensibleEffectivenessat75CoolingAirFlow)

    def latentEffectivenessat75CoolingAirFlow(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat75CoolingAirFlow(self)

    def setLatentEffectivenessat75CoolingAirFlow(self, latentEffectivenessat75CoolingAirFlow: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat75CoolingAirFlow(self, latentEffectivenessat75CoolingAirFlow)

    def nominalElectricPower(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_nominalElectricPower(self)

    def setNominalElectricPower(self, nominalElectricPower: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setNominalElectricPower(self, nominalElectricPower)

    def supplyAirOutletTemperatureControl(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_supplyAirOutletTemperatureControl(self)

    def setSupplyAirOutletTemperatureControl(self, supplyAirOutletTemperatureControl: "bool") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSupplyAirOutletTemperatureControl(self, supplyAirOutletTemperatureControl)

    def heatExchangerType(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerType(self)

    def setHeatExchangerType(self, heatExchangerType: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setHeatExchangerType(self, heatExchangerType)

    def frostControlType(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlType(self)

    def setFrostControlType(self, frostControlType: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setFrostControlType(self, frostControlType)

    def thresholdTemperature(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_thresholdTemperature(self)

    def isThresholdTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_isThresholdTemperatureDefaulted(self)

    def setThresholdTemperature(self, thresholdTemperature: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setThresholdTemperature(self, thresholdTemperature)

    def resetThresholdTemperature(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetThresholdTemperature(self)

    def initialDefrostTimeFraction(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_initialDefrostTimeFraction(self)

    def setInitialDefrostTimeFraction(self, initialDefrostTimeFraction: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setInitialDefrostTimeFraction(self, initialDefrostTimeFraction)

    def resetInitialDefrostTimeFraction(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetInitialDefrostTimeFraction(self)

    def rateofDefrostTimeFractionIncrease(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_rateofDefrostTimeFractionIncrease(self)

    def setRateofDefrostTimeFractionIncrease(self, rateofDefrostTimeFractionIncrease: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setRateofDefrostTimeFractionIncrease(self, rateofDefrostTimeFractionIncrease)

    def resetRateofDefrostTimeFractionIncrease(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetRateofDefrostTimeFractionIncrease(self)

    def economizerLockout(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_economizerLockout(self)

    def setEconomizerLockout(self, economizerLockout: "bool") -> "bool":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setEconomizerLockout(self, economizerLockout)

    def autosizedNominalSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_autosizedNominalSupplyAirFlowRate(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_airflowNetworkEquivalentDuct(self)

# Register HeatExchangerAirToAirSensibleAndLatent in _openstudiomodelhvac:
_openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_swigregister(HeatExchangerAirToAirSensibleAndLatent)

def HeatExchangerAirToAirSensibleAndLatent_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType()

def HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues()

def HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues()


def toHeatExchangerAirToAirSensibleAndLatent(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":
    return _openstudiomodelhvac.toHeatExchangerAirToAirSensibleAndLatent(idfObject)

def getHeatExchangerAirToAirSensibleAndLatent(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":
    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatent(t_model, t_handle)

def getHeatExchangerAirToAirSensibleAndLatents(t_model: "Model") -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > >":
    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatents(t_model)

def getHeatExchangerAirToAirSensibleAndLatentByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":
    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentByName(t_model, t_name)

def getHeatExchangerAirToAirSensibleAndLatentsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > >":
    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentsByName(t_model, t_name, t_exactMatch)

def _to_HeatExchangerAirToAirSensibleAndLatent(self) -> OptionalHeatExchangerAirToAirSensibleAndLatent:
    return toHeatExchangerAirToAirSensibleAndLatent(self)
openstudioutilitiesidf.IdfObject.to_HeatExchangerAirToAirSensibleAndLatent = _to_HeatExchangerAirToAirSensibleAndLatent

def _getHeatExchangerAirToAirSensibleAndLatent(self, t_handle: "UUID") -> OptionalHeatExchangerAirToAirSensibleAndLatent:
    return getHeatExchangerAirToAirSensibleAndLatent(self, t_handle)
Model.getHeatExchangerAirToAirSensibleAndLatent = _getHeatExchangerAirToAirSensibleAndLatent

def _getHeatExchangerAirToAirSensibleAndLatent(self, t_handle_str: str) -> OptionalHeatExchangerAirToAirSensibleAndLatent:
    return getHeatExchangerAirToAirSensibleAndLatent(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeatExchangerAirToAirSensibleAndLatent = _getHeatExchangerAirToAirSensibleAndLatent

def _getHeatExchangerAirToAirSensibleAndLatents(self) -> HeatExchangerAirToAirSensibleAndLatentVector:
    return getHeatExchangerAirToAirSensibleAndLatents(self)
Model.getHeatExchangerAirToAirSensibleAndLatents = _getHeatExchangerAirToAirSensibleAndLatents

def _getHeatExchangerAirToAirSensibleAndLatentByName(self, t_name: str) -> OptionalHeatExchangerAirToAirSensibleAndLatent:
    return getHeatExchangerAirToAirSensibleAndLatentByName(self, t_name)
Model.getHeatExchangerAirToAirSensibleAndLatentByName = _getHeatExchangerAirToAirSensibleAndLatentByName

def _getHeatExchangerAirToAirSensibleAndLatentsByName(self, t_name: str, t_exactMatch: bool) -> HeatExchangerAirToAirSensibleAndLatentVector:
    return getHeatExchangerAirToAirSensibleAndLatentsByName(self, t_name, t_exactMatch)
Model.getHeatExchangerAirToAirSensibleAndLatentsByName = _getHeatExchangerAirToAirSensibleAndLatentsByName

class HeatExchangerFluidToFluid(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.HeatExchangerFluidToFluid_swiginit(self, _openstudiomodelhvac.new_HeatExchangerFluidToFluid(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerFluidToFluid

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType()

    @staticmethod
    def heatExchangeModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues()

    @staticmethod
    def controlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues()

    @staticmethod
    def heatTransferMeteringEndUseTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues()

    @staticmethod
    def componentOverrideCoolingControlTemperatureModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_availabilitySchedule(self)

    def loopDemandSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_loopDemandSideDesignFlowRate(self)

    def isLoopDemandSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isLoopDemandSideDesignFlowRateAutosized(self)

    def loopSupplySideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_loopSupplySideDesignFlowRate(self)

    def isLoopSupplySideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isLoopSupplySideDesignFlowRateAutosized(self)

    def heatExchangeModelType(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelType(self)

    def isHeatExchangeModelTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatExchangeModelTypeDefaulted(self)

    def heatExchangerUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangerUFactorTimesAreaValue(self)

    def isHeatExchangerUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatExchangerUFactorTimesAreaValueAutosized(self)

    def controlType(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_controlType(self)

    def isControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isControlTypeDefaulted(self)

    def minimumTemperatureDifferencetoActivateHeatExchanger(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_minimumTemperatureDifferencetoActivateHeatExchanger(self)

    def isMinimumTemperatureDifferencetoActivateHeatExchangerDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isMinimumTemperatureDifferencetoActivateHeatExchangerDefaulted(self)

    def heatTransferMeteringEndUseType(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseType(self)

    def isHeatTransferMeteringEndUseTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatTransferMeteringEndUseTypeDefaulted(self)

    def componentOverrideLoopSupplySideInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideLoopSupplySideInletNode(self)

    def componentOverrideLoopDemandSideInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideLoopDemandSideInletNode(self)

    def componentOverrideCoolingControlTemperatureMode(self) -> "std::string":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureMode(self)

    def isComponentOverrideCoolingControlTemperatureModeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isComponentOverrideCoolingControlTemperatureModeDefaulted(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isSizingFactorDefaulted(self)

    def operationMinimumTemperatureLimit(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_operationMinimumTemperatureLimit(self)

    def operationMaximumTemperatureLimit(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_operationMaximumTemperatureLimit(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetAvailabilitySchedule(self)

    def setLoopDemandSideDesignFlowRate(self, loopDemandSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setLoopDemandSideDesignFlowRate(self, loopDemandSideDesignFlowRate)

    def autosizeLoopDemandSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeLoopDemandSideDesignFlowRate(self)

    def setLoopSupplySideDesignFlowRate(self, loopSupplySideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setLoopSupplySideDesignFlowRate(self, loopSupplySideDesignFlowRate)

    def autosizeLoopSupplySideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeLoopSupplySideDesignFlowRate(self)

    def setHeatExchangeModelType(self, heatExchangeModelType: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatExchangeModelType(self, heatExchangeModelType)

    def resetHeatExchangeModelType(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetHeatExchangeModelType(self)

    def setHeatExchangerUFactorTimesAreaValue(self, heatExchangerUFactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatExchangerUFactorTimesAreaValue(self, heatExchangerUFactorTimesAreaValue)

    def autosizeHeatExchangerUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeHeatExchangerUFactorTimesAreaValue(self)

    def setControlType(self, controlType: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setControlType(self, controlType)

    def resetControlType(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetControlType(self)

    def setMinimumTemperatureDifferencetoActivateHeatExchanger(self, minimumTemperatureDifferencetoActivateHeatExchanger: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setMinimumTemperatureDifferencetoActivateHeatExchanger(self, minimumTemperatureDifferencetoActivateHeatExchanger)

    def resetMinimumTemperatureDifferencetoActivateHeatExchanger(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetMinimumTemperatureDifferencetoActivateHeatExchanger(self)

    def setHeatTransferMeteringEndUseType(self, heatTransferMeteringEndUseType: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatTransferMeteringEndUseType(self, heatTransferMeteringEndUseType)

    def resetHeatTransferMeteringEndUseType(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetHeatTransferMeteringEndUseType(self)

    def setComponentOverrideLoopSupplySideInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideLoopSupplySideInletNode(self, node)

    def resetComponentOverrideLoopSupplySideInletNode(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideLoopSupplySideInletNode(self)

    def setComponentOverrideLoopDemandSideInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideLoopDemandSideInletNode(self, node)

    def resetComponentOverrideLoopDemandSideInletNode(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideLoopDemandSideInletNode(self)

    def setComponentOverrideCoolingControlTemperatureMode(self, componentOverrideCoolingControlTemperatureMode: "std::string") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideCoolingControlTemperatureMode(self, componentOverrideCoolingControlTemperatureMode)

    def resetComponentOverrideCoolingControlTemperatureMode(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideCoolingControlTemperatureMode(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetSizingFactor(self)

    def setOperationMinimumTemperatureLimit(self, operationMinimumTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setOperationMinimumTemperatureLimit(self, operationMinimumTemperatureLimit)

    def resetOperationMinimumTemperatureLimit(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetOperationMinimumTemperatureLimit(self)

    def setOperationMaximumTemperatureLimit(self, operationMaximumTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setOperationMaximumTemperatureLimit(self, operationMaximumTemperatureLimit)

    def resetOperationMaximumTemperatureLimit(self) -> "void":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetOperationMaximumTemperatureLimit(self)

    def autosizedLoopDemandSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedLoopDemandSideDesignFlowRate(self)

    def autosizedLoopSupplySideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedLoopSupplySideDesignFlowRate(self)

    def autosizedHeatExchangerUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedHeatExchangerUFactorTimesAreaValue(self)

# Register HeatExchangerFluidToFluid in _openstudiomodelhvac:
_openstudiomodelhvac.HeatExchangerFluidToFluid_swigregister(HeatExchangerFluidToFluid)

def HeatExchangerFluidToFluid_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType()

def HeatExchangerFluidToFluid_heatExchangeModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues()

def HeatExchangerFluidToFluid_controlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues()

def HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues()

def HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues()


def toHeatExchangerFluidToFluid(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":
    return _openstudiomodelhvac.toHeatExchangerFluidToFluid(idfObject)

def getHeatExchangerFluidToFluid(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":
    return _openstudiomodelhvac.getHeatExchangerFluidToFluid(t_model, t_handle)

def getHeatExchangerFluidToFluids(t_model: "Model") -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > >":
    return _openstudiomodelhvac.getHeatExchangerFluidToFluids(t_model)

def getHeatExchangerFluidToFluidByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":
    return _openstudiomodelhvac.getHeatExchangerFluidToFluidByName(t_model, t_name)

def getHeatExchangerFluidToFluidsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > >":
    return _openstudiomodelhvac.getHeatExchangerFluidToFluidsByName(t_model, t_name, t_exactMatch)

def _to_HeatExchangerFluidToFluid(self) -> OptionalHeatExchangerFluidToFluid:
    return toHeatExchangerFluidToFluid(self)
openstudioutilitiesidf.IdfObject.to_HeatExchangerFluidToFluid = _to_HeatExchangerFluidToFluid

def _getHeatExchangerFluidToFluid(self, t_handle: "UUID") -> OptionalHeatExchangerFluidToFluid:
    return getHeatExchangerFluidToFluid(self, t_handle)
Model.getHeatExchangerFluidToFluid = _getHeatExchangerFluidToFluid

def _getHeatExchangerFluidToFluid(self, t_handle_str: str) -> OptionalHeatExchangerFluidToFluid:
    return getHeatExchangerFluidToFluid(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeatExchangerFluidToFluid = _getHeatExchangerFluidToFluid

def _getHeatExchangerFluidToFluids(self) -> HeatExchangerFluidToFluidVector:
    return getHeatExchangerFluidToFluids(self)
Model.getHeatExchangerFluidToFluids = _getHeatExchangerFluidToFluids

def _getHeatExchangerFluidToFluidByName(self, t_name: str) -> OptionalHeatExchangerFluidToFluid:
    return getHeatExchangerFluidToFluidByName(self, t_name)
Model.getHeatExchangerFluidToFluidByName = _getHeatExchangerFluidToFluidByName

def _getHeatExchangerFluidToFluidsByName(self, t_name: str, t_exactMatch: bool) -> HeatExchangerFluidToFluidVector:
    return getHeatExchangerFluidToFluidsByName(self, t_name, t_exactMatch)
Model.getHeatExchangerFluidToFluidsByName = _getHeatExchangerFluidToFluidsByName

class HeatPumpWaterToWaterEquationFitCooling(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_swiginit(self, _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitCooling(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitCooling

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType()

    def referenceLoadSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceLoadSideFlowRate(self)

    def ratedLoadSideFlowRate(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedLoadSideFlowRate(self)

    def isReferenceLoadSideFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isReferenceLoadSideFlowRateAutosized(self)

    def referenceSourceSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceSourceSideFlowRate(self)

    def ratedSourceSideFlowRate(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedSourceSideFlowRate(self)

    def isReferenceSourceSideFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isReferenceSourceSideFlowRateAutosized(self)

    def ratedCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedCoolingCapacity(self)

    def isRatedCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isRatedCoolingCapacityAutosized(self)

    def ratedCoolingPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedCoolingPowerConsumption(self)

    def isRatedCoolingPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isRatedCoolingPowerConsumptionAutosized(self)

    def coolingCapacityCoefficient1(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient1(self)

    def coolingCapacityCoefficient2(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient2(self)

    def coolingCapacityCoefficient3(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient3(self)

    def coolingCapacityCoefficient4(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient4(self)

    def coolingCapacityCoefficient5(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient5(self)

    def coolingCompressorPowerCoefficient1(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient1(self)

    def coolingCompressorPowerCoefficient2(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient2(self)

    def coolingCompressorPowerCoefficient3(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient3(self)

    def coolingCompressorPowerCoefficient4(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient4(self)

    def coolingCompressorPowerCoefficient5(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient5(self)

    def referenceCoefficientofPerformance(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceCoefficientofPerformance(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_sizingFactor(self)

    def companionHeatingHeatPump(self) -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_companionHeatingHeatPump(self)

    def setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate)

    def setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate)

    def autosizeReferenceLoadSideFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeReferenceLoadSideFlowRate(self)

    def setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate)

    def setRatedSourceSideFlowRate(self, ratedSourceSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedSourceSideFlowRate(self, ratedSourceSideFlowRate)

    def autosizeReferenceSourceSideFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeReferenceSourceSideFlowRate(self)

    def setRatedCoolingCapacity(self, ratedCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedCoolingCapacity(self, ratedCoolingCapacity)

    def autosizeRatedCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeRatedCoolingCapacity(self)

    def setRatedCoolingPowerConsumption(self, ratedCoolingPowerConsumption: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedCoolingPowerConsumption(self, ratedCoolingPowerConsumption)

    def autosizeRatedCoolingPowerConsumption(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeRatedCoolingPowerConsumption(self)

    def setCoolingCapacityCoefficient1(self, coolingCapacityCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient1(self, coolingCapacityCoefficient1)

    def setCoolingCapacityCoefficient2(self, coolingCapacityCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient2(self, coolingCapacityCoefficient2)

    def setCoolingCapacityCoefficient3(self, coolingCapacityCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient3(self, coolingCapacityCoefficient3)

    def setCoolingCapacityCoefficient4(self, coolingCapacityCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient4(self, coolingCapacityCoefficient4)

    def setCoolingCapacityCoefficient5(self, coolingCapacityCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient5(self, coolingCapacityCoefficient5)

    def setCoolingCompressorPowerCoefficient1(self, coolingCompressorPowerCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient1(self, coolingCompressorPowerCoefficient1)

    def setCoolingCompressorPowerCoefficient2(self, coolingCompressorPowerCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient2(self, coolingCompressorPowerCoefficient2)

    def setCoolingCompressorPowerCoefficient3(self, coolingCompressorPowerCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient3(self, coolingCompressorPowerCoefficient3)

    def setCoolingCompressorPowerCoefficient4(self, coolingCompressorPowerCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient4(self, coolingCompressorPowerCoefficient4)

    def setCoolingCompressorPowerCoefficient5(self, coolingCompressorPowerCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient5(self, coolingCompressorPowerCoefficient5)

    def setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setSizingFactor(self, sizingFactor)

    def setCompanionHeatingHeatPump(self, companionHP: "HeatPumpWaterToWaterEquationFitHeating") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCompanionHeatingHeatPump(self, companionHP)

    def autosizedReferenceLoadSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedReferenceLoadSideFlowRate(self)

    def autosizedReferenceSourceSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedReferenceSourceSideFlowRate(self)

    def autosizedRatedCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedRatedCoolingCapacity(self)

    def autosizedRatedCoolingPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedRatedCoolingPowerConsumption(self)

# Register HeatPumpWaterToWaterEquationFitCooling in _openstudiomodelhvac:
_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_swigregister(HeatPumpWaterToWaterEquationFitCooling)

def HeatPumpWaterToWaterEquationFitCooling_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType()


def toHeatPumpWaterToWaterEquationFitCooling(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":
    return _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitCooling(idfObject)

def getHeatPumpWaterToWaterEquationFitCooling(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCooling(t_model, t_handle)

def getHeatPumpWaterToWaterEquationFitCoolings(t_model: "Model") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolings(t_model)

def getHeatPumpWaterToWaterEquationFitCoolingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingByName(t_model, t_name)

def getHeatPumpWaterToWaterEquationFitCoolingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingsByName(t_model, t_name, t_exactMatch)

def _to_HeatPumpWaterToWaterEquationFitCooling(self) -> OptionalHeatPumpWaterToWaterEquationFitCooling:
    return toHeatPumpWaterToWaterEquationFitCooling(self)
openstudioutilitiesidf.IdfObject.to_HeatPumpWaterToWaterEquationFitCooling = _to_HeatPumpWaterToWaterEquationFitCooling

def _getHeatPumpWaterToWaterEquationFitCooling(self, t_handle: "UUID") -> OptionalHeatPumpWaterToWaterEquationFitCooling:
    return getHeatPumpWaterToWaterEquationFitCooling(self, t_handle)
Model.getHeatPumpWaterToWaterEquationFitCooling = _getHeatPumpWaterToWaterEquationFitCooling

def _getHeatPumpWaterToWaterEquationFitCooling(self, t_handle_str: str) -> OptionalHeatPumpWaterToWaterEquationFitCooling:
    return getHeatPumpWaterToWaterEquationFitCooling(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeatPumpWaterToWaterEquationFitCooling = _getHeatPumpWaterToWaterEquationFitCooling

def _getHeatPumpWaterToWaterEquationFitCoolings(self) -> HeatPumpWaterToWaterEquationFitCoolingVector:
    return getHeatPumpWaterToWaterEquationFitCoolings(self)
Model.getHeatPumpWaterToWaterEquationFitCoolings = _getHeatPumpWaterToWaterEquationFitCoolings

def _getHeatPumpWaterToWaterEquationFitCoolingByName(self, t_name: str) -> OptionalHeatPumpWaterToWaterEquationFitCooling:
    return getHeatPumpWaterToWaterEquationFitCoolingByName(self, t_name)
Model.getHeatPumpWaterToWaterEquationFitCoolingByName = _getHeatPumpWaterToWaterEquationFitCoolingByName

def _getHeatPumpWaterToWaterEquationFitCoolingsByName(self, t_name: str, t_exactMatch: bool) -> HeatPumpWaterToWaterEquationFitCoolingVector:
    return getHeatPumpWaterToWaterEquationFitCoolingsByName(self, t_name, t_exactMatch)
Model.getHeatPumpWaterToWaterEquationFitCoolingsByName = _getHeatPumpWaterToWaterEquationFitCoolingsByName

class HeatPumpWaterToWaterEquationFitHeating(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_swiginit(self, _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitHeating(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitHeating

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType()

    def referenceLoadSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceLoadSideFlowRate(self)

    def ratedLoadSideFlowRate(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedLoadSideFlowRate(self)

    def isReferenceLoadSideFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isReferenceLoadSideFlowRateAutosized(self)

    def referenceSourceSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceSourceSideFlowRate(self)

    def ratedSourceSideFlowRate(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedSourceSideFlowRate(self)

    def isReferenceSourceSideFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isReferenceSourceSideFlowRateAutosized(self)

    def ratedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedHeatingCapacity(self)

    def isRatedHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isRatedHeatingCapacityAutosized(self)

    def ratedHeatingPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedHeatingPowerConsumption(self)

    def isRatedHeatingPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isRatedHeatingPowerConsumptionAutosized(self)

    def heatingCapacityCoefficient1(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient1(self)

    def heatingCapacityCoefficient2(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient2(self)

    def heatingCapacityCoefficient3(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient3(self)

    def heatingCapacityCoefficient4(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient4(self)

    def heatingCapacityCoefficient5(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient5(self)

    def heatingCompressorPowerCoefficient1(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient1(self)

    def heatingCompressorPowerCoefficient2(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient2(self)

    def heatingCompressorPowerCoefficient3(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient3(self)

    def heatingCompressorPowerCoefficient4(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient4(self)

    def heatingCompressorPowerCoefficient5(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient5(self)

    def referenceCoefficientofPerformance(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceCoefficientofPerformance(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_sizingFactor(self)

    def companionCoolingHeatPump(self) -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_companionCoolingHeatPump(self)

    def setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate)

    def setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate)

    def autosizeReferenceLoadSideFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeReferenceLoadSideFlowRate(self)

    def setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate)

    def setRatedSourceSideFlowRate(self, ratedLoadSideFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedSourceSideFlowRate(self, ratedLoadSideFlowRate)

    def autosizeReferenceSourceSideFlowRate(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeReferenceSourceSideFlowRate(self)

    def setRatedHeatingCapacity(self, ratedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedHeatingCapacity(self, ratedHeatingCapacity)

    def autosizeRatedHeatingCapacity(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeRatedHeatingCapacity(self)

    def setRatedHeatingPowerConsumption(self, ratedHeatingPowerConsumption: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedHeatingPowerConsumption(self, ratedHeatingPowerConsumption)

    def autosizeRatedHeatingPowerConsumption(self) -> "void":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeRatedHeatingPowerConsumption(self)

    def setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1)

    def setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2)

    def setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3)

    def setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4)

    def setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5)

    def setHeatingCompressorPowerCoefficient1(self, heatingCompressorPowerCoefficient1: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient1(self, heatingCompressorPowerCoefficient1)

    def setHeatingCompressorPowerCoefficient2(self, heatingCompressorPowerCoefficient2: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient2(self, heatingCompressorPowerCoefficient2)

    def setHeatingCompressorPowerCoefficient3(self, heatingCompressorPowerCoefficient3: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient3(self, heatingCompressorPowerCoefficient3)

    def setHeatingCompressorPowerCoefficient4(self, heatingCompressorPowerCoefficient4: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient4(self, heatingCompressorPowerCoefficient4)

    def setHeatingCompressorPowerCoefficient5(self, heatingCompressorPowerCoefficient5: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient5(self, heatingCompressorPowerCoefficient5)

    def setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setSizingFactor(self, sizingFactor)

    def setCompanionCoolingHeatPump(self, companionHP: "HeatPumpWaterToWaterEquationFitCooling") -> "bool":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setCompanionCoolingHeatPump(self, companionHP)

    def autosizedReferenceLoadSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedReferenceLoadSideFlowRate(self)

    def autosizedReferenceSourceSideFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedReferenceSourceSideFlowRate(self)

    def autosizedRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedRatedHeatingCapacity(self)

    def autosizedRatedHeatingPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedRatedHeatingPowerConsumption(self)

# Register HeatPumpWaterToWaterEquationFitHeating in _openstudiomodelhvac:
_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_swigregister(HeatPumpWaterToWaterEquationFitHeating)

def HeatPumpWaterToWaterEquationFitHeating_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType()


def toHeatPumpWaterToWaterEquationFitHeating(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":
    return _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitHeating(idfObject)

def getHeatPumpWaterToWaterEquationFitHeating(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeating(t_model, t_handle)

def getHeatPumpWaterToWaterEquationFitHeatings(t_model: "Model") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatings(t_model)

def getHeatPumpWaterToWaterEquationFitHeatingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingByName(t_model, t_name)

def getHeatPumpWaterToWaterEquationFitHeatingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > >":
    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingsByName(t_model, t_name, t_exactMatch)

def _to_HeatPumpWaterToWaterEquationFitHeating(self) -> OptionalHeatPumpWaterToWaterEquationFitHeating:
    return toHeatPumpWaterToWaterEquationFitHeating(self)
openstudioutilitiesidf.IdfObject.to_HeatPumpWaterToWaterEquationFitHeating = _to_HeatPumpWaterToWaterEquationFitHeating

def _getHeatPumpWaterToWaterEquationFitHeating(self, t_handle: "UUID") -> OptionalHeatPumpWaterToWaterEquationFitHeating:
    return getHeatPumpWaterToWaterEquationFitHeating(self, t_handle)
Model.getHeatPumpWaterToWaterEquationFitHeating = _getHeatPumpWaterToWaterEquationFitHeating

def _getHeatPumpWaterToWaterEquationFitHeating(self, t_handle_str: str) -> OptionalHeatPumpWaterToWaterEquationFitHeating:
    return getHeatPumpWaterToWaterEquationFitHeating(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeatPumpWaterToWaterEquationFitHeating = _getHeatPumpWaterToWaterEquationFitHeating

def _getHeatPumpWaterToWaterEquationFitHeatings(self) -> HeatPumpWaterToWaterEquationFitHeatingVector:
    return getHeatPumpWaterToWaterEquationFitHeatings(self)
Model.getHeatPumpWaterToWaterEquationFitHeatings = _getHeatPumpWaterToWaterEquationFitHeatings

def _getHeatPumpWaterToWaterEquationFitHeatingByName(self, t_name: str) -> OptionalHeatPumpWaterToWaterEquationFitHeating:
    return getHeatPumpWaterToWaterEquationFitHeatingByName(self, t_name)
Model.getHeatPumpWaterToWaterEquationFitHeatingByName = _getHeatPumpWaterToWaterEquationFitHeatingByName

def _getHeatPumpWaterToWaterEquationFitHeatingsByName(self, t_name: str, t_exactMatch: bool) -> HeatPumpWaterToWaterEquationFitHeatingVector:
    return getHeatPumpWaterToWaterEquationFitHeatingsByName(self, t_name, t_exactMatch)
Model.getHeatPumpWaterToWaterEquationFitHeatingsByName = _getHeatPumpWaterToWaterEquationFitHeatingsByName

class ThermalStorageChilledWaterStratified(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ThermalStorageChilledWaterStratified_swiginit(self, _openstudiomodelhvac.new_ThermalStorageChilledWaterStratified(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalStorageChilledWaterStratified

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType()

    @staticmethod
    def tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues()

    @staticmethod
    def ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues()

    @staticmethod
    def inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues()

    def tankVolume(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankVolume(self)

    def tankHeight(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankHeight(self)

    def tankShape(self) -> "std::string":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShape(self)

    def tankPerimeter(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankPerimeter(self)

    def setpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setpointTemperatureSchedule(self)

    def deadbandTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_deadbandTemperatureDifference(self)

    def temperatureSensorHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_temperatureSensorHeight(self)

    def minimumTemperatureLimit(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_minimumTemperatureLimit(self)

    def nominalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_nominalCoolingCapacity(self)

    def ambientTemperatureIndicator(self) -> "std::string":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicator(self)

    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureSchedule(self)

    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureThermalZone(self)

    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureOutdoorAirNodeName(self)

    def uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)

    def useSideHeatTransferEffectiveness(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideHeatTransferEffectiveness(self)

    def useSideAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideAvailabilitySchedule(self)

    def useSideInletHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideInletHeight(self)

    def isUseSideInletHeightAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isUseSideInletHeightAutocalculated(self)

    def useSideOutletHeight(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideOutletHeight(self)

    def useSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideDesignFlowRate(self)

    def isUseSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isUseSideDesignFlowRateAutosized(self)

    def sourceSideHeatTransferEffectiveness(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideHeatTransferEffectiveness(self)

    def sourceSideAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideAvailabilitySchedule(self)

    def sourceSideInletHeight(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideInletHeight(self)

    def sourceSideOutletHeight(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideOutletHeight(self)

    def isSourceSideOutletHeightAutocalculated(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isSourceSideOutletHeightAutocalculated(self)

    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideDesignFlowRate(self)

    def isSourceSideDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isSourceSideDesignFlowRateAutosized(self)

    def tankRecoveryTime(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankRecoveryTime(self)

    def inletMode(self) -> "std::string":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletMode(self)

    def numberofNodes(self) -> "int":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_numberofNodes(self)

    def additionalDestratificationConductivity(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_additionalDestratificationConductivity(self)

    def node1AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node1AdditionalLossCoefficient(self)

    def node2AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node2AdditionalLossCoefficient(self)

    def node3AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node3AdditionalLossCoefficient(self)

    def node4AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node4AdditionalLossCoefficient(self)

    def node5AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node5AdditionalLossCoefficient(self)

    def node6AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node6AdditionalLossCoefficient(self)

    def node7AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node7AdditionalLossCoefficient(self)

    def node8AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node8AdditionalLossCoefficient(self)

    def node9AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node9AdditionalLossCoefficient(self)

    def node10AdditionalLossCoefficient(self) -> "double":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node10AdditionalLossCoefficient(self)

    def setTankVolume(self, tankVolume: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankVolume(self, tankVolume)

    def setTankHeight(self, tankHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankHeight(self, tankHeight)

    def setTankShape(self, tankShape: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankShape(self, tankShape)

    def setTankPerimeter(self, tankPerimeter: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankPerimeter(self, tankPerimeter)

    def resetTankPerimeter(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetTankPerimeter(self)

    def setSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSetpointTemperatureSchedule(self, schedule)

    def resetSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetSetpointTemperatureSchedule(self)

    def setDeadbandTemperatureDifference(self, deadbandTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setDeadbandTemperatureDifference(self, deadbandTemperatureDifference)

    def setTemperatureSensorHeight(self, temperatureSensorHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTemperatureSensorHeight(self, temperatureSensorHeight)

    def resetTemperatureSensorHeight(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetTemperatureSensorHeight(self)

    def setMinimumTemperatureLimit(self, minimumTemperatureLimit: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setMinimumTemperatureLimit(self, minimumTemperatureLimit)

    def resetMinimumTemperatureLimit(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetMinimumTemperatureLimit(self)

    def setNominalCoolingCapacity(self, nominalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNominalCoolingCapacity(self, nominalCoolingCapacity)

    def resetNominalCoolingCapacity(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetNominalCoolingCapacity(self)

    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)

    def setAmbientTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureSchedule(self, schedule)

    def resetAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureSchedule(self)

    def setAmbientTemperatureThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureThermalZone(self, thermalZone)

    def resetAmbientTemperatureThermalZone(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureThermalZone(self)

    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)

    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureOutdoorAirNodeName(self)

    def setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature)

    def resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)

    def setUseSideHeatTransferEffectiveness(self, useSideHeatTransferEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideHeatTransferEffectiveness(self, useSideHeatTransferEffectiveness)

    def setUseSideAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideAvailabilitySchedule(self, schedule)

    def resetUseSideAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetUseSideAvailabilitySchedule(self)

    def setUseSideInletHeight(self, useSideInletHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideInletHeight(self, useSideInletHeight)

    def autocalculateUseSideInletHeight(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autocalculateUseSideInletHeight(self)

    def setUseSideOutletHeight(self, useSideOutletHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideOutletHeight(self, useSideOutletHeight)

    def setUseSideDesignFlowRate(self, useSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideDesignFlowRate(self, useSideDesignFlowRate)

    def autosizeUseSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizeUseSideDesignFlowRate(self)

    def setSourceSideHeatTransferEffectiveness(self, sourceSideHeatTransferEffectiveness: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideHeatTransferEffectiveness(self, sourceSideHeatTransferEffectiveness)

    def setSourceSideAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideAvailabilitySchedule(self, schedule)

    def resetSourceSideAvailabilitySchedule(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetSourceSideAvailabilitySchedule(self)

    def setSourceSideInletHeight(self, sourceSideInletHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideInletHeight(self, sourceSideInletHeight)

    def setSourceSideOutletHeight(self, sourceSideOutletHeight: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideOutletHeight(self, sourceSideOutletHeight)

    def autocalculateSourceSideOutletHeight(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autocalculateSourceSideOutletHeight(self)

    def setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate)

    def autosizeSourceSideDesignFlowRate(self) -> "void":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizeSourceSideDesignFlowRate(self)

    def setTankRecoveryTime(self, tankRecoveryTime: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankRecoveryTime(self, tankRecoveryTime)

    def setInletMode(self, inletMode: "std::string") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setInletMode(self, inletMode)

    def setNumberofNodes(self, numberofNodes: "int") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNumberofNodes(self, numberofNodes)

    def setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity)

    def setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient)

    def setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient)

    def setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient)

    def setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient)

    def setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient)

    def setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient)

    def setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient)

    def setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient)

    def setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient)

    def setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient: "double") -> "bool":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient)

    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizedUseSideDesignFlowRate(self)

    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizedSourceSideDesignFlowRate(self)

# Register ThermalStorageChilledWaterStratified in _openstudiomodelhvac:
_openstudiomodelhvac.ThermalStorageChilledWaterStratified_swigregister(ThermalStorageChilledWaterStratified)

def ThermalStorageChilledWaterStratified_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType()

def ThermalStorageChilledWaterStratified_tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues()

def ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues()

def ThermalStorageChilledWaterStratified_inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues()


def toThermalStorageChilledWaterStratified(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":
    return _openstudiomodelhvac.toThermalStorageChilledWaterStratified(idfObject)

def getThermalStorageChilledWaterStratified(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":
    return _openstudiomodelhvac.getThermalStorageChilledWaterStratified(t_model, t_handle)

def getThermalStorageChilledWaterStratifieds(t_model: "Model") -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > >":
    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifieds(t_model)

def getThermalStorageChilledWaterStratifiedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":
    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedByName(t_model, t_name)

def getThermalStorageChilledWaterStratifiedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > >":
    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedsByName(t_model, t_name, t_exactMatch)

def _to_ThermalStorageChilledWaterStratified(self) -> OptionalThermalStorageChilledWaterStratified:
    return toThermalStorageChilledWaterStratified(self)
openstudioutilitiesidf.IdfObject.to_ThermalStorageChilledWaterStratified = _to_ThermalStorageChilledWaterStratified

def _getThermalStorageChilledWaterStratified(self, t_handle: "UUID") -> OptionalThermalStorageChilledWaterStratified:
    return getThermalStorageChilledWaterStratified(self, t_handle)
Model.getThermalStorageChilledWaterStratified = _getThermalStorageChilledWaterStratified

def _getThermalStorageChilledWaterStratified(self, t_handle_str: str) -> OptionalThermalStorageChilledWaterStratified:
    return getThermalStorageChilledWaterStratified(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermalStorageChilledWaterStratified = _getThermalStorageChilledWaterStratified

def _getThermalStorageChilledWaterStratifieds(self) -> ThermalStorageChilledWaterStratifiedVector:
    return getThermalStorageChilledWaterStratifieds(self)
Model.getThermalStorageChilledWaterStratifieds = _getThermalStorageChilledWaterStratifieds

def _getThermalStorageChilledWaterStratifiedByName(self, t_name: str) -> OptionalThermalStorageChilledWaterStratified:
    return getThermalStorageChilledWaterStratifiedByName(self, t_name)
Model.getThermalStorageChilledWaterStratifiedByName = _getThermalStorageChilledWaterStratifiedByName

def _getThermalStorageChilledWaterStratifiedsByName(self, t_name: str, t_exactMatch: bool) -> ThermalStorageChilledWaterStratifiedVector:
    return getThermalStorageChilledWaterStratifiedsByName(self, t_name, t_exactMatch)
Model.getThermalStorageChilledWaterStratifiedsByName = _getThermalStorageChilledWaterStratifiedsByName

class ChillerAbsorptionIndirect(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ChillerAbsorptionIndirect_swiginit(self, _openstudiomodelhvac.new_ChillerAbsorptionIndirect(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionIndirect

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType()

    @staticmethod
    def chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues()

    @staticmethod
    def generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues()

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isNominalCapacityAutosized(self)

    def nominalPumpingPower(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_nominalPumpingPower(self)

    def isNominalPumpingPowerAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isNominalPumpingPowerAutosized(self)

    def minimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_minimumPartLoadRatio(self)

    def maximumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_maximumPartLoadRatio(self)

    def optimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_optimumPartLoadRatio(self)

    def designCondenserInletTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designCondenserInletTemperature(self)

    def condenserInletTemperatureLowerLimit(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_condenserInletTemperatureLowerLimit(self)

    def chilledWaterOutletTemperatureLowerLimit(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chilledWaterOutletTemperatureLowerLimit(self)

    def designChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designChilledWaterFlowRate(self)

    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignChilledWaterFlowRateAutosized(self)

    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designCondenserWaterFlowRate(self)

    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignCondenserWaterFlowRateAutosized(self)

    def chillerFlowMode(self) -> "std::string":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowMode(self)

    def generatorHeatInputFunctionofPartLoadRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputFunctionofPartLoadRatioCurve(self)

    def pumpElectricInputFunctionofPartLoadRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_pumpElectricInputFunctionofPartLoadRatioCurve(self)

    def capacityCorrectionFunctionofCondenserTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofCondenserTemperatureCurve(self)

    def capacityCorrectionFunctionofChilledWaterTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofChilledWaterTemperatureCurve(self)

    def capacityCorrectionFunctionofGeneratorTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofGeneratorTemperatureCurve(self)

    def generatorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self)

    def generatorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self)

    def generatorHeatSourceType(self) -> "std::string":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceType(self)

    def designGeneratorFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designGeneratorFluidFlowRate(self)

    def isDesignGeneratorFluidFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignGeneratorFluidFlowRateAutosized(self)

    def temperatureLowerLimitGeneratorInlet(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_temperatureLowerLimitGeneratorInlet(self)

    def degreeofSubcoolinginSteamGenerator(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_degreeofSubcoolinginSteamGenerator(self)

    def degreeofSubcoolinginSteamCondensateLoop(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_degreeofSubcoolinginSteamCondensateLoop(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_sizingFactor(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setNominalCapacity(self, nominalCapacity)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeNominalCapacity(self)

    def setNominalPumpingPower(self, nominalPumpingPower: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setNominalPumpingPower(self, nominalPumpingPower)

    def autosizeNominalPumpingPower(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeNominalPumpingPower(self)

    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setMinimumPartLoadRatio(self, minimumPartLoadRatio)

    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setMaximumPartLoadRatio(self, maximumPartLoadRatio)

    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setOptimumPartLoadRatio(self, optimumPartLoadRatio)

    def setDesignCondenserInletTemperature(self, designCondenserInletTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignCondenserInletTemperature(self, designCondenserInletTemperature)

    def setCondenserInletTemperatureLowerLimit(self, condenserInletTemperatureLowerLimit: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCondenserInletTemperatureLowerLimit(self, condenserInletTemperatureLowerLimit)

    def setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit)

    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)

    def autosizeDesignChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignChilledWaterFlowRate(self)

    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)

    def autosizeDesignCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignCondenserWaterFlowRate(self)

    def setChillerFlowMode(self, chillerFlowMode: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setChillerFlowMode(self, chillerFlowMode)

    def setGeneratorHeatInputFunctionofPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputFunctionofPartLoadRatioCurve(self, curve)

    def setPumpElectricInputFunctionofPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setPumpElectricInputFunctionofPartLoadRatioCurve(self, curve)

    def setCapacityCorrectionFunctionofCondenserTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofCondenserTemperatureCurve(self, curve)

    def setCapacityCorrectionFunctionofChilledWaterTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofChilledWaterTemperatureCurve(self, curve)

    def setCapacityCorrectionFunctionofGeneratorTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofGeneratorTemperatureCurve(self, curve)

    def setGeneratorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self, curve)

    def setGeneratorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self, curve)

    def setGeneratorHeatSourceType(self, generatorHeatSourceType: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatSourceType(self, generatorHeatSourceType)

    def setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate)

    def autosizeDesignGeneratorFluidFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignGeneratorFluidFlowRate(self)

    def setTemperatureLowerLimitGeneratorInlet(self, temperatureLowerLimitGeneratorInlet: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setTemperatureLowerLimitGeneratorInlet(self, temperatureLowerLimitGeneratorInlet)

    def setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator)

    def setDegreeofSubcoolinginSteamCondensateLoop(self, degreeofSubcoolinginSteamCondensateLoop: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDegreeofSubcoolinginSteamCondensateLoop(self, degreeofSubcoolinginSteamCondensateLoop)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setSizingFactor(self, sizingFactor)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedNominalCapacity(self)

    def autosizedNominalPumpingPower(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedNominalPumpingPower(self)

    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignChilledWaterFlowRate(self)

    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignCondenserWaterFlowRate(self)

    def autosizedDesignGeneratorFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignGeneratorFluidFlowRate(self)

    def chilledWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chilledWaterLoop(self)

    def condenserWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_condenserWaterLoop(self)

    def generatorLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorLoop(self)

# Register ChillerAbsorptionIndirect in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerAbsorptionIndirect_swigregister(ChillerAbsorptionIndirect)

def ChillerAbsorptionIndirect_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType()

def ChillerAbsorptionIndirect_chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues()

def ChillerAbsorptionIndirect_generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues()


def toChillerAbsorptionIndirect(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":
    return _openstudiomodelhvac.toChillerAbsorptionIndirect(idfObject)

def getChillerAbsorptionIndirect(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":
    return _openstudiomodelhvac.getChillerAbsorptionIndirect(t_model, t_handle)

def getChillerAbsorptionIndirects(t_model: "Model") -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > >":
    return _openstudiomodelhvac.getChillerAbsorptionIndirects(t_model)

def getChillerAbsorptionIndirectByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":
    return _openstudiomodelhvac.getChillerAbsorptionIndirectByName(t_model, t_name)

def getChillerAbsorptionIndirectsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > >":
    return _openstudiomodelhvac.getChillerAbsorptionIndirectsByName(t_model, t_name, t_exactMatch)

def _to_ChillerAbsorptionIndirect(self) -> OptionalChillerAbsorptionIndirect:
    return toChillerAbsorptionIndirect(self)
openstudioutilitiesidf.IdfObject.to_ChillerAbsorptionIndirect = _to_ChillerAbsorptionIndirect

def _getChillerAbsorptionIndirect(self, t_handle: "UUID") -> OptionalChillerAbsorptionIndirect:
    return getChillerAbsorptionIndirect(self, t_handle)
Model.getChillerAbsorptionIndirect = _getChillerAbsorptionIndirect

def _getChillerAbsorptionIndirect(self, t_handle_str: str) -> OptionalChillerAbsorptionIndirect:
    return getChillerAbsorptionIndirect(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getChillerAbsorptionIndirect = _getChillerAbsorptionIndirect

def _getChillerAbsorptionIndirects(self) -> ChillerAbsorptionIndirectVector:
    return getChillerAbsorptionIndirects(self)
Model.getChillerAbsorptionIndirects = _getChillerAbsorptionIndirects

def _getChillerAbsorptionIndirectByName(self, t_name: str) -> OptionalChillerAbsorptionIndirect:
    return getChillerAbsorptionIndirectByName(self, t_name)
Model.getChillerAbsorptionIndirectByName = _getChillerAbsorptionIndirectByName

def _getChillerAbsorptionIndirectsByName(self, t_name: str, t_exactMatch: bool) -> ChillerAbsorptionIndirectVector:
    return getChillerAbsorptionIndirectsByName(self, t_name, t_exactMatch)
Model.getChillerAbsorptionIndirectsByName = _getChillerAbsorptionIndirectsByName

class ChillerAbsorption(WaterToWaterComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.ChillerAbsorption_swiginit(self, _openstudiomodelhvac.new_ChillerAbsorption(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorption

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.ChillerAbsorption_iddObjectType()

    @staticmethod
    def chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues()

    @staticmethod
    def generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues()

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_isNominalCapacityAutosized(self)

    def nominalPumpingPower(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_nominalPumpingPower(self)

    def isNominalPumpingPowerAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_isNominalPumpingPowerAutosized(self)

    def minimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_minimumPartLoadRatio(self)

    def maximumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_maximumPartLoadRatio(self)

    def optimumPartLoadRatio(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_optimumPartLoadRatio(self)

    def designCondenserInletTemperature(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_designCondenserInletTemperature(self)

    def designChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_designChilledWaterFlowRate(self)

    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_isDesignChilledWaterFlowRateAutosized(self)

    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_designCondenserWaterFlowRate(self)

    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_isDesignCondenserWaterFlowRateAutosized(self)

    def coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self)

    def coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self)

    def coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self)

    def coefficient1ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient1ofthePumpElectricUsePartLoadRatioCurve(self)

    def coefficient2ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient2ofthePumpElectricUsePartLoadRatioCurve(self)

    def coefficient3ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_coefficient3ofthePumpElectricUsePartLoadRatioCurve(self)

    def chilledWaterOutletTemperatureLowerLimit(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_chilledWaterOutletTemperatureLowerLimit(self)

    def chillerFlowMode(self) -> "std::string":
        return _openstudiomodelhvac.ChillerAbsorption_chillerFlowMode(self)

    def generatorHeatSourceType(self) -> "std::string":
        return _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceType(self)

    def designGeneratorFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_designGeneratorFluidFlowRate(self)

    def isDesignGeneratorFluidFlowRateAutosized(self) -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_isDesignGeneratorFluidFlowRateAutosized(self)

    def degreeofSubcoolinginSteamGenerator(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_degreeofSubcoolinginSteamGenerator(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelhvac.ChillerAbsorption_sizingFactor(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setNominalCapacity(self, nominalCapacity)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorption_autosizeNominalCapacity(self)

    def setNominalPumpingPower(self, nominalPumpingPower: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setNominalPumpingPower(self, nominalPumpingPower)

    def autosizeNominalPumpingPower(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorption_autosizeNominalPumpingPower(self)

    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setMinimumPartLoadRatio(self, minimumPartLoadRatio)

    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setMaximumPartLoadRatio(self, maximumPartLoadRatio)

    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setOptimumPartLoadRatio(self, optimumPartLoadRatio)

    def setDesignCondenserInletTemperature(self, designCondenserInletTemperature: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setDesignCondenserInletTemperature(self, designCondenserInletTemperature)

    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)

    def autosizeDesignChilledWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignChilledWaterFlowRate(self)

    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)

    def autosizeDesignCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignCondenserWaterFlowRate(self)

    def setCoefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve)

    def setCoefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve)

    def setCoefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve)

    def setCoefficient1ofthePumpElectricUsePartLoadRatioCurve(self, coefficient1ofthePumpElectricUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient1ofthePumpElectricUsePartLoadRatioCurve(self, coefficient1ofthePumpElectricUsePartLoadRatioCurve)

    def setCoefficient2ofthePumpElectricUsePartLoadRatioCurve(self, coefficient2ofthePumpElectricUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient2ofthePumpElectricUsePartLoadRatioCurve(self, coefficient2ofthePumpElectricUsePartLoadRatioCurve)

    def setCoefficient3ofthePumpElectricUsePartLoadRatioCurve(self, coefficient3ofthePumpElectricUsePartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient3ofthePumpElectricUsePartLoadRatioCurve(self, coefficient3ofthePumpElectricUsePartLoadRatioCurve)

    def setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit)

    def setChillerFlowMode(self, chillerFlowMode: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setChillerFlowMode(self, chillerFlowMode)

    def setGeneratorHeatSourceType(self, generatorHeatSourceType: "std::string") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setGeneratorHeatSourceType(self, generatorHeatSourceType)

    def setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate)

    def autosizeDesignGeneratorFluidFlowRate(self) -> "void":
        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignGeneratorFluidFlowRate(self)

    def setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelhvac.ChillerAbsorption_setSizingFactor(self, sizingFactor)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_autosizedNominalCapacity(self)

    def autosizedNominalPumpingPower(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_autosizedNominalPumpingPower(self)

    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignChilledWaterFlowRate(self)

    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignCondenserWaterFlowRate(self)

    def autosizedDesignGeneratorFluidFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignGeneratorFluidFlowRate(self)

    def chilledWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorption_chilledWaterLoop(self)

    def condenserWaterLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorption_condenserWaterLoop(self)

    def generatorLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelhvac.ChillerAbsorption_generatorLoop(self)

# Register ChillerAbsorption in _openstudiomodelhvac:
_openstudiomodelhvac.ChillerAbsorption_swigregister(ChillerAbsorption)

def ChillerAbsorption_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.ChillerAbsorption_iddObjectType()

def ChillerAbsorption_chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues()

def ChillerAbsorption_generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues()


def toChillerAbsorption(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ChillerAbsorption >":
    return _openstudiomodelhvac.toChillerAbsorption(idfObject)

def getChillerAbsorption(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ChillerAbsorption >":
    return _openstudiomodelhvac.getChillerAbsorption(t_model, t_handle)

def getChillerAbsorptions(t_model: "Model") -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > >":
    return _openstudiomodelhvac.getChillerAbsorptions(t_model)

def getChillerAbsorptionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ChillerAbsorption >":
    return _openstudiomodelhvac.getChillerAbsorptionByName(t_model, t_name)

def getChillerAbsorptionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > >":
    return _openstudiomodelhvac.getChillerAbsorptionsByName(t_model, t_name, t_exactMatch)

def _to_ChillerAbsorption(self) -> OptionalChillerAbsorption:
    return toChillerAbsorption(self)
openstudioutilitiesidf.IdfObject.to_ChillerAbsorption = _to_ChillerAbsorption

def _getChillerAbsorption(self, t_handle: "UUID") -> OptionalChillerAbsorption:
    return getChillerAbsorption(self, t_handle)
Model.getChillerAbsorption = _getChillerAbsorption

def _getChillerAbsorption(self, t_handle_str: str) -> OptionalChillerAbsorption:
    return getChillerAbsorption(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getChillerAbsorption = _getChillerAbsorption

def _getChillerAbsorptions(self) -> ChillerAbsorptionVector:
    return getChillerAbsorptions(self)
Model.getChillerAbsorptions = _getChillerAbsorptions

def _getChillerAbsorptionByName(self, t_name: str) -> OptionalChillerAbsorption:
    return getChillerAbsorptionByName(self, t_name)
Model.getChillerAbsorptionByName = _getChillerAbsorptionByName

def _getChillerAbsorptionsByName(self, t_name: str, t_exactMatch: bool) -> ChillerAbsorptionVector:
    return getChillerAbsorptionsByName(self, t_name, t_exactMatch)
Model.getChillerAbsorptionsByName = _getChillerAbsorptionsByName

class SolarCollectorPerformanceFlatPlate(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceFlatPlate

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType()

    @staticmethod
    def testFluidValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues()

    @staticmethod
    def testCorrelationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues()

    def grossArea(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_grossArea(self)

    def testFluid(self) -> "std::string":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluid(self)

    def isTestFluidDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_isTestFluidDefaulted(self)

    def testFlowRate(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFlowRate(self)

    def testCorrelationType(self) -> "std::string":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationType(self)

    def coefficient1ofEfficiencyEquation(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient1ofEfficiencyEquation(self)

    def coefficient2ofEfficiencyEquation(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient2ofEfficiencyEquation(self)

    def coefficient3ofEfficiencyEquation(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient3ofEfficiencyEquation(self)

    def coefficient2ofIncidentAngleModifier(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient2ofIncidentAngleModifier(self)

    def coefficient3ofIncidentAngleModifier(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient3ofIncidentAngleModifier(self)

    def setGrossArea(self, grossArea: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setGrossArea(self, grossArea)

    def setTestFluid(self, testFluid: "std::string") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestFluid(self, testFluid)

    def resetTestFluid(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetTestFluid(self)

    def setTestFlowRate(self, testFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestFlowRate(self, testFlowRate)

    def setTestCorrelationType(self, testCorrelationType: "std::string") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestCorrelationType(self, testCorrelationType)

    def setCoefficient1ofEfficiencyEquation(self, coefficient1ofEfficiencyEquation: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient1ofEfficiencyEquation(self, coefficient1ofEfficiencyEquation)

    def setCoefficient2ofEfficiencyEquation(self, coefficient2ofEfficiencyEquation: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient2ofEfficiencyEquation(self, coefficient2ofEfficiencyEquation)

    def setCoefficient3ofEfficiencyEquation(self, coefficient3ofEfficiencyEquation: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient3ofEfficiencyEquation(self, coefficient3ofEfficiencyEquation)

    def resetCoefficient3ofEfficiencyEquation(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient3ofEfficiencyEquation(self)

    def setCoefficient2ofIncidentAngleModifier(self, coefficient2ofIncidentAngleModifier: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient2ofIncidentAngleModifier(self, coefficient2ofIncidentAngleModifier)

    def resetCoefficient2ofIncidentAngleModifier(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient2ofIncidentAngleModifier(self)

    def setCoefficient3ofIncidentAngleModifier(self, coefficient3ofIncidentAngleModifier: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient3ofIncidentAngleModifier(self, coefficient3ofIncidentAngleModifier)

    def resetCoefficient3ofIncidentAngleModifier(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient3ofIncidentAngleModifier(self)

# Register SolarCollectorPerformanceFlatPlate in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_swigregister(SolarCollectorPerformanceFlatPlate)

def SolarCollectorPerformanceFlatPlate_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType()

def SolarCollectorPerformanceFlatPlate_testFluidValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues()

def SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues()


def toSolarCollectorPerformanceFlatPlate(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":
    return _openstudiomodelhvac.toSolarCollectorPerformanceFlatPlate(idfObject)

def getSolarCollectorPerformanceFlatPlate(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlate(t_model, t_handle)

def getSolarCollectorPerformanceFlatPlates(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlates(t_model)

def getSolarCollectorPerformanceFlatPlateByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlateByName(t_model, t_name)

def getSolarCollectorPerformanceFlatPlatesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlatesByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorPerformanceFlatPlate(self) -> OptionalSolarCollectorPerformanceFlatPlate:
    return toSolarCollectorPerformanceFlatPlate(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorPerformanceFlatPlate = _to_SolarCollectorPerformanceFlatPlate

def _getSolarCollectorPerformanceFlatPlate(self, t_handle: "UUID") -> OptionalSolarCollectorPerformanceFlatPlate:
    return getSolarCollectorPerformanceFlatPlate(self, t_handle)
Model.getSolarCollectorPerformanceFlatPlate = _getSolarCollectorPerformanceFlatPlate

def _getSolarCollectorPerformanceFlatPlate(self, t_handle_str: str) -> OptionalSolarCollectorPerformanceFlatPlate:
    return getSolarCollectorPerformanceFlatPlate(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorPerformanceFlatPlate = _getSolarCollectorPerformanceFlatPlate

def _getSolarCollectorPerformanceFlatPlates(self) -> SolarCollectorPerformanceFlatPlateVector:
    return getSolarCollectorPerformanceFlatPlates(self)
Model.getSolarCollectorPerformanceFlatPlates = _getSolarCollectorPerformanceFlatPlates

def _getSolarCollectorPerformanceFlatPlateByName(self, t_name: str) -> OptionalSolarCollectorPerformanceFlatPlate:
    return getSolarCollectorPerformanceFlatPlateByName(self, t_name)
Model.getSolarCollectorPerformanceFlatPlateByName = _getSolarCollectorPerformanceFlatPlateByName

def _getSolarCollectorPerformanceFlatPlatesByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorPerformanceFlatPlateVector:
    return getSolarCollectorPerformanceFlatPlatesByName(self, t_name, t_exactMatch)
Model.getSolarCollectorPerformanceFlatPlatesByName = _getSolarCollectorPerformanceFlatPlatesByName

class SolarCollectorPerformanceIntegralCollectorStorage(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceIntegralCollectorStorage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType()

    @staticmethod
    def iCSCollectorTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues()

    def iCSCollectorType(self) -> "std::string":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorType(self)

    def isICSCollectorTypeDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isICSCollectorTypeDefaulted(self)

    def grossArea(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_grossArea(self)

    def collectorWaterVolume(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_collectorWaterVolume(self)

    def bottomHeatLossConductance(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_bottomHeatLossConductance(self)

    def isBottomHeatLossConductanceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isBottomHeatLossConductanceDefaulted(self)

    def sideHeatLossConductance(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_sideHeatLossConductance(self)

    def isSideHeatLossConductanceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isSideHeatLossConductanceDefaulted(self)

    def aspectRatio(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_aspectRatio(self)

    def isAspectRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isAspectRatioDefaulted(self)

    def collectorSideHeight(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_collectorSideHeight(self)

    def isCollectorSideHeightDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isCollectorSideHeightDefaulted(self)

    def thermalMassOfAbsorberPlate(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_thermalMassOfAbsorberPlate(self)

    def isThermalMassOfAbsorberPlateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isThermalMassOfAbsorberPlateDefaulted(self)

    def numberOfCovers(self) -> "int":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_numberOfCovers(self)

    def isNumberOfCoversDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isNumberOfCoversDefaulted(self)

    def coverSpacing(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_coverSpacing(self)

    def isCoverSpacingDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isCoverSpacingDefaulted(self)

    def refractiveIndexOfOuterCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_refractiveIndexOfOuterCover(self)

    def isRefractiveIndexOfOuterCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isRefractiveIndexOfOuterCoverDefaulted(self)

    def extinctionCoefficientTimesThicknessOfOuterCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_extinctionCoefficientTimesThicknessOfOuterCover(self)

    def isExtinctionCoefficientTimesThicknessOfOuterCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isExtinctionCoefficientTimesThicknessOfOuterCoverDefaulted(self)

    def emissivityOfOuterCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfOuterCover(self)

    def isEmissivityOfOuterCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfOuterCoverDefaulted(self)

    def refractiveIndexOfInnerCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_refractiveIndexOfInnerCover(self)

    def isRefractiveIndexOfInnerCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isRefractiveIndexOfInnerCoverDefaulted(self)

    def extinctionCoefficientTimesThicknessOfTheInnerCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_extinctionCoefficientTimesThicknessOfTheInnerCover(self)

    def isExtinctionCoefficientTimesThicknessOfTheInnerCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isExtinctionCoefficientTimesThicknessOfTheInnerCoverDefaulted(self)

    def emissivityOfInnerCover(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfInnerCover(self)

    def isEmissivityOfInnerCoverDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfInnerCoverDefaulted(self)

    def absorptanceOfAbsorberPlate(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_absorptanceOfAbsorberPlate(self)

    def isAbsorptanceOfAbsorberPlateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isAbsorptanceOfAbsorberPlateDefaulted(self)

    def emissivityOfAbsorberPlate(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfAbsorberPlate(self)

    def isEmissivityOfAbsorberPlateDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfAbsorberPlateDefaulted(self)

    def setICSCollectorType(self, iCSCollectorType: "std::string") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setICSCollectorType(self, iCSCollectorType)

    def resetICSCollectorType(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetICSCollectorType(self)

    def setGrossArea(self, grossArea: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setGrossArea(self, grossArea)

    def setCollectorWaterVolume(self, collectorWaterVolume: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCollectorWaterVolume(self, collectorWaterVolume)

    def setBottomHeatLossConductance(self, bottomHeatLossConductance: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setBottomHeatLossConductance(self, bottomHeatLossConductance)

    def resetBottomHeatLossConductance(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetBottomHeatLossConductance(self)

    def setSideHeatLossConductance(self, sideHeatLossConductance: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setSideHeatLossConductance(self, sideHeatLossConductance)

    def resetSideHeatLossConductance(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetSideHeatLossConductance(self)

    def setAspectRatio(self, aspectRatio: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setAspectRatio(self, aspectRatio)

    def resetAspectRatio(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetAspectRatio(self)

    def setCollectorSideHeight(self, collectorSideHeight: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCollectorSideHeight(self, collectorSideHeight)

    def resetCollectorSideHeight(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetCollectorSideHeight(self)

    def setThermalMassOfAbsorberPlate(self, thermalMassOfAbsorberPlate: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setThermalMassOfAbsorberPlate(self, thermalMassOfAbsorberPlate)

    def resetThermalMassOfAbsorberPlate(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetThermalMassOfAbsorberPlate(self)

    def setNumberOfCovers(self, numberOfCovers: "int") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setNumberOfCovers(self, numberOfCovers)

    def resetNumberOfCovers(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetNumberOfCovers(self)

    def setCoverSpacing(self, coverSpacing: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCoverSpacing(self, coverSpacing)

    def resetCoverSpacing(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetCoverSpacing(self)

    def setRefractiveIndexOfOuterCover(self, refractiveIndexOfOuterCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setRefractiveIndexOfOuterCover(self, refractiveIndexOfOuterCover)

    def resetRefractiveIndexOfOuterCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetRefractiveIndexOfOuterCover(self)

    def setExtinctionCoefficientTimesThicknessOfOuterCover(self, extinctionCoefficientTimesThicknessOfOuterCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setExtinctionCoefficientTimesThicknessOfOuterCover(self, extinctionCoefficientTimesThicknessOfOuterCover)

    def resetExtinctionCoefficientTimesThicknessOfOuterCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetExtinctionCoefficientTimesThicknessOfOuterCover(self)

    def setEmissivityOfOuterCover(self, emissivityOfOuterCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfOuterCover(self, emissivityOfOuterCover)

    def resetEmissivityOfOuterCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfOuterCover(self)

    def setRefractiveIndexOfInnerCover(self, refractiveIndexOfInnerCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setRefractiveIndexOfInnerCover(self, refractiveIndexOfInnerCover)

    def resetRefractiveIndexOfInnerCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetRefractiveIndexOfInnerCover(self)

    def setExtinctionCoefficientTimesThicknessOfTheInnerCover(self, extinctionCoefficientTimesThicknessOfTheInnerCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setExtinctionCoefficientTimesThicknessOfTheInnerCover(self, extinctionCoefficientTimesThicknessOfTheInnerCover)

    def resetExtinctionCoefficientTimesThicknessOfTheInnerCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetExtinctionCoefficientTimesThicknessOfTheInnerCover(self)

    def setEmissivityOfInnerCover(self, emissivityOfInnerCover: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfInnerCover(self, emissivityOfInnerCover)

    def resetEmissivityOfInnerCover(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfInnerCover(self)

    def setAbsorptanceOfAbsorberPlate(self, absorptanceOfAbsorberPlate: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setAbsorptanceOfAbsorberPlate(self, absorptanceOfAbsorberPlate)

    def resetAbsorptanceOfAbsorberPlate(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetAbsorptanceOfAbsorberPlate(self)

    def setEmissivityOfAbsorberPlate(self, emissivityOfAbsorberPlate: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfAbsorberPlate(self, emissivityOfAbsorberPlate)

    def resetEmissivityOfAbsorberPlate(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfAbsorberPlate(self)

# Register SolarCollectorPerformanceIntegralCollectorStorage in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_swigregister(SolarCollectorPerformanceIntegralCollectorStorage)

def SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType()

def SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues()


def toSolarCollectorPerformanceIntegralCollectorStorage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":
    return _openstudiomodelhvac.toSolarCollectorPerformanceIntegralCollectorStorage(idfObject)

def getSolarCollectorPerformanceIntegralCollectorStorage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorage(t_model, t_handle)

def getSolarCollectorPerformanceIntegralCollectorStorages(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorages(t_model)

def getSolarCollectorPerformanceIntegralCollectorStorageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorageByName(t_model, t_name)

def getSolarCollectorPerformanceIntegralCollectorStoragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > >":
    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStoragesByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorPerformanceIntegralCollectorStorage(self) -> OptionalSolarCollectorPerformanceIntegralCollectorStorage:
    return toSolarCollectorPerformanceIntegralCollectorStorage(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorPerformanceIntegralCollectorStorage = _to_SolarCollectorPerformanceIntegralCollectorStorage

def _getSolarCollectorPerformanceIntegralCollectorStorage(self, t_handle: "UUID") -> OptionalSolarCollectorPerformanceIntegralCollectorStorage:
    return getSolarCollectorPerformanceIntegralCollectorStorage(self, t_handle)
Model.getSolarCollectorPerformanceIntegralCollectorStorage = _getSolarCollectorPerformanceIntegralCollectorStorage

def _getSolarCollectorPerformanceIntegralCollectorStorage(self, t_handle_str: str) -> OptionalSolarCollectorPerformanceIntegralCollectorStorage:
    return getSolarCollectorPerformanceIntegralCollectorStorage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorPerformanceIntegralCollectorStorage = _getSolarCollectorPerformanceIntegralCollectorStorage

def _getSolarCollectorPerformanceIntegralCollectorStorages(self) -> SolarCollectorPerformanceIntegralCollectorStorageVector:
    return getSolarCollectorPerformanceIntegralCollectorStorages(self)
Model.getSolarCollectorPerformanceIntegralCollectorStorages = _getSolarCollectorPerformanceIntegralCollectorStorages

def _getSolarCollectorPerformanceIntegralCollectorStorageByName(self, t_name: str) -> OptionalSolarCollectorPerformanceIntegralCollectorStorage:
    return getSolarCollectorPerformanceIntegralCollectorStorageByName(self, t_name)
Model.getSolarCollectorPerformanceIntegralCollectorStorageByName = _getSolarCollectorPerformanceIntegralCollectorStorageByName

def _getSolarCollectorPerformanceIntegralCollectorStoragesByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorPerformanceIntegralCollectorStorageVector:
    return getSolarCollectorPerformanceIntegralCollectorStoragesByName(self, t_name, t_exactMatch)
Model.getSolarCollectorPerformanceIntegralCollectorStoragesByName = _getSolarCollectorPerformanceIntegralCollectorStoragesByName

class SolarCollectorPerformancePhotovoltaicThermalSimple(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformancePhotovoltaicThermalSimple

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType()

    @staticmethod
    def thermalConversionEfficiencyInputModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues()

    def fractionOfSurfaceAreaWithActiveThermalCollector(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_fractionOfSurfaceAreaWithActiveThermalCollector(self)

    def thermalConversionEfficiencyInputModeType(self) -> "std::string":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeType(self)

    def thermalConversionEfficiency(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiency(self)

    def thermalConversionEfficiencySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencySchedule(self)

    def frontSurfaceEmittance(self) -> "double":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_frontSurfaceEmittance(self)

    def isFrontSurfaceEmittanceDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_isFrontSurfaceEmittanceDefaulted(self)

    def setFractionOfSurfaceAreaWithActiveThermalCollector(self, fractionofSurfaceAreawithActiveThermalCollector: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setFractionOfSurfaceAreaWithActiveThermalCollector(self, fractionofSurfaceAreawithActiveThermalCollector)

    def setThermalConversionEfficiency(self, fixedThermalConversionEfficiency: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setThermalConversionEfficiency(self, fixedThermalConversionEfficiency)

    def resetThermalConversionEfficiency(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetThermalConversionEfficiency(self)

    def setThermalConversionEfficiencySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setThermalConversionEfficiencySchedule(self, schedule)

    def resetThermalConversionEfficiencySchedule(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetThermalConversionEfficiencySchedule(self)

    def setFrontSurfaceEmittance(self, frontSurfaceEmittance: "double") -> "bool":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setFrontSurfaceEmittance(self, frontSurfaceEmittance)

    def resetFrontSurfaceEmittance(self) -> "void":
        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetFrontSurfaceEmittance(self)

# Register SolarCollectorPerformancePhotovoltaicThermalSimple in _openstudiomodelhvac:
_openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_swigregister(SolarCollectorPerformancePhotovoltaicThermalSimple)

def SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType()

def SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues()


def toSolarCollectorPerformancePhotovoltaicThermalSimple(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":
    return _openstudiomodelhvac.toSolarCollectorPerformancePhotovoltaicThermalSimple(idfObject)

def getSolarCollectorPerformancePhotovoltaicThermalSimple(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":
    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimple(t_model, t_handle)

def getSolarCollectorPerformancePhotovoltaicThermalSimples(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > >":
    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimples(t_model)

def getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":
    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(t_model, t_name)

def getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > >":
    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorPerformancePhotovoltaicThermalSimple(self) -> OptionalSolarCollectorPerformancePhotovoltaicThermalSimple:
    return toSolarCollectorPerformancePhotovoltaicThermalSimple(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorPerformancePhotovoltaicThermalSimple = _to_SolarCollectorPerformancePhotovoltaicThermalSimple

def _getSolarCollectorPerformancePhotovoltaicThermalSimple(self, t_handle: "UUID") -> OptionalSolarCollectorPerformancePhotovoltaicThermalSimple:
    return getSolarCollectorPerformancePhotovoltaicThermalSimple(self, t_handle)
Model.getSolarCollectorPerformancePhotovoltaicThermalSimple = _getSolarCollectorPerformancePhotovoltaicThermalSimple

def _getSolarCollectorPerformancePhotovoltaicThermalSimple(self, t_handle_str: str) -> OptionalSolarCollectorPerformancePhotovoltaicThermalSimple:
    return getSolarCollectorPerformancePhotovoltaicThermalSimple(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorPerformancePhotovoltaicThermalSimple = _getSolarCollectorPerformancePhotovoltaicThermalSimple

def _getSolarCollectorPerformancePhotovoltaicThermalSimples(self) -> SolarCollectorPerformancePhotovoltaicThermalSimpleVector:
    return getSolarCollectorPerformancePhotovoltaicThermalSimples(self)
Model.getSolarCollectorPerformancePhotovoltaicThermalSimples = _getSolarCollectorPerformancePhotovoltaicThermalSimples

def _getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(self, t_name: str) -> OptionalSolarCollectorPerformancePhotovoltaicThermalSimple:
    return getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(self, t_name)
Model.getSolarCollectorPerformancePhotovoltaicThermalSimpleByName = _getSolarCollectorPerformancePhotovoltaicThermalSimpleByName

def _getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorPerformancePhotovoltaicThermalSimpleVector:
    return getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(self, t_name, t_exactMatch)
Model.getSolarCollectorPerformancePhotovoltaicThermalSimplesByName = _getSolarCollectorPerformancePhotovoltaicThermalSimplesByName

class SwimmingPoolIndoor(StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", floorSurface: "Surface"):
        _openstudiomodelhvac.SwimmingPoolIndoor_swiginit(self, _openstudiomodelhvac.new_SwimmingPoolIndoor(model, floorSurface))
    __swig_destroy__ = _openstudiomodelhvac.delete_SwimmingPoolIndoor

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SwimmingPoolIndoor_iddObjectType()

    def surface(self) -> "openstudio::model::Surface":
        return _openstudiomodelhvac.SwimmingPoolIndoor_surface(self)

    def averageDepth(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_averageDepth(self)

    def activityFactorSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_activityFactorSchedule(self)

    def makeupWaterSupplySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_makeupWaterSupplySchedule(self)

    def coverSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_coverSchedule(self)

    def coverEvaporationFactor(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_coverEvaporationFactor(self)

    def coverConvectionFactor(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_coverConvectionFactor(self)

    def coverShortWavelengthRadiationFactor(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_coverShortWavelengthRadiationFactor(self)

    def coverLongWavelengthRadiationFactor(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_coverLongWavelengthRadiationFactor(self)

    def poolHeatingSystemMaximumWaterFlowRate(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_poolHeatingSystemMaximumWaterFlowRate(self)

    def poolMiscellaneousEquipmentPower(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_poolMiscellaneousEquipmentPower(self)

    def setpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setpointTemperatureSchedule(self)

    def maximumNumberofPeople(self) -> "double":
        return _openstudiomodelhvac.SwimmingPoolIndoor_maximumNumberofPeople(self)

    def peopleSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_peopleSchedule(self)

    def peopleHeatGainSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SwimmingPoolIndoor_peopleHeatGainSchedule(self)

    def setSurface(self, floorSurface: "Surface") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setSurface(self, floorSurface)

    def setAverageDepth(self, averageDepth: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setAverageDepth(self, averageDepth)

    def setActivityFactorSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setActivityFactorSchedule(self, schedule)

    def setMakeupWaterSupplySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setMakeupWaterSupplySchedule(self, schedule)

    def setCoverSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setCoverSchedule(self, schedule)

    def setCoverEvaporationFactor(self, coverEvaporationFactor: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setCoverEvaporationFactor(self, coverEvaporationFactor)

    def setCoverConvectionFactor(self, coverConvectionFactor: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setCoverConvectionFactor(self, coverConvectionFactor)

    def setCoverShortWavelengthRadiationFactor(self, coverShortWavelengthRadiationFactor: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setCoverShortWavelengthRadiationFactor(self, coverShortWavelengthRadiationFactor)

    def setCoverLongWavelengthRadiationFactor(self, coverLongWavelengthRadiationFactor: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setCoverLongWavelengthRadiationFactor(self, coverLongWavelengthRadiationFactor)

    def setPoolHeatingSystemMaximumWaterFlowRate(self, poolHeatingSystemMaximumWaterFlowRate: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setPoolHeatingSystemMaximumWaterFlowRate(self, poolHeatingSystemMaximumWaterFlowRate)

    def setPoolMiscellaneousEquipmentPower(self, poolMiscellaneousEquipmentPower: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setPoolMiscellaneousEquipmentPower(self, poolMiscellaneousEquipmentPower)

    def setSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setSetpointTemperatureSchedule(self, schedule)

    def setMaximumNumberofPeople(self, maximumNumberofPeople: "double") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setMaximumNumberofPeople(self, maximumNumberofPeople)

    def setPeopleSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setPeopleSchedule(self, schedule)

    def setPeopleHeatGainSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SwimmingPoolIndoor_setPeopleHeatGainSchedule(self, schedule)

    def poolWaterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SwimmingPoolIndoor_poolWaterInletNode(self)

    def poolWaterOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SwimmingPoolIndoor_poolWaterOutletNode(self)

# Register SwimmingPoolIndoor in _openstudiomodelhvac:
_openstudiomodelhvac.SwimmingPoolIndoor_swigregister(SwimmingPoolIndoor)

def SwimmingPoolIndoor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SwimmingPoolIndoor_iddObjectType()


def toSwimmingPoolIndoor(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SwimmingPoolIndoor >":
    return _openstudiomodelhvac.toSwimmingPoolIndoor(idfObject)

def getSwimmingPoolIndoor(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SwimmingPoolIndoor >":
    return _openstudiomodelhvac.getSwimmingPoolIndoor(t_model, t_handle)

def getSwimmingPoolIndoors(t_model: "Model") -> "std::vector< openstudio::model::SwimmingPoolIndoor,std::allocator< openstudio::model::SwimmingPoolIndoor > >":
    return _openstudiomodelhvac.getSwimmingPoolIndoors(t_model)

def getSwimmingPoolIndoorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SwimmingPoolIndoor >":
    return _openstudiomodelhvac.getSwimmingPoolIndoorByName(t_model, t_name)

def getSwimmingPoolIndoorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SwimmingPoolIndoor,std::allocator< openstudio::model::SwimmingPoolIndoor > >":
    return _openstudiomodelhvac.getSwimmingPoolIndoorsByName(t_model, t_name, t_exactMatch)

def _to_SwimmingPoolIndoor(self) -> OptionalSwimmingPoolIndoor:
    return toSwimmingPoolIndoor(self)
openstudioutilitiesidf.IdfObject.to_SwimmingPoolIndoor = _to_SwimmingPoolIndoor

def _getSwimmingPoolIndoor(self, t_handle: "UUID") -> OptionalSwimmingPoolIndoor:
    return getSwimmingPoolIndoor(self, t_handle)
Model.getSwimmingPoolIndoor = _getSwimmingPoolIndoor

def _getSwimmingPoolIndoor(self, t_handle_str: str) -> OptionalSwimmingPoolIndoor:
    return getSwimmingPoolIndoor(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSwimmingPoolIndoor = _getSwimmingPoolIndoor

def _getSwimmingPoolIndoors(self) -> SwimmingPoolIndoorVector:
    return getSwimmingPoolIndoors(self)
Model.getSwimmingPoolIndoors = _getSwimmingPoolIndoors

def _getSwimmingPoolIndoorByName(self, t_name: str) -> OptionalSwimmingPoolIndoor:
    return getSwimmingPoolIndoorByName(self, t_name)
Model.getSwimmingPoolIndoorByName = _getSwimmingPoolIndoorByName

def _getSwimmingPoolIndoorsByName(self, t_name: str, t_exactMatch: bool) -> SwimmingPoolIndoorVector:
    return getSwimmingPoolIndoorsByName(self, t_name, t_exactMatch)
Model.getSwimmingPoolIndoorsByName = _getSwimmingPoolIndoorsByName

class SetpointManagerFollowOutdoorAirTemperature(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowOutdoorAirTemperature(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowOutdoorAirTemperature

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType()

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_controlVariable(self)

    def setControlVariable(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setControlVariable(self, value)

    def referenceTemperatureType(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_referenceTemperatureType(self)

    def setReferenceTemperatureType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setReferenceTemperatureType(self, value)

    def offsetTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_offsetTemperatureDifference(self)

    def setOffsetTemperatureDifference(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setOffsetTemperatureDifference(self, value)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_maximumSetpointTemperature(self)

    def setMaximumSetpointTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setMaximumSetpointTemperature(self, value)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_minimumSetpointTemperature(self)

    def setMinimumSetpointTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setMinimumSetpointTemperature(self, value)

# Register SetpointManagerFollowOutdoorAirTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_swigregister(SetpointManagerFollowOutdoorAirTemperature)

def SetpointManagerFollowOutdoorAirTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType()


def toSetpointManagerFollowOutdoorAirTemperature(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":
    return _openstudiomodelhvac.toSetpointManagerFollowOutdoorAirTemperature(idfObject)

def getSetpointManagerFollowOutdoorAirTemperature(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperature(t_model, t_handle)

def getSetpointManagerFollowOutdoorAirTemperatures(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatures(t_model)

def getSetpointManagerFollowOutdoorAirTemperatureByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatureByName(t_model, t_name)

def getSetpointManagerFollowOutdoorAirTemperaturesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperaturesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerFollowOutdoorAirTemperature(self) -> OptionalSetpointManagerFollowOutdoorAirTemperature:
    return toSetpointManagerFollowOutdoorAirTemperature(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerFollowOutdoorAirTemperature = _to_SetpointManagerFollowOutdoorAirTemperature

def _getSetpointManagerFollowOutdoorAirTemperature(self, t_handle: "UUID") -> OptionalSetpointManagerFollowOutdoorAirTemperature:
    return getSetpointManagerFollowOutdoorAirTemperature(self, t_handle)
Model.getSetpointManagerFollowOutdoorAirTemperature = _getSetpointManagerFollowOutdoorAirTemperature

def _getSetpointManagerFollowOutdoorAirTemperature(self, t_handle_str: str) -> OptionalSetpointManagerFollowOutdoorAirTemperature:
    return getSetpointManagerFollowOutdoorAirTemperature(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerFollowOutdoorAirTemperature = _getSetpointManagerFollowOutdoorAirTemperature

def _getSetpointManagerFollowOutdoorAirTemperatures(self) -> SetpointManagerFollowOutdoorAirTemperatureVector:
    return getSetpointManagerFollowOutdoorAirTemperatures(self)
Model.getSetpointManagerFollowOutdoorAirTemperatures = _getSetpointManagerFollowOutdoorAirTemperatures

def _getSetpointManagerFollowOutdoorAirTemperatureByName(self, t_name: str) -> OptionalSetpointManagerFollowOutdoorAirTemperature:
    return getSetpointManagerFollowOutdoorAirTemperatureByName(self, t_name)
Model.getSetpointManagerFollowOutdoorAirTemperatureByName = _getSetpointManagerFollowOutdoorAirTemperatureByName

def _getSetpointManagerFollowOutdoorAirTemperaturesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerFollowOutdoorAirTemperatureVector:
    return getSetpointManagerFollowOutdoorAirTemperaturesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerFollowOutdoorAirTemperaturesByName = _getSetpointManagerFollowOutdoorAirTemperaturesByName

class SetpointManagerFollowSystemNodeTemperature(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowSystemNodeTemperature(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowSystemNodeTemperature

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues()

    @staticmethod
    def referenceTemperatureTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariable(self)

    def referenceNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceNode(self)

    def referenceTemperatureType(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureType(self)

    def offsetTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_offsetTemperatureDifference(self)

    def maximumLimitSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_maximumLimitSetpointTemperature(self)

    def minimumLimitSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_minimumLimitSetpointTemperature(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setControlVariable(self, controlVariable)

    def setReferenceNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setReferenceNode(self, node)

    def resetReferenceNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_resetReferenceNode(self)

    def setReferenceTemperatureType(self, referenceTemperatureType: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setReferenceTemperatureType(self, referenceTemperatureType)

    def setOffsetTemperatureDifference(self, offsetTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setOffsetTemperatureDifference(self, offsetTemperatureDifference)

    def setMaximumLimitSetpointTemperature(self, maximumLimitSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setMaximumLimitSetpointTemperature(self, maximumLimitSetpointTemperature)

    def setMinimumLimitSetpointTemperature(self, minimumLimitSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setMinimumLimitSetpointTemperature(self, minimumLimitSetpointTemperature)

# Register SetpointManagerFollowSystemNodeTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_swigregister(SetpointManagerFollowSystemNodeTemperature)

def SetpointManagerFollowSystemNodeTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType()

def SetpointManagerFollowSystemNodeTemperature_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues()

def SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues()


def toSetpointManagerFollowSystemNodeTemperature(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":
    return _openstudiomodelhvac.toSetpointManagerFollowSystemNodeTemperature(idfObject)

def getSetpointManagerFollowSystemNodeTemperature(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperature(t_model, t_handle)

def getSetpointManagerFollowSystemNodeTemperatures(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatures(t_model)

def getSetpointManagerFollowSystemNodeTemperatureByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatureByName(t_model, t_name)

def getSetpointManagerFollowSystemNodeTemperaturesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperaturesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerFollowSystemNodeTemperature(self) -> OptionalSetpointManagerFollowSystemNodeTemperature:
    return toSetpointManagerFollowSystemNodeTemperature(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerFollowSystemNodeTemperature = _to_SetpointManagerFollowSystemNodeTemperature

def _getSetpointManagerFollowSystemNodeTemperature(self, t_handle: "UUID") -> OptionalSetpointManagerFollowSystemNodeTemperature:
    return getSetpointManagerFollowSystemNodeTemperature(self, t_handle)
Model.getSetpointManagerFollowSystemNodeTemperature = _getSetpointManagerFollowSystemNodeTemperature

def _getSetpointManagerFollowSystemNodeTemperature(self, t_handle_str: str) -> OptionalSetpointManagerFollowSystemNodeTemperature:
    return getSetpointManagerFollowSystemNodeTemperature(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerFollowSystemNodeTemperature = _getSetpointManagerFollowSystemNodeTemperature

def _getSetpointManagerFollowSystemNodeTemperatures(self) -> SetpointManagerFollowSystemNodeTemperatureVector:
    return getSetpointManagerFollowSystemNodeTemperatures(self)
Model.getSetpointManagerFollowSystemNodeTemperatures = _getSetpointManagerFollowSystemNodeTemperatures

def _getSetpointManagerFollowSystemNodeTemperatureByName(self, t_name: str) -> OptionalSetpointManagerFollowSystemNodeTemperature:
    return getSetpointManagerFollowSystemNodeTemperatureByName(self, t_name)
Model.getSetpointManagerFollowSystemNodeTemperatureByName = _getSetpointManagerFollowSystemNodeTemperatureByName

def _getSetpointManagerFollowSystemNodeTemperaturesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerFollowSystemNodeTemperatureVector:
    return getSetpointManagerFollowSystemNodeTemperaturesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerFollowSystemNodeTemperaturesByName = _getSetpointManagerFollowSystemNodeTemperaturesByName

class SetpointManagerMixedAir(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMixedAir

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMixedAir_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMixedAir(model))

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMixedAir_controlVariable(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAir_setControlVariable(self, controlVariable)

    def referenceSetpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMixedAir_referenceSetpointNode(self)

    def setReferenceSetpointNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAir_setReferenceSetpointNode(self, node)

    def fanInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMixedAir_fanInletNode(self)

    def setFanInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAir_setFanInletNode(self, node)

    def fanOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMixedAir_fanOutletNode(self)

    def setFanOutletNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMixedAir_setFanOutletNode(self, node)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMixedAir_setpointNode(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType()

    @staticmethod
    def updateFanInletOutletNodes(airLoopHVAC: "AirLoopHVAC") -> "void":
        return _openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes(airLoopHVAC)

# Register SetpointManagerMixedAir in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMixedAir_swigregister(SetpointManagerMixedAir)

def SetpointManagerMixedAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType()

def SetpointManagerMixedAir_updateFanInletOutletNodes(airLoopHVAC: "AirLoopHVAC") -> "void":
    return _openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes(airLoopHVAC)


def toSetpointManagerMixedAir(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":
    return _openstudiomodelhvac.toSetpointManagerMixedAir(idfObject)

def getSetpointManagerMixedAir(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":
    return _openstudiomodelhvac.getSetpointManagerMixedAir(t_model, t_handle)

def getSetpointManagerMixedAirs(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > >":
    return _openstudiomodelhvac.getSetpointManagerMixedAirs(t_model)

def getSetpointManagerMixedAirByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":
    return _openstudiomodelhvac.getSetpointManagerMixedAirByName(t_model, t_name)

def getSetpointManagerMixedAirsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > >":
    return _openstudiomodelhvac.getSetpointManagerMixedAirsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMixedAir(self) -> OptionalSetpointManagerMixedAir:
    return toSetpointManagerMixedAir(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMixedAir = _to_SetpointManagerMixedAir

def _getSetpointManagerMixedAir(self, t_handle: "UUID") -> OptionalSetpointManagerMixedAir:
    return getSetpointManagerMixedAir(self, t_handle)
Model.getSetpointManagerMixedAir = _getSetpointManagerMixedAir

def _getSetpointManagerMixedAir(self, t_handle_str: str) -> OptionalSetpointManagerMixedAir:
    return getSetpointManagerMixedAir(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMixedAir = _getSetpointManagerMixedAir

def _getSetpointManagerMixedAirs(self) -> SetpointManagerMixedAirVector:
    return getSetpointManagerMixedAirs(self)
Model.getSetpointManagerMixedAirs = _getSetpointManagerMixedAirs

def _getSetpointManagerMixedAirByName(self, t_name: str) -> OptionalSetpointManagerMixedAir:
    return getSetpointManagerMixedAirByName(self, t_name)
Model.getSetpointManagerMixedAirByName = _getSetpointManagerMixedAirByName

def _getSetpointManagerMixedAirsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMixedAirVector:
    return getSetpointManagerMixedAirsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMixedAirsByName = _getSetpointManagerMixedAirsByName

class SetpointManagerMultiZoneCoolingAverage(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneCoolingAverage(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneCoolingAverage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariable(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_minimumSetpointTemperature(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_maximumSetpointTemperature(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setControlVariable(self, controlVariable)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

# Register SetpointManagerMultiZoneCoolingAverage in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_swigregister(SetpointManagerMultiZoneCoolingAverage)

def SetpointManagerMultiZoneCoolingAverage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType()

def SetpointManagerMultiZoneCoolingAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues()


def toSetpointManagerMultiZoneCoolingAverage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneCoolingAverage(idfObject)

def getSetpointManagerMultiZoneCoolingAverage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverage(t_model, t_handle)

def getSetpointManagerMultiZoneCoolingAverages(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverages(t_model)

def getSetpointManagerMultiZoneCoolingAverageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverageByName(t_model, t_name)

def getSetpointManagerMultiZoneCoolingAveragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAveragesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneCoolingAverage(self) -> OptionalSetpointManagerMultiZoneCoolingAverage:
    return toSetpointManagerMultiZoneCoolingAverage(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneCoolingAverage = _to_SetpointManagerMultiZoneCoolingAverage

def _getSetpointManagerMultiZoneCoolingAverage(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneCoolingAverage:
    return getSetpointManagerMultiZoneCoolingAverage(self, t_handle)
Model.getSetpointManagerMultiZoneCoolingAverage = _getSetpointManagerMultiZoneCoolingAverage

def _getSetpointManagerMultiZoneCoolingAverage(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneCoolingAverage:
    return getSetpointManagerMultiZoneCoolingAverage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneCoolingAverage = _getSetpointManagerMultiZoneCoolingAverage

def _getSetpointManagerMultiZoneCoolingAverages(self) -> SetpointManagerMultiZoneCoolingAverageVector:
    return getSetpointManagerMultiZoneCoolingAverages(self)
Model.getSetpointManagerMultiZoneCoolingAverages = _getSetpointManagerMultiZoneCoolingAverages

def _getSetpointManagerMultiZoneCoolingAverageByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneCoolingAverage:
    return getSetpointManagerMultiZoneCoolingAverageByName(self, t_name)
Model.getSetpointManagerMultiZoneCoolingAverageByName = _getSetpointManagerMultiZoneCoolingAverageByName

def _getSetpointManagerMultiZoneCoolingAveragesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneCoolingAverageVector:
    return getSetpointManagerMultiZoneCoolingAveragesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneCoolingAveragesByName = _getSetpointManagerMultiZoneCoolingAveragesByName

class SetpointManagerMultiZoneHeatingAverage(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHeatingAverage(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHeatingAverage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariable(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_minimumSetpointTemperature(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_maximumSetpointTemperature(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setControlVariable(self, controlVariable)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

# Register SetpointManagerMultiZoneHeatingAverage in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_swigregister(SetpointManagerMultiZoneHeatingAverage)

def SetpointManagerMultiZoneHeatingAverage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType()

def SetpointManagerMultiZoneHeatingAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues()


def toSetpointManagerMultiZoneHeatingAverage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneHeatingAverage(idfObject)

def getSetpointManagerMultiZoneHeatingAverage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverage(t_model, t_handle)

def getSetpointManagerMultiZoneHeatingAverages(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverages(t_model)

def getSetpointManagerMultiZoneHeatingAverageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverageByName(t_model, t_name)

def getSetpointManagerMultiZoneHeatingAveragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAveragesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneHeatingAverage(self) -> OptionalSetpointManagerMultiZoneHeatingAverage:
    return toSetpointManagerMultiZoneHeatingAverage(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneHeatingAverage = _to_SetpointManagerMultiZoneHeatingAverage

def _getSetpointManagerMultiZoneHeatingAverage(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneHeatingAverage:
    return getSetpointManagerMultiZoneHeatingAverage(self, t_handle)
Model.getSetpointManagerMultiZoneHeatingAverage = _getSetpointManagerMultiZoneHeatingAverage

def _getSetpointManagerMultiZoneHeatingAverage(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneHeatingAverage:
    return getSetpointManagerMultiZoneHeatingAverage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneHeatingAverage = _getSetpointManagerMultiZoneHeatingAverage

def _getSetpointManagerMultiZoneHeatingAverages(self) -> SetpointManagerMultiZoneHeatingAverageVector:
    return getSetpointManagerMultiZoneHeatingAverages(self)
Model.getSetpointManagerMultiZoneHeatingAverages = _getSetpointManagerMultiZoneHeatingAverages

def _getSetpointManagerMultiZoneHeatingAverageByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneHeatingAverage:
    return getSetpointManagerMultiZoneHeatingAverageByName(self, t_name)
Model.getSetpointManagerMultiZoneHeatingAverageByName = _getSetpointManagerMultiZoneHeatingAverageByName

def _getSetpointManagerMultiZoneHeatingAveragesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneHeatingAverageVector:
    return getSetpointManagerMultiZoneHeatingAveragesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneHeatingAveragesByName = _getSetpointManagerMultiZoneHeatingAveragesByName

class SetpointManagerMultiZoneHumidityMaximum(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMaximum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMaximum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariable(self)

    def minimumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_minimumSetpointHumidityRatio(self)

    def maximumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_maximumSetpointHumidityRatio(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setControlVariable(self, controlVariable)

    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)

    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

# Register SetpointManagerMultiZoneHumidityMaximum in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_swigregister(SetpointManagerMultiZoneHumidityMaximum)

def SetpointManagerMultiZoneHumidityMaximum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType()

def SetpointManagerMultiZoneHumidityMaximum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues()


def toSetpointManagerMultiZoneHumidityMaximum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMaximum(idfObject)

def getSetpointManagerMultiZoneHumidityMaximum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximum(t_model, t_handle)

def getSetpointManagerMultiZoneHumidityMaximums(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximums(t_model)

def getSetpointManagerMultiZoneHumidityMaximumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumByName(t_model, t_name)

def getSetpointManagerMultiZoneHumidityMaximumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneHumidityMaximum(self) -> OptionalSetpointManagerMultiZoneHumidityMaximum:
    return toSetpointManagerMultiZoneHumidityMaximum(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneHumidityMaximum = _to_SetpointManagerMultiZoneHumidityMaximum

def _getSetpointManagerMultiZoneHumidityMaximum(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneHumidityMaximum:
    return getSetpointManagerMultiZoneHumidityMaximum(self, t_handle)
Model.getSetpointManagerMultiZoneHumidityMaximum = _getSetpointManagerMultiZoneHumidityMaximum

def _getSetpointManagerMultiZoneHumidityMaximum(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneHumidityMaximum:
    return getSetpointManagerMultiZoneHumidityMaximum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneHumidityMaximum = _getSetpointManagerMultiZoneHumidityMaximum

def _getSetpointManagerMultiZoneHumidityMaximums(self) -> SetpointManagerMultiZoneHumidityMaximumVector:
    return getSetpointManagerMultiZoneHumidityMaximums(self)
Model.getSetpointManagerMultiZoneHumidityMaximums = _getSetpointManagerMultiZoneHumidityMaximums

def _getSetpointManagerMultiZoneHumidityMaximumByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneHumidityMaximum:
    return getSetpointManagerMultiZoneHumidityMaximumByName(self, t_name)
Model.getSetpointManagerMultiZoneHumidityMaximumByName = _getSetpointManagerMultiZoneHumidityMaximumByName

def _getSetpointManagerMultiZoneHumidityMaximumsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneHumidityMaximumVector:
    return getSetpointManagerMultiZoneHumidityMaximumsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneHumidityMaximumsByName = _getSetpointManagerMultiZoneHumidityMaximumsByName

class SetpointManagerMultiZoneHumidityMinimum(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMinimum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMinimum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues()

    def minimumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_minimumSetpointHumidityRatio(self)

    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_isMinimumSetpointHumidityRatioDefaulted(self)

    def maximumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_maximumSetpointHumidityRatio(self)

    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_isMaximumSetpointHumidityRatioDefaulted(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariable(self)

    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)

    def resetMinimumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_resetMinimumSetpointHumidityRatio(self)

    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

    def resetMaximumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_resetMaximumSetpointHumidityRatio(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setControlVariable(self, controlVariable)

# Register SetpointManagerMultiZoneHumidityMinimum in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_swigregister(SetpointManagerMultiZoneHumidityMinimum)

def SetpointManagerMultiZoneHumidityMinimum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType()

def SetpointManagerMultiZoneHumidityMinimum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues()


def toSetpointManagerMultiZoneHumidityMinimum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMinimum(idfObject)

def getSetpointManagerMultiZoneHumidityMinimum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimum(t_model, t_handle)

def getSetpointManagerMultiZoneHumidityMinimums(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimums(t_model)

def getSetpointManagerMultiZoneHumidityMinimumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumByName(t_model, t_name)

def getSetpointManagerMultiZoneHumidityMinimumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneHumidityMinimum(self) -> OptionalSetpointManagerMultiZoneHumidityMinimum:
    return toSetpointManagerMultiZoneHumidityMinimum(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneHumidityMinimum = _to_SetpointManagerMultiZoneHumidityMinimum

def _getSetpointManagerMultiZoneHumidityMinimum(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneHumidityMinimum:
    return getSetpointManagerMultiZoneHumidityMinimum(self, t_handle)
Model.getSetpointManagerMultiZoneHumidityMinimum = _getSetpointManagerMultiZoneHumidityMinimum

def _getSetpointManagerMultiZoneHumidityMinimum(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneHumidityMinimum:
    return getSetpointManagerMultiZoneHumidityMinimum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneHumidityMinimum = _getSetpointManagerMultiZoneHumidityMinimum

def _getSetpointManagerMultiZoneHumidityMinimums(self) -> SetpointManagerMultiZoneHumidityMinimumVector:
    return getSetpointManagerMultiZoneHumidityMinimums(self)
Model.getSetpointManagerMultiZoneHumidityMinimums = _getSetpointManagerMultiZoneHumidityMinimums

def _getSetpointManagerMultiZoneHumidityMinimumByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneHumidityMinimum:
    return getSetpointManagerMultiZoneHumidityMinimumByName(self, t_name)
Model.getSetpointManagerMultiZoneHumidityMinimumByName = _getSetpointManagerMultiZoneHumidityMinimumByName

def _getSetpointManagerMultiZoneHumidityMinimumsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneHumidityMinimumVector:
    return getSetpointManagerMultiZoneHumidityMinimumsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneHumidityMinimumsByName = _getSetpointManagerMultiZoneHumidityMinimumsByName

class SetpointManagerMultiZoneMaximumHumidityAverage(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneMaximumHumidityAverage(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMaximumHumidityAverage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariable(self)

    def minimumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_minimumSetpointHumidityRatio(self)

    def maximumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_maximumSetpointHumidityRatio(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setControlVariable(self, controlVariable)

    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)

    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

# Register SetpointManagerMultiZoneMaximumHumidityAverage in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_swigregister(SetpointManagerMultiZoneMaximumHumidityAverage)

def SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType()

def SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues()


def toSetpointManagerMultiZoneMaximumHumidityAverage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneMaximumHumidityAverage(idfObject)

def getSetpointManagerMultiZoneMaximumHumidityAverage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverage(t_model, t_handle)

def getSetpointManagerMultiZoneMaximumHumidityAverages(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverages(t_model)

def getSetpointManagerMultiZoneMaximumHumidityAverageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverageByName(t_model, t_name)

def getSetpointManagerMultiZoneMaximumHumidityAveragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAveragesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneMaximumHumidityAverage(self) -> OptionalSetpointManagerMultiZoneMaximumHumidityAverage:
    return toSetpointManagerMultiZoneMaximumHumidityAverage(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneMaximumHumidityAverage = _to_SetpointManagerMultiZoneMaximumHumidityAverage

def _getSetpointManagerMultiZoneMaximumHumidityAverage(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneMaximumHumidityAverage:
    return getSetpointManagerMultiZoneMaximumHumidityAverage(self, t_handle)
Model.getSetpointManagerMultiZoneMaximumHumidityAverage = _getSetpointManagerMultiZoneMaximumHumidityAverage

def _getSetpointManagerMultiZoneMaximumHumidityAverage(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneMaximumHumidityAverage:
    return getSetpointManagerMultiZoneMaximumHumidityAverage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneMaximumHumidityAverage = _getSetpointManagerMultiZoneMaximumHumidityAverage

def _getSetpointManagerMultiZoneMaximumHumidityAverages(self) -> SetpointManagerMultiZoneMaximumHumidityAverageVector:
    return getSetpointManagerMultiZoneMaximumHumidityAverages(self)
Model.getSetpointManagerMultiZoneMaximumHumidityAverages = _getSetpointManagerMultiZoneMaximumHumidityAverages

def _getSetpointManagerMultiZoneMaximumHumidityAverageByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneMaximumHumidityAverage:
    return getSetpointManagerMultiZoneMaximumHumidityAverageByName(self, t_name)
Model.getSetpointManagerMultiZoneMaximumHumidityAverageByName = _getSetpointManagerMultiZoneMaximumHumidityAverageByName

def _getSetpointManagerMultiZoneMaximumHumidityAveragesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneMaximumHumidityAverageVector:
    return getSetpointManagerMultiZoneMaximumHumidityAveragesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneMaximumHumidityAveragesByName = _getSetpointManagerMultiZoneMaximumHumidityAveragesByName

class SetpointManagerMultiZoneMinimumHumidityAverage(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_swiginit(self, _openstudiomodelhvac.new_SetpointManagerMultiZoneMinimumHumidityAverage(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMinimumHumidityAverage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues()

    def minimumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_minimumSetpointHumidityRatio(self)

    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_isMinimumSetpointHumidityRatioDefaulted(self)

    def maximumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_maximumSetpointHumidityRatio(self)

    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_isMaximumSetpointHumidityRatioDefaulted(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariable(self)

    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)

    def resetMinimumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_resetMinimumSetpointHumidityRatio(self)

    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

    def resetMaximumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_resetMaximumSetpointHumidityRatio(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setControlVariable(self, controlVariable)

# Register SetpointManagerMultiZoneMinimumHumidityAverage in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_swigregister(SetpointManagerMultiZoneMinimumHumidityAverage)

def SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType()

def SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues()


def toSetpointManagerMultiZoneMinimumHumidityAverage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":
    return _openstudiomodelhvac.toSetpointManagerMultiZoneMinimumHumidityAverage(idfObject)

def getSetpointManagerMultiZoneMinimumHumidityAverage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverage(t_model, t_handle)

def getSetpointManagerMultiZoneMinimumHumidityAverages(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverages(t_model)

def getSetpointManagerMultiZoneMinimumHumidityAverageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverageByName(t_model, t_name)

def getSetpointManagerMultiZoneMinimumHumidityAveragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > >":
    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAveragesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerMultiZoneMinimumHumidityAverage(self) -> OptionalSetpointManagerMultiZoneMinimumHumidityAverage:
    return toSetpointManagerMultiZoneMinimumHumidityAverage(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerMultiZoneMinimumHumidityAverage = _to_SetpointManagerMultiZoneMinimumHumidityAverage

def _getSetpointManagerMultiZoneMinimumHumidityAverage(self, t_handle: "UUID") -> OptionalSetpointManagerMultiZoneMinimumHumidityAverage:
    return getSetpointManagerMultiZoneMinimumHumidityAverage(self, t_handle)
Model.getSetpointManagerMultiZoneMinimumHumidityAverage = _getSetpointManagerMultiZoneMinimumHumidityAverage

def _getSetpointManagerMultiZoneMinimumHumidityAverage(self, t_handle_str: str) -> OptionalSetpointManagerMultiZoneMinimumHumidityAverage:
    return getSetpointManagerMultiZoneMinimumHumidityAverage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerMultiZoneMinimumHumidityAverage = _getSetpointManagerMultiZoneMinimumHumidityAverage

def _getSetpointManagerMultiZoneMinimumHumidityAverages(self) -> SetpointManagerMultiZoneMinimumHumidityAverageVector:
    return getSetpointManagerMultiZoneMinimumHumidityAverages(self)
Model.getSetpointManagerMultiZoneMinimumHumidityAverages = _getSetpointManagerMultiZoneMinimumHumidityAverages

def _getSetpointManagerMultiZoneMinimumHumidityAverageByName(self, t_name: str) -> OptionalSetpointManagerMultiZoneMinimumHumidityAverage:
    return getSetpointManagerMultiZoneMinimumHumidityAverageByName(self, t_name)
Model.getSetpointManagerMultiZoneMinimumHumidityAverageByName = _getSetpointManagerMultiZoneMinimumHumidityAverageByName

def _getSetpointManagerMultiZoneMinimumHumidityAveragesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerMultiZoneMinimumHumidityAverageVector:
    return getSetpointManagerMultiZoneMinimumHumidityAveragesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerMultiZoneMinimumHumidityAveragesByName = _getSetpointManagerMultiZoneMinimumHumidityAveragesByName

class SetpointManagerOutdoorAirPretreat(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_swiginit(self, _openstudiomodelhvac.new_SetpointManagerOutdoorAirPretreat(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirPretreat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariable(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_minimumSetpointTemperature(self)

    def isMinimumSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMinimumSetpointTemperatureDefaulted(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_maximumSetpointTemperature(self)

    def isMaximumSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMaximumSetpointTemperatureDefaulted(self)

    def minimumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_minimumSetpointHumidityRatio(self)

    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMinimumSetpointHumidityRatioDefaulted(self)

    def maximumSetpointHumidityRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_maximumSetpointHumidityRatio(self)

    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMaximumSetpointHumidityRatioDefaulted(self)

    def referenceSetpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_referenceSetpointNode(self)

    def mixedAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_mixedAirStreamNode(self)

    def outdoorAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_outdoorAirStreamNode(self)

    def returnAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_returnAirStreamNode(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setControlVariable(self, controlVariable)

    def resetControlVariable(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetControlVariable(self)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def resetMinimumSetpointTemperature(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMinimumSetpointTemperature(self)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

    def resetMaximumSetpointTemperature(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMaximumSetpointTemperature(self)

    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)

    def resetMinimumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMinimumSetpointHumidityRatio(self)

    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

    def resetMaximumSetpointHumidityRatio(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMaximumSetpointHumidityRatio(self)

    def setReferenceSetpointNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setReferenceSetpointNode(self, node)

    def resetReferenceSetpointNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetReferenceSetpointNode(self)

    def setMixedAirStreamNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMixedAirStreamNode(self, node)

    def resetMixedAirStreamNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMixedAirStreamNode(self)

    def setOutdoorAirStreamNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setOutdoorAirStreamNode(self, node)

    def resetOutdoorAirStreamNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetOutdoorAirStreamNode(self)

    def setReturnAirStreamNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setReturnAirStreamNode(self, node)

    def resetReturnAirStreamNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetReturnAirStreamNode(self)

# Register SetpointManagerOutdoorAirPretreat in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_swigregister(SetpointManagerOutdoorAirPretreat)

def SetpointManagerOutdoorAirPretreat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType()

def SetpointManagerOutdoorAirPretreat_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues()


def toSetpointManagerOutdoorAirPretreat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":
    return _openstudiomodelhvac.toSetpointManagerOutdoorAirPretreat(idfObject)

def getSetpointManagerOutdoorAirPretreat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreat(t_model, t_handle)

def getSetpointManagerOutdoorAirPretreats(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreats(t_model)

def getSetpointManagerOutdoorAirPretreatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatByName(t_model, t_name)

def getSetpointManagerOutdoorAirPretreatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerOutdoorAirPretreat(self) -> OptionalSetpointManagerOutdoorAirPretreat:
    return toSetpointManagerOutdoorAirPretreat(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerOutdoorAirPretreat = _to_SetpointManagerOutdoorAirPretreat

def _getSetpointManagerOutdoorAirPretreat(self, t_handle: "UUID") -> OptionalSetpointManagerOutdoorAirPretreat:
    return getSetpointManagerOutdoorAirPretreat(self, t_handle)
Model.getSetpointManagerOutdoorAirPretreat = _getSetpointManagerOutdoorAirPretreat

def _getSetpointManagerOutdoorAirPretreat(self, t_handle_str: str) -> OptionalSetpointManagerOutdoorAirPretreat:
    return getSetpointManagerOutdoorAirPretreat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerOutdoorAirPretreat = _getSetpointManagerOutdoorAirPretreat

def _getSetpointManagerOutdoorAirPretreats(self) -> SetpointManagerOutdoorAirPretreatVector:
    return getSetpointManagerOutdoorAirPretreats(self)
Model.getSetpointManagerOutdoorAirPretreats = _getSetpointManagerOutdoorAirPretreats

def _getSetpointManagerOutdoorAirPretreatByName(self, t_name: str) -> OptionalSetpointManagerOutdoorAirPretreat:
    return getSetpointManagerOutdoorAirPretreatByName(self, t_name)
Model.getSetpointManagerOutdoorAirPretreatByName = _getSetpointManagerOutdoorAirPretreatByName

def _getSetpointManagerOutdoorAirPretreatsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerOutdoorAirPretreatVector:
    return getSetpointManagerOutdoorAirPretreatsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerOutdoorAirPretreatsByName = _getSetpointManagerOutdoorAirPretreatsByName

class SetpointManagerOutdoorAirReset(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerOutdoorAirReset_swiginit(self, _openstudiomodelhvac.new_SetpointManagerOutdoorAirReset(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirReset

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues()

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariable(self)

    def isControlVariableDefaulted(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_isControlVariableDefaulted(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setControlVariable(self, controlVariable)

    def resetControlVariable(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetControlVariable(self)

    def setpointatOutdoorLowTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorLowTemperature(self)

    def setSetpointatOutdoorLowTemperature(self, setpointatOutdoorLowTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorLowTemperature(self, setpointatOutdoorLowTemperature)

    def outdoorLowTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorLowTemperature(self)

    def setOutdoorLowTemperature(self, outdoorLowTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorLowTemperature(self, outdoorLowTemperature)

    def setpointatOutdoorHighTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorHighTemperature(self)

    def setSetpointatOutdoorHighTemperature(self, setpointatOutdoorHighTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorHighTemperature(self, setpointatOutdoorHighTemperature)

    def outdoorHighTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorHighTemperature(self)

    def setOutdoorHighTemperature(self, outdoorHighTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorHighTemperature(self, outdoorHighTemperature)

    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_schedule(self)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSchedule(self, schedule)

    def resetSchedule(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSchedule(self)

    def setpointatOutdoorLowTemperature2(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorLowTemperature2(self)

    def setSetpointatOutdoorLowTemperature2(self, setpointatOutdoorLowTemperature2: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorLowTemperature2(self, setpointatOutdoorLowTemperature2)

    def resetSetpointatOutdoorLowTemperature2(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSetpointatOutdoorLowTemperature2(self)

    def outdoorLowTemperature2(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorLowTemperature2(self)

    def setOutdoorLowTemperature2(self, outdoorLowTemperature2: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorLowTemperature2(self, outdoorLowTemperature2)

    def resetOutdoorLowTemperature2(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetOutdoorLowTemperature2(self)

    def setpointatOutdoorHighTemperature2(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorHighTemperature2(self)

    def setSetpointatOutdoorHighTemperature2(self, setpointatOutdoorHighTemperature2: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorHighTemperature2(self, setpointatOutdoorHighTemperature2)

    def resetSetpointatOutdoorHighTemperature2(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSetpointatOutdoorHighTemperature2(self)

    def outdoorHighTemperature2(self) -> "boost::optional< double >":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorHighTemperature2(self)

    def setOutdoorHighTemperature2(self, outdoorHighTemperature2: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorHighTemperature2(self, outdoorHighTemperature2)

    def resetOutdoorHighTemperature2(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetOutdoorHighTemperature2(self)

# Register SetpointManagerOutdoorAirReset in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerOutdoorAirReset_swigregister(SetpointManagerOutdoorAirReset)

def SetpointManagerOutdoorAirReset_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType()

def SetpointManagerOutdoorAirReset_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues()


def toSetpointManagerOutdoorAirReset(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":
    return _openstudiomodelhvac.toSetpointManagerOutdoorAirReset(idfObject)

def getSetpointManagerOutdoorAirReset(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirReset(t_model, t_handle)

def getSetpointManagerOutdoorAirResets(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResets(t_model)

def getSetpointManagerOutdoorAirResetByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResetByName(t_model, t_name)

def getSetpointManagerOutdoorAirResetsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > >":
    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResetsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerOutdoorAirReset(self) -> OptionalSetpointManagerOutdoorAirReset:
    return toSetpointManagerOutdoorAirReset(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerOutdoorAirReset = _to_SetpointManagerOutdoorAirReset

def _getSetpointManagerOutdoorAirReset(self, t_handle: "UUID") -> OptionalSetpointManagerOutdoorAirReset:
    return getSetpointManagerOutdoorAirReset(self, t_handle)
Model.getSetpointManagerOutdoorAirReset = _getSetpointManagerOutdoorAirReset

def _getSetpointManagerOutdoorAirReset(self, t_handle_str: str) -> OptionalSetpointManagerOutdoorAirReset:
    return getSetpointManagerOutdoorAirReset(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerOutdoorAirReset = _getSetpointManagerOutdoorAirReset

def _getSetpointManagerOutdoorAirResets(self) -> SetpointManagerOutdoorAirResetVector:
    return getSetpointManagerOutdoorAirResets(self)
Model.getSetpointManagerOutdoorAirResets = _getSetpointManagerOutdoorAirResets

def _getSetpointManagerOutdoorAirResetByName(self, t_name: str) -> OptionalSetpointManagerOutdoorAirReset:
    return getSetpointManagerOutdoorAirResetByName(self, t_name)
Model.getSetpointManagerOutdoorAirResetByName = _getSetpointManagerOutdoorAirResetByName

def _getSetpointManagerOutdoorAirResetsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerOutdoorAirResetVector:
    return getSetpointManagerOutdoorAirResetsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerOutdoorAirResetsByName = _getSetpointManagerOutdoorAirResetsByName

class SetpointManagerScheduled(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelhvac.SetpointManagerScheduled_swiginit(self, _openstudiomodelhvac.new_SetpointManagerScheduled(*args))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduled

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerScheduled_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues()

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerScheduled_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerScheduled_controlVariable(self)

    def schedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelhvac.SetpointManagerScheduled_schedule(self)

    def hasSchedule(self) -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduled_hasSchedule(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduled_setControlVariable(self, controlVariable)

    def setSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduled_setSchedule(self, schedule)

    def setControlVariableAndSchedule(self, controlVariable: "std::string const &", schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduled_setControlVariableAndSchedule(self, controlVariable, schedule)

# Register SetpointManagerScheduled in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerScheduled_swigregister(SetpointManagerScheduled)

def SetpointManagerScheduled_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerScheduled_iddObjectType()

def SetpointManagerScheduled_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues()


def toSetpointManagerScheduled(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerScheduled >":
    return _openstudiomodelhvac.toSetpointManagerScheduled(idfObject)

def getSetpointManagerScheduled(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerScheduled >":
    return _openstudiomodelhvac.getSetpointManagerScheduled(t_model, t_handle)

def getSetpointManagerScheduleds(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > >":
    return _openstudiomodelhvac.getSetpointManagerScheduleds(t_model)

def getSetpointManagerScheduledByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerScheduled >":
    return _openstudiomodelhvac.getSetpointManagerScheduledByName(t_model, t_name)

def getSetpointManagerScheduledsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > >":
    return _openstudiomodelhvac.getSetpointManagerScheduledsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerScheduled(self) -> OptionalSetpointManagerScheduled:
    return toSetpointManagerScheduled(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerScheduled = _to_SetpointManagerScheduled

def _getSetpointManagerScheduled(self, t_handle: "UUID") -> OptionalSetpointManagerScheduled:
    return getSetpointManagerScheduled(self, t_handle)
Model.getSetpointManagerScheduled = _getSetpointManagerScheduled

def _getSetpointManagerScheduled(self, t_handle_str: str) -> OptionalSetpointManagerScheduled:
    return getSetpointManagerScheduled(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerScheduled = _getSetpointManagerScheduled

def _getSetpointManagerScheduleds(self) -> SetpointManagerScheduledVector:
    return getSetpointManagerScheduleds(self)
Model.getSetpointManagerScheduleds = _getSetpointManagerScheduleds

def _getSetpointManagerScheduledByName(self, t_name: str) -> OptionalSetpointManagerScheduled:
    return getSetpointManagerScheduledByName(self, t_name)
Model.getSetpointManagerScheduledByName = _getSetpointManagerScheduledByName

def _getSetpointManagerScheduledsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerScheduledVector:
    return getSetpointManagerScheduledsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerScheduledsByName = _getSetpointManagerScheduledsByName

class SetpointManagerScheduledDualSetpoint(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_swiginit(self, _openstudiomodelhvac.new_SetpointManagerScheduledDualSetpoint(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledDualSetpoint

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariable(self)

    def highSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_highSetpointSchedule(self)

    def lowSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_lowSetpointSchedule(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setControlVariable(self, controlVariable)

    def setHighSetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setHighSetpointSchedule(self, schedule)

    def resetHighSetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_resetHighSetpointSchedule(self)

    def setLowSetpointSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setLowSetpointSchedule(self, schedule)

    def resetLowSetpointSchedule(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_resetLowSetpointSchedule(self)

# Register SetpointManagerScheduledDualSetpoint in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_swigregister(SetpointManagerScheduledDualSetpoint)

def SetpointManagerScheduledDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType()

def SetpointManagerScheduledDualSetpoint_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues()


def toSetpointManagerScheduledDualSetpoint(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":
    return _openstudiomodelhvac.toSetpointManagerScheduledDualSetpoint(idfObject)

def getSetpointManagerScheduledDualSetpoint(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":
    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoint(t_model, t_handle)

def getSetpointManagerScheduledDualSetpoints(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > >":
    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoints(t_model)

def getSetpointManagerScheduledDualSetpointByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":
    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointByName(t_model, t_name)

def getSetpointManagerScheduledDualSetpointsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > >":
    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerScheduledDualSetpoint(self) -> OptionalSetpointManagerScheduledDualSetpoint:
    return toSetpointManagerScheduledDualSetpoint(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerScheduledDualSetpoint = _to_SetpointManagerScheduledDualSetpoint

def _getSetpointManagerScheduledDualSetpoint(self, t_handle: "UUID") -> OptionalSetpointManagerScheduledDualSetpoint:
    return getSetpointManagerScheduledDualSetpoint(self, t_handle)
Model.getSetpointManagerScheduledDualSetpoint = _getSetpointManagerScheduledDualSetpoint

def _getSetpointManagerScheduledDualSetpoint(self, t_handle_str: str) -> OptionalSetpointManagerScheduledDualSetpoint:
    return getSetpointManagerScheduledDualSetpoint(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerScheduledDualSetpoint = _getSetpointManagerScheduledDualSetpoint

def _getSetpointManagerScheduledDualSetpoints(self) -> SetpointManagerScheduledDualSetpointVector:
    return getSetpointManagerScheduledDualSetpoints(self)
Model.getSetpointManagerScheduledDualSetpoints = _getSetpointManagerScheduledDualSetpoints

def _getSetpointManagerScheduledDualSetpointByName(self, t_name: str) -> OptionalSetpointManagerScheduledDualSetpoint:
    return getSetpointManagerScheduledDualSetpointByName(self, t_name)
Model.getSetpointManagerScheduledDualSetpointByName = _getSetpointManagerScheduledDualSetpointByName

def _getSetpointManagerScheduledDualSetpointsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerScheduledDualSetpointVector:
    return getSetpointManagerScheduledDualSetpointsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerScheduledDualSetpointsByName = _getSetpointManagerScheduledDualSetpointsByName

class SetpointManagerSingleZoneHumidityMaximum(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMaximum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMaximum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariable(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlZone(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setControlVariable(self, controlVariable)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_resetControlZone(self)

# Register SetpointManagerSingleZoneHumidityMaximum in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_swigregister(SetpointManagerSingleZoneHumidityMaximum)

def SetpointManagerSingleZoneHumidityMaximum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType()

def SetpointManagerSingleZoneHumidityMaximum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues()


def toSetpointManagerSingleZoneHumidityMaximum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMaximum(idfObject)

def getSetpointManagerSingleZoneHumidityMaximum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximum(t_model, t_handle)

def getSetpointManagerSingleZoneHumidityMaximums(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximums(t_model)

def getSetpointManagerSingleZoneHumidityMaximumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumByName(t_model, t_name)

def getSetpointManagerSingleZoneHumidityMaximumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneHumidityMaximum(self) -> OptionalSetpointManagerSingleZoneHumidityMaximum:
    return toSetpointManagerSingleZoneHumidityMaximum(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneHumidityMaximum = _to_SetpointManagerSingleZoneHumidityMaximum

def _getSetpointManagerSingleZoneHumidityMaximum(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneHumidityMaximum:
    return getSetpointManagerSingleZoneHumidityMaximum(self, t_handle)
Model.getSetpointManagerSingleZoneHumidityMaximum = _getSetpointManagerSingleZoneHumidityMaximum

def _getSetpointManagerSingleZoneHumidityMaximum(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneHumidityMaximum:
    return getSetpointManagerSingleZoneHumidityMaximum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneHumidityMaximum = _getSetpointManagerSingleZoneHumidityMaximum

def _getSetpointManagerSingleZoneHumidityMaximums(self) -> SetpointManagerSingleZoneHumidityMaximumVector:
    return getSetpointManagerSingleZoneHumidityMaximums(self)
Model.getSetpointManagerSingleZoneHumidityMaximums = _getSetpointManagerSingleZoneHumidityMaximums

def _getSetpointManagerSingleZoneHumidityMaximumByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneHumidityMaximum:
    return getSetpointManagerSingleZoneHumidityMaximumByName(self, t_name)
Model.getSetpointManagerSingleZoneHumidityMaximumByName = _getSetpointManagerSingleZoneHumidityMaximumByName

def _getSetpointManagerSingleZoneHumidityMaximumsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneHumidityMaximumVector:
    return getSetpointManagerSingleZoneHumidityMaximumsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneHumidityMaximumsByName = _getSetpointManagerSingleZoneHumidityMaximumsByName

class SetpointManagerSingleZoneHumidityMinimum(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMinimum(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMinimum

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariable(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setpointNode(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlZone(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setControlVariable(self, controlVariable)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_resetControlZone(self)

# Register SetpointManagerSingleZoneHumidityMinimum in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_swigregister(SetpointManagerSingleZoneHumidityMinimum)

def SetpointManagerSingleZoneHumidityMinimum_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType()

def SetpointManagerSingleZoneHumidityMinimum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues()


def toSetpointManagerSingleZoneHumidityMinimum(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMinimum(idfObject)

def getSetpointManagerSingleZoneHumidityMinimum(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimum(t_model, t_handle)

def getSetpointManagerSingleZoneHumidityMinimums(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimums(t_model)

def getSetpointManagerSingleZoneHumidityMinimumByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumByName(t_model, t_name)

def getSetpointManagerSingleZoneHumidityMinimumsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneHumidityMinimum(self) -> OptionalSetpointManagerSingleZoneHumidityMinimum:
    return toSetpointManagerSingleZoneHumidityMinimum(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneHumidityMinimum = _to_SetpointManagerSingleZoneHumidityMinimum

def _getSetpointManagerSingleZoneHumidityMinimum(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneHumidityMinimum:
    return getSetpointManagerSingleZoneHumidityMinimum(self, t_handle)
Model.getSetpointManagerSingleZoneHumidityMinimum = _getSetpointManagerSingleZoneHumidityMinimum

def _getSetpointManagerSingleZoneHumidityMinimum(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneHumidityMinimum:
    return getSetpointManagerSingleZoneHumidityMinimum(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneHumidityMinimum = _getSetpointManagerSingleZoneHumidityMinimum

def _getSetpointManagerSingleZoneHumidityMinimums(self) -> SetpointManagerSingleZoneHumidityMinimumVector:
    return getSetpointManagerSingleZoneHumidityMinimums(self)
Model.getSetpointManagerSingleZoneHumidityMinimums = _getSetpointManagerSingleZoneHumidityMinimums

def _getSetpointManagerSingleZoneHumidityMinimumByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneHumidityMinimum:
    return getSetpointManagerSingleZoneHumidityMinimumByName(self, t_name)
Model.getSetpointManagerSingleZoneHumidityMinimumByName = _getSetpointManagerSingleZoneHumidityMinimumByName

def _getSetpointManagerSingleZoneHumidityMinimumsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneHumidityMinimumVector:
    return getSetpointManagerSingleZoneHumidityMinimumsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneHumidityMinimumsByName = _getSetpointManagerSingleZoneHumidityMinimumsByName

class SetpointManagerSingleZoneOneStageCooling(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageCooling(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageCooling

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariable(self)

    def coolingStageOnSupplyAirSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_coolingStageOnSupplyAirSetpointTemperature(self)

    def coolingStageOffSupplyAirSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_coolingStageOffSupplyAirSetpointTemperature(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlZone(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setControlVariable(self, controlVariable)

    def setCoolingStageOnSupplyAirSetpointTemperature(self, coolingStageOnSupplyAirSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setCoolingStageOnSupplyAirSetpointTemperature(self, coolingStageOnSupplyAirSetpointTemperature)

    def setCoolingStageOffSupplyAirSetpointTemperature(self, coolingStageOffSupplyAirSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setCoolingStageOffSupplyAirSetpointTemperature(self, coolingStageOffSupplyAirSetpointTemperature)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_resetControlZone(self)

# Register SetpointManagerSingleZoneOneStageCooling in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_swigregister(SetpointManagerSingleZoneOneStageCooling)

def SetpointManagerSingleZoneOneStageCooling_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType()

def SetpointManagerSingleZoneOneStageCooling_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues()


def toSetpointManagerSingleZoneOneStageCooling(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageCooling(idfObject)

def getSetpointManagerSingleZoneOneStageCooling(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCooling(t_model, t_handle)

def getSetpointManagerSingleZoneOneStageCoolings(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolings(t_model)

def getSetpointManagerSingleZoneOneStageCoolingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingByName(t_model, t_name)

def getSetpointManagerSingleZoneOneStageCoolingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneOneStageCooling(self) -> OptionalSetpointManagerSingleZoneOneStageCooling:
    return toSetpointManagerSingleZoneOneStageCooling(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneOneStageCooling = _to_SetpointManagerSingleZoneOneStageCooling

def _getSetpointManagerSingleZoneOneStageCooling(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneOneStageCooling:
    return getSetpointManagerSingleZoneOneStageCooling(self, t_handle)
Model.getSetpointManagerSingleZoneOneStageCooling = _getSetpointManagerSingleZoneOneStageCooling

def _getSetpointManagerSingleZoneOneStageCooling(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneOneStageCooling:
    return getSetpointManagerSingleZoneOneStageCooling(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneOneStageCooling = _getSetpointManagerSingleZoneOneStageCooling

def _getSetpointManagerSingleZoneOneStageCoolings(self) -> SetpointManagerSingleZoneOneStageCoolingVector:
    return getSetpointManagerSingleZoneOneStageCoolings(self)
Model.getSetpointManagerSingleZoneOneStageCoolings = _getSetpointManagerSingleZoneOneStageCoolings

def _getSetpointManagerSingleZoneOneStageCoolingByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneOneStageCooling:
    return getSetpointManagerSingleZoneOneStageCoolingByName(self, t_name)
Model.getSetpointManagerSingleZoneOneStageCoolingByName = _getSetpointManagerSingleZoneOneStageCoolingByName

def _getSetpointManagerSingleZoneOneStageCoolingsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneOneStageCoolingVector:
    return getSetpointManagerSingleZoneOneStageCoolingsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneOneStageCoolingsByName = _getSetpointManagerSingleZoneOneStageCoolingsByName

class SetpointManagerSingleZoneOneStageHeating(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageHeating(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageHeating

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariable(self)

    def heatingStageOnSupplyAirSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_heatingStageOnSupplyAirSetpointTemperature(self)

    def heatingStageOffSupplyAirSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_heatingStageOffSupplyAirSetpointTemperature(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlZone(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setControlVariable(self, controlVariable)

    def setHeatingStageOnSupplyAirSetpointTemperature(self, heatingStageOnSupplyAirSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setHeatingStageOnSupplyAirSetpointTemperature(self, heatingStageOnSupplyAirSetpointTemperature)

    def setHeatingStageOffSupplyAirSetpointTemperature(self, heatingStageOffSupplyAirSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setHeatingStageOffSupplyAirSetpointTemperature(self, heatingStageOffSupplyAirSetpointTemperature)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_resetControlZone(self)

# Register SetpointManagerSingleZoneOneStageHeating in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_swigregister(SetpointManagerSingleZoneOneStageHeating)

def SetpointManagerSingleZoneOneStageHeating_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType()

def SetpointManagerSingleZoneOneStageHeating_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues()


def toSetpointManagerSingleZoneOneStageHeating(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageHeating(idfObject)

def getSetpointManagerSingleZoneOneStageHeating(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeating(t_model, t_handle)

def getSetpointManagerSingleZoneOneStageHeatings(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatings(t_model)

def getSetpointManagerSingleZoneOneStageHeatingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingByName(t_model, t_name)

def getSetpointManagerSingleZoneOneStageHeatingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneOneStageHeating(self) -> OptionalSetpointManagerSingleZoneOneStageHeating:
    return toSetpointManagerSingleZoneOneStageHeating(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneOneStageHeating = _to_SetpointManagerSingleZoneOneStageHeating

def _getSetpointManagerSingleZoneOneStageHeating(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneOneStageHeating:
    return getSetpointManagerSingleZoneOneStageHeating(self, t_handle)
Model.getSetpointManagerSingleZoneOneStageHeating = _getSetpointManagerSingleZoneOneStageHeating

def _getSetpointManagerSingleZoneOneStageHeating(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneOneStageHeating:
    return getSetpointManagerSingleZoneOneStageHeating(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneOneStageHeating = _getSetpointManagerSingleZoneOneStageHeating

def _getSetpointManagerSingleZoneOneStageHeatings(self) -> SetpointManagerSingleZoneOneStageHeatingVector:
    return getSetpointManagerSingleZoneOneStageHeatings(self)
Model.getSetpointManagerSingleZoneOneStageHeatings = _getSetpointManagerSingleZoneOneStageHeatings

def _getSetpointManagerSingleZoneOneStageHeatingByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneOneStageHeating:
    return getSetpointManagerSingleZoneOneStageHeatingByName(self, t_name)
Model.getSetpointManagerSingleZoneOneStageHeatingByName = _getSetpointManagerSingleZoneOneStageHeatingByName

def _getSetpointManagerSingleZoneOneStageHeatingsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneOneStageHeatingVector:
    return getSetpointManagerSingleZoneOneStageHeatingsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneOneStageHeatingsByName = _getSetpointManagerSingleZoneOneStageHeatingsByName

class SetpointManagerSingleZoneCooling(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneCooling_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneCooling(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneCooling

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_controlVariable(self)

    def minimumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_minimumSupplyAirTemperature(self)

    def maximumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_maximumSupplyAirTemperature(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_controlZone(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setControlVariable(self, controlVariable)

    def setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature)

    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_resetControlZone(self)

# Register SetpointManagerSingleZoneCooling in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneCooling_swigregister(SetpointManagerSingleZoneCooling)

def SetpointManagerSingleZoneCooling_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType()


def toSetpointManagerSingleZoneCooling(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneCooling(idfObject)

def getSetpointManagerSingleZoneCooling(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneCooling(t_model, t_handle)

def getSetpointManagerSingleZoneCoolings(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolings(t_model)

def getSetpointManagerSingleZoneCoolingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingByName(t_model, t_name)

def getSetpointManagerSingleZoneCoolingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneCooling(self) -> OptionalSetpointManagerSingleZoneCooling:
    return toSetpointManagerSingleZoneCooling(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneCooling = _to_SetpointManagerSingleZoneCooling

def _getSetpointManagerSingleZoneCooling(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneCooling:
    return getSetpointManagerSingleZoneCooling(self, t_handle)
Model.getSetpointManagerSingleZoneCooling = _getSetpointManagerSingleZoneCooling

def _getSetpointManagerSingleZoneCooling(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneCooling:
    return getSetpointManagerSingleZoneCooling(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneCooling = _getSetpointManagerSingleZoneCooling

def _getSetpointManagerSingleZoneCoolings(self) -> SetpointManagerSingleZoneCoolingVector:
    return getSetpointManagerSingleZoneCoolings(self)
Model.getSetpointManagerSingleZoneCoolings = _getSetpointManagerSingleZoneCoolings

def _getSetpointManagerSingleZoneCoolingByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneCooling:
    return getSetpointManagerSingleZoneCoolingByName(self, t_name)
Model.getSetpointManagerSingleZoneCoolingByName = _getSetpointManagerSingleZoneCoolingByName

def _getSetpointManagerSingleZoneCoolingsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneCoolingVector:
    return getSetpointManagerSingleZoneCoolingsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneCoolingsByName = _getSetpointManagerSingleZoneCoolingsByName

class SetpointManagerSingleZoneHeating(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneHeating_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneHeating(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHeating

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_controlVariable(self)

    def minimumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_minimumSupplyAirTemperature(self)

    def maximumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_maximumSupplyAirTemperature(self)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_controlZone(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setControlVariable(self, controlVariable)

    def setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature)

    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_resetControlZone(self)

# Register SetpointManagerSingleZoneHeating in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneHeating_swigregister(SetpointManagerSingleZoneHeating)

def SetpointManagerSingleZoneHeating_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType()


def toSetpointManagerSingleZoneHeating(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneHeating(idfObject)

def getSetpointManagerSingleZoneHeating(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeating(t_model, t_handle)

def getSetpointManagerSingleZoneHeatings(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatings(t_model)

def getSetpointManagerSingleZoneHeatingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingByName(t_model, t_name)

def getSetpointManagerSingleZoneHeatingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneHeating(self) -> OptionalSetpointManagerSingleZoneHeating:
    return toSetpointManagerSingleZoneHeating(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneHeating = _to_SetpointManagerSingleZoneHeating

def _getSetpointManagerSingleZoneHeating(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneHeating:
    return getSetpointManagerSingleZoneHeating(self, t_handle)
Model.getSetpointManagerSingleZoneHeating = _getSetpointManagerSingleZoneHeating

def _getSetpointManagerSingleZoneHeating(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneHeating:
    return getSetpointManagerSingleZoneHeating(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneHeating = _getSetpointManagerSingleZoneHeating

def _getSetpointManagerSingleZoneHeatings(self) -> SetpointManagerSingleZoneHeatingVector:
    return getSetpointManagerSingleZoneHeatings(self)
Model.getSetpointManagerSingleZoneHeatings = _getSetpointManagerSingleZoneHeatings

def _getSetpointManagerSingleZoneHeatingByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneHeating:
    return getSetpointManagerSingleZoneHeatingByName(self, t_name)
Model.getSetpointManagerSingleZoneHeatingByName = _getSetpointManagerSingleZoneHeatingByName

def _getSetpointManagerSingleZoneHeatingsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneHeatingVector:
    return getSetpointManagerSingleZoneHeatingsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneHeatingsByName = _getSetpointManagerSingleZoneHeatingsByName

class SetpointManagerSingleZoneReheat(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneReheat

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerSingleZoneReheat_swiginit(self, _openstudiomodelhvac.new_SetpointManagerSingleZoneReheat(model))

    def minimumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_minimumSupplyAirTemperature(self)

    def setMinimumSupplyAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setMinimumSupplyAirTemperature(self, value)

    def maximumSupplyAirTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_maximumSupplyAirTemperature(self)

    def setMaximumSupplyAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setMaximumSupplyAirTemperature(self, value)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setpointNode(self)

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariable(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setControlVariable(self, controlVariable)

    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlZone(self)

    def setControlZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setControlZone(self, thermalZone)

    def resetControlZone(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_resetControlZone(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues()

# Register SetpointManagerSingleZoneReheat in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerSingleZoneReheat_swigregister(SetpointManagerSingleZoneReheat)

def SetpointManagerSingleZoneReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType()

def SetpointManagerSingleZoneReheat_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues()


def toSetpointManagerSingleZoneReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":
    return _openstudiomodelhvac.toSetpointManagerSingleZoneReheat(idfObject)

def getSetpointManagerSingleZoneReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheat(t_model, t_handle)

def getSetpointManagerSingleZoneReheats(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheats(t_model)

def getSetpointManagerSingleZoneReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheatByName(t_model, t_name)

def getSetpointManagerSingleZoneReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > >":
    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheatsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerSingleZoneReheat(self) -> OptionalSetpointManagerSingleZoneReheat:
    return toSetpointManagerSingleZoneReheat(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerSingleZoneReheat = _to_SetpointManagerSingleZoneReheat

def _getSetpointManagerSingleZoneReheat(self, t_handle: "UUID") -> OptionalSetpointManagerSingleZoneReheat:
    return getSetpointManagerSingleZoneReheat(self, t_handle)
Model.getSetpointManagerSingleZoneReheat = _getSetpointManagerSingleZoneReheat

def _getSetpointManagerSingleZoneReheat(self, t_handle_str: str) -> OptionalSetpointManagerSingleZoneReheat:
    return getSetpointManagerSingleZoneReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerSingleZoneReheat = _getSetpointManagerSingleZoneReheat

def _getSetpointManagerSingleZoneReheats(self) -> SetpointManagerSingleZoneReheatVector:
    return getSetpointManagerSingleZoneReheats(self)
Model.getSetpointManagerSingleZoneReheats = _getSetpointManagerSingleZoneReheats

def _getSetpointManagerSingleZoneReheatByName(self, t_name: str) -> OptionalSetpointManagerSingleZoneReheat:
    return getSetpointManagerSingleZoneReheatByName(self, t_name)
Model.getSetpointManagerSingleZoneReheatByName = _getSetpointManagerSingleZoneReheatByName

def _getSetpointManagerSingleZoneReheatsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerSingleZoneReheatVector:
    return getSetpointManagerSingleZoneReheatsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerSingleZoneReheatsByName = _getSetpointManagerSingleZoneReheatsByName

class SetpointManagerWarmest(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerWarmest_swiginit(self, _openstudiomodelhvac.new_SetpointManagerWarmest(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmest

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerWarmest_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues()

    @staticmethod
    def strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerWarmest_strategyValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerWarmest_controlVariable(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmest_setControlVariable(self, controlVariable)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerWarmest_minimumSetpointTemperature(self)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmest_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerWarmest_maximumSetpointTemperature(self)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmest_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

    def strategy(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerWarmest_strategy(self)

    def setStrategy(self, strategy: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmest_setStrategy(self, strategy)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerWarmest_setpointNode(self)

# Register SetpointManagerWarmest in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerWarmest_swigregister(SetpointManagerWarmest)

def SetpointManagerWarmest_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerWarmest_iddObjectType()

def SetpointManagerWarmest_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues()

def SetpointManagerWarmest_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerWarmest_strategyValues()


def toSetpointManagerWarmest(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerWarmest >":
    return _openstudiomodelhvac.toSetpointManagerWarmest(idfObject)

def getSetpointManagerWarmest(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerWarmest >":
    return _openstudiomodelhvac.getSetpointManagerWarmest(t_model, t_handle)

def getSetpointManagerWarmests(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > >":
    return _openstudiomodelhvac.getSetpointManagerWarmests(t_model)

def getSetpointManagerWarmestByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerWarmest >":
    return _openstudiomodelhvac.getSetpointManagerWarmestByName(t_model, t_name)

def getSetpointManagerWarmestsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > >":
    return _openstudiomodelhvac.getSetpointManagerWarmestsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerWarmest(self) -> OptionalSetpointManagerWarmest:
    return toSetpointManagerWarmest(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerWarmest = _to_SetpointManagerWarmest

def _getSetpointManagerWarmest(self, t_handle: "UUID") -> OptionalSetpointManagerWarmest:
    return getSetpointManagerWarmest(self, t_handle)
Model.getSetpointManagerWarmest = _getSetpointManagerWarmest

def _getSetpointManagerWarmest(self, t_handle_str: str) -> OptionalSetpointManagerWarmest:
    return getSetpointManagerWarmest(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerWarmest = _getSetpointManagerWarmest

def _getSetpointManagerWarmests(self) -> SetpointManagerWarmestVector:
    return getSetpointManagerWarmests(self)
Model.getSetpointManagerWarmests = _getSetpointManagerWarmests

def _getSetpointManagerWarmestByName(self, t_name: str) -> OptionalSetpointManagerWarmest:
    return getSetpointManagerWarmestByName(self, t_name)
Model.getSetpointManagerWarmestByName = _getSetpointManagerWarmestByName

def _getSetpointManagerWarmestsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerWarmestVector:
    return getSetpointManagerWarmestsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerWarmestsByName = _getSetpointManagerWarmestsByName

class SetpointManagerWarmestTemperatureFlow(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_swiginit(self, _openstudiomodelhvac.new_SetpointManagerWarmestTemperatureFlow(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestTemperatureFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues()

    @staticmethod
    def strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariable(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_minimumSetpointTemperature(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_maximumSetpointTemperature(self)

    def strategy(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategy(self)

    def minimumTurndownRatio(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_minimumTurndownRatio(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setControlVariable(self, controlVariable)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

    def setStrategy(self, strategy: "std::string") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setStrategy(self, strategy)

    def setMinimumTurndownRatio(self, minimumTurndownRatio: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMinimumTurndownRatio(self, minimumTurndownRatio)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setpointNode(self)

    def setSetpointNode(self, node: "Node") -> "bool":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setSetpointNode(self, node)

    def resetSetpointNode(self) -> "void":
        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_resetSetpointNode(self)

# Register SetpointManagerWarmestTemperatureFlow in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_swigregister(SetpointManagerWarmestTemperatureFlow)

def SetpointManagerWarmestTemperatureFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType()

def SetpointManagerWarmestTemperatureFlow_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues()

def SetpointManagerWarmestTemperatureFlow_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues()


def toSetpointManagerWarmestTemperatureFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":
    return _openstudiomodelhvac.toSetpointManagerWarmestTemperatureFlow(idfObject)

def getSetpointManagerWarmestTemperatureFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":
    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlow(t_model, t_handle)

def getSetpointManagerWarmestTemperatureFlows(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > >":
    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlows(t_model)

def getSetpointManagerWarmestTemperatureFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":
    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowByName(t_model, t_name)

def getSetpointManagerWarmestTemperatureFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > >":
    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerWarmestTemperatureFlow(self) -> OptionalSetpointManagerWarmestTemperatureFlow:
    return toSetpointManagerWarmestTemperatureFlow(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerWarmestTemperatureFlow = _to_SetpointManagerWarmestTemperatureFlow

def _getSetpointManagerWarmestTemperatureFlow(self, t_handle: "UUID") -> OptionalSetpointManagerWarmestTemperatureFlow:
    return getSetpointManagerWarmestTemperatureFlow(self, t_handle)
Model.getSetpointManagerWarmestTemperatureFlow = _getSetpointManagerWarmestTemperatureFlow

def _getSetpointManagerWarmestTemperatureFlow(self, t_handle_str: str) -> OptionalSetpointManagerWarmestTemperatureFlow:
    return getSetpointManagerWarmestTemperatureFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerWarmestTemperatureFlow = _getSetpointManagerWarmestTemperatureFlow

def _getSetpointManagerWarmestTemperatureFlows(self) -> SetpointManagerWarmestTemperatureFlowVector:
    return getSetpointManagerWarmestTemperatureFlows(self)
Model.getSetpointManagerWarmestTemperatureFlows = _getSetpointManagerWarmestTemperatureFlows

def _getSetpointManagerWarmestTemperatureFlowByName(self, t_name: str) -> OptionalSetpointManagerWarmestTemperatureFlow:
    return getSetpointManagerWarmestTemperatureFlowByName(self, t_name)
Model.getSetpointManagerWarmestTemperatureFlowByName = _getSetpointManagerWarmestTemperatureFlowByName

def _getSetpointManagerWarmestTemperatureFlowsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerWarmestTemperatureFlowVector:
    return getSetpointManagerWarmestTemperatureFlowsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerWarmestTemperatureFlowsByName = _getSetpointManagerWarmestTemperatureFlowsByName

class SetpointManagerColdest(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerColdest_swiginit(self, _openstudiomodelhvac.new_SetpointManagerColdest(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerColdest

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerColdest_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerColdest_controlVariableValues()

    @staticmethod
    def strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerColdest_strategyValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerColdest_controlVariable(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerColdest_minimumSetpointTemperature(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerColdest_maximumSetpointTemperature(self)

    def strategy(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerColdest_strategy(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerColdest_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdest_setControlVariable(self, controlVariable)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdest_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdest_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

    def setStrategy(self, strategy: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerColdest_setStrategy(self, strategy)

# Register SetpointManagerColdest in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerColdest_swigregister(SetpointManagerColdest)

def SetpointManagerColdest_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerColdest_iddObjectType()

def SetpointManagerColdest_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerColdest_controlVariableValues()

def SetpointManagerColdest_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerColdest_strategyValues()


def toSetpointManagerColdest(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerColdest >":
    return _openstudiomodelhvac.toSetpointManagerColdest(idfObject)

def getSetpointManagerColdest(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerColdest >":
    return _openstudiomodelhvac.getSetpointManagerColdest(t_model, t_handle)

def getSetpointManagerColdests(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > >":
    return _openstudiomodelhvac.getSetpointManagerColdests(t_model)

def getSetpointManagerColdestByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerColdest >":
    return _openstudiomodelhvac.getSetpointManagerColdestByName(t_model, t_name)

def getSetpointManagerColdestsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > >":
    return _openstudiomodelhvac.getSetpointManagerColdestsByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerColdest(self) -> OptionalSetpointManagerColdest:
    return toSetpointManagerColdest(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerColdest = _to_SetpointManagerColdest

def _getSetpointManagerColdest(self, t_handle: "UUID") -> OptionalSetpointManagerColdest:
    return getSetpointManagerColdest(self, t_handle)
Model.getSetpointManagerColdest = _getSetpointManagerColdest

def _getSetpointManagerColdest(self, t_handle_str: str) -> OptionalSetpointManagerColdest:
    return getSetpointManagerColdest(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerColdest = _getSetpointManagerColdest

def _getSetpointManagerColdests(self) -> SetpointManagerColdestVector:
    return getSetpointManagerColdests(self)
Model.getSetpointManagerColdests = _getSetpointManagerColdests

def _getSetpointManagerColdestByName(self, t_name: str) -> OptionalSetpointManagerColdest:
    return getSetpointManagerColdestByName(self, t_name)
Model.getSetpointManagerColdestByName = _getSetpointManagerColdestByName

def _getSetpointManagerColdestsByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerColdestVector:
    return getSetpointManagerColdestsByName(self, t_name, t_exactMatch)
Model.getSetpointManagerColdestsByName = _getSetpointManagerColdestsByName

class SetpointManagerFollowGroundTemperature(SetpointManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_swiginit(self, _openstudiomodelhvac.new_SetpointManagerFollowGroundTemperature(model))
    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowGroundTemperature

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType()

    @staticmethod
    def controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues()

    @staticmethod
    def referenceGroundTemperatureObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues()

    def controlVariable(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariable(self)

    def referenceGroundTemperatureObjectType(self) -> "std::string":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectType(self)

    def offsetTemperatureDifference(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_offsetTemperatureDifference(self)

    def maximumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_maximumSetpointTemperature(self)

    def minimumSetpointTemperature(self) -> "double":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_minimumSetpointTemperature(self)

    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setpointNode(self)

    def setControlVariable(self, controlVariable: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setControlVariable(self, controlVariable)

    def setReferenceGroundTemperatureObjectType(self, groundTemperatureObjType: "std::string const &") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setReferenceGroundTemperatureObjectType(self, groundTemperatureObjType)

    def setOffsetTemperatureDifference(self, offsetTemperatureDifference: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setOffsetTemperatureDifference(self, offsetTemperatureDifference)

    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: "double") -> "bool":
        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

# Register SetpointManagerFollowGroundTemperature in _openstudiomodelhvac:
_openstudiomodelhvac.SetpointManagerFollowGroundTemperature_swigregister(SetpointManagerFollowGroundTemperature)

def SetpointManagerFollowGroundTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType()

def SetpointManagerFollowGroundTemperature_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues()

def SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues()


def toSetpointManagerFollowGroundTemperature(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":
    return _openstudiomodelhvac.toSetpointManagerFollowGroundTemperature(idfObject)

def getSetpointManagerFollowGroundTemperature(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperature(t_model, t_handle)

def getSetpointManagerFollowGroundTemperatures(t_model: "Model") -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatures(t_model)

def getSetpointManagerFollowGroundTemperatureByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":
    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatureByName(t_model, t_name)

def getSetpointManagerFollowGroundTemperaturesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > >":
    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperaturesByName(t_model, t_name, t_exactMatch)

def _to_SetpointManagerFollowGroundTemperature(self) -> OptionalSetpointManagerFollowGroundTemperature:
    return toSetpointManagerFollowGroundTemperature(self)
openstudioutilitiesidf.IdfObject.to_SetpointManagerFollowGroundTemperature = _to_SetpointManagerFollowGroundTemperature

def _getSetpointManagerFollowGroundTemperature(self, t_handle: "UUID") -> OptionalSetpointManagerFollowGroundTemperature:
    return getSetpointManagerFollowGroundTemperature(self, t_handle)
Model.getSetpointManagerFollowGroundTemperature = _getSetpointManagerFollowGroundTemperature

def _getSetpointManagerFollowGroundTemperature(self, t_handle_str: str) -> OptionalSetpointManagerFollowGroundTemperature:
    return getSetpointManagerFollowGroundTemperature(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSetpointManagerFollowGroundTemperature = _getSetpointManagerFollowGroundTemperature

def _getSetpointManagerFollowGroundTemperatures(self) -> SetpointManagerFollowGroundTemperatureVector:
    return getSetpointManagerFollowGroundTemperatures(self)
Model.getSetpointManagerFollowGroundTemperatures = _getSetpointManagerFollowGroundTemperatures

def _getSetpointManagerFollowGroundTemperatureByName(self, t_name: str) -> OptionalSetpointManagerFollowGroundTemperature:
    return getSetpointManagerFollowGroundTemperatureByName(self, t_name)
Model.getSetpointManagerFollowGroundTemperatureByName = _getSetpointManagerFollowGroundTemperatureByName

def _getSetpointManagerFollowGroundTemperaturesByName(self, t_name: str, t_exactMatch: bool) -> SetpointManagerFollowGroundTemperatureVector:
    return getSetpointManagerFollowGroundTemperaturesByName(self, t_name, t_exactMatch)
Model.getSetpointManagerFollowGroundTemperaturesByName = _getSetpointManagerFollowGroundTemperaturesByName


def addSystemType1(model: "Model", zones: "ThermalZoneVector") -> "void":
    return _openstudiomodelhvac.addSystemType1(model, zones)

def addSystemType2(model: "Model", zones: "ThermalZoneVector") -> "void":
    return _openstudiomodelhvac.addSystemType2(model, zones)

def addSystemType3(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType3(model)

def addSystemType4(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType4(model)

def addSystemType5(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType5(model)

def addSystemType6(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType6(model)

def addSystemType7(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType7(model)

def addSystemType8(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType8(model)

def addSystemType9(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType9(model)

def addSystemType10(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSystemType10(model)

def addSHWLoop(model: "Model") -> "openstudio::model::Loop":
    return _openstudiomodelhvac.addSHWLoop(model)


