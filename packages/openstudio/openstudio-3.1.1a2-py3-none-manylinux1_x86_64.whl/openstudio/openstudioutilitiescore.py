# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiescore
else:
    import _openstudioutilitiescore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiescore.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudioutilitiescore.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudioutilitiescore.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiescore.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioutilitiescore.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioutilitiescore.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioutilitiescore.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiescore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiescore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudioutilitiescore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudioutilitiescore.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioutilitiescore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiescore:
_openstudioutilitiescore.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudioutilitiescore.SHARED_PTR_DISOWN

def throwException() -> "void":
    return _openstudioutilitiescore.throwException()
class Exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.Exception_swiginit(self, _openstudioutilitiescore.new_Exception(*args))
    __swig_destroy__ = _openstudioutilitiescore.delete_Exception

    def message(self) -> "std::string const &":
        return _openstudioutilitiescore.Exception_message(self)

    def what(self) -> "char const *":
        return _openstudioutilitiescore.Exception_what(self)

# Register Exception in _openstudioutilitiescore:
_openstudioutilitiescore.Exception_swigregister(Exception)


def eraseEmptyElements(sv: "StringVector") -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudioutilitiescore.eraseEmptyElements(sv)
class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _openstudioutilitiescore.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _openstudioutilitiescore.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _openstudioutilitiescore.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _openstudioutilitiescore.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _openstudioutilitiescore.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _openstudioutilitiescore.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _openstudioutilitiescore.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        return _openstudioutilitiescore.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _openstudioutilitiescore.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _openstudioutilitiescore.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _openstudioutilitiescore.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _openstudioutilitiescore.BoolVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _openstudioutilitiescore.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _openstudioutilitiescore.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.BoolVector_swiginit(self, _openstudioutilitiescore.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _openstudioutilitiescore.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _openstudioutilitiescore.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _openstudioutilitiescore.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _openstudioutilitiescore.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _openstudioutilitiescore.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _openstudioutilitiescore.BoolVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_BoolVector

# Register BoolVector in _openstudioutilitiescore:
_openstudioutilitiescore.BoolVector_swigregister(BoolVector)

class UnsignedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.UnsignedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.UnsignedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.UnsignedVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _openstudioutilitiescore.UnsignedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _openstudioutilitiescore.UnsignedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _openstudioutilitiescore.UnsignedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _openstudioutilitiescore.UnsignedVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _openstudioutilitiescore.UnsignedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.UnsignedVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedVector_size(self)

    def swap(self, v: "UnsignedVector") -> "void":
        return _openstudioutilitiescore.UnsignedVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _openstudioutilitiescore.UnsignedVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _openstudioutilitiescore.UnsignedVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.UnsignedVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _openstudioutilitiescore.UnsignedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.UnsignedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.UnsignedVector_swiginit(self, _openstudioutilitiescore.new_UnsignedVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _openstudioutilitiescore.UnsignedVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _openstudioutilitiescore.UnsignedVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _openstudioutilitiescore.UnsignedVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _openstudioutilitiescore.UnsignedVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _openstudioutilitiescore.UnsignedVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_UnsignedVector

# Register UnsignedVector in _openstudioutilitiescore:
_openstudioutilitiescore.UnsignedVector_swigregister(UnsignedVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _openstudioutilitiescore.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _openstudioutilitiescore.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _openstudioutilitiescore.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _openstudioutilitiescore.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _openstudioutilitiescore.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _openstudioutilitiescore.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _openstudioutilitiescore.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _openstudioutilitiescore.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _openstudioutilitiescore.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _openstudioutilitiescore.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _openstudioutilitiescore.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _openstudioutilitiescore.IntVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _openstudioutilitiescore.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _openstudioutilitiescore.IntVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.IntVector_swiginit(self, _openstudioutilitiescore.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _openstudioutilitiescore.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _openstudioutilitiescore.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _openstudioutilitiescore.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _openstudioutilitiescore.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _openstudioutilitiescore.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _openstudioutilitiescore.IntVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_IntVector

# Register IntVector in _openstudioutilitiescore:
_openstudioutilitiescore.IntVector_swigregister(IntVector)

class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.LongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.LongVector___bool__(self)

    def __len__(self) -> "std::vector< long >::size_type":
        return _openstudioutilitiescore.LongVector___len__(self)

    def __getslice__(self, i: "std::vector< long >::difference_type", j: "std::vector< long >::difference_type") -> "std::vector< long,std::allocator< long > > *":
        return _openstudioutilitiescore.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.LongVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< long >::difference_type", j: "std::vector< long >::difference_type") -> "void":
        return _openstudioutilitiescore.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.LongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":
        return _openstudioutilitiescore.LongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.LongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< long >::value_type":
        return _openstudioutilitiescore.LongVector_pop(self)

    def append(self, x: "std::vector< long >::value_type const &") -> "void":
        return _openstudioutilitiescore.LongVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.LongVector_empty(self)

    def size(self) -> "std::vector< long >::size_type":
        return _openstudioutilitiescore.LongVector_size(self)

    def swap(self, v: "LongVector") -> "void":
        return _openstudioutilitiescore.LongVector_swap(self, v)

    def begin(self) -> "std::vector< long >::iterator":
        return _openstudioutilitiescore.LongVector_begin(self)

    def end(self) -> "std::vector< long >::iterator":
        return _openstudioutilitiescore.LongVector_end(self)

    def rbegin(self) -> "std::vector< long >::reverse_iterator":
        return _openstudioutilitiescore.LongVector_rbegin(self)

    def rend(self) -> "std::vector< long >::reverse_iterator":
        return _openstudioutilitiescore.LongVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.LongVector_clear(self)

    def get_allocator(self) -> "std::vector< long >::allocator_type":
        return _openstudioutilitiescore.LongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.LongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< long >::iterator":
        return _openstudioutilitiescore.LongVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.LongVector_swiginit(self, _openstudioutilitiescore.new_LongVector(*args))

    def push_back(self, x: "std::vector< long >::value_type const &") -> "void":
        return _openstudioutilitiescore.LongVector_push_back(self, x)

    def front(self) -> "std::vector< long >::value_type const &":
        return _openstudioutilitiescore.LongVector_front(self)

    def back(self) -> "std::vector< long >::value_type const &":
        return _openstudioutilitiescore.LongVector_back(self)

    def assign(self, n: "std::vector< long >::size_type", x: "std::vector< long >::value_type const &") -> "void":
        return _openstudioutilitiescore.LongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.LongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.LongVector_insert(self, *args)

    def reserve(self, n: "std::vector< long >::size_type") -> "void":
        return _openstudioutilitiescore.LongVector_reserve(self, n)

    def capacity(self) -> "std::vector< long >::size_type":
        return _openstudioutilitiescore.LongVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_LongVector

# Register LongVector in _openstudioutilitiescore:
_openstudioutilitiescore.LongVector_swigregister(LongVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _openstudioutilitiescore.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _openstudioutilitiescore.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _openstudioutilitiescore.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _openstudioutilitiescore.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _openstudioutilitiescore.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _openstudioutilitiescore.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _openstudioutilitiescore.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _openstudioutilitiescore.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _openstudioutilitiescore.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _openstudioutilitiescore.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _openstudioutilitiescore.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _openstudioutilitiescore.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _openstudioutilitiescore.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _openstudioutilitiescore.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.DoubleVector_swiginit(self, _openstudioutilitiescore.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _openstudioutilitiescore.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _openstudioutilitiescore.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _openstudioutilitiescore.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _openstudioutilitiescore.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _openstudioutilitiescore.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _openstudioutilitiescore.DoubleVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_DoubleVector

# Register DoubleVector in _openstudioutilitiescore:
_openstudioutilitiescore.DoubleVector_swigregister(DoubleVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _openstudioutilitiescore.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _openstudioutilitiescore.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _openstudioutilitiescore.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _openstudioutilitiescore.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _openstudioutilitiescore.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _openstudioutilitiescore.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _openstudioutilitiescore.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _openstudioutilitiescore.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _openstudioutilitiescore.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _openstudioutilitiescore.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _openstudioutilitiescore.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _openstudioutilitiescore.StringVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _openstudioutilitiescore.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _openstudioutilitiescore.StringVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.StringVector_swiginit(self, _openstudioutilitiescore.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _openstudioutilitiescore.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _openstudioutilitiescore.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _openstudioutilitiescore.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _openstudioutilitiescore.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _openstudioutilitiescore.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _openstudioutilitiescore.StringVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringVector

# Register StringVector in _openstudioutilitiescore:
_openstudioutilitiescore.StringVector_swigregister(StringVector)

class StringVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _openstudioutilitiescore.StringVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *":
        return _openstudioutilitiescore.StringVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "void":
        return _openstudioutilitiescore.StringVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _openstudioutilitiescore.StringVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::string > >::value_type":
        return _openstudioutilitiescore.StringVectorVector_pop(self)

    def append(self, x: "StringVector") -> "void":
        return _openstudioutilitiescore.StringVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _openstudioutilitiescore.StringVectorVector_size(self)

    def swap(self, v: "StringVectorVector") -> "void":
        return _openstudioutilitiescore.StringVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _openstudioutilitiescore.StringVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _openstudioutilitiescore.StringVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringVectorVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::string > >::allocator_type":
        return _openstudioutilitiescore.StringVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.StringVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::string > >::iterator":
        return _openstudioutilitiescore.StringVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.StringVectorVector_swiginit(self, _openstudioutilitiescore.new_StringVectorVector(*args))

    def push_back(self, x: "StringVector") -> "void":
        return _openstudioutilitiescore.StringVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _openstudioutilitiescore.StringVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _openstudioutilitiescore.StringVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< std::string > >::size_type", x: "StringVector") -> "void":
        return _openstudioutilitiescore.StringVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.StringVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.StringVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::string > >::size_type") -> "void":
        return _openstudioutilitiescore.StringVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _openstudioutilitiescore.StringVectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringVectorVector

# Register StringVectorVector in _openstudioutilitiescore:
_openstudioutilitiescore.StringVectorVector_swigregister(StringVectorVector)

class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.IntVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.IntVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _openstudioutilitiescore.IntVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _openstudioutilitiescore.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _openstudioutilitiescore.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _openstudioutilitiescore.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.IntVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _openstudioutilitiescore.IntVectorVector_pop(self)

    def append(self, x: "IntVector") -> "void":
        return _openstudioutilitiescore.IntVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.IntVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _openstudioutilitiescore.IntVectorVector_size(self)

    def swap(self, v: "IntVectorVector") -> "void":
        return _openstudioutilitiescore.IntVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _openstudioutilitiescore.IntVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _openstudioutilitiescore.IntVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _openstudioutilitiescore.IntVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _openstudioutilitiescore.IntVectorVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.IntVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _openstudioutilitiescore.IntVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.IntVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _openstudioutilitiescore.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.IntVectorVector_swiginit(self, _openstudioutilitiescore.new_IntVectorVector(*args))

    def push_back(self, x: "IntVector") -> "void":
        return _openstudioutilitiescore.IntVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _openstudioutilitiescore.IntVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _openstudioutilitiescore.IntVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "IntVector") -> "void":
        return _openstudioutilitiescore.IntVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.IntVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.IntVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _openstudioutilitiescore.IntVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _openstudioutilitiescore.IntVectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_IntVectorVector

# Register IntVectorVector in _openstudioutilitiescore:
_openstudioutilitiescore.IntVectorVector_swigregister(IntVectorVector)

class UnsignedSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.UnsignedSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.UnsignedSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.UnsignedSet___bool__(self)

    def __len__(self) -> "std::set< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedSet___len__(self)

    def append(self, x: "std::set< unsigned int >::value_type") -> "void":
        return _openstudioutilitiescore.UnsignedSet_append(self, x)

    def __contains__(self, x: "std::set< unsigned int >::value_type") -> "bool":
        return _openstudioutilitiescore.UnsignedSet___contains__(self, x)

    def __getitem__(self, i: "std::set< unsigned int >::difference_type") -> "std::set< unsigned int >::value_type":
        return _openstudioutilitiescore.UnsignedSet___getitem__(self, i)

    def add(self, x: "std::set< unsigned int >::value_type") -> "void":
        return _openstudioutilitiescore.UnsignedSet_add(self, x)

    def discard(self, x: "std::set< unsigned int >::value_type") -> "void":
        return _openstudioutilitiescore.UnsignedSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiescore.UnsignedSet_swiginit(self, _openstudioutilitiescore.new_UnsignedSet(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiescore.UnsignedSet_empty(self)

    def size(self) -> "std::set< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.UnsignedSet_clear(self)

    def swap(self, v: "UnsignedSet") -> "void":
        return _openstudioutilitiescore.UnsignedSet_swap(self, v)

    def count(self, x: "std::set< unsigned int >::key_type const &") -> "std::set< unsigned int >::size_type":
        return _openstudioutilitiescore.UnsignedSet_count(self, x)

    def begin(self) -> "std::set< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedSet_begin(self)

    def end(self) -> "std::set< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedSet_end(self)

    def rbegin(self) -> "std::set< unsigned int >::reverse_iterator":
        return _openstudioutilitiescore.UnsignedSet_rbegin(self)

    def rend(self) -> "std::set< unsigned int >::reverse_iterator":
        return _openstudioutilitiescore.UnsignedSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiescore.UnsignedSet_erase(self, *args)

    def find(self, x: "std::set< unsigned int >::key_type const &") -> "std::set< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedSet_find(self, x)

    def lower_bound(self, x: "std::set< unsigned int >::key_type const &") -> "std::set< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedSet_lower_bound(self, x)

    def upper_bound(self, x: "std::set< unsigned int >::key_type const &") -> "std::set< unsigned int >::iterator":
        return _openstudioutilitiescore.UnsignedSet_upper_bound(self, x)

    def equal_range(self, x: "std::set< unsigned int >::key_type const &") -> "std::pair< std::set< unsigned int >::iterator,std::set< unsigned int >::iterator >":
        return _openstudioutilitiescore.UnsignedSet_equal_range(self, x)

    def insert(self, __x: "std::set< unsigned int >::value_type const &") -> "std::pair< std::set< unsigned int >::iterator,bool >":
        return _openstudioutilitiescore.UnsignedSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiescore.delete_UnsignedSet

# Register UnsignedSet in _openstudioutilitiescore:
_openstudioutilitiescore.UnsignedSet_swigregister(UnsignedSet)

class IntSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.IntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.IntSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.IntSet___bool__(self)

    def __len__(self) -> "std::set< int >::size_type":
        return _openstudioutilitiescore.IntSet___len__(self)

    def append(self, x: "std::set< int >::value_type") -> "void":
        return _openstudioutilitiescore.IntSet_append(self, x)

    def __contains__(self, x: "std::set< int >::value_type") -> "bool":
        return _openstudioutilitiescore.IntSet___contains__(self, x)

    def __getitem__(self, i: "std::set< int >::difference_type") -> "std::set< int >::value_type":
        return _openstudioutilitiescore.IntSet___getitem__(self, i)

    def add(self, x: "std::set< int >::value_type") -> "void":
        return _openstudioutilitiescore.IntSet_add(self, x)

    def discard(self, x: "std::set< int >::value_type") -> "void":
        return _openstudioutilitiescore.IntSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiescore.IntSet_swiginit(self, _openstudioutilitiescore.new_IntSet(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiescore.IntSet_empty(self)

    def size(self) -> "std::set< int >::size_type":
        return _openstudioutilitiescore.IntSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.IntSet_clear(self)

    def swap(self, v: "IntSet") -> "void":
        return _openstudioutilitiescore.IntSet_swap(self, v)

    def count(self, x: "std::set< int >::key_type const &") -> "std::set< int >::size_type":
        return _openstudioutilitiescore.IntSet_count(self, x)

    def begin(self) -> "std::set< int >::iterator":
        return _openstudioutilitiescore.IntSet_begin(self)

    def end(self) -> "std::set< int >::iterator":
        return _openstudioutilitiescore.IntSet_end(self)

    def rbegin(self) -> "std::set< int >::reverse_iterator":
        return _openstudioutilitiescore.IntSet_rbegin(self)

    def rend(self) -> "std::set< int >::reverse_iterator":
        return _openstudioutilitiescore.IntSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiescore.IntSet_erase(self, *args)

    def find(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _openstudioutilitiescore.IntSet_find(self, x)

    def lower_bound(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _openstudioutilitiescore.IntSet_lower_bound(self, x)

    def upper_bound(self, x: "std::set< int >::key_type const &") -> "std::set< int >::iterator":
        return _openstudioutilitiescore.IntSet_upper_bound(self, x)

    def equal_range(self, x: "std::set< int >::key_type const &") -> "std::pair< std::set< int >::iterator,std::set< int >::iterator >":
        return _openstudioutilitiescore.IntSet_equal_range(self, x)

    def insert(self, __x: "std::set< int >::value_type const &") -> "std::pair< std::set< int >::iterator,bool >":
        return _openstudioutilitiescore.IntSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiescore.delete_IntSet

# Register IntSet in _openstudioutilitiescore:
_openstudioutilitiescore.IntSet_swigregister(IntSet)

class DoubleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.DoubleSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.DoubleSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.DoubleSet___bool__(self)

    def __len__(self) -> "std::set< double >::size_type":
        return _openstudioutilitiescore.DoubleSet___len__(self)

    def append(self, x: "std::set< double >::value_type") -> "void":
        return _openstudioutilitiescore.DoubleSet_append(self, x)

    def __contains__(self, x: "std::set< double >::value_type") -> "bool":
        return _openstudioutilitiescore.DoubleSet___contains__(self, x)

    def __getitem__(self, i: "std::set< double >::difference_type") -> "std::set< double >::value_type":
        return _openstudioutilitiescore.DoubleSet___getitem__(self, i)

    def add(self, x: "std::set< double >::value_type") -> "void":
        return _openstudioutilitiescore.DoubleSet_add(self, x)

    def discard(self, x: "std::set< double >::value_type") -> "void":
        return _openstudioutilitiescore.DoubleSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiescore.DoubleSet_swiginit(self, _openstudioutilitiescore.new_DoubleSet(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiescore.DoubleSet_empty(self)

    def size(self) -> "std::set< double >::size_type":
        return _openstudioutilitiescore.DoubleSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.DoubleSet_clear(self)

    def swap(self, v: "DoubleSet") -> "void":
        return _openstudioutilitiescore.DoubleSet_swap(self, v)

    def count(self, x: "std::set< double >::key_type const &") -> "std::set< double >::size_type":
        return _openstudioutilitiescore.DoubleSet_count(self, x)

    def begin(self) -> "std::set< double >::iterator":
        return _openstudioutilitiescore.DoubleSet_begin(self)

    def end(self) -> "std::set< double >::iterator":
        return _openstudioutilitiescore.DoubleSet_end(self)

    def rbegin(self) -> "std::set< double >::reverse_iterator":
        return _openstudioutilitiescore.DoubleSet_rbegin(self)

    def rend(self) -> "std::set< double >::reverse_iterator":
        return _openstudioutilitiescore.DoubleSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiescore.DoubleSet_erase(self, *args)

    def find(self, x: "std::set< double >::key_type const &") -> "std::set< double >::iterator":
        return _openstudioutilitiescore.DoubleSet_find(self, x)

    def lower_bound(self, x: "std::set< double >::key_type const &") -> "std::set< double >::iterator":
        return _openstudioutilitiescore.DoubleSet_lower_bound(self, x)

    def upper_bound(self, x: "std::set< double >::key_type const &") -> "std::set< double >::iterator":
        return _openstudioutilitiescore.DoubleSet_upper_bound(self, x)

    def equal_range(self, x: "std::set< double >::key_type const &") -> "std::pair< std::set< double >::iterator,std::set< double >::iterator >":
        return _openstudioutilitiescore.DoubleSet_equal_range(self, x)

    def insert(self, __x: "std::set< double >::value_type const &") -> "std::pair< std::set< double >::iterator,bool >":
        return _openstudioutilitiescore.DoubleSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiescore.delete_DoubleSet

# Register DoubleSet in _openstudioutilitiescore:
_openstudioutilitiescore.DoubleSet_swigregister(DoubleSet)

class StringSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringSet___bool__(self)

    def __len__(self) -> "std::set< std::string >::size_type":
        return _openstudioutilitiescore.StringSet___len__(self)

    def append(self, x: "std::set< std::string >::value_type") -> "void":
        return _openstudioutilitiescore.StringSet_append(self, x)

    def __contains__(self, x: "std::set< std::string >::value_type") -> "bool":
        return _openstudioutilitiescore.StringSet___contains__(self, x)

    def __getitem__(self, i: "std::set< std::string >::difference_type") -> "std::set< std::string >::value_type":
        return _openstudioutilitiescore.StringSet___getitem__(self, i)

    def add(self, x: "std::set< std::string >::value_type") -> "void":
        return _openstudioutilitiescore.StringSet_add(self, x)

    def discard(self, x: "std::set< std::string >::value_type") -> "void":
        return _openstudioutilitiescore.StringSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiescore.StringSet_swiginit(self, _openstudioutilitiescore.new_StringSet(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringSet_empty(self)

    def size(self) -> "std::set< std::string >::size_type":
        return _openstudioutilitiescore.StringSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringSet_clear(self)

    def swap(self, v: "StringSet") -> "void":
        return _openstudioutilitiescore.StringSet_swap(self, v)

    def count(self, x: "std::set< std::string >::key_type const &") -> "std::set< std::string >::size_type":
        return _openstudioutilitiescore.StringSet_count(self, x)

    def begin(self) -> "std::set< std::string >::iterator":
        return _openstudioutilitiescore.StringSet_begin(self)

    def end(self) -> "std::set< std::string >::iterator":
        return _openstudioutilitiescore.StringSet_end(self)

    def rbegin(self) -> "std::set< std::string >::reverse_iterator":
        return _openstudioutilitiescore.StringSet_rbegin(self)

    def rend(self) -> "std::set< std::string >::reverse_iterator":
        return _openstudioutilitiescore.StringSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiescore.StringSet_erase(self, *args)

    def find(self, x: "std::set< std::string >::key_type const &") -> "std::set< std::string >::iterator":
        return _openstudioutilitiescore.StringSet_find(self, x)

    def lower_bound(self, x: "std::set< std::string >::key_type const &") -> "std::set< std::string >::iterator":
        return _openstudioutilitiescore.StringSet_lower_bound(self, x)

    def upper_bound(self, x: "std::set< std::string >::key_type const &") -> "std::set< std::string >::iterator":
        return _openstudioutilitiescore.StringSet_upper_bound(self, x)

    def equal_range(self, x: "std::set< std::string >::key_type const &") -> "std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >":
        return _openstudioutilitiescore.StringSet_equal_range(self, x)

    def insert(self, __x: "std::set< std::string >::value_type const &") -> "std::pair< std::set< std::string >::iterator,bool >":
        return _openstudioutilitiescore.StringSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringSet

# Register StringSet in _openstudioutilitiescore:
_openstudioutilitiescore.StringSet_swigregister(StringSet)

class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.StringPair_swiginit(self, _openstudioutilitiescore.new_StringPair(*args))
    first = property(_openstudioutilitiescore.StringPair_first_get, _openstudioutilitiescore.StringPair_first_set)
    second = property(_openstudioutilitiescore.StringPair_second_get, _openstudioutilitiescore.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiescore.delete_StringPair

# Register StringPair in _openstudioutilitiescore:
_openstudioutilitiescore.StringPair_swigregister(StringPair)

class StringPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *":
        return _openstudioutilitiescore.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "void":
        return _openstudioutilitiescore.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudioutilitiescore.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::string > >::value_type":
        return _openstudioutilitiescore.StringPairVector_pop(self)

    def append(self, x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairVector_size(self)

    def swap(self, v: "StringPairVector") -> "void":
        return _openstudioutilitiescore.StringPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringPairVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::string > >::allocator_type":
        return _openstudioutilitiescore.StringPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.StringPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.StringPairVector_swiginit(self, _openstudioutilitiescore.new_StringPairVector(*args))

    def push_back(self, x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudioutilitiescore.StringPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudioutilitiescore.StringPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::string > >::size_type", x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::string > >::size_type") -> "void":
        return _openstudioutilitiescore.StringPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringPairVector

# Register StringPairVector in _openstudioutilitiescore:
_openstudioutilitiescore.StringPairVector_swigregister(StringPairVector)

class StringPairSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringPairSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringPairSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringPairSet___bool__(self)

    def __len__(self) -> "std::set< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairSet___len__(self)

    def append(self, x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairSet_append(self, x)

    def __contains__(self, x: "StringPair") -> "bool":
        return _openstudioutilitiescore.StringPairSet___contains__(self, x)

    def __getitem__(self, i: "std::set< std::pair< std::string,std::string > >::difference_type") -> "std::set< std::pair< std::string,std::string > >::value_type":
        return _openstudioutilitiescore.StringPairSet___getitem__(self, i)

    def add(self, x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairSet_add(self, x)

    def discard(self, x: "StringPair") -> "void":
        return _openstudioutilitiescore.StringPairSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiescore.StringPairSet_swiginit(self, _openstudioutilitiescore.new_StringPairSet(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringPairSet_empty(self)

    def size(self) -> "std::set< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringPairSet_clear(self)

    def swap(self, v: "StringPairSet") -> "void":
        return _openstudioutilitiescore.StringPairSet_swap(self, v)

    def count(self, x: "StringPair") -> "std::set< std::pair< std::string,std::string > >::size_type":
        return _openstudioutilitiescore.StringPairSet_count(self, x)

    def begin(self) -> "std::set< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairSet_begin(self)

    def end(self) -> "std::set< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairSet_end(self)

    def rbegin(self) -> "std::set< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringPairSet_rbegin(self)

    def rend(self) -> "std::set< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudioutilitiescore.StringPairSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiescore.StringPairSet_erase(self, *args)

    def find(self, x: "StringPair") -> "std::set< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairSet_find(self, x)

    def lower_bound(self, x: "StringPair") -> "std::set< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairSet_lower_bound(self, x)

    def upper_bound(self, x: "StringPair") -> "std::set< std::pair< std::string,std::string > >::iterator":
        return _openstudioutilitiescore.StringPairSet_upper_bound(self, x)

    def equal_range(self, x: "StringPair") -> "std::pair< std::set< std::pair< std::string,std::string > >::iterator,std::set< std::pair< std::string,std::string > >::iterator >":
        return _openstudioutilitiescore.StringPairSet_equal_range(self, x)

    def insert(self, __x: "StringPair") -> "std::pair< std::set< std::pair< std::string,std::string > >::iterator,bool >":
        return _openstudioutilitiescore.StringPairSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringPairSet

# Register StringPairSet in _openstudioutilitiescore:
_openstudioutilitiescore.StringPairSet_swigregister(StringPairSet)

class StringUIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.StringUIntPair_swiginit(self, _openstudioutilitiescore.new_StringUIntPair(*args))
    first = property(_openstudioutilitiescore.StringUIntPair_first_get, _openstudioutilitiescore.StringUIntPair_first_set)
    second = property(_openstudioutilitiescore.StringUIntPair_second_get, _openstudioutilitiescore.StringUIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiescore.delete_StringUIntPair

# Register StringUIntPair in _openstudioutilitiescore:
_openstudioutilitiescore.StringUIntPair_swigregister(StringUIntPair)

class StringUIntPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.StringUIntPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.StringUIntPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.StringUIntPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,unsigned int > >::size_type":
        return _openstudioutilitiescore.StringUIntPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,unsigned int > >::difference_type", j: "std::vector< std::pair< std::string,unsigned int > >::difference_type") -> "std::vector< std::pair< std::string,unsigned int >,std::allocator< std::pair< std::string,unsigned int > > > *":
        return _openstudioutilitiescore.StringUIntPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,unsigned int > >::difference_type", j: "std::vector< std::pair< std::string,unsigned int > >::difference_type") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,unsigned int > >::value_type const &":
        return _openstudioutilitiescore.StringUIntPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,unsigned int > >::value_type":
        return _openstudioutilitiescore.StringUIntPairVector_pop(self)

    def append(self, x: "StringUIntPair") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.StringUIntPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,unsigned int > >::size_type":
        return _openstudioutilitiescore.StringUIntPairVector_size(self)

    def swap(self, v: "StringUIntPairVector") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,unsigned int > >::iterator":
        return _openstudioutilitiescore.StringUIntPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,unsigned int > >::iterator":
        return _openstudioutilitiescore.StringUIntPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,unsigned int > >::reverse_iterator":
        return _openstudioutilitiescore.StringUIntPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,unsigned int > >::reverse_iterator":
        return _openstudioutilitiescore.StringUIntPairVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,unsigned int > >::allocator_type":
        return _openstudioutilitiescore.StringUIntPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,unsigned int > >::iterator":
        return _openstudioutilitiescore.StringUIntPairVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.StringUIntPairVector_swiginit(self, _openstudioutilitiescore.new_StringUIntPairVector(*args))

    def push_back(self, x: "StringUIntPair") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,unsigned int > >::value_type const &":
        return _openstudioutilitiescore.StringUIntPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,unsigned int > >::value_type const &":
        return _openstudioutilitiescore.StringUIntPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,unsigned int > >::size_type", x: "StringUIntPair") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,unsigned int > >::size_type") -> "void":
        return _openstudioutilitiescore.StringUIntPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,unsigned int > >::size_type":
        return _openstudioutilitiescore.StringUIntPairVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringUIntPairVector

# Register StringUIntPairVector in _openstudioutilitiescore:
_openstudioutilitiescore.StringUIntPairVector_swigregister(StringUIntPairVector)

class UIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.UIntPair_swiginit(self, _openstudioutilitiescore.new_UIntPair(*args))
    first = property(_openstudioutilitiescore.UIntPair_first_get, _openstudioutilitiescore.UIntPair_first_set)
    second = property(_openstudioutilitiescore.UIntPair_second_get, _openstudioutilitiescore.UIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiescore.delete_UIntPair

# Register UIntPair in _openstudioutilitiescore:
_openstudioutilitiescore.UIntPair_swigregister(UIntPair)

class Any(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def toString(self) -> "std::string":
        return _openstudioutilitiescore.Any_toString(self)

    def toInt(self) -> "int":
        return _openstudioutilitiescore.Any_toInt(self)

    def toUnsigned(self) -> "unsigned int":
        return _openstudioutilitiescore.Any_toUnsigned(self)

    def toFloat(self) -> "float":
        return _openstudioutilitiescore.Any_toFloat(self)

    def toDouble(self) -> "double":
        return _openstudioutilitiescore.Any_toDouble(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.Any___str__(self)

    def __int__(self) -> "int":
        return _openstudioutilitiescore.Any___int__(self)

    def __float__(self) -> "float":
        return _openstudioutilitiescore.Any___float__(self)

    def __init__(self):
        _openstudioutilitiescore.Any_swiginit(self, _openstudioutilitiescore.new_Any())
    __swig_destroy__ = _openstudioutilitiescore.delete_Any

# Register Any in _openstudioutilitiescore:
_openstudioutilitiescore.Any_swigregister(Any)

class OptionalInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalInt_swiginit(self, _openstudioutilitiescore.new_OptionalInt(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalInt_reset(self)

    def __ref__(self) -> "int":
        return _openstudioutilitiescore.OptionalInt___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalInt_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalInt_isNull(self)

    def get(self) -> "int":
        return _openstudioutilitiescore.OptionalInt_get(self)

    def set(self, t: "int const &") -> "void":
        return _openstudioutilitiescore.OptionalInt_set(self, t)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.OptionalInt___str__(self)

    def __int__(self) -> "int":
        return _openstudioutilitiescore.OptionalInt___int__(self)

    def __float__(self) -> "float":
        return _openstudioutilitiescore.OptionalInt___float__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalInt

# Register OptionalInt in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalInt_swigregister(OptionalInt)

class OptionalBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalBool_swiginit(self, _openstudioutilitiescore.new_OptionalBool(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalBool_reset(self)

    def __ref__(self) -> "bool":
        return _openstudioutilitiescore.OptionalBool___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalBool_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalBool_isNull(self)

    def get(self) -> "bool":
        return _openstudioutilitiescore.OptionalBool_get(self)

    def set(self, t: "bool const &") -> "void":
        return _openstudioutilitiescore.OptionalBool_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalBool

# Register OptionalBool in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalBool_swigregister(OptionalBool)

class OptionalUnsigned(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalUnsigned_swiginit(self, _openstudioutilitiescore.new_OptionalUnsigned(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalUnsigned_reset(self)

    def __ref__(self) -> "unsigned int":
        return _openstudioutilitiescore.OptionalUnsigned___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalUnsigned_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalUnsigned_isNull(self)

    def get(self) -> "unsigned int":
        return _openstudioutilitiescore.OptionalUnsigned_get(self)

    def set(self, t: "unsigned int const &") -> "void":
        return _openstudioutilitiescore.OptionalUnsigned_set(self, t)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.OptionalUnsigned___str__(self)

    def __int__(self) -> "int":
        return _openstudioutilitiescore.OptionalUnsigned___int__(self)

    def __float__(self) -> "float":
        return _openstudioutilitiescore.OptionalUnsigned___float__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUnsigned

# Register OptionalUnsigned in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalUnsigned_swigregister(OptionalUnsigned)

class OptionalDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalDouble_swiginit(self, _openstudioutilitiescore.new_OptionalDouble(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalDouble_reset(self)

    def __ref__(self) -> "double":
        return _openstudioutilitiescore.OptionalDouble___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalDouble_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalDouble_isNull(self)

    def get(self) -> "double":
        return _openstudioutilitiescore.OptionalDouble_get(self)

    def set(self, t: "double const &") -> "void":
        return _openstudioutilitiescore.OptionalDouble_set(self, t)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.OptionalDouble___str__(self)

    def __int__(self) -> "int":
        return _openstudioutilitiescore.OptionalDouble___int__(self)

    def __float__(self) -> "float":
        return _openstudioutilitiescore.OptionalDouble___float__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalDouble

# Register OptionalDouble in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalDouble_swigregister(OptionalDouble)

class OptionalString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalString_swiginit(self, _openstudioutilitiescore.new_OptionalString(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalString_reset(self)

    def __ref__(self) -> "std::string":
        return _openstudioutilitiescore.OptionalString___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalString_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalString_isNull(self)

    def get(self) -> "std::string":
        return _openstudioutilitiescore.OptionalString_get(self)

    def set(self, t: "std::string const &") -> "void":
        return _openstudioutilitiescore.OptionalString_set(self, t)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.OptionalString___str__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalString

# Register OptionalString in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalString_swigregister(OptionalString)

class OptionalStringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalStringVector_swiginit(self, _openstudioutilitiescore.new_OptionalStringVector(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalStringVector_reset(self)

    def __ref__(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiescore.OptionalStringVector___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalStringVector_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalStringVector_isNull(self)

    def get(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiescore.OptionalStringVector_get(self)

    def set(self, t: "StringVector") -> "void":
        return _openstudioutilitiescore.OptionalStringVector_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalStringVector

# Register OptionalStringVector in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalStringVector_swigregister(OptionalStringVector)

class OptionalDoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalDoubleVector_swiginit(self, _openstudioutilitiescore.new_OptionalDoubleVector(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalDoubleVector_reset(self)

    def __ref__(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiescore.OptionalDoubleVector___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalDoubleVector_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalDoubleVector_isNull(self)

    def get(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiescore.OptionalDoubleVector_get(self)

    def set(self, t: "DoubleVector") -> "void":
        return _openstudioutilitiescore.OptionalDoubleVector_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalDoubleVector

# Register OptionalDoubleVector in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalDoubleVector_swigregister(OptionalDoubleVector)

class OptionalIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalIntVector_swiginit(self, _openstudioutilitiescore.new_OptionalIntVector(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalIntVector_reset(self)

    def __ref__(self) -> "std::vector< int,std::allocator< int > >":
        return _openstudioutilitiescore.OptionalIntVector___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalIntVector_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalIntVector_isNull(self)

    def get(self) -> "std::vector< int,std::allocator< int > >":
        return _openstudioutilitiescore.OptionalIntVector_get(self)

    def set(self, t: "IntVector") -> "void":
        return _openstudioutilitiescore.OptionalIntVector_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalIntVector

# Register OptionalIntVector in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalIntVector_swigregister(OptionalIntVector)

class Regex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.Regex_swiginit(self, _openstudioutilitiescore.new_Regex(*args))
    __swig_destroy__ = _openstudioutilitiescore.delete_Regex

    def size(self) -> "unsigned int":
        return _openstudioutilitiescore.Regex_size(self)

    def max_size(self) -> "unsigned int":
        return _openstudioutilitiescore.Regex_max_size(self)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.Regex_empty(self)

    def mark_count(self) -> "unsigned int":
        return _openstudioutilitiescore.Regex_mark_count(self)

    def assign(self, *args) -> "boost::regex &":
        return _openstudioutilitiescore.Regex_assign(self, *args)

    def status(self) -> "int":
        return _openstudioutilitiescore.Regex_status(self)

    def str(self) -> "std::string":
        return _openstudioutilitiescore.Regex_str(self)

    def compare(self, arg2: "Regex") -> "int":
        return _openstudioutilitiescore.Regex_compare(self, arg2)

    def swap(self, arg2: "Regex") -> "void":
        return _openstudioutilitiescore.Regex_swap(self, arg2)

# Register Regex in _openstudioutilitiescore:
_openstudioutilitiescore.Regex_swigregister(Regex)

class OptionalRegex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalRegex_swiginit(self, _openstudioutilitiescore.new_OptionalRegex(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalRegex_reset(self)

    def __ref__(self) -> "boost::regex":
        return _openstudioutilitiescore.OptionalRegex___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalRegex_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalRegex_isNull(self)

    def get(self) -> "boost::regex":
        return _openstudioutilitiescore.OptionalRegex_get(self)

    def set(self, t: "Regex") -> "void":
        return _openstudioutilitiescore.OptionalRegex_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalRegex

# Register OptionalRegex in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalRegex_swigregister(OptionalRegex)

class xml_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiescore.xml_node_swiginit(self, _openstudioutilitiescore.new_xml_node())
    __swig_destroy__ = _openstudioutilitiescore.delete_xml_node

# Register xml_node in _openstudioutilitiescore:
_openstudioutilitiescore.xml_node_swigregister(xml_node)

class xml_document(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiescore.xml_document_swiginit(self, _openstudioutilitiescore.new_xml_document())
    __swig_destroy__ = _openstudioutilitiescore.delete_xml_document

# Register xml_document in _openstudioutilitiescore:
_openstudioutilitiescore.xml_document_swigregister(xml_document)


def toWString(s: "std::string const &") -> "std::wstring":
    return _openstudioutilitiescore.toWString(s)
class OptionalPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalPath_swiginit(self, _openstudioutilitiescore.new_OptionalPath(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalPath_reset(self)

    def __ref__(self) -> "openstudio::path":
        return _openstudioutilitiescore.OptionalPath___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalPath_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalPath_isNull(self)

    def get(self) -> "openstudio::path":
        return _openstudioutilitiescore.OptionalPath_get(self)

    def set(self, t: "path") -> "void":
        return _openstudioutilitiescore.OptionalPath_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalPath

# Register OptionalPath in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalPath_swigregister(OptionalPath)

class PathVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.PathVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.PathVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.PathVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::path >::size_type":
        return _openstudioutilitiescore.PathVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::path >::difference_type", j: "std::vector< openstudio::path >::difference_type") -> "std::vector< openstudio::path,std::allocator< openstudio::path > > *":
        return _openstudioutilitiescore.PathVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.PathVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::path >::difference_type", j: "std::vector< openstudio::path >::difference_type") -> "void":
        return _openstudioutilitiescore.PathVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.PathVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::path >::value_type const &":
        return _openstudioutilitiescore.PathVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.PathVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::path >::value_type":
        return _openstudioutilitiescore.PathVector_pop(self)

    def append(self, x: "path") -> "void":
        return _openstudioutilitiescore.PathVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.PathVector_empty(self)

    def size(self) -> "std::vector< openstudio::path >::size_type":
        return _openstudioutilitiescore.PathVector_size(self)

    def swap(self, v: "PathVector") -> "void":
        return _openstudioutilitiescore.PathVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::path >::iterator":
        return _openstudioutilitiescore.PathVector_begin(self)

    def end(self) -> "std::vector< openstudio::path >::iterator":
        return _openstudioutilitiescore.PathVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::path >::reverse_iterator":
        return _openstudioutilitiescore.PathVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::path >::reverse_iterator":
        return _openstudioutilitiescore.PathVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.PathVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::path >::allocator_type":
        return _openstudioutilitiescore.PathVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.PathVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::path >::iterator":
        return _openstudioutilitiescore.PathVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.PathVector_swiginit(self, _openstudioutilitiescore.new_PathVector(*args))

    def push_back(self, x: "path") -> "void":
        return _openstudioutilitiescore.PathVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::path >::value_type const &":
        return _openstudioutilitiescore.PathVector_front(self)

    def back(self) -> "std::vector< openstudio::path >::value_type const &":
        return _openstudioutilitiescore.PathVector_back(self)

    def assign(self, n: "std::vector< openstudio::path >::size_type", x: "path") -> "void":
        return _openstudioutilitiescore.PathVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.PathVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.PathVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::path >::size_type") -> "void":
        return _openstudioutilitiescore.PathVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::path >::size_type":
        return _openstudioutilitiescore.PathVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_PathVector

# Register PathVector in _openstudioutilitiescore:
_openstudioutilitiescore.PathVector_swigregister(PathVector)

class PathPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.PathPair_swiginit(self, _openstudioutilitiescore.new_PathPair(*args))
    first = property(_openstudioutilitiescore.PathPair_first_get, _openstudioutilitiescore.PathPair_first_set)
    second = property(_openstudioutilitiescore.PathPair_second_get, _openstudioutilitiescore.PathPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiescore.delete_PathPair

# Register PathPair in _openstudioutilitiescore:
_openstudioutilitiescore.PathPair_swigregister(PathPair)

class PathPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.PathPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.PathPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.PathPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":
        return _openstudioutilitiescore.PathPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type", j: "std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type") -> "std::vector< std::pair< openstudio::path,openstudio::path >,std::allocator< std::pair< openstudio::path,openstudio::path > > > *":
        return _openstudioutilitiescore.PathPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.PathPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type", j: "std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type") -> "void":
        return _openstudioutilitiescore.PathPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.PathPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":
        return _openstudioutilitiescore.PathPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.PathPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type":
        return _openstudioutilitiescore.PathPairVector_pop(self)

    def append(self, x: "PathPair") -> "void":
        return _openstudioutilitiescore.PathPairVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.PathPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":
        return _openstudioutilitiescore.PathPairVector_size(self)

    def swap(self, v: "PathPairVector") -> "void":
        return _openstudioutilitiescore.PathPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":
        return _openstudioutilitiescore.PathPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":
        return _openstudioutilitiescore.PathPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::reverse_iterator":
        return _openstudioutilitiescore.PathPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::reverse_iterator":
        return _openstudioutilitiescore.PathPairVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.PathPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::allocator_type":
        return _openstudioutilitiescore.PathPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.PathPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":
        return _openstudioutilitiescore.PathPairVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.PathPairVector_swiginit(self, _openstudioutilitiescore.new_PathPairVector(*args))

    def push_back(self, x: "PathPair") -> "void":
        return _openstudioutilitiescore.PathPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":
        return _openstudioutilitiescore.PathPairVector_front(self)

    def back(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":
        return _openstudioutilitiescore.PathPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type", x: "PathPair") -> "void":
        return _openstudioutilitiescore.PathPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.PathPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.PathPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type") -> "void":
        return _openstudioutilitiescore.PathPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":
        return _openstudioutilitiescore.PathPairVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_PathPairVector

# Register PathPairVector in _openstudioutilitiescore:
_openstudioutilitiescore.PathPairVector_swigregister(PathPairVector)

class path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiescore.delete_path

    def __itruediv__(self, *args):
        return _openstudioutilitiescore.path___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def clear(self) -> "void":
        return _openstudioutilitiescore.path_clear(self)

    def swap(self, rhs: "path") -> "void":
        return _openstudioutilitiescore.path_swap(self, rhs)

    def remove_filename(self) -> "openstudio::path &":
        return _openstudioutilitiescore.path_remove_filename(self)

    def replace_extension(self, *args) -> "openstudio::path &":
        return _openstudioutilitiescore.path_replace_extension(self, *args)

    def string(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_string(self)

    def root_path(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_root_path(self)

    def relative_path(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_relative_path(self)

    def parent_path(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_parent_path(self)

    def filename(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_filename(self)

    def stem(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_stem(self)

    def extension(self) -> "openstudio::path":
        return _openstudioutilitiescore.path_extension(self)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.path_empty(self)

    def is_complete(self) -> "bool":
        return _openstudioutilitiescore.path_is_complete(self)

    def has_root_path(self) -> "bool":
        return _openstudioutilitiescore.path_has_root_path(self)

    def has_root_name(self) -> "bool":
        return _openstudioutilitiescore.path_has_root_name(self)

    def has_root_directory(self) -> "bool":
        return _openstudioutilitiescore.path_has_root_directory(self)

    def has_relative_path(self) -> "bool":
        return _openstudioutilitiescore.path_has_relative_path(self)

    def has_filename(self) -> "bool":
        return _openstudioutilitiescore.path_has_filename(self)

    def has_parent_path(self) -> "bool":
        return _openstudioutilitiescore.path_has_parent_path(self)

    def __div__(self, other: "path") -> "openstudio::path":
        return _openstudioutilitiescore.path___div__(self, other)

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.path___str__(self)

    def __init__(self, *args):
        _openstudioutilitiescore.path_swiginit(self, _openstudioutilitiescore.new_path(*args))

# Register path in _openstudioutilitiescore:
_openstudioutilitiescore.path_swigregister(path)


def tempDir() -> "openstudio::path":
    return _openstudioutilitiescore.tempDir()

def toString(*args) -> "std::string":
    return _openstudioutilitiescore.toString(*args)

def toPath(*args) -> "openstudio::path":
    return _openstudioutilitiescore.toPath(*args)

def exists(p: "path") -> "bool":
    return _openstudioutilitiescore.exists(p)

def create_directory(dir: "path") -> "bool":
    return _openstudioutilitiescore.create_directory(dir)

def remove(p: "path") -> "bool":
    return _openstudioutilitiescore.remove(p)

def remove_all(p: "path") -> "unsigned int":
    return _openstudioutilitiescore.remove_all(p)

def copy_file(from_path: "path", to_path: "path") -> "void":
    return _openstudioutilitiescore.copy_file(from_path, to_path)

def complete(*args) -> "openstudio::path":
    return _openstudioutilitiescore.complete(*args)

def system_complete(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.system_complete(p)

def modelFileExtension() -> "std::string":
    return _openstudioutilitiescore.modelFileExtension()

def componentFileExtension() -> "std::string":
    return _openstudioutilitiescore.componentFileExtension()

def tableFileExtension() -> "std::string":
    return _openstudioutilitiescore.tableFileExtension()

def documentFileExtension() -> "std::string":
    return _openstudioutilitiescore.documentFileExtension()

def rulesetFileExtension() -> "std::string":
    return _openstudioutilitiescore.rulesetFileExtension()

def completePathToFile(*args) -> "openstudio::path":
    return _openstudioutilitiescore.completePathToFile(*args)

def getFileExtension(p: "path") -> "std::string":
    return _openstudioutilitiescore.getFileExtension(p)

def setFileExtension(p: "path", ext: "std::string const &", replaceOnMismatch: "bool"=False, warnOnMismatch: "bool"=True) -> "openstudio::path":
    return _openstudioutilitiescore.setFileExtension(p, ext, replaceOnMismatch, warnOnMismatch)

def makeParentFolder(*args) -> "bool":
    return _openstudioutilitiescore.makeParentFolder(*args)

def relativePath(p: "path", base: "path") -> "openstudio::path":
    return _openstudioutilitiescore.relativePath(p, base)

def completeAndNormalize(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.completeAndNormalize(p)

def relocatePath(originalPath: "path", originalBase: "path", newBase: "path") -> "openstudio::path":
    return _openstudioutilitiescore.relocatePath(originalPath, originalBase, newBase)

def getCompanionFolder(osmPath: "path") -> "openstudio::path":
    return _openstudioutilitiescore.getCompanionFolder(osmPath)

def getLastLevelDirectoryName(directory: "path") -> "openstudio::path":
    return _openstudioutilitiescore.getLastLevelDirectoryName(directory)

def printPathInformation(os: "std::ostream &", p: "path") -> "std::ostream &":
    return _openstudioutilitiescore.printPathInformation(os, p)

def removeDirectory(dirName: "path") -> "bool":
    return _openstudioutilitiescore.removeDirectory(dirName)

def copyDirectory(source: "path", destination: "path") -> "bool":
    return _openstudioutilitiescore.copyDirectory(source, destination)

def isEmptyDirectory(dirName: "path") -> "bool":
    return _openstudioutilitiescore.isEmptyDirectory(dirName)

def windowsDriveLetter(p: "path") -> "boost::optional< std::string >":
    return _openstudioutilitiescore.windowsDriveLetter(p)

def isNetworkPath(p: "path") -> "bool":
    return _openstudioutilitiescore.isNetworkPath(p)

def isNetworkPathAvailable(p: "path") -> "bool":
    return _openstudioutilitiescore.isNetworkPathAvailable(p)

def pathBeginsWith(t_shorter: "path", t_longer: "path") -> "bool":
    return _openstudioutilitiescore.pathBeginsWith(t_shorter, t_longer)

def findInSystemPath(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.findInSystemPath(p)

def pathDelimiter() -> "char const":
    return _openstudioutilitiescore.pathDelimiter()

def funcOnlyTakesAConstPathRef(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.funcOnlyTakesAConstPathRef(p)

def funcOnlyTakesAConstPath(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.funcOnlyTakesAConstPath(p)

def funcOnlyTakesAPath(p: "path") -> "openstudio::path":
    return _openstudioutilitiescore.funcOnlyTakesAPath(p)

def defaultArgFuncTakesAConstPathRef(p: "path", copy: "bool"=True) -> "openstudio::path":
    return _openstudioutilitiescore.defaultArgFuncTakesAConstPathRef(p, copy)

def defaultArgFuncTakesAConstPath(p: "path", copy: "bool"=True) -> "openstudio::path":
    return _openstudioutilitiescore.defaultArgFuncTakesAConstPath(p, copy)

def defaultArgFuncTakesAPath(p: "path", copy: "bool"=True) -> "openstudio::path":
    return _openstudioutilitiescore.defaultArgFuncTakesAPath(p, copy)

def openStudioVersion() -> "std::string":
    return _openstudioutilitiescore.openStudioVersion()

def openStudioLongVersion() -> "std::string":
    return _openstudioutilitiescore.openStudioLongVersion()

def openStudioVersionMajor() -> "std::string":
    return _openstudioutilitiescore.openStudioVersionMajor()

def openStudioVersionMinor() -> "std::string":
    return _openstudioutilitiescore.openStudioVersionMinor()

def openStudioVersionPatch() -> "std::string":
    return _openstudioutilitiescore.openStudioVersionPatch()

def openStudioVersionPrerelease() -> "std::string":
    return _openstudioutilitiescore.openStudioVersionPrerelease()

def openStudioVersionBuildSHA() -> "std::string":
    return _openstudioutilitiescore.openStudioVersionBuildSHA()

def energyPlusVersionMajor() -> "int":
    return _openstudioutilitiescore.energyPlusVersionMajor()

def energyPlusVersionMinor() -> "int":
    return _openstudioutilitiescore.energyPlusVersionMinor()

def energyPlusVersionPatch() -> "int":
    return _openstudioutilitiescore.energyPlusVersionPatch()

def energyPlusVersion() -> "std::string":
    return _openstudioutilitiescore.energyPlusVersion()

def energyPlusBuildSHA() -> "std::string":
    return _openstudioutilitiescore.energyPlusBuildSHA()

def rubyLibDir() -> "std::string":
    return _openstudioutilitiescore.rubyLibDir()

def rubyOpenStudioDir() -> "std::string":
    return _openstudioutilitiescore.rubyOpenStudioDir()

def getApplicationPath() -> "openstudio::path":
    return _openstudioutilitiescore.getApplicationPath()

def getApplicationDirectory() -> "openstudio::path":
    return _openstudioutilitiescore.getApplicationDirectory()

def getOpenStudioModule() -> "openstudio::path":
    return _openstudioutilitiescore.getOpenStudioModule()

def getOpenStudioModuleDirectory() -> "openstudio::path":
    return _openstudioutilitiescore.getOpenStudioModuleDirectory()

def getOpenStudioCLI() -> "openstudio::path":
    return _openstudioutilitiescore.getOpenStudioCLI()

def getEnergyPlusDirectory() -> "openstudio::path":
    return _openstudioutilitiescore.getEnergyPlusDirectory()

def getEnergyPlusExecutable() -> "openstudio::path":
    return _openstudioutilitiescore.getEnergyPlusExecutable()

def getRadianceDirectory() -> "openstudio::path":
    return _openstudioutilitiescore.getRadianceDirectory()

def getPerlExecutable() -> "openstudio::path":
    return _openstudioutilitiescore.getPerlExecutable()
class DocumentFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.DocumentFormat_swiginit(self, _openstudioutilitiescore.new_DocumentFormat(*args))

    def valueName(self) -> "std::string":
        return _openstudioutilitiescore.DocumentFormat_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiescore.DocumentFormat_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiescore.DocumentFormat_valueDescription(self)

    def __eq__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___eq__(self, other)

    def __ne__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___ne__(self, other)

    def __gt__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___gt__(self, other)

    def __ge__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___ge__(self, other)

    def __lt__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___lt__(self, other)

    def __le__(self, other: "DocumentFormat") -> "bool":
        return _openstudioutilitiescore.DocumentFormat___le__(self, other)

    @staticmethod
    def enumName() -> "std::string":
        return _openstudioutilitiescore.DocumentFormat_enumName()

    @staticmethod
    def getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _openstudioutilitiescore.DocumentFormat_getValues()

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.DocumentFormat___str__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_DocumentFormat

# Register DocumentFormat in _openstudioutilitiescore:
_openstudioutilitiescore.DocumentFormat_swigregister(DocumentFormat)

def DocumentFormat_enumName() -> "std::string":
    return _openstudioutilitiescore.DocumentFormat_enumName()

def DocumentFormat_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiescore.DocumentFormat_getValues()


def toCamelCase(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.toCamelCase(s)

def toUpperCamelCase(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.toUpperCamelCase(s)

def toLowerCamelCase(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.toLowerCamelCase(s)

def toUnderscoreCase(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.toUnderscoreCase(s)

def convertIddName(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.convertIddName(s)

def iddObjectNameToIdfObjectName(s: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.iddObjectNameToIdfObjectName(s)

def toNeatString(value: "double", numFractionalDigits: "unsigned int"=0, applyCommas: "bool"=True) -> "std::string":
    return _openstudioutilitiescore.toNeatString(value, numFractionalDigits, applyCommas)

def toNeatStringBySigFigs(value: "double", numSigFigs: "unsigned int"=3, applyCommas: "bool"=True) -> "std::string":
    return _openstudioutilitiescore.toNeatStringBySigFigs(value, numSigFigs, applyCommas)

def numFractionalDigits(*args) -> "std::pair< unsigned int,unsigned int >":
    return _openstudioutilitiescore.numFractionalDigits(*args)

def toNumSigFigs(value: "double", numSigFigs: "unsigned int") -> "double":
    return _openstudioutilitiescore.toNumSigFigs(value, numSigFigs)

def superscript() -> "boost::regex":
    return _openstudioutilitiescore.superscript()

def subscript() -> "boost::regex":
    return _openstudioutilitiescore.subscript()

def formatText(str: "std::string const &", fmt: "DocumentFormat") -> "std::string":
    return _openstudioutilitiescore.formatText(str, fmt)

def formatUnderscore(str: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.formatUnderscore(str)

def formatSuperAndSubscripts(str: "std::string const &", fmt: "DocumentFormat") -> "std::string":
    return _openstudioutilitiescore.formatSuperAndSubscripts(str, fmt)

def formatUnitString(str: "std::string const &", fmt: "DocumentFormat") -> "std::string":
    return _openstudioutilitiescore.formatUnitString(str, fmt)

def splitString(string: "std::string const &", delimiter: "char") -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudioutilitiescore.splitString(string, delimiter)

def splitEMSLineToTokens(*args) -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudioutilitiescore.splitEMSLineToTokens(*args)

def replace(input: "std::string", before: "std::string const &", after: "std::string const &") -> "std::string":
    return _openstudioutilitiescore.replace(input, before, after)
FloatFormat_fixed = _openstudioutilitiescore.FloatFormat_fixed
FloatFormat_general = _openstudioutilitiescore.FloatFormat_general
FloatFormat_general_capital = _openstudioutilitiescore.FloatFormat_general_capital

def number(*args) -> "std::string":
    return _openstudioutilitiescore.number(*args)
class OptionalLogLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalLogLevel_swiginit(self, _openstudioutilitiescore.new_OptionalLogLevel(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalLogLevel_reset(self)

    def __ref__(self) -> "LogLevel":
        return _openstudioutilitiescore.OptionalLogLevel___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalLogLevel_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalLogLevel_isNull(self)

    def get(self) -> "LogLevel":
        return _openstudioutilitiescore.OptionalLogLevel_get(self)

    def set(self, t: "LogLevel const &") -> "void":
        return _openstudioutilitiescore.OptionalLogLevel_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalLogLevel

# Register OptionalLogLevel in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalLogLevel_swigregister(OptionalLogLevel)

class LogMessageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.LogMessageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.LogMessageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.LogMessageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::LogMessage >::size_type":
        return _openstudioutilitiescore.LogMessageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::LogMessage >::difference_type", j: "std::vector< openstudio::LogMessage >::difference_type") -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > > *":
        return _openstudioutilitiescore.LogMessageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.LogMessageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::LogMessage >::difference_type", j: "std::vector< openstudio::LogMessage >::difference_type") -> "void":
        return _openstudioutilitiescore.LogMessageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.LogMessageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::LogMessage >::value_type const &":
        return _openstudioutilitiescore.LogMessageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.LogMessageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::LogMessage >::value_type":
        return _openstudioutilitiescore.LogMessageVector_pop(self)

    def append(self, x: "LogMessage") -> "void":
        return _openstudioutilitiescore.LogMessageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.LogMessageVector_empty(self)

    def size(self) -> "std::vector< openstudio::LogMessage >::size_type":
        return _openstudioutilitiescore.LogMessageVector_size(self)

    def swap(self, v: "LogMessageVector") -> "void":
        return _openstudioutilitiescore.LogMessageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::LogMessage >::iterator":
        return _openstudioutilitiescore.LogMessageVector_begin(self)

    def end(self) -> "std::vector< openstudio::LogMessage >::iterator":
        return _openstudioutilitiescore.LogMessageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::LogMessage >::reverse_iterator":
        return _openstudioutilitiescore.LogMessageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::LogMessage >::reverse_iterator":
        return _openstudioutilitiescore.LogMessageVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.LogMessageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::LogMessage >::allocator_type":
        return _openstudioutilitiescore.LogMessageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.LogMessageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::LogMessage >::iterator":
        return _openstudioutilitiescore.LogMessageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.LogMessageVector_swiginit(self, _openstudioutilitiescore.new_LogMessageVector(*args))

    def push_back(self, x: "LogMessage") -> "void":
        return _openstudioutilitiescore.LogMessageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::LogMessage >::value_type const &":
        return _openstudioutilitiescore.LogMessageVector_front(self)

    def back(self) -> "std::vector< openstudio::LogMessage >::value_type const &":
        return _openstudioutilitiescore.LogMessageVector_back(self)

    def assign(self, n: "std::vector< openstudio::LogMessage >::size_type", x: "LogMessage") -> "void":
        return _openstudioutilitiescore.LogMessageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::LogMessage >::size_type", x: "LogMessage") -> "void":
        return _openstudioutilitiescore.LogMessageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.LogMessageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::LogMessage >::size_type") -> "void":
        return _openstudioutilitiescore.LogMessageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::LogMessage >::size_type":
        return _openstudioutilitiescore.LogMessageVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_LogMessageVector

# Register LogMessageVector in _openstudioutilitiescore:
_openstudioutilitiescore.LogMessageVector_swigregister(LogMessageVector)

class OptionalLogMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalLogMessage_swiginit(self, _openstudioutilitiescore.new_OptionalLogMessage(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalLogMessage_reset(self)

    def __ref__(self) -> "openstudio::LogMessage":
        return _openstudioutilitiescore.OptionalLogMessage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalLogMessage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalLogMessage_isNull(self)

    def get(self) -> "openstudio::LogMessage":
        return _openstudioutilitiescore.OptionalLogMessage_get(self)

    def set(self, t: "LogMessage") -> "void":
        return _openstudioutilitiescore.OptionalLogMessage_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalLogMessage

# Register OptionalLogMessage in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalLogMessage_swigregister(OptionalLogMessage)

class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "openstudio::LoggerSingleton &":
        return _openstudioutilitiescore.Logger_instance()
    __swig_destroy__ = _openstudioutilitiescore.delete_Logger

# Register Logger in _openstudioutilitiescore:
_openstudioutilitiescore.Logger_swigregister(Logger)

def Logger_instance() -> "openstudio::LoggerSingleton &":
    return _openstudioutilitiescore.Logger_instance()

Trace = _openstudioutilitiescore.Trace
Debug = _openstudioutilitiescore.Debug
Info = _openstudioutilitiescore.Info
Warn = _openstudioutilitiescore.Warn
Error = _openstudioutilitiescore.Error
Fatal = _openstudioutilitiescore.Fatal
class LogMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, logLevel: "LogLevel", channel: "std::string const &", message: "std::string const &"):
        _openstudioutilitiescore.LogMessage_swiginit(self, _openstudioutilitiescore.new_LogMessage(logLevel, channel, message))

    @staticmethod
    def parseLogText(logText: "std::string const &") -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiescore.LogMessage_parseLogText(logText)

    def logLevel(self) -> "LogLevel":
        return _openstudioutilitiescore.LogMessage_logLevel(self)

    def logChannel(self) -> "openstudio::LogChannel":
        return _openstudioutilitiescore.LogMessage_logChannel(self)

    def logMessage(self) -> "std::string":
        return _openstudioutilitiescore.LogMessage_logMessage(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_LogMessage

# Register LogMessage in _openstudioutilitiescore:
_openstudioutilitiescore.LogMessage_swigregister(LogMessage)

def LogMessage_parseLogText(logText: "std::string const &") -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
    return _openstudioutilitiescore.LogMessage_parseLogText(logText)

class LogSink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isEnabled(self) -> "bool":
        return _openstudioutilitiescore.LogSink_isEnabled(self)

    def enable(self) -> "void":
        return _openstudioutilitiescore.LogSink_enable(self)

    def disable(self) -> "void":
        return _openstudioutilitiescore.LogSink_disable(self)

    def logLevel(self) -> "boost::optional< LogLevel >":
        return _openstudioutilitiescore.LogSink_logLevel(self)

    def setLogLevel(self, logLevel: "LogLevel") -> "void":
        return _openstudioutilitiescore.LogSink_setLogLevel(self, logLevel)

    def resetLogLevel(self) -> "void":
        return _openstudioutilitiescore.LogSink_resetLogLevel(self)

    def channelRegex(self) -> "boost::optional< boost::regex >":
        return _openstudioutilitiescore.LogSink_channelRegex(self)

    def setChannelRegex(self, *args) -> "void":
        return _openstudioutilitiescore.LogSink_setChannelRegex(self, *args)

    def resetChannelRegex(self) -> "void":
        return _openstudioutilitiescore.LogSink_resetChannelRegex(self)

    def autoFlush(self) -> "bool":
        return _openstudioutilitiescore.LogSink_autoFlush(self)

    def setAutoFlush(self, autoFlush: "bool") -> "void":
        return _openstudioutilitiescore.LogSink_setAutoFlush(self, autoFlush)

    def threadId(self) -> "std::thread::id":
        return _openstudioutilitiescore.LogSink_threadId(self)

    def setThreadId(self, threadId: "std::thread::id") -> "void":
        return _openstudioutilitiescore.LogSink_setThreadId(self, threadId)

    def resetThreadId(self) -> "void":
        return _openstudioutilitiescore.LogSink_resetThreadId(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_LogSink

# Register LogSink in _openstudioutilitiescore:
_openstudioutilitiescore.LogSink_swigregister(LogSink)

class FileLogSink(LogSink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path: "path"):
        _openstudioutilitiescore.FileLogSink_swiginit(self, _openstudioutilitiescore.new_FileLogSink(path))

    def path(self) -> "openstudio::path":
        return _openstudioutilitiescore.FileLogSink_path(self)

    def logMessages(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiescore.FileLogSink_logMessages(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_FileLogSink

# Register FileLogSink in _openstudioutilitiescore:
_openstudioutilitiescore.FileLogSink_swigregister(FileLogSink)

class StringStreamLogSink(LogSink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiescore.StringStreamLogSink_swiginit(self, _openstudioutilitiescore.new_StringStreamLogSink())

    def string(self) -> "std::string":
        return _openstudioutilitiescore.StringStreamLogSink_string(self)

    def logMessages(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiescore.StringStreamLogSink_logMessages(self)

    def resetStringStream(self) -> "void":
        return _openstudioutilitiescore.StringStreamLogSink_resetStringStream(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_StringStreamLogSink

# Register StringStreamLogSink in _openstudioutilitiescore:
_openstudioutilitiescore.StringStreamLogSink_swigregister(StringStreamLogSink)


def logFree(level: "LogLevel", channel: "std::string const &", message: "std::string const &") -> "void":
    return _openstudioutilitiescore.logFree(level, channel, message)
class LoggerSingleton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiescore.delete_LoggerSingleton

    def standardOutLogger(self) -> "openstudio::LogSink":
        return _openstudioutilitiescore.LoggerSingleton_standardOutLogger(self)

    def standardErrLogger(self) -> "openstudio::LogSink":
        return _openstudioutilitiescore.LoggerSingleton_standardErrLogger(self)

# Register LoggerSingleton in _openstudioutilitiescore:
_openstudioutilitiescore.LoggerSingleton_swigregister(LoggerSingleton)

class UpdateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == UpdateManager:
            _self = None
        else:
            _self = self
        _openstudioutilitiescore.UpdateManager_swiginit(self, _openstudioutilitiescore.new_UpdateManager(_self, *args))
    __swig_destroy__ = _openstudioutilitiescore.delete_UpdateManager

    def appName(self) -> "std::string":
        return _openstudioutilitiescore.UpdateManager_appName(self)

    def waitForFinished(self, msec: "int"=120000) -> "bool":
        return _openstudioutilitiescore.UpdateManager_waitForFinished(self, msec)

    def finished(self) -> "bool":
        return _openstudioutilitiescore.UpdateManager_finished(self)

    def error(self) -> "bool":
        return _openstudioutilitiescore.UpdateManager_error(self)

    def newMajorRelease(self) -> "bool":
        return _openstudioutilitiescore.UpdateManager_newMajorRelease(self)

    def newMinorRelease(self) -> "bool":
        return _openstudioutilitiescore.UpdateManager_newMinorRelease(self)

    def newPatchRelease(self) -> "bool":
        return _openstudioutilitiescore.UpdateManager_newPatchRelease(self)

    def mostRecentVersion(self) -> "std::string":
        return _openstudioutilitiescore.UpdateManager_mostRecentVersion(self)

    def mostRecentDownloadUrl(self) -> "std::string":
        return _openstudioutilitiescore.UpdateManager_mostRecentDownloadUrl(self)

    def updateMessages(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiescore.UpdateManager_updateMessages(self)
    def __disown__(self):
        self.this.disown()
        _openstudioutilitiescore.disown_UpdateManager(self)
        return weakref.proxy(self)

# Register UpdateManager in _openstudioutilitiescore:
_openstudioutilitiescore.UpdateManager_swigregister(UpdateManager)

class UUID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.UUID_isNull(self)

    def isEqual(self, other: "UUID") -> "bool":
        return _openstudioutilitiescore.UUID_isEqual(self, other)
    __swig_destroy__ = _openstudioutilitiescore.delete_UUID

    @staticmethod
    def create() -> "openstudio::UUID":
        return _openstudioutilitiescore.UUID_create()

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.UUID___str__(self)

    def __hash__(self) -> "int":
        return _openstudioutilitiescore.UUID___hash__(self)

    def __eq__(self, other: "UUID") -> "bool":
        return _openstudioutilitiescore.UUID___eq__(self, other)

    def __ne__(self, other: "UUID") -> "bool":
        return _openstudioutilitiescore.UUID___ne__(self, other)

    def __lt__(self, other: "UUID") -> "bool":
        return _openstudioutilitiescore.UUID___lt__(self, other)

    def __gt__(self, other: "UUID") -> "bool":
        return _openstudioutilitiescore.UUID___gt__(self, other)

# Register UUID in _openstudioutilitiescore:
_openstudioutilitiescore.UUID_swigregister(UUID)

def UUID_create() -> "openstudio::UUID":
    return _openstudioutilitiescore.UUID_create()


def toUUID(str: "std::string const &") -> "openstudio::UUID":
    return _openstudioutilitiescore.toUUID(str)

def createUUID() -> "openstudio::UUID":
    return _openstudioutilitiescore.createUUID()

def removeBraces(uuid: "UUID") -> "std::string":
    return _openstudioutilitiescore.removeBraces(uuid)
class OptionalUUID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalUUID_swiginit(self, _openstudioutilitiescore.new_OptionalUUID(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalUUID_reset(self)

    def __ref__(self) -> "openstudio::UUID":
        return _openstudioutilitiescore.OptionalUUID___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalUUID_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalUUID_isNull(self)

    def get(self) -> "openstudio::UUID":
        return _openstudioutilitiescore.OptionalUUID_get(self)

    def set(self, t: "UUID") -> "void":
        return _openstudioutilitiescore.OptionalUUID_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUUID

# Register OptionalUUID in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalUUID_swigregister(OptionalUUID)

class UUIDVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.UUIDVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.UUIDVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.UUIDVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::UUID >::size_type":
        return _openstudioutilitiescore.UUIDVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::UUID >::difference_type", j: "std::vector< openstudio::UUID >::difference_type") -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > > *":
        return _openstudioutilitiescore.UUIDVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.UUIDVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::UUID >::difference_type", j: "std::vector< openstudio::UUID >::difference_type") -> "void":
        return _openstudioutilitiescore.UUIDVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.UUIDVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::UUID >::value_type const &":
        return _openstudioutilitiescore.UUIDVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.UUIDVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::UUID >::value_type":
        return _openstudioutilitiescore.UUIDVector_pop(self)

    def append(self, x: "UUID") -> "void":
        return _openstudioutilitiescore.UUIDVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.UUIDVector_empty(self)

    def size(self) -> "std::vector< openstudio::UUID >::size_type":
        return _openstudioutilitiescore.UUIDVector_size(self)

    def swap(self, v: "UUIDVector") -> "void":
        return _openstudioutilitiescore.UUIDVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::UUID >::iterator":
        return _openstudioutilitiescore.UUIDVector_begin(self)

    def end(self) -> "std::vector< openstudio::UUID >::iterator":
        return _openstudioutilitiescore.UUIDVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::UUID >::reverse_iterator":
        return _openstudioutilitiescore.UUIDVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::UUID >::reverse_iterator":
        return _openstudioutilitiescore.UUIDVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.UUIDVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::UUID >::allocator_type":
        return _openstudioutilitiescore.UUIDVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.UUIDVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::UUID >::iterator":
        return _openstudioutilitiescore.UUIDVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.UUIDVector_swiginit(self, _openstudioutilitiescore.new_UUIDVector(*args))

    def push_back(self, x: "UUID") -> "void":
        return _openstudioutilitiescore.UUIDVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::UUID >::value_type const &":
        return _openstudioutilitiescore.UUIDVector_front(self)

    def back(self) -> "std::vector< openstudio::UUID >::value_type const &":
        return _openstudioutilitiescore.UUIDVector_back(self)

    def assign(self, n: "std::vector< openstudio::UUID >::size_type", x: "UUID") -> "void":
        return _openstudioutilitiescore.UUIDVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.UUIDVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.UUIDVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::UUID >::size_type") -> "void":
        return _openstudioutilitiescore.UUIDVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::UUID >::size_type":
        return _openstudioutilitiescore.UUIDVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_UUIDVector

# Register UUIDVector in _openstudioutilitiescore:
_openstudioutilitiescore.UUIDVector_swigregister(UUIDVector)

class OptionalUUIDVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalUUIDVector_swiginit(self, _openstudioutilitiescore.new_OptionalUUIDVector(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalUUIDVector_reset(self)

    def __ref__(self) -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > >":
        return _openstudioutilitiescore.OptionalUUIDVector___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalUUIDVector_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalUUIDVector_isNull(self)

    def get(self) -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > >":
        return _openstudioutilitiescore.OptionalUUIDVector_get(self)

    def set(self, t: "UUIDVector") -> "void":
        return _openstudioutilitiescore.OptionalUUIDVector_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUUIDVector

# Register OptionalUUIDVector in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalUUIDVector_swigregister(OptionalUUIDVector)


def checksum(*args) -> "std::string":
    return _openstudioutilitiescore.checksum(*args)

def crc16(ptr: "char const *", count: "int") -> "int":
    return _openstudioutilitiescore.crc16(ptr, count)
class UnzipFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename: "path"):
        _openstudioutilitiescore.UnzipFile_swiginit(self, _openstudioutilitiescore.new_UnzipFile(filename))
    __swig_destroy__ = _openstudioutilitiescore.delete_UnzipFile

    def listFiles(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiescore.UnzipFile_listFiles(self)

    def extractFile(self, filename: "path", outputPath: "path") -> "openstudio::path":
        return _openstudioutilitiescore.UnzipFile_extractFile(self, filename, outputPath)

    def extractAllFiles(self, outputPath: "path") -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiescore.UnzipFile_extractAllFiles(self, outputPath)

# Register UnzipFile in _openstudioutilitiescore:
_openstudioutilitiescore.UnzipFile_swigregister(UnzipFile)

class ZipFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename: "path", add: "bool"):
        _openstudioutilitiescore.ZipFile_swiginit(self, _openstudioutilitiescore.new_ZipFile(filename, add))
    __swig_destroy__ = _openstudioutilitiescore.delete_ZipFile

    def addFile(self, localPath: "path", destinationPath: "path") -> "void":
        return _openstudioutilitiescore.ZipFile_addFile(self, localPath, destinationPath)

    def addDirectory(self, localDir: "path", destinationDir: "path") -> "void":
        return _openstudioutilitiescore.ZipFile_addDirectory(self, localDir, destinationDir)

# Register ZipFile in _openstudioutilitiescore:
_openstudioutilitiescore.ZipFile_swigregister(ZipFile)

class FileReferenceTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.FileReferenceTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceTypeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceTypeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::FileReferenceType >::size_type":
        return _openstudioutilitiescore.FileReferenceTypeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::FileReferenceType >::difference_type", j: "std::vector< openstudio::FileReferenceType >::difference_type") -> "std::vector< openstudio::FileReferenceType,std::allocator< openstudio::FileReferenceType > > *":
        return _openstudioutilitiescore.FileReferenceTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::FileReferenceType >::difference_type", j: "std::vector< openstudio::FileReferenceType >::difference_type") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::FileReferenceType >::value_type const &":
        return _openstudioutilitiescore.FileReferenceTypeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::FileReferenceType >::value_type":
        return _openstudioutilitiescore.FileReferenceTypeVector_pop(self)

    def append(self, x: "FileReferenceType") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceTypeVector_empty(self)

    def size(self) -> "std::vector< openstudio::FileReferenceType >::size_type":
        return _openstudioutilitiescore.FileReferenceTypeVector_size(self)

    def swap(self, v: "FileReferenceTypeVector") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::FileReferenceType >::iterator":
        return _openstudioutilitiescore.FileReferenceTypeVector_begin(self)

    def end(self) -> "std::vector< openstudio::FileReferenceType >::iterator":
        return _openstudioutilitiescore.FileReferenceTypeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::FileReferenceType >::reverse_iterator":
        return _openstudioutilitiescore.FileReferenceTypeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::FileReferenceType >::reverse_iterator":
        return _openstudioutilitiescore.FileReferenceTypeVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::FileReferenceType >::allocator_type":
        return _openstudioutilitiescore.FileReferenceTypeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::FileReferenceType >::iterator":
        return _openstudioutilitiescore.FileReferenceTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.FileReferenceTypeVector_swiginit(self, _openstudioutilitiescore.new_FileReferenceTypeVector(*args))

    def push_back(self, x: "FileReferenceType") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::FileReferenceType >::value_type const &":
        return _openstudioutilitiescore.FileReferenceTypeVector_front(self)

    def back(self) -> "std::vector< openstudio::FileReferenceType >::value_type const &":
        return _openstudioutilitiescore.FileReferenceTypeVector_back(self)

    def assign(self, n: "std::vector< openstudio::FileReferenceType >::size_type", x: "FileReferenceType") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::FileReferenceType >::size_type") -> "void":
        return _openstudioutilitiescore.FileReferenceTypeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::FileReferenceType >::size_type":
        return _openstudioutilitiescore.FileReferenceTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceTypeVector

# Register FileReferenceTypeVector in _openstudioutilitiescore:
_openstudioutilitiescore.FileReferenceTypeVector_swigregister(FileReferenceTypeVector)

class OptionalFileReferenceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalFileReferenceType_swiginit(self, _openstudioutilitiescore.new_OptionalFileReferenceType(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalFileReferenceType_reset(self)

    def __ref__(self) -> "openstudio::FileReferenceType":
        return _openstudioutilitiescore.OptionalFileReferenceType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalFileReferenceType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalFileReferenceType_isNull(self)

    def get(self) -> "openstudio::FileReferenceType":
        return _openstudioutilitiescore.OptionalFileReferenceType_get(self)

    def set(self, t: "FileReferenceType") -> "void":
        return _openstudioutilitiescore.OptionalFileReferenceType_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalFileReferenceType

# Register OptionalFileReferenceType in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalFileReferenceType_swigregister(OptionalFileReferenceType)

class FileReferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiescore.FileReferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::FileReference >::size_type":
        return _openstudioutilitiescore.FileReferenceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::FileReference >::difference_type", j: "std::vector< openstudio::FileReference >::difference_type") -> "std::vector< openstudio::FileReference,std::allocator< openstudio::FileReference > > *":
        return _openstudioutilitiescore.FileReferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::FileReference >::difference_type", j: "std::vector< openstudio::FileReference >::difference_type") -> "void":
        return _openstudioutilitiescore.FileReferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::FileReference >::value_type const &":
        return _openstudioutilitiescore.FileReferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::FileReference >::value_type":
        return _openstudioutilitiescore.FileReferenceVector_pop(self)

    def append(self, x: "FileReference") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiescore.FileReferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::FileReference >::size_type":
        return _openstudioutilitiescore.FileReferenceVector_size(self)

    def swap(self, v: "FileReferenceVector") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::FileReference >::iterator":
        return _openstudioutilitiescore.FileReferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::FileReference >::iterator":
        return _openstudioutilitiescore.FileReferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::FileReference >::reverse_iterator":
        return _openstudioutilitiescore.FileReferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::FileReference >::reverse_iterator":
        return _openstudioutilitiescore.FileReferenceVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiescore.FileReferenceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::FileReference >::allocator_type":
        return _openstudioutilitiescore.FileReferenceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiescore.FileReferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::FileReference >::iterator":
        return _openstudioutilitiescore.FileReferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiescore.FileReferenceVector_swiginit(self, _openstudioutilitiescore.new_FileReferenceVector(*args))

    def push_back(self, x: "FileReference") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::FileReference >::value_type const &":
        return _openstudioutilitiescore.FileReferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::FileReference >::value_type const &":
        return _openstudioutilitiescore.FileReferenceVector_back(self)

    def assign(self, n: "std::vector< openstudio::FileReference >::size_type", x: "FileReference") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::FileReference >::size_type", x: "FileReference") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiescore.FileReferenceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::FileReference >::size_type") -> "void":
        return _openstudioutilitiescore.FileReferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::FileReference >::size_type":
        return _openstudioutilitiescore.FileReferenceVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceVector

# Register FileReferenceVector in _openstudioutilitiescore:
_openstudioutilitiescore.FileReferenceVector_swigregister(FileReferenceVector)

class OptionalFileReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalFileReference_swiginit(self, _openstudioutilitiescore.new_OptionalFileReference(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalFileReference_reset(self)

    def __ref__(self) -> "openstudio::FileReference":
        return _openstudioutilitiescore.OptionalFileReference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalFileReference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalFileReference_isNull(self)

    def get(self) -> "openstudio::FileReference":
        return _openstudioutilitiescore.OptionalFileReference_get(self)

    def set(self, t: "FileReference") -> "void":
        return _openstudioutilitiescore.OptionalFileReference_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalFileReference

# Register OptionalFileReference in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalFileReference_swigregister(OptionalFileReference)

class OptionalVersionString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.OptionalVersionString_swiginit(self, _openstudioutilitiescore.new_OptionalVersionString(*args))

    def reset(self) -> "void":
        return _openstudioutilitiescore.OptionalVersionString_reset(self)

    def __ref__(self) -> "openstudio::VersionString":
        return _openstudioutilitiescore.OptionalVersionString___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiescore.OptionalVersionString_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiescore.OptionalVersionString_isNull(self)

    def get(self) -> "openstudio::VersionString":
        return _openstudioutilitiescore.OptionalVersionString_get(self)

    def set(self, t: "VersionString") -> "void":
        return _openstudioutilitiescore.OptionalVersionString_set(self, t)
    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalVersionString

# Register OptionalVersionString in _openstudioutilitiescore:
_openstudioutilitiescore.OptionalVersionString_swigregister(OptionalVersionString)

class VersionStringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.VersionStringPair_swiginit(self, _openstudioutilitiescore.new_VersionStringPair(*args))
    first = property(_openstudioutilitiescore.VersionStringPair_first_get, _openstudioutilitiescore.VersionStringPair_first_set)
    second = property(_openstudioutilitiescore.VersionStringPair_second_get, _openstudioutilitiescore.VersionStringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiescore.delete_VersionStringPair

# Register VersionStringPair in _openstudioutilitiescore:
_openstudioutilitiescore.VersionStringPair_swigregister(VersionStringPair)

class FileReferenceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.FileReferenceType_swiginit(self, _openstudioutilitiescore.new_FileReferenceType(*args))

    def valueName(self) -> "std::string":
        return _openstudioutilitiescore.FileReferenceType_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiescore.FileReferenceType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiescore.FileReferenceType_valueDescription(self)

    def __eq__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___eq__(self, other)

    def __ne__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___ne__(self, other)

    def __gt__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___gt__(self, other)

    def __ge__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___ge__(self, other)

    def __lt__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___lt__(self, other)

    def __le__(self, other: "FileReferenceType") -> "bool":
        return _openstudioutilitiescore.FileReferenceType___le__(self, other)

    @staticmethod
    def enumName() -> "std::string":
        return _openstudioutilitiescore.FileReferenceType_enumName()

    @staticmethod
    def getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _openstudioutilitiescore.FileReferenceType_getValues()

    def __str__(self) -> "std::string":
        return _openstudioutilitiescore.FileReferenceType___str__(self)
    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceType

# Register FileReferenceType in _openstudioutilitiescore:
_openstudioutilitiescore.FileReferenceType_swigregister(FileReferenceType)

def FileReferenceType_enumName() -> "std::string":
    return _openstudioutilitiescore.FileReferenceType_enumName()

def FileReferenceType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiescore.FileReferenceType_getValues()

class FileReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.FileReference_swiginit(self, _openstudioutilitiescore.new_FileReference(*args))
    __swig_destroy__ = _openstudioutilitiescore.delete_FileReference

    def clone(self) -> "openstudio::FileReference":
        return _openstudioutilitiescore.FileReference_clone(self)

    def uuid(self) -> "openstudio::UUID":
        return _openstudioutilitiescore.FileReference_uuid(self)

    def versionUUID(self) -> "openstudio::UUID":
        return _openstudioutilitiescore.FileReference_versionUUID(self)

    def name(self) -> "std::string":
        return _openstudioutilitiescore.FileReference_name(self)

    def displayName(self) -> "std::string":
        return _openstudioutilitiescore.FileReference_displayName(self)

    def description(self) -> "std::string":
        return _openstudioutilitiescore.FileReference_description(self)

    def path(self) -> "openstudio::path":
        return _openstudioutilitiescore.FileReference_path(self)

    def fileType(self) -> "openstudio::FileReferenceType":
        return _openstudioutilitiescore.FileReference_fileType(self)

    def timestampLast(self) -> "DateTime":
        return _openstudioutilitiescore.FileReference_timestampLast(self)

    def checksumCreate(self) -> "std::string":
        return _openstudioutilitiescore.FileReference_checksumCreate(self)

    def checksumLast(self) -> "std::string":
        return _openstudioutilitiescore.FileReference_checksumLast(self)

    def setName(self, newName: "std::string const &") -> "void":
        return _openstudioutilitiescore.FileReference_setName(self, newName)

    def setDisplayName(self, newDisplayName: "std::string const &") -> "void":
        return _openstudioutilitiescore.FileReference_setDisplayName(self, newDisplayName)

    def setDescription(self, newDescription: "std::string const &") -> "void":
        return _openstudioutilitiescore.FileReference_setDescription(self, newDescription)

    def setPath(self, newPath: "path") -> "void":
        return _openstudioutilitiescore.FileReference_setPath(self, newPath)

    def makePathAbsolute(self, searchDirectory: "path") -> "bool":
        return _openstudioutilitiescore.FileReference_makePathAbsolute(self, searchDirectory)

    def makePathRelative(self, *args) -> "bool":
        return _openstudioutilitiescore.FileReference_makePathRelative(self, *args)

    def update(self, searchDirectory: "path") -> "bool":
        return _openstudioutilitiescore.FileReference_update(self, searchDirectory)

# Register FileReference in _openstudioutilitiescore:
_openstudioutilitiescore.FileReference_swigregister(FileReference)

class IcharCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, cA: "char", cB: "char") -> "bool":
        return _openstudioutilitiescore.IcharCompare___call__(self, cA, cB)

    def __init__(self):
        _openstudioutilitiescore.IcharCompare_swiginit(self, _openstudioutilitiescore.new_IcharCompare())
    __swig_destroy__ = _openstudioutilitiescore.delete_IcharCompare

# Register IcharCompare in _openstudioutilitiescore:
_openstudioutilitiescore.IcharCompare_swigregister(IcharCompare)


def istringEqual(x: "std::string const &", y: "std::string const &") -> "bool":
    return _openstudioutilitiescore.istringEqual(x, y)
class IstringEqual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, x: "std::string const &", y: "std::string const &") -> "bool":
        return _openstudioutilitiescore.IstringEqual___call__(self, x, y)

    def __init__(self):
        _openstudioutilitiescore.IstringEqual_swiginit(self, _openstudioutilitiescore.new_IstringEqual())
    __swig_destroy__ = _openstudioutilitiescore.delete_IstringEqual

# Register IstringEqual in _openstudioutilitiescore:
_openstudioutilitiescore.IstringEqual_swigregister(IstringEqual)

class IstringFind(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.IstringFind_swiginit(self, _openstudioutilitiescore.new_IstringFind(*args))

    def addTarget(self, target: "std::string const &") -> "void":
        return _openstudioutilitiescore.IstringFind_addTarget(self, target)

    def __call__(self, other: "std::string const &") -> "bool":
        return _openstudioutilitiescore.IstringFind___call__(self, other)
    __swig_destroy__ = _openstudioutilitiescore.delete_IstringFind

# Register IstringFind in _openstudioutilitiescore:
_openstudioutilitiescore.IstringFind_swigregister(IstringFind)


def istringLess(x: "std::string const &", y: "std::string const &") -> "bool":
    return _openstudioutilitiescore.istringLess(x, y)
class IstringCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, x: "std::string const &", y: "std::string const &") -> "bool":
        return _openstudioutilitiescore.IstringCompare___call__(self, x, y)

    def __init__(self):
        _openstudioutilitiescore.IstringCompare_swiginit(self, _openstudioutilitiescore.new_IstringCompare())
    __swig_destroy__ = _openstudioutilitiescore.delete_IstringCompare

# Register IstringCompare in _openstudioutilitiescore:
_openstudioutilitiescore.IstringCompare_swigregister(IstringCompare)

class IstringPairCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, x: "StringPair", y: "StringPair") -> "bool":
        return _openstudioutilitiescore.IstringPairCompare___call__(self, x, y)

    def __init__(self):
        _openstudioutilitiescore.IstringPairCompare_swiginit(self, _openstudioutilitiescore.new_IstringPairCompare())
    __swig_destroy__ = _openstudioutilitiescore.delete_IstringPairCompare

# Register IstringPairCompare in _openstudioutilitiescore:
_openstudioutilitiescore.IstringPairCompare_swigregister(IstringPairCompare)

class VersionString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiescore.VersionString_swiginit(self, _openstudioutilitiescore.new_VersionString(*args))

    def str(self) -> "std::string":
        return _openstudioutilitiescore.VersionString_str(self)

    def major(self) -> "int":
        return _openstudioutilitiescore.VersionString_major(self)

    def minor(self) -> "int":
        return _openstudioutilitiescore.VersionString_minor(self)

    def patch(self) -> "boost::optional< int >":
        return _openstudioutilitiescore.VersionString_patch(self)

    def patchString(self) -> "std::string":
        return _openstudioutilitiescore.VersionString_patchString(self)

    def buildString(self) -> "std::string":
        return _openstudioutilitiescore.VersionString_buildString(self)

    def __lt__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___lt__(self, other)

    def __gt__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___gt__(self, other)

    def __eq__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___eq__(self, other)

    def __ne__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___ne__(self, other)

    def __le__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___le__(self, other)

    def __ge__(self, other: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString___ge__(self, other)

    def isNextVersion(self, nextVersionCandidate: "VersionString") -> "bool":
        return _openstudioutilitiescore.VersionString_isNextVersion(self, nextVersionCandidate)
    __swig_destroy__ = _openstudioutilitiescore.delete_VersionString

# Register VersionString in _openstudioutilitiescore:
_openstudioutilitiescore.VersionString_swigregister(VersionString)


def __lshift__(*args) -> "std::ostream &":
    return _openstudioutilitiescore.__lshift__(*args)
class WorkspaceObjectNameLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a: "openstudio::WorkspaceObject const &", b: "openstudio::WorkspaceObject const &") -> "bool":
        return _openstudioutilitiescore.WorkspaceObjectNameLess___call__(self, a, b)

    def __init__(self):
        _openstudioutilitiescore.WorkspaceObjectNameLess_swiginit(self, _openstudioutilitiescore.new_WorkspaceObjectNameLess())
    __swig_destroy__ = _openstudioutilitiescore.delete_WorkspaceObjectNameLess

# Register WorkspaceObjectNameLess in _openstudioutilitiescore:
_openstudioutilitiescore.WorkspaceObjectNameLess_swigregister(WorkspaceObjectNameLess)

class WorkspaceObjectNameGreater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a: "openstudio::WorkspaceObject const &", b: "openstudio::WorkspaceObject const &") -> "bool":
        return _openstudioutilitiescore.WorkspaceObjectNameGreater___call__(self, a, b)

    def __init__(self):
        _openstudioutilitiescore.WorkspaceObjectNameGreater_swiginit(self, _openstudioutilitiescore.new_WorkspaceObjectNameGreater())
    __swig_destroy__ = _openstudioutilitiescore.delete_WorkspaceObjectNameGreater

# Register WorkspaceObjectNameGreater in _openstudioutilitiescore:
_openstudioutilitiescore.WorkspaceObjectNameGreater_swigregister(WorkspaceObjectNameGreater)

class BCLComponentNameLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a: "openstudio::BCLComponent const &", b: "openstudio::BCLComponent const &") -> "bool":
        return _openstudioutilitiescore.BCLComponentNameLess___call__(self, a, b)

    def __init__(self):
        _openstudioutilitiescore.BCLComponentNameLess_swiginit(self, _openstudioutilitiescore.new_BCLComponentNameLess())
    __swig_destroy__ = _openstudioutilitiescore.delete_BCLComponentNameLess

# Register BCLComponentNameLess in _openstudioutilitiescore:
_openstudioutilitiescore.BCLComponentNameLess_swigregister(BCLComponentNameLess)

class BCLComponentNameGreater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a: "openstudio::BCLComponent const &", b: "openstudio::BCLComponent const &") -> "bool":
        return _openstudioutilitiescore.BCLComponentNameGreater___call__(self, a, b)

    def __init__(self):
        _openstudioutilitiescore.BCLComponentNameGreater_swiginit(self, _openstudioutilitiescore.new_BCLComponentNameGreater())
    __swig_destroy__ = _openstudioutilitiescore.delete_BCLComponentNameGreater

# Register BCLComponentNameGreater in _openstudioutilitiescore:
_openstudioutilitiescore.BCLComponentNameGreater_swigregister(BCLComponentNameGreater)


def DoublesEqual(*args) -> "bool":
    return _openstudioutilitiescore.DoublesEqual(*args)

def DoublesLessThanOrEqual(*args) -> "bool":
    return _openstudioutilitiescore.DoublesLessThanOrEqual(*args)

def DoublesGreaterThanOrEqual(*args) -> "bool":
    return _openstudioutilitiescore.DoublesGreaterThanOrEqual(*args)

def DoublesRelativeError(*args) -> "double":
    return _openstudioutilitiescore.DoublesRelativeError(*args)


