# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelstraightcomponent
else:
    import _openstudiomodelstraightcomponent

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelstraightcomponent.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelstraightcomponent.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelstraightcomponent.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelstraightcomponent.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelstraightcomponent.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelstraightcomponent.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelstraightcomponent.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelstraightcomponent.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelstraightcomponent.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelzonehvac

Model = openstudiomodelcore.Model

class GFunctionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.GFunctionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GFunctionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GFunctionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GFunction >::size_type":
        return _openstudiomodelstraightcomponent.GFunctionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GFunction >::difference_type", j: "std::vector< openstudio::model::GFunction >::difference_type") -> "std::vector< openstudio::model::GFunction,std::allocator< openstudio::model::GFunction > > *":
        return _openstudiomodelstraightcomponent.GFunctionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GFunction >::difference_type", j: "std::vector< openstudio::model::GFunction >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GFunction >::value_type const &":
        return _openstudiomodelstraightcomponent.GFunctionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GFunction >::value_type":
        return _openstudiomodelstraightcomponent.GFunctionVector_pop(self)

    def append(self, x: "GFunction") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.GFunctionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GFunction >::size_type":
        return _openstudiomodelstraightcomponent.GFunctionVector_size(self)

    def swap(self, v: "GFunctionVector") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GFunction >::iterator":
        return _openstudiomodelstraightcomponent.GFunctionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GFunction >::iterator":
        return _openstudiomodelstraightcomponent.GFunctionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GFunction >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GFunctionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GFunction >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GFunctionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GFunction >::allocator_type":
        return _openstudiomodelstraightcomponent.GFunctionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GFunction >::iterator":
        return _openstudiomodelstraightcomponent.GFunctionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.GFunctionVector_swiginit(self, _openstudiomodelstraightcomponent.new_GFunctionVector(*args))

    def push_back(self, x: "GFunction") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GFunction >::value_type const &":
        return _openstudiomodelstraightcomponent.GFunctionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GFunction >::value_type const &":
        return _openstudiomodelstraightcomponent.GFunctionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GFunction >::size_type", x: "GFunction") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GFunction >::size_type", x: "GFunction") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GFunction >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.GFunctionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GFunction >::size_type":
        return _openstudiomodelstraightcomponent.GFunctionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GFunctionVector

# Register GFunctionVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GFunctionVector_swigregister(GFunctionVector)

class AirConditionerVariableRefrigerantFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::difference_type") -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow,std::allocator< openstudio::model::AirConditionerVariableRefrigerantFlow > > *":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::difference_type", j: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::value_type":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_pop(self)

    def append(self, x: "AirConditionerVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_size(self)

    def swap(self, v: "AirConditionerVariableRefrigerantFlowVector") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::iterator":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::iterator":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::allocator_type":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::iterator":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirConditionerVariableRefrigerantFlowVector(*args))

    def push_back(self, x: "AirConditionerVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type", x: "AirConditionerVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type", x: "AirConditionerVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow >::size_type":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirConditionerVariableRefrigerantFlowVector

# Register AirConditionerVariableRefrigerantFlowVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlowVector_swigregister(AirConditionerVariableRefrigerantFlowVector)

class OptionalAirConditionerVariableRefrigerantFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirConditionerVariableRefrigerantFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_reset(self)

    def __ref__(self) -> "openstudio::model::AirConditionerVariableRefrigerantFlow":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_isNull(self)

    def get(self) -> "openstudio::model::AirConditionerVariableRefrigerantFlow":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_get(self)

    def set(self, t: "AirConditionerVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirConditionerVariableRefrigerantFlow

# Register OptionalAirConditionerVariableRefrigerantFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirConditionerVariableRefrigerantFlow_swigregister(OptionalAirConditionerVariableRefrigerantFlow)

class AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass > > *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::value_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_pop(self)

    def append(self, x: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_size(self)

    def swap(self, v: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::allocator_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector(*args))

    def push_back(self, x: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type", x: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type", x: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector

# Register AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector_swigregister(AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector)

class OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_get(self)

    def set(self, t: "AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass

# Register OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_swigregister(OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass)

class AirLoopHVACUnitaryHeatPumpAirToAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir > > *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::value_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_pop(self)

    def append(self, x: "AirLoopHVACUnitaryHeatPumpAirToAir") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_size(self)

    def swap(self, v: "AirLoopHVACUnitaryHeatPumpAirToAirVector") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::allocator_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatPumpAirToAirVector(*args))

    def push_back(self, x: "AirLoopHVACUnitaryHeatPumpAirToAir") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type", x: "AirLoopHVACUnitaryHeatPumpAirToAir") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type", x: "AirLoopHVACUnitaryHeatPumpAirToAir") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatPumpAirToAirVector

# Register AirLoopHVACUnitaryHeatPumpAirToAirVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirVector_swigregister(AirLoopHVACUnitaryHeatPumpAirToAirVector)

class OptionalAirLoopHVACUnitaryHeatPumpAirToAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirLoopHVACUnitaryHeatPumpAirToAir(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_get(self)

    def set(self, t: "AirLoopHVACUnitaryHeatPumpAirToAir") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirLoopHVACUnitaryHeatPumpAirToAir

# Register OptionalAirLoopHVACUnitaryHeatPumpAirToAir in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAir_swigregister(OptionalAirLoopHVACUnitaryHeatPumpAirToAir)

class AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::difference_type") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed > > *":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::difference_type", j: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::value_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_pop(self)

    def append(self, x: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_size(self)

    def swap(self, v: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector(*args))

    def push_back(self, x: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type", x: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type", x: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector

# Register AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector_swigregister(AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector)

class OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_get(self)

    def set(self, t: "AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed

# Register OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_swigregister(OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed)

class AirTerminalSingleDuctConstantVolumeCooledBeamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctConstantVolumeCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctConstantVolumeCooledBeamVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeCooledBeamVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctConstantVolumeCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type", x: "AirTerminalSingleDuctConstantVolumeCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type", x: "AirTerminalSingleDuctConstantVolumeCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeCooledBeamVector

# Register AirTerminalSingleDuctConstantVolumeCooledBeamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeamVector_swigregister(AirTerminalSingleDuctConstantVolumeCooledBeamVector)

class OptionalAirTerminalSingleDuctConstantVolumeCooledBeam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctConstantVolumeCooledBeam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_get(self)

    def set(self, t: "AirTerminalSingleDuctConstantVolumeCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctConstantVolumeCooledBeam

# Register OptionalAirTerminalSingleDuctConstantVolumeCooledBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeCooledBeam_swigregister(OptionalAirTerminalSingleDuctConstantVolumeCooledBeam)

class AirTerminalSingleDuctConstantVolumeFourPipeBeamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctConstantVolumeFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctConstantVolumeFourPipeBeamVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeFourPipeBeamVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctConstantVolumeFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type", x: "AirTerminalSingleDuctConstantVolumeFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type", x: "AirTerminalSingleDuctConstantVolumeFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeFourPipeBeamVector

# Register AirTerminalSingleDuctConstantVolumeFourPipeBeamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeamVector_swigregister(AirTerminalSingleDuctConstantVolumeFourPipeBeamVector)

class OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_get(self)

    def set(self, t: "AirTerminalSingleDuctConstantVolumeFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam

# Register OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam_swigregister(OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam)

class AirTerminalSingleDuctConstantVolumeFourPipeInductionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctConstantVolumeFourPipeInduction") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctConstantVolumeFourPipeInductionVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeFourPipeInductionVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctConstantVolumeFourPipeInduction") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type", x: "AirTerminalSingleDuctConstantVolumeFourPipeInduction") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type", x: "AirTerminalSingleDuctConstantVolumeFourPipeInduction") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeFourPipeInductionVector

# Register AirTerminalSingleDuctConstantVolumeFourPipeInductionVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInductionVector_swigregister(AirTerminalSingleDuctConstantVolumeFourPipeInductionVector)

class OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_get(self)

    def set(self, t: "AirTerminalSingleDuctConstantVolumeFourPipeInduction") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction

# Register OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction_swigregister(OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction)

class AirTerminalSingleDuctConstantVolumeReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctConstantVolumeReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctConstantVolumeReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctConstantVolumeReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type", x: "AirTerminalSingleDuctConstantVolumeReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type", x: "AirTerminalSingleDuctConstantVolumeReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeReheatVector

# Register AirTerminalSingleDuctConstantVolumeReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheatVector_swigregister(AirTerminalSingleDuctConstantVolumeReheatVector)

class OptionalAirTerminalSingleDuctConstantVolumeReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctConstantVolumeReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctConstantVolumeReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctConstantVolumeReheat

# Register OptionalAirTerminalSingleDuctConstantVolumeReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeReheat_swigregister(OptionalAirTerminalSingleDuctConstantVolumeReheat)

class AirTerminalSingleDuctInletSideMixerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer,std::allocator< openstudio::model::AirTerminalSingleDuctInletSideMixer > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctInletSideMixer") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctInletSideMixerVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctInletSideMixerVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctInletSideMixer") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type", x: "AirTerminalSingleDuctInletSideMixer") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type", x: "AirTerminalSingleDuctInletSideMixer") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctInletSideMixerVector

# Register AirTerminalSingleDuctInletSideMixerVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixerVector_swigregister(AirTerminalSingleDuctInletSideMixerVector)

class OptionalAirTerminalSingleDuctInletSideMixer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctInletSideMixer(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctInletSideMixer":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctInletSideMixer":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_get(self)

    def set(self, t: "AirTerminalSingleDuctInletSideMixer") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctInletSideMixer

# Register OptionalAirTerminalSingleDuctInletSideMixer in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctInletSideMixer_swigregister(OptionalAirTerminalSingleDuctInletSideMixer)

class AirTerminalSingleDuctParallelPIUReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctParallelPIUReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctParallelPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctParallelPIUReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctParallelPIUReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctParallelPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type", x: "AirTerminalSingleDuctParallelPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type", x: "AirTerminalSingleDuctParallelPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctParallelPIUReheatVector

# Register AirTerminalSingleDuctParallelPIUReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheatVector_swigregister(AirTerminalSingleDuctParallelPIUReheatVector)

class OptionalAirTerminalSingleDuctParallelPIUReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctParallelPIUReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctParallelPIUReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctParallelPIUReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctParallelPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctParallelPIUReheat

# Register OptionalAirTerminalSingleDuctParallelPIUReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctParallelPIUReheat_swigregister(OptionalAirTerminalSingleDuctParallelPIUReheat)

class AirTerminalSingleDuctSeriesPIUReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctSeriesPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctSeriesPIUReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctSeriesPIUReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctSeriesPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type", x: "AirTerminalSingleDuctSeriesPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type", x: "AirTerminalSingleDuctSeriesPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctSeriesPIUReheatVector

# Register AirTerminalSingleDuctSeriesPIUReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheatVector_swigregister(AirTerminalSingleDuctSeriesPIUReheatVector)

class OptionalAirTerminalSingleDuctSeriesPIUReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctSeriesPIUReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctSeriesPIUReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctSeriesPIUReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctSeriesPIUReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctSeriesPIUReheat

# Register OptionalAirTerminalSingleDuctSeriesPIUReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctSeriesPIUReheat_swigregister(OptionalAirTerminalSingleDuctSeriesPIUReheat)

class AirTerminalSingleDuctConstantVolumeNoReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctConstantVolumeNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctConstantVolumeNoReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeNoReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctConstantVolumeNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type", x: "AirTerminalSingleDuctConstantVolumeNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type", x: "AirTerminalSingleDuctConstantVolumeNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeNoReheatVector

# Register AirTerminalSingleDuctConstantVolumeNoReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheatVector_swigregister(AirTerminalSingleDuctConstantVolumeNoReheatVector)

class OptionalAirTerminalSingleDuctConstantVolumeNoReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctConstantVolumeNoReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctConstantVolumeNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctConstantVolumeNoReheat

# Register OptionalAirTerminalSingleDuctConstantVolumeNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctConstantVolumeNoReheat_swigregister(OptionalAirTerminalSingleDuctConstantVolumeNoReheat)

class AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctVAVHeatAndCoolNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctVAVHeatAndCoolNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type", x: "AirTerminalSingleDuctVAVHeatAndCoolNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type", x: "AirTerminalSingleDuctVAVHeatAndCoolNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector

# Register AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector_swigregister(AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector)

class OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctVAVHeatAndCoolNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat

# Register OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat_swigregister(OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat)

class AirTerminalSingleDuctVAVHeatAndCoolReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctVAVHeatAndCoolReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctVAVHeatAndCoolReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVHeatAndCoolReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctVAVHeatAndCoolReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type", x: "AirTerminalSingleDuctVAVHeatAndCoolReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type", x: "AirTerminalSingleDuctVAVHeatAndCoolReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVHeatAndCoolReheatVector

# Register AirTerminalSingleDuctVAVHeatAndCoolReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheatVector_swigregister(AirTerminalSingleDuctVAVHeatAndCoolReheatVector)

class OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctVAVHeatAndCoolReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat

# Register OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat_swigregister(OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat)

class AirTerminalSingleDuctVAVNoReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVNoReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctVAVNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctVAVNoReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVNoReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctVAVNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type", x: "AirTerminalSingleDuctVAVNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type", x: "AirTerminalSingleDuctVAVNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVNoReheatVector

# Register AirTerminalSingleDuctVAVNoReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheatVector_swigregister(AirTerminalSingleDuctVAVNoReheatVector)

class OptionalAirTerminalSingleDuctVAVNoReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctVAVNoReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctVAVNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctVAVNoReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctVAVNoReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctVAVNoReheat

# Register OptionalAirTerminalSingleDuctVAVNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVNoReheat_swigregister(OptionalAirTerminalSingleDuctVAVNoReheat)

class AirTerminalSingleDuctVAVReheatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::difference_type") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVReheat > > *":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::difference_type", j: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::value_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_pop(self)

    def append(self, x: "AirTerminalSingleDuctVAVReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_size(self)

    def swap(self, v: "AirTerminalSingleDuctVAVReheatVector") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::reverse_iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::allocator_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::iterator":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVReheatVector(*args))

    def push_back(self, x: "AirTerminalSingleDuctVAVReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::value_type const &":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type", x: "AirTerminalSingleDuctVAVReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type", x: "AirTerminalSingleDuctVAVReheat") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat >::size_type":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVReheatVector

# Register AirTerminalSingleDuctVAVReheatVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheatVector_swigregister(AirTerminalSingleDuctVAVReheatVector)

class OptionalAirTerminalSingleDuctVAVReheat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalAirTerminalSingleDuctVAVReheat(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_reset(self)

    def __ref__(self) -> "openstudio::model::AirTerminalSingleDuctVAVReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_isNull(self)

    def get(self) -> "openstudio::model::AirTerminalSingleDuctVAVReheat":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_get(self)

    def set(self, t: "AirTerminalSingleDuctVAVReheat") -> "void":
        return _openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalAirTerminalSingleDuctVAVReheat

# Register OptionalAirTerminalSingleDuctVAVReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalAirTerminalSingleDuctVAVReheat_swigregister(OptionalAirTerminalSingleDuctVAVReheat)

class BoilerHotWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::BoilerHotWater >::size_type":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::BoilerHotWater >::difference_type", j: "std::vector< openstudio::model::BoilerHotWater >::difference_type") -> "std::vector< openstudio::model::BoilerHotWater,std::allocator< openstudio::model::BoilerHotWater > > *":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::BoilerHotWater >::difference_type", j: "std::vector< openstudio::model::BoilerHotWater >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::BoilerHotWater >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::BoilerHotWater >::value_type":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_pop(self)

    def append(self, x: "BoilerHotWater") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::BoilerHotWater >::size_type":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_size(self)

    def swap(self, v: "BoilerHotWaterVector") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::BoilerHotWater >::iterator":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::BoilerHotWater >::iterator":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::BoilerHotWater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::BoilerHotWater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::BoilerHotWater >::allocator_type":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::BoilerHotWater >::iterator":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.BoilerHotWaterVector_swiginit(self, _openstudiomodelstraightcomponent.new_BoilerHotWaterVector(*args))

    def push_back(self, x: "BoilerHotWater") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::BoilerHotWater >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::BoilerHotWater >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::BoilerHotWater >::size_type", x: "BoilerHotWater") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::BoilerHotWater >::size_type", x: "BoilerHotWater") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::BoilerHotWater >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::BoilerHotWater >::size_type":
        return _openstudiomodelstraightcomponent.BoilerHotWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_BoilerHotWaterVector

# Register BoilerHotWaterVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.BoilerHotWaterVector_swigregister(BoilerHotWaterVector)

class OptionalBoilerHotWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalBoilerHotWater_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalBoilerHotWater(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater_reset(self)

    def __ref__(self) -> "openstudio::model::BoilerHotWater":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater_isNull(self)

    def get(self) -> "openstudio::model::BoilerHotWater":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater_get(self)

    def set(self, t: "BoilerHotWater") -> "void":
        return _openstudiomodelstraightcomponent.OptionalBoilerHotWater_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalBoilerHotWater

# Register OptionalBoilerHotWater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalBoilerHotWater_swigregister(OptionalBoilerHotWater)

class BoilerSteamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::BoilerSteam >::size_type":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::BoilerSteam >::difference_type", j: "std::vector< openstudio::model::BoilerSteam >::difference_type") -> "std::vector< openstudio::model::BoilerSteam,std::allocator< openstudio::model::BoilerSteam > > *":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::BoilerSteam >::difference_type", j: "std::vector< openstudio::model::BoilerSteam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::BoilerSteam >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::BoilerSteam >::value_type":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_pop(self)

    def append(self, x: "BoilerSteam") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::BoilerSteam >::size_type":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_size(self)

    def swap(self, v: "BoilerSteamVector") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::BoilerSteam >::iterator":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::BoilerSteam >::iterator":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::BoilerSteam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::BoilerSteam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::BoilerSteam >::allocator_type":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::BoilerSteam >::iterator":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.BoilerSteamVector_swiginit(self, _openstudiomodelstraightcomponent.new_BoilerSteamVector(*args))

    def push_back(self, x: "BoilerSteam") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::BoilerSteam >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::BoilerSteam >::value_type const &":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::BoilerSteam >::size_type", x: "BoilerSteam") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::BoilerSteam >::size_type", x: "BoilerSteam") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::BoilerSteam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::BoilerSteam >::size_type":
        return _openstudiomodelstraightcomponent.BoilerSteamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_BoilerSteamVector

# Register BoilerSteamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.BoilerSteamVector_swigregister(BoilerSteamVector)

class OptionalBoilerSteam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalBoilerSteam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalBoilerSteam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam_reset(self)

    def __ref__(self) -> "openstudio::model::BoilerSteam":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam_isNull(self)

    def get(self) -> "openstudio::model::BoilerSteam":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam_get(self)

    def set(self, t: "BoilerSteam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalBoilerSteam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalBoilerSteam

# Register OptionalBoilerSteam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalBoilerSteam_swigregister(OptionalBoilerSteam)

class CoilCoolingCooledBeamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingCooledBeam >::difference_type", j: "std::vector< openstudio::model::CoilCoolingCooledBeam >::difference_type") -> "std::vector< openstudio::model::CoilCoolingCooledBeam,std::allocator< openstudio::model::CoilCoolingCooledBeam > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingCooledBeam >::difference_type", j: "std::vector< openstudio::model::CoilCoolingCooledBeam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_pop(self)

    def append(self, x: "CoilCoolingCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_size(self)

    def swap(self, v: "CoilCoolingCooledBeamVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingCooledBeamVector(*args))

    def push_back(self, x: "CoilCoolingCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type", x: "CoilCoolingCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type", x: "CoilCoolingCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingCooledBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingCooledBeamVector

# Register CoilCoolingCooledBeamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingCooledBeamVector_swigregister(CoilCoolingCooledBeamVector)

class OptionalCoilCoolingCooledBeam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingCooledBeam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingCooledBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingCooledBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_get(self)

    def set(self, t: "CoilCoolingCooledBeam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingCooledBeam

# Register OptionalCoilCoolingCooledBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingCooledBeam_swigregister(OptionalCoilCoolingCooledBeam)

class CoilCoolingDXVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDX >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDX >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDX >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDX,std::allocator< openstudio::model::CoilCoolingDX > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDX >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDX >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDX >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDX >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_pop(self)

    def append(self, x: "CoilCoolingDX") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDX >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_size(self)

    def swap(self, v: "CoilCoolingDXVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDX >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDX >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDX >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDX >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDX >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDX >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXVector(*args))

    def push_back(self, x: "CoilCoolingDX") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDX >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDX >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDX >::size_type", x: "CoilCoolingDX") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDX >::size_type", x: "CoilCoolingDX") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDX >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDX >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXVector

# Register CoilCoolingDXVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXVector_swigregister(CoilCoolingDXVector)

class OptionalCoilCoolingDX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDX(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDX":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDX":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_get(self)

    def set(self, t: "CoilCoolingDX") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDX_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDX

# Register OptionalCoilCoolingDX in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDX_swigregister(OptionalCoilCoolingDX)

class CoilCoolingDXMultiSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed,std::allocator< openstudio::model::CoilCoolingDXMultiSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_pop(self)

    def append(self, x: "CoilCoolingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_size(self)

    def swap(self, v: "CoilCoolingDXMultiSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXMultiSpeedVector(*args))

    def push_back(self, x: "CoilCoolingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type", x: "CoilCoolingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type", x: "CoilCoolingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXMultiSpeedVector

# Register CoilCoolingDXMultiSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeedVector_swigregister(CoilCoolingDXMultiSpeedVector)

class OptionalCoilCoolingDXMultiSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDXMultiSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_get(self)

    def set(self, t: "CoilCoolingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDXMultiSpeed

# Register OptionalCoilCoolingDXMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDXMultiSpeed_swigregister(OptionalCoilCoolingDXMultiSpeed)

class CoilCoolingDXSingleSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed,std::allocator< openstudio::model::CoilCoolingDXSingleSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_pop(self)

    def append(self, x: "CoilCoolingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_size(self)

    def swap(self, v: "CoilCoolingDXSingleSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXSingleSpeedVector(*args))

    def push_back(self, x: "CoilCoolingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type", x: "CoilCoolingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type", x: "CoilCoolingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXSingleSpeedVector

# Register CoilCoolingDXSingleSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeedVector_swigregister(CoilCoolingDXSingleSpeedVector)

class OptionalCoilCoolingDXSingleSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDXSingleSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_get(self)

    def set(self, t: "CoilCoolingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDXSingleSpeed

# Register OptionalCoilCoolingDXSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDXSingleSpeed_swigregister(OptionalCoilCoolingDXSingleSpeed)

class CoilCoolingDXTwoSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed,std::allocator< openstudio::model::CoilCoolingDXTwoSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_pop(self)

    def append(self, x: "CoilCoolingDXTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_size(self)

    def swap(self, v: "CoilCoolingDXTwoSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXTwoSpeedVector(*args))

    def push_back(self, x: "CoilCoolingDXTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type", x: "CoilCoolingDXTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type", x: "CoilCoolingDXTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXTwoSpeedVector

# Register CoilCoolingDXTwoSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeedVector_swigregister(CoilCoolingDXTwoSpeedVector)

class OptionalCoilCoolingDXTwoSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDXTwoSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_get(self)

    def set(self, t: "CoilCoolingDXTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDXTwoSpeed

# Register OptionalCoilCoolingDXTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoSpeed_swigregister(OptionalCoilCoolingDXTwoSpeed)

class CoilCoolingDXTwoStageWithHumidityControlModeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode,std::allocator< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_pop(self)

    def append(self, x: "CoilCoolingDXTwoStageWithHumidityControlMode") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_size(self)

    def swap(self, v: "CoilCoolingDXTwoStageWithHumidityControlModeVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXTwoStageWithHumidityControlModeVector(*args))

    def push_back(self, x: "CoilCoolingDXTwoStageWithHumidityControlMode") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type", x: "CoilCoolingDXTwoStageWithHumidityControlMode") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type", x: "CoilCoolingDXTwoStageWithHumidityControlMode") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXTwoStageWithHumidityControlModeVector

# Register CoilCoolingDXTwoStageWithHumidityControlModeVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlModeVector_swigregister(CoilCoolingDXTwoStageWithHumidityControlModeVector)

class OptionalCoilCoolingDXTwoStageWithHumidityControlMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDXTwoStageWithHumidityControlMode(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_get(self)

    def set(self, t: "CoilCoolingDXTwoStageWithHumidityControlMode") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDXTwoStageWithHumidityControlMode

# Register OptionalCoilCoolingDXTwoStageWithHumidityControlMode in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDXTwoStageWithHumidityControlMode_swigregister(OptionalCoilCoolingDXTwoStageWithHumidityControlMode)

class CoilCoolingDXVariableSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::difference_type") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed,std::allocator< openstudio::model::CoilCoolingDXVariableSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_pop(self)

    def append(self, x: "CoilCoolingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_size(self)

    def swap(self, v: "CoilCoolingDXVariableSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXVariableSpeedVector(*args))

    def push_back(self, x: "CoilCoolingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type", x: "CoilCoolingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type", x: "CoilCoolingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXVariableSpeedVector

# Register CoilCoolingDXVariableSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeedVector_swigregister(CoilCoolingDXVariableSpeedVector)

class OptionalCoilCoolingDXVariableSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingDXVariableSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingDXVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingDXVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_get(self)

    def set(self, t: "CoilCoolingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingDXVariableSpeed

# Register OptionalCoilCoolingDXVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingDXVariableSpeed_swigregister(OptionalCoilCoolingDXVariableSpeed)

class CoilCoolingFourPipeBeamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::difference_type") -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam,std::allocator< openstudio::model::CoilCoolingFourPipeBeam > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_pop(self)

    def append(self, x: "CoilCoolingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_size(self)

    def swap(self, v: "CoilCoolingFourPipeBeamVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingFourPipeBeamVector(*args))

    def push_back(self, x: "CoilCoolingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type", x: "CoilCoolingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type", x: "CoilCoolingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingFourPipeBeamVector

# Register CoilCoolingFourPipeBeamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingFourPipeBeamVector_swigregister(CoilCoolingFourPipeBeamVector)

class OptionalCoilCoolingFourPipeBeam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingFourPipeBeam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_get(self)

    def set(self, t: "CoilCoolingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingFourPipeBeam

# Register OptionalCoilCoolingFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingFourPipeBeam_swigregister(OptionalCoilCoolingFourPipeBeam)

class CoilCoolingLowTempRadiantConstFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::difference_type") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantConstFlow > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_pop(self)

    def append(self, x: "CoilCoolingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_size(self)

    def swap(self, v: "CoilCoolingLowTempRadiantConstFlowVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingLowTempRadiantConstFlowVector(*args))

    def push_back(self, x: "CoilCoolingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type", x: "CoilCoolingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type", x: "CoilCoolingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingLowTempRadiantConstFlowVector

# Register CoilCoolingLowTempRadiantConstFlowVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlowVector_swigregister(CoilCoolingLowTempRadiantConstFlowVector)

class OptionalCoilCoolingLowTempRadiantConstFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingLowTempRadiantConstFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingLowTempRadiantConstFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingLowTempRadiantConstFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_get(self)

    def set(self, t: "CoilCoolingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingLowTempRadiantConstFlow

# Register OptionalCoilCoolingLowTempRadiantConstFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantConstFlow_swigregister(OptionalCoilCoolingLowTempRadiantConstFlow)

class CoilCoolingLowTempRadiantVarFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::difference_type") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantVarFlow > > *":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::difference_type", j: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::value_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_pop(self)

    def append(self, x: "CoilCoolingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_size(self)

    def swap(self, v: "CoilCoolingLowTempRadiantVarFlowVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingLowTempRadiantVarFlowVector(*args))

    def push_back(self, x: "CoilCoolingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type", x: "CoilCoolingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type", x: "CoilCoolingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingLowTempRadiantVarFlowVector

# Register CoilCoolingLowTempRadiantVarFlowVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlowVector_swigregister(CoilCoolingLowTempRadiantVarFlowVector)

class OptionalCoilCoolingLowTempRadiantVarFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilCoolingLowTempRadiantVarFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilCoolingLowTempRadiantVarFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilCoolingLowTempRadiantVarFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_get(self)

    def set(self, t: "CoilCoolingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilCoolingLowTempRadiantVarFlow

# Register OptionalCoilCoolingLowTempRadiantVarFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilCoolingLowTempRadiantVarFlow_swigregister(OptionalCoilCoolingLowTempRadiantVarFlow)

class CoilHeatingDesuperheaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDesuperheater >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDesuperheater >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDesuperheater,std::allocator< openstudio::model::CoilHeatingDesuperheater > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDesuperheater >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDesuperheater >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_pop(self)

    def append(self, x: "CoilHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_size(self)

    def swap(self, v: "CoilHeatingDesuperheaterVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDesuperheaterVector(*args))

    def push_back(self, x: "CoilHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type", x: "CoilHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type", x: "CoilHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDesuperheaterVector

# Register CoilHeatingDesuperheaterVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDesuperheaterVector_swigregister(CoilHeatingDesuperheaterVector)

class OptionalCoilHeatingDesuperheater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingDesuperheater(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDesuperheater":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDesuperheater":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_get(self)

    def set(self, t: "CoilHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingDesuperheater

# Register OptionalCoilHeatingDesuperheater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingDesuperheater_swigregister(OptionalCoilHeatingDesuperheater)

class CoilHeatingDXMultiSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed,std::allocator< openstudio::model::CoilHeatingDXMultiSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_pop(self)

    def append(self, x: "CoilHeatingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_size(self)

    def swap(self, v: "CoilHeatingDXMultiSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXMultiSpeedVector(*args))

    def push_back(self, x: "CoilHeatingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type", x: "CoilHeatingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type", x: "CoilHeatingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXMultiSpeedVector

# Register CoilHeatingDXMultiSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeedVector_swigregister(CoilHeatingDXMultiSpeedVector)

class OptionalCoilHeatingDXMultiSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingDXMultiSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXMultiSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_get(self)

    def set(self, t: "CoilHeatingDXMultiSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingDXMultiSpeed

# Register OptionalCoilHeatingDXMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingDXMultiSpeed_swigregister(OptionalCoilHeatingDXMultiSpeed)

class CoilHeatingDXSingleSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed,std::allocator< openstudio::model::CoilHeatingDXSingleSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_pop(self)

    def append(self, x: "CoilHeatingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_size(self)

    def swap(self, v: "CoilHeatingDXSingleSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXSingleSpeedVector(*args))

    def push_back(self, x: "CoilHeatingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type", x: "CoilHeatingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type", x: "CoilHeatingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXSingleSpeedVector

# Register CoilHeatingDXSingleSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeedVector_swigregister(CoilHeatingDXSingleSpeedVector)

class OptionalCoilHeatingDXSingleSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingDXSingleSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_get(self)

    def set(self, t: "CoilHeatingDXSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingDXSingleSpeed

# Register OptionalCoilHeatingDXSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingDXSingleSpeed_swigregister(OptionalCoilHeatingDXSingleSpeed)

class CoilHeatingDXVariableSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::difference_type") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed,std::allocator< openstudio::model::CoilHeatingDXVariableSpeed > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_pop(self)

    def append(self, x: "CoilHeatingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_size(self)

    def swap(self, v: "CoilHeatingDXVariableSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXVariableSpeedVector(*args))

    def push_back(self, x: "CoilHeatingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type", x: "CoilHeatingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type", x: "CoilHeatingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXVariableSpeedVector

# Register CoilHeatingDXVariableSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeedVector_swigregister(CoilHeatingDXVariableSpeedVector)

class OptionalCoilHeatingDXVariableSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingDXVariableSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingDXVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingDXVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_get(self)

    def set(self, t: "CoilHeatingDXVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingDXVariableSpeed

# Register OptionalCoilHeatingDXVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingDXVariableSpeed_swigregister(OptionalCoilHeatingDXVariableSpeed)

class CoilHeatingElectricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingElectric >::difference_type", j: "std::vector< openstudio::model::CoilHeatingElectric >::difference_type") -> "std::vector< openstudio::model::CoilHeatingElectric,std::allocator< openstudio::model::CoilHeatingElectric > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingElectric >::difference_type", j: "std::vector< openstudio::model::CoilHeatingElectric >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_pop(self)

    def append(self, x: "CoilHeatingElectric") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_size(self)

    def swap(self, v: "CoilHeatingElectricVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingElectric >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingElectricVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingElectricVector(*args))

    def push_back(self, x: "CoilHeatingElectric") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingElectric >::size_type", x: "CoilHeatingElectric") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingElectric >::size_type", x: "CoilHeatingElectric") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingElectric >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingElectric >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingElectricVector

# Register CoilHeatingElectricVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingElectricVector_swigregister(CoilHeatingElectricVector)

class OptionalCoilHeatingElectric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingElectric(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingElectric":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingElectric":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_get(self)

    def set(self, t: "CoilHeatingElectric") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingElectric

# Register OptionalCoilHeatingElectric in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingElectric_swigregister(OptionalCoilHeatingElectric)

class CoilHeatingFourPipeBeamVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::difference_type") -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam,std::allocator< openstudio::model::CoilHeatingFourPipeBeam > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::difference_type", j: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_pop(self)

    def append(self, x: "CoilHeatingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_size(self)

    def swap(self, v: "CoilHeatingFourPipeBeamVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingFourPipeBeamVector(*args))

    def push_back(self, x: "CoilHeatingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type", x: "CoilHeatingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type", x: "CoilHeatingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingFourPipeBeamVector

# Register CoilHeatingFourPipeBeamVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingFourPipeBeamVector_swigregister(CoilHeatingFourPipeBeamVector)

class OptionalCoilHeatingFourPipeBeam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingFourPipeBeam(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingFourPipeBeam":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_get(self)

    def set(self, t: "CoilHeatingFourPipeBeam") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingFourPipeBeam

# Register OptionalCoilHeatingFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingFourPipeBeam_swigregister(OptionalCoilHeatingFourPipeBeam)

class CoilHeatingGasVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingGas >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingGas >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGas >::difference_type") -> "std::vector< openstudio::model::CoilHeatingGas,std::allocator< openstudio::model::CoilHeatingGas > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingGas >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGas >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingGas >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingGas >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_pop(self)

    def append(self, x: "CoilHeatingGas") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingGas >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_size(self)

    def swap(self, v: "CoilHeatingGasVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingGas >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingGas >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingGas >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingGas >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingGas >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingGas >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingGasVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingGasVector(*args))

    def push_back(self, x: "CoilHeatingGas") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingGas >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingGas >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingGas >::size_type", x: "CoilHeatingGas") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingGas >::size_type", x: "CoilHeatingGas") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingGas >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingGas >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingGasVector

# Register CoilHeatingGasVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingGasVector_swigregister(CoilHeatingGasVector)

class OptionalCoilHeatingGas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingGas(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingGas":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingGas":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_get(self)

    def set(self, t: "CoilHeatingGas") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGas_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingGas

# Register OptionalCoilHeatingGas in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingGas_swigregister(OptionalCoilHeatingGas)

class CoilHeatingGasMultiStageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::difference_type") -> "std::vector< openstudio::model::CoilHeatingGasMultiStage,std::allocator< openstudio::model::CoilHeatingGasMultiStage > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::difference_type", j: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_pop(self)

    def append(self, x: "CoilHeatingGasMultiStage") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_size(self)

    def swap(self, v: "CoilHeatingGasMultiStageVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingGasMultiStageVector(*args))

    def push_back(self, x: "CoilHeatingGasMultiStage") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type", x: "CoilHeatingGasMultiStage") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type", x: "CoilHeatingGasMultiStage") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStage >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingGasMultiStageVector

# Register CoilHeatingGasMultiStageVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingGasMultiStageVector_swigregister(CoilHeatingGasMultiStageVector)

class OptionalCoilHeatingGasMultiStage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingGasMultiStage(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingGasMultiStage":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingGasMultiStage":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_get(self)

    def set(self, t: "CoilHeatingGasMultiStage") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingGasMultiStage

# Register OptionalCoilHeatingGasMultiStage in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingGasMultiStage_swigregister(OptionalCoilHeatingGasMultiStage)

class CoilHeatingLowTempRadiantConstFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::difference_type") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantConstFlow > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_pop(self)

    def append(self, x: "CoilHeatingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_size(self)

    def swap(self, v: "CoilHeatingLowTempRadiantConstFlowVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingLowTempRadiantConstFlowVector(*args))

    def push_back(self, x: "CoilHeatingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type", x: "CoilHeatingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type", x: "CoilHeatingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingLowTempRadiantConstFlowVector

# Register CoilHeatingLowTempRadiantConstFlowVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlowVector_swigregister(CoilHeatingLowTempRadiantConstFlowVector)

class OptionalCoilHeatingLowTempRadiantConstFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingLowTempRadiantConstFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingLowTempRadiantConstFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingLowTempRadiantConstFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_get(self)

    def set(self, t: "CoilHeatingLowTempRadiantConstFlow") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingLowTempRadiantConstFlow

# Register OptionalCoilHeatingLowTempRadiantConstFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantConstFlow_swigregister(OptionalCoilHeatingLowTempRadiantConstFlow)

class CoilHeatingLowTempRadiantVarFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::difference_type") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantVarFlow > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::difference_type", j: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_pop(self)

    def append(self, x: "CoilHeatingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_size(self)

    def swap(self, v: "CoilHeatingLowTempRadiantVarFlowVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingLowTempRadiantVarFlowVector(*args))

    def push_back(self, x: "CoilHeatingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type", x: "CoilHeatingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type", x: "CoilHeatingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingLowTempRadiantVarFlowVector

# Register CoilHeatingLowTempRadiantVarFlowVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlowVector_swigregister(CoilHeatingLowTempRadiantVarFlowVector)

class OptionalCoilHeatingLowTempRadiantVarFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingLowTempRadiantVarFlow(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingLowTempRadiantVarFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingLowTempRadiantVarFlow":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_get(self)

    def set(self, t: "CoilHeatingLowTempRadiantVarFlow") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingLowTempRadiantVarFlow

# Register OptionalCoilHeatingLowTempRadiantVarFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingLowTempRadiantVarFlow_swigregister(OptionalCoilHeatingLowTempRadiantVarFlow)

class CoilHeatingWaterBaseboardVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard,std::allocator< openstudio::model::CoilHeatingWaterBaseboard > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_pop(self)

    def append(self, x: "CoilHeatingWaterBaseboard") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_size(self)

    def swap(self, v: "CoilHeatingWaterBaseboardVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingWaterBaseboardVector(*args))

    def push_back(self, x: "CoilHeatingWaterBaseboard") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type", x: "CoilHeatingWaterBaseboard") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type", x: "CoilHeatingWaterBaseboard") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingWaterBaseboardVector

# Register CoilHeatingWaterBaseboardVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardVector_swigregister(CoilHeatingWaterBaseboardVector)

class OptionalCoilHeatingWaterBaseboard(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingWaterBaseboard(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWaterBaseboard":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWaterBaseboard":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_get(self)

    def set(self, t: "CoilHeatingWaterBaseboard") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingWaterBaseboard

# Register OptionalCoilHeatingWaterBaseboard in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboard_swigregister(OptionalCoilHeatingWaterBaseboard)

class CoilHeatingWaterBaseboardRadiantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::difference_type") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant,std::allocator< openstudio::model::CoilHeatingWaterBaseboardRadiant > > *":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::difference_type", j: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::value_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_pop(self)

    def append(self, x: "CoilHeatingWaterBaseboardRadiant") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_size(self)

    def swap(self, v: "CoilHeatingWaterBaseboardRadiantVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::iterator":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingWaterBaseboardRadiantVector(*args))

    def push_back(self, x: "CoilHeatingWaterBaseboardRadiant") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type", x: "CoilHeatingWaterBaseboardRadiant") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type", x: "CoilHeatingWaterBaseboardRadiant") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant >::size_type":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingWaterBaseboardRadiantVector

# Register CoilHeatingWaterBaseboardRadiantVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiantVector_swigregister(CoilHeatingWaterBaseboardRadiantVector)

class OptionalCoilHeatingWaterBaseboardRadiant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilHeatingWaterBaseboardRadiant(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_reset(self)

    def __ref__(self) -> "openstudio::model::CoilHeatingWaterBaseboardRadiant":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_isNull(self)

    def get(self) -> "openstudio::model::CoilHeatingWaterBaseboardRadiant":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_get(self)

    def set(self, t: "CoilHeatingWaterBaseboardRadiant") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilHeatingWaterBaseboardRadiant

# Register OptionalCoilHeatingWaterBaseboardRadiant in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilHeatingWaterBaseboardRadiant_swigregister(OptionalCoilHeatingWaterBaseboardRadiant)

class CoilSystemCoolingDXHeatExchangerAssistedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::difference_type", j: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::difference_type") -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted > > *":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::difference_type", j: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::value_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_pop(self)

    def append(self, x: "CoilSystemCoolingDXHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_size(self)

    def swap(self, v: "CoilSystemCoolingDXHeatExchangerAssistedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilSystemCoolingDXHeatExchangerAssistedVector(*args))

    def push_back(self, x: "CoilSystemCoolingDXHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type", x: "CoilSystemCoolingDXHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type", x: "CoilSystemCoolingDXHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilSystemCoolingDXHeatExchangerAssistedVector

# Register CoilSystemCoolingDXHeatExchangerAssistedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssistedVector_swigregister(CoilSystemCoolingDXHeatExchangerAssistedVector)

class OptionalCoilSystemCoolingDXHeatExchangerAssisted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilSystemCoolingDXHeatExchangerAssisted(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_reset(self)

    def __ref__(self) -> "openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_isNull(self)

    def get(self) -> "openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_get(self)

    def set(self, t: "CoilSystemCoolingDXHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilSystemCoolingDXHeatExchangerAssisted

# Register OptionalCoilSystemCoolingDXHeatExchangerAssisted in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilSystemCoolingDXHeatExchangerAssisted_swigregister(OptionalCoilSystemCoolingDXHeatExchangerAssisted)

class CoilSystemCoolingWaterHeatExchangerAssistedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::difference_type", j: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::difference_type") -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted > > *":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::difference_type", j: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::value_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_pop(self)

    def append(self, x: "CoilSystemCoolingWaterHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_size(self)

    def swap(self, v: "CoilSystemCoolingWaterHeatExchangerAssistedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::iterator":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilSystemCoolingWaterHeatExchangerAssistedVector(*args))

    def push_back(self, x: "CoilSystemCoolingWaterHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type", x: "CoilSystemCoolingWaterHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type", x: "CoilSystemCoolingWaterHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >::size_type":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilSystemCoolingWaterHeatExchangerAssistedVector

# Register CoilSystemCoolingWaterHeatExchangerAssistedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssistedVector_swigregister(CoilSystemCoolingWaterHeatExchangerAssistedVector)

class OptionalCoilSystemCoolingWaterHeatExchangerAssisted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilSystemCoolingWaterHeatExchangerAssisted(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_reset(self)

    def __ref__(self) -> "openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_isNull(self)

    def get(self) -> "openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_get(self)

    def set(self, t: "CoilSystemCoolingWaterHeatExchangerAssisted") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilSystemCoolingWaterHeatExchangerAssisted

# Register OptionalCoilSystemCoolingWaterHeatExchangerAssisted in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilSystemCoolingWaterHeatExchangerAssisted_swigregister(OptionalCoilSystemCoolingWaterHeatExchangerAssisted)

class CoilWaterHeatingDesuperheaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::difference_type") -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater,std::allocator< openstudio::model::CoilWaterHeatingDesuperheater > > *":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::difference_type", j: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::value_type":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_pop(self)

    def append(self, x: "CoilWaterHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_size(self)

    def swap(self, v: "CoilWaterHeatingDesuperheaterVector") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::allocator_type":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::iterator":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoilWaterHeatingDesuperheaterVector(*args))

    def push_back(self, x: "CoilWaterHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::value_type const &":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type", x: "CoilWaterHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type", x: "CoilWaterHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater >::size_type":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilWaterHeatingDesuperheaterVector

# Register CoilWaterHeatingDesuperheaterVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheaterVector_swigregister(CoilWaterHeatingDesuperheaterVector)

class OptionalCoilWaterHeatingDesuperheater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoilWaterHeatingDesuperheater(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_reset(self)

    def __ref__(self) -> "openstudio::model::CoilWaterHeatingDesuperheater":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_isNull(self)

    def get(self) -> "openstudio::model::CoilWaterHeatingDesuperheater":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_get(self)

    def set(self, t: "CoilWaterHeatingDesuperheater") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoilWaterHeatingDesuperheater

# Register OptionalCoilWaterHeatingDesuperheater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoilWaterHeatingDesuperheater_swigregister(OptionalCoilWaterHeatingDesuperheater)

class CoolingTowerSingleSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::difference_type") -> "std::vector< openstudio::model::CoolingTowerSingleSpeed,std::allocator< openstudio::model::CoolingTowerSingleSpeed > > *":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_pop(self)

    def append(self, x: "CoolingTowerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_size(self)

    def swap(self, v: "CoolingTowerSingleSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerSingleSpeedVector(*args))

    def push_back(self, x: "CoolingTowerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type", x: "CoolingTowerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type", x: "CoolingTowerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerSingleSpeedVector

# Register CoolingTowerSingleSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerSingleSpeedVector_swigregister(CoolingTowerSingleSpeedVector)

class OptionalCoolingTowerSingleSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoolingTowerSingleSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoolingTowerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoolingTowerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_get(self)

    def set(self, t: "CoolingTowerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoolingTowerSingleSpeed

# Register OptionalCoolingTowerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoolingTowerSingleSpeed_swigregister(OptionalCoolingTowerSingleSpeed)

class CoolingTowerTwoSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::difference_type") -> "std::vector< openstudio::model::CoolingTowerTwoSpeed,std::allocator< openstudio::model::CoolingTowerTwoSpeed > > *":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_pop(self)

    def append(self, x: "CoolingTowerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_size(self)

    def swap(self, v: "CoolingTowerTwoSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerTwoSpeedVector(*args))

    def push_back(self, x: "CoolingTowerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type", x: "CoolingTowerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type", x: "CoolingTowerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerTwoSpeedVector

# Register CoolingTowerTwoSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerTwoSpeedVector_swigregister(CoolingTowerTwoSpeedVector)

class OptionalCoolingTowerTwoSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoolingTowerTwoSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoolingTowerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoolingTowerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_get(self)

    def set(self, t: "CoolingTowerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoolingTowerTwoSpeed

# Register OptionalCoolingTowerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoolingTowerTwoSpeed_swigregister(OptionalCoolingTowerTwoSpeed)

class CoolingTowerVariableSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::difference_type") -> "std::vector< openstudio::model::CoolingTowerVariableSpeed,std::allocator< openstudio::model::CoolingTowerVariableSpeed > > *":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::difference_type", j: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::value_type":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_pop(self)

    def append(self, x: "CoolingTowerVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_size(self)

    def swap(self, v: "CoolingTowerVariableSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerVariableSpeedVector(*args))

    def push_back(self, x: "CoolingTowerVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type", x: "CoolingTowerVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type", x: "CoolingTowerVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerVariableSpeedVector

# Register CoolingTowerVariableSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerVariableSpeedVector_swigregister(CoolingTowerVariableSpeedVector)

class OptionalCoolingTowerVariableSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalCoolingTowerVariableSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::CoolingTowerVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_isNull(self)

    def get(self) -> "openstudio::model::CoolingTowerVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_get(self)

    def set(self, t: "CoolingTowerVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalCoolingTowerVariableSpeed

# Register OptionalCoolingTowerVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalCoolingTowerVariableSpeed_swigregister(OptionalCoolingTowerVariableSpeed)

class DistrictCoolingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DistrictCooling >::size_type":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DistrictCooling >::difference_type", j: "std::vector< openstudio::model::DistrictCooling >::difference_type") -> "std::vector< openstudio::model::DistrictCooling,std::allocator< openstudio::model::DistrictCooling > > *":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DistrictCooling >::difference_type", j: "std::vector< openstudio::model::DistrictCooling >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DistrictCooling >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DistrictCooling >::value_type":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_pop(self)

    def append(self, x: "DistrictCooling") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DistrictCooling >::size_type":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_size(self)

    def swap(self, v: "DistrictCoolingVector") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DistrictCooling >::iterator":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DistrictCooling >::iterator":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DistrictCooling >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DistrictCooling >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DistrictCooling >::allocator_type":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DistrictCooling >::iterator":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.DistrictCoolingVector_swiginit(self, _openstudiomodelstraightcomponent.new_DistrictCoolingVector(*args))

    def push_back(self, x: "DistrictCooling") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DistrictCooling >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DistrictCooling >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DistrictCooling >::size_type", x: "DistrictCooling") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DistrictCooling >::size_type", x: "DistrictCooling") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DistrictCooling >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DistrictCooling >::size_type":
        return _openstudiomodelstraightcomponent.DistrictCoolingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_DistrictCoolingVector

# Register DistrictCoolingVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.DistrictCoolingVector_swigregister(DistrictCoolingVector)

class OptionalDistrictCooling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalDistrictCooling_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalDistrictCooling(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling_reset(self)

    def __ref__(self) -> "openstudio::model::DistrictCooling":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling_isNull(self)

    def get(self) -> "openstudio::model::DistrictCooling":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling_get(self)

    def set(self, t: "DistrictCooling") -> "void":
        return _openstudiomodelstraightcomponent.OptionalDistrictCooling_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalDistrictCooling

# Register OptionalDistrictCooling in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalDistrictCooling_swigregister(OptionalDistrictCooling)

class DistrictHeatingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DistrictHeating >::size_type":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DistrictHeating >::difference_type", j: "std::vector< openstudio::model::DistrictHeating >::difference_type") -> "std::vector< openstudio::model::DistrictHeating,std::allocator< openstudio::model::DistrictHeating > > *":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DistrictHeating >::difference_type", j: "std::vector< openstudio::model::DistrictHeating >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DistrictHeating >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DistrictHeating >::value_type":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_pop(self)

    def append(self, x: "DistrictHeating") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DistrictHeating >::size_type":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_size(self)

    def swap(self, v: "DistrictHeatingVector") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DistrictHeating >::iterator":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DistrictHeating >::iterator":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DistrictHeating >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DistrictHeating >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DistrictHeating >::allocator_type":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DistrictHeating >::iterator":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.DistrictHeatingVector_swiginit(self, _openstudiomodelstraightcomponent.new_DistrictHeatingVector(*args))

    def push_back(self, x: "DistrictHeating") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DistrictHeating >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DistrictHeating >::value_type const &":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DistrictHeating >::size_type", x: "DistrictHeating") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DistrictHeating >::size_type", x: "DistrictHeating") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DistrictHeating >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DistrictHeating >::size_type":
        return _openstudiomodelstraightcomponent.DistrictHeatingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_DistrictHeatingVector

# Register DistrictHeatingVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.DistrictHeatingVector_swigregister(DistrictHeatingVector)

class OptionalDistrictHeating(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalDistrictHeating_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalDistrictHeating(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating_reset(self)

    def __ref__(self) -> "openstudio::model::DistrictHeating":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating_isNull(self)

    def get(self) -> "openstudio::model::DistrictHeating":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating_get(self)

    def set(self, t: "DistrictHeating") -> "void":
        return _openstudiomodelstraightcomponent.OptionalDistrictHeating_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalDistrictHeating

# Register OptionalDistrictHeating in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalDistrictHeating_swigregister(OptionalDistrictHeating)

class DuctVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.DuctVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DuctVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.DuctVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Duct >::size_type":
        return _openstudiomodelstraightcomponent.DuctVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::Duct >::difference_type", j: "std::vector< openstudio::model::Duct >::difference_type") -> "std::vector< openstudio::model::Duct,std::allocator< openstudio::model::Duct > > *":
        return _openstudiomodelstraightcomponent.DuctVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::Duct >::difference_type", j: "std::vector< openstudio::model::Duct >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Duct >::value_type const &":
        return _openstudiomodelstraightcomponent.DuctVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::Duct >::value_type":
        return _openstudiomodelstraightcomponent.DuctVector_pop(self)

    def append(self, x: "Duct") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.DuctVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Duct >::size_type":
        return _openstudiomodelstraightcomponent.DuctVector_size(self)

    def swap(self, v: "DuctVector") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::Duct >::iterator":
        return _openstudiomodelstraightcomponent.DuctVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Duct >::iterator":
        return _openstudiomodelstraightcomponent.DuctVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Duct >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DuctVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Duct >::reverse_iterator":
        return _openstudiomodelstraightcomponent.DuctVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::Duct >::allocator_type":
        return _openstudiomodelstraightcomponent.DuctVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Duct >::iterator":
        return _openstudiomodelstraightcomponent.DuctVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.DuctVector_swiginit(self, _openstudiomodelstraightcomponent.new_DuctVector(*args))

    def push_back(self, x: "Duct") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Duct >::value_type const &":
        return _openstudiomodelstraightcomponent.DuctVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Duct >::value_type const &":
        return _openstudiomodelstraightcomponent.DuctVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::Duct >::size_type", x: "Duct") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::Duct >::size_type", x: "Duct") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::Duct >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.DuctVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Duct >::size_type":
        return _openstudiomodelstraightcomponent.DuctVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_DuctVector

# Register DuctVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.DuctVector_swigregister(DuctVector)

class OptionalDuct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalDuct_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalDuct(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalDuct_reset(self)

    def __ref__(self) -> "openstudio::model::Duct":
        return _openstudiomodelstraightcomponent.OptionalDuct___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDuct_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalDuct_isNull(self)

    def get(self) -> "openstudio::model::Duct":
        return _openstudiomodelstraightcomponent.OptionalDuct_get(self)

    def set(self, t: "Duct") -> "void":
        return _openstudiomodelstraightcomponent.OptionalDuct_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalDuct

# Register OptionalDuct in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalDuct_swigregister(OptionalDuct)

class EvaporativeCoolerDirectResearchSpecialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::difference_type", j: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::difference_type") -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerDirectResearchSpecial > > *":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::difference_type", j: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::value_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_pop(self)

    def append(self, x: "EvaporativeCoolerDirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_size(self)

    def swap(self, v: "EvaporativeCoolerDirectResearchSpecialVector") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::allocator_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeCoolerDirectResearchSpecialVector(*args))

    def push_back(self, x: "EvaporativeCoolerDirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type", x: "EvaporativeCoolerDirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type", x: "EvaporativeCoolerDirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeCoolerDirectResearchSpecialVector

# Register EvaporativeCoolerDirectResearchSpecialVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecialVector_swigregister(EvaporativeCoolerDirectResearchSpecialVector)

class OptionalEvaporativeCoolerDirectResearchSpecial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalEvaporativeCoolerDirectResearchSpecial(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_reset(self)

    def __ref__(self) -> "openstudio::model::EvaporativeCoolerDirectResearchSpecial":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_isNull(self)

    def get(self) -> "openstudio::model::EvaporativeCoolerDirectResearchSpecial":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_get(self)

    def set(self, t: "EvaporativeCoolerDirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalEvaporativeCoolerDirectResearchSpecial

# Register OptionalEvaporativeCoolerDirectResearchSpecial in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalEvaporativeCoolerDirectResearchSpecial_swigregister(OptionalEvaporativeCoolerDirectResearchSpecial)

class EvaporativeCoolerIndirectResearchSpecialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::difference_type", j: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::difference_type") -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerIndirectResearchSpecial > > *":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::difference_type", j: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::value_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_pop(self)

    def append(self, x: "EvaporativeCoolerIndirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_size(self)

    def swap(self, v: "EvaporativeCoolerIndirectResearchSpecialVector") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::allocator_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeCoolerIndirectResearchSpecialVector(*args))

    def push_back(self, x: "EvaporativeCoolerIndirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type", x: "EvaporativeCoolerIndirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type", x: "EvaporativeCoolerIndirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeCoolerIndirectResearchSpecialVector

# Register EvaporativeCoolerIndirectResearchSpecialVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecialVector_swigregister(EvaporativeCoolerIndirectResearchSpecialVector)

class OptionalEvaporativeCoolerIndirectResearchSpecial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalEvaporativeCoolerIndirectResearchSpecial(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_reset(self)

    def __ref__(self) -> "openstudio::model::EvaporativeCoolerIndirectResearchSpecial":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_isNull(self)

    def get(self) -> "openstudio::model::EvaporativeCoolerIndirectResearchSpecial":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_get(self)

    def set(self, t: "EvaporativeCoolerIndirectResearchSpecial") -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalEvaporativeCoolerIndirectResearchSpecial

# Register OptionalEvaporativeCoolerIndirectResearchSpecial in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalEvaporativeCoolerIndirectResearchSpecial_swigregister(OptionalEvaporativeCoolerIndirectResearchSpecial)

class EvaporativeFluidCoolerSingleSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::difference_type") -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerSingleSpeed > > *":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::value_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_pop(self)

    def append(self, x: "EvaporativeFluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_size(self)

    def swap(self, v: "EvaporativeFluidCoolerSingleSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeFluidCoolerSingleSpeedVector(*args))

    def push_back(self, x: "EvaporativeFluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type", x: "EvaporativeFluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type", x: "EvaporativeFluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeFluidCoolerSingleSpeedVector

# Register EvaporativeFluidCoolerSingleSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeedVector_swigregister(EvaporativeFluidCoolerSingleSpeedVector)

class OptionalEvaporativeFluidCoolerSingleSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalEvaporativeFluidCoolerSingleSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::EvaporativeFluidCoolerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_isNull(self)

    def get(self) -> "openstudio::model::EvaporativeFluidCoolerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_get(self)

    def set(self, t: "EvaporativeFluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalEvaporativeFluidCoolerSingleSpeed

# Register OptionalEvaporativeFluidCoolerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerSingleSpeed_swigregister(OptionalEvaporativeFluidCoolerSingleSpeed)

class EvaporativeFluidCoolerTwoSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::difference_type") -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerTwoSpeed > > *":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::value_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_pop(self)

    def append(self, x: "EvaporativeFluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_size(self)

    def swap(self, v: "EvaporativeFluidCoolerTwoSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeFluidCoolerTwoSpeedVector(*args))

    def push_back(self, x: "EvaporativeFluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type", x: "EvaporativeFluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type", x: "EvaporativeFluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeFluidCoolerTwoSpeedVector

# Register EvaporativeFluidCoolerTwoSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeedVector_swigregister(EvaporativeFluidCoolerTwoSpeedVector)

class OptionalEvaporativeFluidCoolerTwoSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalEvaporativeFluidCoolerTwoSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::EvaporativeFluidCoolerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_isNull(self)

    def get(self) -> "openstudio::model::EvaporativeFluidCoolerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_get(self)

    def set(self, t: "EvaporativeFluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalEvaporativeFluidCoolerTwoSpeed

# Register OptionalEvaporativeFluidCoolerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalEvaporativeFluidCoolerTwoSpeed_swigregister(OptionalEvaporativeFluidCoolerTwoSpeed)

class FanConstantVolumeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanConstantVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FanConstantVolume >::difference_type", j: "std::vector< openstudio::model::FanConstantVolume >::difference_type") -> "std::vector< openstudio::model::FanConstantVolume,std::allocator< openstudio::model::FanConstantVolume > > *":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FanConstantVolume >::difference_type", j: "std::vector< openstudio::model::FanConstantVolume >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanConstantVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FanConstantVolume >::value_type":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_pop(self)

    def append(self, x: "FanConstantVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanConstantVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_size(self)

    def swap(self, v: "FanConstantVolumeVector") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FanConstantVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanConstantVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanConstantVolume >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanConstantVolume >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FanConstantVolume >::allocator_type":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanConstantVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanConstantVolumeVector_swiginit(self, _openstudiomodelstraightcomponent.new_FanConstantVolumeVector(*args))

    def push_back(self, x: "FanConstantVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanConstantVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanConstantVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FanConstantVolume >::size_type", x: "FanConstantVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FanConstantVolume >::size_type", x: "FanConstantVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FanConstantVolume >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanConstantVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanConstantVolumeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanConstantVolumeVector

# Register FanConstantVolumeVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanConstantVolumeVector_swigregister(FanConstantVolumeVector)

class OptionalFanConstantVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFanConstantVolume_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFanConstantVolume(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume_reset(self)

    def __ref__(self) -> "openstudio::model::FanConstantVolume":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume_isNull(self)

    def get(self) -> "openstudio::model::FanConstantVolume":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume_get(self)

    def set(self, t: "FanConstantVolume") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanConstantVolume_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFanConstantVolume

# Register OptionalFanConstantVolume in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFanConstantVolume_swigregister(OptionalFanConstantVolume)

class FanOnOffVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FanOnOffVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOffVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOffVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanOnOff >::size_type":
        return _openstudiomodelstraightcomponent.FanOnOffVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FanOnOff >::difference_type", j: "std::vector< openstudio::model::FanOnOff >::difference_type") -> "std::vector< openstudio::model::FanOnOff,std::allocator< openstudio::model::FanOnOff > > *":
        return _openstudiomodelstraightcomponent.FanOnOffVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FanOnOff >::difference_type", j: "std::vector< openstudio::model::FanOnOff >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanOnOff >::value_type const &":
        return _openstudiomodelstraightcomponent.FanOnOffVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FanOnOff >::value_type":
        return _openstudiomodelstraightcomponent.FanOnOffVector_pop(self)

    def append(self, x: "FanOnOff") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOffVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanOnOff >::size_type":
        return _openstudiomodelstraightcomponent.FanOnOffVector_size(self)

    def swap(self, v: "FanOnOffVector") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FanOnOff >::iterator":
        return _openstudiomodelstraightcomponent.FanOnOffVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanOnOff >::iterator":
        return _openstudiomodelstraightcomponent.FanOnOffVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanOnOff >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanOnOffVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanOnOff >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanOnOffVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FanOnOff >::allocator_type":
        return _openstudiomodelstraightcomponent.FanOnOffVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanOnOff >::iterator":
        return _openstudiomodelstraightcomponent.FanOnOffVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanOnOffVector_swiginit(self, _openstudiomodelstraightcomponent.new_FanOnOffVector(*args))

    def push_back(self, x: "FanOnOff") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanOnOff >::value_type const &":
        return _openstudiomodelstraightcomponent.FanOnOffVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanOnOff >::value_type const &":
        return _openstudiomodelstraightcomponent.FanOnOffVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FanOnOff >::size_type", x: "FanOnOff") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FanOnOff >::size_type", x: "FanOnOff") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FanOnOff >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FanOnOffVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanOnOff >::size_type":
        return _openstudiomodelstraightcomponent.FanOnOffVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanOnOffVector

# Register FanOnOffVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanOnOffVector_swigregister(FanOnOffVector)

class OptionalFanOnOff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFanOnOff_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFanOnOff(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff_reset(self)

    def __ref__(self) -> "openstudio::model::FanOnOff":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff_isNull(self)

    def get(self) -> "openstudio::model::FanOnOff":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff_get(self)

    def set(self, t: "FanOnOff") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanOnOff_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFanOnOff

# Register OptionalFanOnOff in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFanOnOff_swigregister(OptionalFanOnOff)

class FanSystemModelSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FanSystemModelSpeed >::difference_type", j: "std::vector< openstudio::model::FanSystemModelSpeed >::difference_type") -> "std::vector< openstudio::model::FanSystemModelSpeed,std::allocator< openstudio::model::FanSystemModelSpeed > > *":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FanSystemModelSpeed >::difference_type", j: "std::vector< openstudio::model::FanSystemModelSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanSystemModelSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::value_type":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_pop(self)

    def append(self, x: "FanSystemModelSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_size(self)

    def swap(self, v: "FanSystemModelSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanSystemModelSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_FanSystemModelSpeedVector(*args))

    def push_back(self, x: "FanSystemModelSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FanSystemModelSpeed >::size_type", x: "FanSystemModelSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FanSystemModelSpeed >::size_type", x: "FanSystemModelSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FanSystemModelSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanSystemModelSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanSystemModelSpeedVector

# Register FanSystemModelSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanSystemModelSpeedVector_swigregister(FanSystemModelSpeedVector)

class OptionalFanSystemModelSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFanSystemModelSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::FanSystemModelSpeed":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_isNull(self)

    def get(self) -> "openstudio::model::FanSystemModelSpeed":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_get(self)

    def set(self, t: "FanSystemModelSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFanSystemModelSpeed

# Register OptionalFanSystemModelSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFanSystemModelSpeed_swigregister(OptionalFanSystemModelSpeed)

class FanSystemModelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanSystemModel >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FanSystemModel >::difference_type", j: "std::vector< openstudio::model::FanSystemModel >::difference_type") -> "std::vector< openstudio::model::FanSystemModel,std::allocator< openstudio::model::FanSystemModel > > *":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FanSystemModel >::difference_type", j: "std::vector< openstudio::model::FanSystemModel >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanSystemModel >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FanSystemModel >::value_type":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_pop(self)

    def append(self, x: "FanSystemModel") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanSystemModel >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_size(self)

    def swap(self, v: "FanSystemModelVector") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FanSystemModel >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanSystemModel >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanSystemModel >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanSystemModel >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FanSystemModel >::allocator_type":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanSystemModel >::iterator":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanSystemModelVector_swiginit(self, _openstudiomodelstraightcomponent.new_FanSystemModelVector(*args))

    def push_back(self, x: "FanSystemModel") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanSystemModel >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanSystemModel >::value_type const &":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FanSystemModel >::size_type", x: "FanSystemModel") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FanSystemModel >::size_type", x: "FanSystemModel") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FanSystemModel >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanSystemModel >::size_type":
        return _openstudiomodelstraightcomponent.FanSystemModelVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanSystemModelVector

# Register FanSystemModelVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanSystemModelVector_swigregister(FanSystemModelVector)

class OptionalFanSystemModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFanSystemModel_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFanSystemModel(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel_reset(self)

    def __ref__(self) -> "openstudio::model::FanSystemModel":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel_isNull(self)

    def get(self) -> "openstudio::model::FanSystemModel":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel_get(self)

    def set(self, t: "FanSystemModel") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanSystemModel_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFanSystemModel

# Register OptionalFanSystemModel in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFanSystemModel_swigregister(OptionalFanSystemModel)

class FanVariableVolumeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanVariableVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FanVariableVolume >::difference_type", j: "std::vector< openstudio::model::FanVariableVolume >::difference_type") -> "std::vector< openstudio::model::FanVariableVolume,std::allocator< openstudio::model::FanVariableVolume > > *":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FanVariableVolume >::difference_type", j: "std::vector< openstudio::model::FanVariableVolume >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanVariableVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FanVariableVolume >::value_type":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_pop(self)

    def append(self, x: "FanVariableVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanVariableVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_size(self)

    def swap(self, v: "FanVariableVolumeVector") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FanVariableVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanVariableVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanVariableVolume >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanVariableVolume >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FanVariableVolume >::allocator_type":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanVariableVolume >::iterator":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanVariableVolumeVector_swiginit(self, _openstudiomodelstraightcomponent.new_FanVariableVolumeVector(*args))

    def push_back(self, x: "FanVariableVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanVariableVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanVariableVolume >::value_type const &":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FanVariableVolume >::size_type", x: "FanVariableVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FanVariableVolume >::size_type", x: "FanVariableVolume") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FanVariableVolume >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanVariableVolume >::size_type":
        return _openstudiomodelstraightcomponent.FanVariableVolumeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanVariableVolumeVector

# Register FanVariableVolumeVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanVariableVolumeVector_swigregister(FanVariableVolumeVector)

class OptionalFanVariableVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFanVariableVolume_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFanVariableVolume(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume_reset(self)

    def __ref__(self) -> "openstudio::model::FanVariableVolume":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume_isNull(self)

    def get(self) -> "openstudio::model::FanVariableVolume":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume_get(self)

    def set(self, t: "FanVariableVolume") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFanVariableVolume_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFanVariableVolume

# Register OptionalFanVariableVolume in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFanVariableVolume_swigregister(OptionalFanVariableVolume)

class FluidCoolerSingleSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::difference_type") -> "std::vector< openstudio::model::FluidCoolerSingleSpeed,std::allocator< openstudio::model::FluidCoolerSingleSpeed > > *":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::difference_type", j: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::value_type":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_pop(self)

    def append(self, x: "FluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_size(self)

    def swap(self, v: "FluidCoolerSingleSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_FluidCoolerSingleSpeedVector(*args))

    def push_back(self, x: "FluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type", x: "FluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type", x: "FluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FluidCoolerSingleSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FluidCoolerSingleSpeedVector

# Register FluidCoolerSingleSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FluidCoolerSingleSpeedVector_swigregister(FluidCoolerSingleSpeedVector)

class OptionalFluidCoolerSingleSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFluidCoolerSingleSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::FluidCoolerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_isNull(self)

    def get(self) -> "openstudio::model::FluidCoolerSingleSpeed":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_get(self)

    def set(self, t: "FluidCoolerSingleSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFluidCoolerSingleSpeed

# Register OptionalFluidCoolerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFluidCoolerSingleSpeed_swigregister(OptionalFluidCoolerSingleSpeed)

class FluidCoolerTwoSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::difference_type") -> "std::vector< openstudio::model::FluidCoolerTwoSpeed,std::allocator< openstudio::model::FluidCoolerTwoSpeed > > *":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::difference_type", j: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::value_type":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_pop(self)

    def append(self, x: "FluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_size(self)

    def swap(self, v: "FluidCoolerTwoSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::iterator":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_FluidCoolerTwoSpeedVector(*args))

    def push_back(self, x: "FluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type", x: "FluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type", x: "FluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FluidCoolerTwoSpeed >::size_type":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FluidCoolerTwoSpeedVector

# Register FluidCoolerTwoSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FluidCoolerTwoSpeedVector_swigregister(FluidCoolerTwoSpeedVector)

class OptionalFluidCoolerTwoSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalFluidCoolerTwoSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::FluidCoolerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_isNull(self)

    def get(self) -> "openstudio::model::FluidCoolerTwoSpeed":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_get(self)

    def set(self, t: "FluidCoolerTwoSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalFluidCoolerTwoSpeed

# Register OptionalFluidCoolerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalFluidCoolerTwoSpeed_swigregister(OptionalFluidCoolerTwoSpeed)

class GroundHeatExchangerHorizontalTrenchVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::difference_type", j: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::difference_type") -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench,std::allocator< openstudio::model::GroundHeatExchangerHorizontalTrench > > *":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::difference_type", j: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::value_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_pop(self)

    def append(self, x: "GroundHeatExchangerHorizontalTrench") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_size(self)

    def swap(self, v: "GroundHeatExchangerHorizontalTrenchVector") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::allocator_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_swiginit(self, _openstudiomodelstraightcomponent.new_GroundHeatExchangerHorizontalTrenchVector(*args))

    def push_back(self, x: "GroundHeatExchangerHorizontalTrench") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type", x: "GroundHeatExchangerHorizontalTrench") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type", x: "GroundHeatExchangerHorizontalTrench") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GroundHeatExchangerHorizontalTrenchVector

# Register GroundHeatExchangerHorizontalTrenchVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrenchVector_swigregister(GroundHeatExchangerHorizontalTrenchVector)

class OptionalGroundHeatExchangerHorizontalTrench(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalGroundHeatExchangerHorizontalTrench(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_reset(self)

    def __ref__(self) -> "openstudio::model::GroundHeatExchangerHorizontalTrench":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_isNull(self)

    def get(self) -> "openstudio::model::GroundHeatExchangerHorizontalTrench":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_get(self)

    def set(self, t: "GroundHeatExchangerHorizontalTrench") -> "void":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalGroundHeatExchangerHorizontalTrench

# Register OptionalGroundHeatExchangerHorizontalTrench in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalGroundHeatExchangerHorizontalTrench_swigregister(OptionalGroundHeatExchangerHorizontalTrench)

class GroundHeatExchangerVerticalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::GroundHeatExchangerVertical >::difference_type", j: "std::vector< openstudio::model::GroundHeatExchangerVertical >::difference_type") -> "std::vector< openstudio::model::GroundHeatExchangerVertical,std::allocator< openstudio::model::GroundHeatExchangerVertical > > *":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::GroundHeatExchangerVertical >::difference_type", j: "std::vector< openstudio::model::GroundHeatExchangerVertical >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::value_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_pop(self)

    def append(self, x: "GroundHeatExchangerVertical") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_size(self)

    def swap(self, v: "GroundHeatExchangerVerticalVector") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::reverse_iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::allocator_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::iterator":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_swiginit(self, _openstudiomodelstraightcomponent.new_GroundHeatExchangerVerticalVector(*args))

    def push_back(self, x: "GroundHeatExchangerVertical") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::value_type const &":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type", x: "GroundHeatExchangerVertical") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type", x: "GroundHeatExchangerVertical") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GroundHeatExchangerVertical >::size_type":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GroundHeatExchangerVerticalVector

# Register GroundHeatExchangerVerticalVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GroundHeatExchangerVerticalVector_swigregister(GroundHeatExchangerVerticalVector)

class OptionalGroundHeatExchangerVertical(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalGroundHeatExchangerVertical(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_reset(self)

    def __ref__(self) -> "openstudio::model::GroundHeatExchangerVertical":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_isNull(self)

    def get(self) -> "openstudio::model::GroundHeatExchangerVertical":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_get(self)

    def set(self, t: "GroundHeatExchangerVertical") -> "void":
        return _openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalGroundHeatExchangerVertical

# Register OptionalGroundHeatExchangerVertical in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalGroundHeatExchangerVertical_swigregister(OptionalGroundHeatExchangerVertical)

class HeaderedPumpsConstantSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::difference_type", j: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::difference_type") -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed,std::allocator< openstudio::model::HeaderedPumpsConstantSpeed > > *":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::difference_type", j: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::value_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_pop(self)

    def append(self, x: "HeaderedPumpsConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_size(self)

    def swap(self, v: "HeaderedPumpsConstantSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_HeaderedPumpsConstantSpeedVector(*args))

    def push_back(self, x: "HeaderedPumpsConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type", x: "HeaderedPumpsConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type", x: "HeaderedPumpsConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HeaderedPumpsConstantSpeedVector

# Register HeaderedPumpsConstantSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeedVector_swigregister(HeaderedPumpsConstantSpeedVector)

class OptionalHeaderedPumpsConstantSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalHeaderedPumpsConstantSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::HeaderedPumpsConstantSpeed":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_isNull(self)

    def get(self) -> "openstudio::model::HeaderedPumpsConstantSpeed":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_get(self)

    def set(self, t: "HeaderedPumpsConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalHeaderedPumpsConstantSpeed

# Register OptionalHeaderedPumpsConstantSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalHeaderedPumpsConstantSpeed_swigregister(OptionalHeaderedPumpsConstantSpeed)

class HeaderedPumpsVariableSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::difference_type", j: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::difference_type") -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed,std::allocator< openstudio::model::HeaderedPumpsVariableSpeed > > *":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::difference_type", j: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::value_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_pop(self)

    def append(self, x: "HeaderedPumpsVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_size(self)

    def swap(self, v: "HeaderedPumpsVariableSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_HeaderedPumpsVariableSpeedVector(*args))

    def push_back(self, x: "HeaderedPumpsVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type", x: "HeaderedPumpsVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type", x: "HeaderedPumpsVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HeaderedPumpsVariableSpeedVector

# Register HeaderedPumpsVariableSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeedVector_swigregister(HeaderedPumpsVariableSpeedVector)

class OptionalHeaderedPumpsVariableSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalHeaderedPumpsVariableSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::HeaderedPumpsVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_isNull(self)

    def get(self) -> "openstudio::model::HeaderedPumpsVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_get(self)

    def set(self, t: "HeaderedPumpsVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalHeaderedPumpsVariableSpeed

# Register OptionalHeaderedPumpsVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalHeaderedPumpsVariableSpeed_swigregister(OptionalHeaderedPumpsVariableSpeed)

class HumidifierSteamElectricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::size_type":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::HumidifierSteamElectric >::difference_type", j: "std::vector< openstudio::model::HumidifierSteamElectric >::difference_type") -> "std::vector< openstudio::model::HumidifierSteamElectric,std::allocator< openstudio::model::HumidifierSteamElectric > > *":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::HumidifierSteamElectric >::difference_type", j: "std::vector< openstudio::model::HumidifierSteamElectric >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HumidifierSteamElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::value_type":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_pop(self)

    def append(self, x: "HumidifierSteamElectric") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::size_type":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_size(self)

    def swap(self, v: "HumidifierSteamElectricVector") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::iterator":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::iterator":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::reverse_iterator":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::allocator_type":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HumidifierSteamElectric >::iterator":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_swiginit(self, _openstudiomodelstraightcomponent.new_HumidifierSteamElectricVector(*args))

    def push_back(self, x: "HumidifierSteamElectric") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::value_type const &":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::HumidifierSteamElectric >::size_type", x: "HumidifierSteamElectric") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::HumidifierSteamElectric >::size_type", x: "HumidifierSteamElectric") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::HumidifierSteamElectric >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HumidifierSteamElectric >::size_type":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HumidifierSteamElectricVector

# Register HumidifierSteamElectricVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HumidifierSteamElectricVector_swigregister(HumidifierSteamElectricVector)

class OptionalHumidifierSteamElectric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalHumidifierSteamElectric(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_reset(self)

    def __ref__(self) -> "openstudio::model::HumidifierSteamElectric":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_isNull(self)

    def get(self) -> "openstudio::model::HumidifierSteamElectric":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_get(self)

    def set(self, t: "HumidifierSteamElectric") -> "void":
        return _openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalHumidifierSteamElectric

# Register OptionalHumidifierSteamElectric in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalHumidifierSteamElectric_swigregister(OptionalHumidifierSteamElectric)

class LoadProfilePlantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LoadProfilePlant >::size_type":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LoadProfilePlant >::difference_type", j: "std::vector< openstudio::model::LoadProfilePlant >::difference_type") -> "std::vector< openstudio::model::LoadProfilePlant,std::allocator< openstudio::model::LoadProfilePlant > > *":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LoadProfilePlant >::difference_type", j: "std::vector< openstudio::model::LoadProfilePlant >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LoadProfilePlant >::value_type const &":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LoadProfilePlant >::value_type":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_pop(self)

    def append(self, x: "LoadProfilePlant") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LoadProfilePlant >::size_type":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_size(self)

    def swap(self, v: "LoadProfilePlantVector") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LoadProfilePlant >::iterator":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LoadProfilePlant >::iterator":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LoadProfilePlant >::reverse_iterator":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LoadProfilePlant >::reverse_iterator":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LoadProfilePlant >::allocator_type":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LoadProfilePlant >::iterator":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.LoadProfilePlantVector_swiginit(self, _openstudiomodelstraightcomponent.new_LoadProfilePlantVector(*args))

    def push_back(self, x: "LoadProfilePlant") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LoadProfilePlant >::value_type const &":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LoadProfilePlant >::value_type const &":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LoadProfilePlant >::size_type", x: "LoadProfilePlant") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LoadProfilePlant >::size_type", x: "LoadProfilePlant") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LoadProfilePlant >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LoadProfilePlant >::size_type":
        return _openstudiomodelstraightcomponent.LoadProfilePlantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_LoadProfilePlantVector

# Register LoadProfilePlantVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.LoadProfilePlantVector_swigregister(LoadProfilePlantVector)

class OptionalLoadProfilePlant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalLoadProfilePlant(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_reset(self)

    def __ref__(self) -> "openstudio::model::LoadProfilePlant":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_isNull(self)

    def get(self) -> "openstudio::model::LoadProfilePlant":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_get(self)

    def set(self, t: "LoadProfilePlant") -> "void":
        return _openstudiomodelstraightcomponent.OptionalLoadProfilePlant_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalLoadProfilePlant

# Register OptionalLoadProfilePlant in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalLoadProfilePlant_swigregister(OptionalLoadProfilePlant)

class PipeAdiabaticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PipeAdiabatic >::size_type":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PipeAdiabatic >::difference_type", j: "std::vector< openstudio::model::PipeAdiabatic >::difference_type") -> "std::vector< openstudio::model::PipeAdiabatic,std::allocator< openstudio::model::PipeAdiabatic > > *":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PipeAdiabatic >::difference_type", j: "std::vector< openstudio::model::PipeAdiabatic >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PipeAdiabatic >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PipeAdiabatic >::value_type":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_pop(self)

    def append(self, x: "PipeAdiabatic") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PipeAdiabatic >::size_type":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_size(self)

    def swap(self, v: "PipeAdiabaticVector") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PipeAdiabatic >::iterator":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PipeAdiabatic >::iterator":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PipeAdiabatic >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PipeAdiabatic >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PipeAdiabatic >::allocator_type":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PipeAdiabatic >::iterator":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PipeAdiabaticVector_swiginit(self, _openstudiomodelstraightcomponent.new_PipeAdiabaticVector(*args))

    def push_back(self, x: "PipeAdiabatic") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PipeAdiabatic >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PipeAdiabatic >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PipeAdiabatic >::size_type", x: "PipeAdiabatic") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PipeAdiabatic >::size_type", x: "PipeAdiabatic") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PipeAdiabatic >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PipeAdiabatic >::size_type":
        return _openstudiomodelstraightcomponent.PipeAdiabaticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeAdiabaticVector

# Register PipeAdiabaticVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeAdiabaticVector_swigregister(PipeAdiabaticVector)

class OptionalPipeAdiabatic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPipeAdiabatic(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_reset(self)

    def __ref__(self) -> "openstudio::model::PipeAdiabatic":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_isNull(self)

    def get(self) -> "openstudio::model::PipeAdiabatic":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_get(self)

    def set(self, t: "PipeAdiabatic") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeAdiabatic_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPipeAdiabatic

# Register OptionalPipeAdiabatic in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPipeAdiabatic_swigregister(OptionalPipeAdiabatic)

class PipeIndoorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PipeIndoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PipeIndoor >::difference_type", j: "std::vector< openstudio::model::PipeIndoor >::difference_type") -> "std::vector< openstudio::model::PipeIndoor,std::allocator< openstudio::model::PipeIndoor > > *":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PipeIndoor >::difference_type", j: "std::vector< openstudio::model::PipeIndoor >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PipeIndoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PipeIndoor >::value_type":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_pop(self)

    def append(self, x: "PipeIndoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PipeIndoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_size(self)

    def swap(self, v: "PipeIndoorVector") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PipeIndoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PipeIndoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PipeIndoor >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PipeIndoor >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PipeIndoor >::allocator_type":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PipeIndoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PipeIndoorVector_swiginit(self, _openstudiomodelstraightcomponent.new_PipeIndoorVector(*args))

    def push_back(self, x: "PipeIndoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PipeIndoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PipeIndoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PipeIndoor >::size_type", x: "PipeIndoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PipeIndoor >::size_type", x: "PipeIndoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PipeIndoor >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PipeIndoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeIndoorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeIndoorVector

# Register PipeIndoorVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeIndoorVector_swigregister(PipeIndoorVector)

class OptionalPipeIndoor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPipeIndoor_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPipeIndoor(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor_reset(self)

    def __ref__(self) -> "openstudio::model::PipeIndoor":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor_isNull(self)

    def get(self) -> "openstudio::model::PipeIndoor":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor_get(self)

    def set(self, t: "PipeIndoor") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeIndoor_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPipeIndoor

# Register OptionalPipeIndoor in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPipeIndoor_swigregister(OptionalPipeIndoor)

class PipeOutdoorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PipeOutdoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PipeOutdoor >::difference_type", j: "std::vector< openstudio::model::PipeOutdoor >::difference_type") -> "std::vector< openstudio::model::PipeOutdoor,std::allocator< openstudio::model::PipeOutdoor > > *":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PipeOutdoor >::difference_type", j: "std::vector< openstudio::model::PipeOutdoor >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PipeOutdoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PipeOutdoor >::value_type":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_pop(self)

    def append(self, x: "PipeOutdoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PipeOutdoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_size(self)

    def swap(self, v: "PipeOutdoorVector") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PipeOutdoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PipeOutdoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PipeOutdoor >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PipeOutdoor >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PipeOutdoor >::allocator_type":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PipeOutdoor >::iterator":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PipeOutdoorVector_swiginit(self, _openstudiomodelstraightcomponent.new_PipeOutdoorVector(*args))

    def push_back(self, x: "PipeOutdoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PipeOutdoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PipeOutdoor >::value_type const &":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PipeOutdoor >::size_type", x: "PipeOutdoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PipeOutdoor >::size_type", x: "PipeOutdoor") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PipeOutdoor >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PipeOutdoor >::size_type":
        return _openstudiomodelstraightcomponent.PipeOutdoorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeOutdoorVector

# Register PipeOutdoorVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeOutdoorVector_swigregister(PipeOutdoorVector)

class OptionalPipeOutdoor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPipeOutdoor_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPipeOutdoor(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor_reset(self)

    def __ref__(self) -> "openstudio::model::PipeOutdoor":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor_isNull(self)

    def get(self) -> "openstudio::model::PipeOutdoor":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor_get(self)

    def set(self, t: "PipeOutdoor") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPipeOutdoor_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPipeOutdoor

# Register OptionalPipeOutdoor in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPipeOutdoor_swigregister(OptionalPipeOutdoor)

class PlantComponentTemperatureSourceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PlantComponentTemperatureSource >::difference_type", j: "std::vector< openstudio::model::PlantComponentTemperatureSource >::difference_type") -> "std::vector< openstudio::model::PlantComponentTemperatureSource,std::allocator< openstudio::model::PlantComponentTemperatureSource > > *":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PlantComponentTemperatureSource >::difference_type", j: "std::vector< openstudio::model::PlantComponentTemperatureSource >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::value_type const &":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::value_type":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_pop(self)

    def append(self, x: "PlantComponentTemperatureSource") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_size(self)

    def swap(self, v: "PlantComponentTemperatureSourceVector") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::iterator":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::iterator":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::allocator_type":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::iterator":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_swiginit(self, _openstudiomodelstraightcomponent.new_PlantComponentTemperatureSourceVector(*args))

    def push_back(self, x: "PlantComponentTemperatureSource") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::value_type const &":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::value_type const &":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type", x: "PlantComponentTemperatureSource") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type", x: "PlantComponentTemperatureSource") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantComponentTemperatureSource >::size_type":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PlantComponentTemperatureSourceVector

# Register PlantComponentTemperatureSourceVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PlantComponentTemperatureSourceVector_swigregister(PlantComponentTemperatureSourceVector)

class OptionalPlantComponentTemperatureSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPlantComponentTemperatureSource(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_reset(self)

    def __ref__(self) -> "openstudio::model::PlantComponentTemperatureSource":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_isNull(self)

    def get(self) -> "openstudio::model::PlantComponentTemperatureSource":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_get(self)

    def set(self, t: "PlantComponentTemperatureSource") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPlantComponentTemperatureSource

# Register OptionalPlantComponentTemperatureSource in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPlantComponentTemperatureSource_swigregister(OptionalPlantComponentTemperatureSource)

class PumpConstantSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PumpConstantSpeed >::difference_type", j: "std::vector< openstudio::model::PumpConstantSpeed >::difference_type") -> "std::vector< openstudio::model::PumpConstantSpeed,std::allocator< openstudio::model::PumpConstantSpeed > > *":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PumpConstantSpeed >::difference_type", j: "std::vector< openstudio::model::PumpConstantSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PumpConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::value_type":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_pop(self)

    def append(self, x: "PumpConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_size(self)

    def swap(self, v: "PumpConstantSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PumpConstantSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PumpConstantSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_PumpConstantSpeedVector(*args))

    def push_back(self, x: "PumpConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PumpConstantSpeed >::size_type", x: "PumpConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PumpConstantSpeed >::size_type", x: "PumpConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PumpConstantSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PumpConstantSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpConstantSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PumpConstantSpeedVector

# Register PumpConstantSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PumpConstantSpeedVector_swigregister(PumpConstantSpeedVector)

class OptionalPumpConstantSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPumpConstantSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::PumpConstantSpeed":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_isNull(self)

    def get(self) -> "openstudio::model::PumpConstantSpeed":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_get(self)

    def set(self, t: "PumpConstantSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPumpConstantSpeed

# Register OptionalPumpConstantSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPumpConstantSpeed_swigregister(OptionalPumpConstantSpeed)

class PumpVariableSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::PumpVariableSpeed >::difference_type", j: "std::vector< openstudio::model::PumpVariableSpeed >::difference_type") -> "std::vector< openstudio::model::PumpVariableSpeed,std::allocator< openstudio::model::PumpVariableSpeed > > *":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::PumpVariableSpeed >::difference_type", j: "std::vector< openstudio::model::PumpVariableSpeed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PumpVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::value_type":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_pop(self)

    def append(self, x: "PumpVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_size(self)

    def swap(self, v: "PumpVariableSpeedVector") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::allocator_type":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PumpVariableSpeed >::iterator":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.PumpVariableSpeedVector_swiginit(self, _openstudiomodelstraightcomponent.new_PumpVariableSpeedVector(*args))

    def push_back(self, x: "PumpVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::value_type const &":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::PumpVariableSpeed >::size_type", x: "PumpVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::PumpVariableSpeed >::size_type", x: "PumpVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::PumpVariableSpeed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PumpVariableSpeed >::size_type":
        return _openstudiomodelstraightcomponent.PumpVariableSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PumpVariableSpeedVector

# Register PumpVariableSpeedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PumpVariableSpeedVector_swigregister(PumpVariableSpeedVector)

class OptionalPumpVariableSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalPumpVariableSpeed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_reset(self)

    def __ref__(self) -> "openstudio::model::PumpVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_isNull(self)

    def get(self) -> "openstudio::model::PumpVariableSpeed":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_get(self)

    def set(self, t: "PumpVariableSpeed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalPumpVariableSpeed

# Register OptionalPumpVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalPumpVariableSpeed_swigregister(OptionalPumpVariableSpeed)

class SolarCollectorFlatPlatePhotovoltaicThermalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::difference_type", j: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::difference_type") -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal,std::allocator< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal > > *":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::difference_type", j: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::value_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_pop(self)

    def append(self, x: "SolarCollectorFlatPlatePhotovoltaicThermal") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_size(self)

    def swap(self, v: "SolarCollectorFlatPlatePhotovoltaicThermalVector") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::allocator_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorFlatPlatePhotovoltaicThermalVector(*args))

    def push_back(self, x: "SolarCollectorFlatPlatePhotovoltaicThermal") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type", x: "SolarCollectorFlatPlatePhotovoltaicThermal") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type", x: "SolarCollectorFlatPlatePhotovoltaicThermal") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorFlatPlatePhotovoltaicThermalVector

# Register SolarCollectorFlatPlatePhotovoltaicThermalVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermalVector_swigregister(SolarCollectorFlatPlatePhotovoltaicThermalVector)

class OptionalSolarCollectorFlatPlatePhotovoltaicThermal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalSolarCollectorFlatPlatePhotovoltaicThermal(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_get(self)

    def set(self, t: "SolarCollectorFlatPlatePhotovoltaicThermal") -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalSolarCollectorFlatPlatePhotovoltaicThermal

# Register OptionalSolarCollectorFlatPlatePhotovoltaicThermal in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlatePhotovoltaicThermal_swigregister(OptionalSolarCollectorFlatPlatePhotovoltaicThermal)

class SolarCollectorFlatPlateWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::difference_type", j: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::difference_type") -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater,std::allocator< openstudio::model::SolarCollectorFlatPlateWater > > *":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::difference_type", j: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::value_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_pop(self)

    def append(self, x: "SolarCollectorFlatPlateWater") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_size(self)

    def swap(self, v: "SolarCollectorFlatPlateWaterVector") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::allocator_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorFlatPlateWaterVector(*args))

    def push_back(self, x: "SolarCollectorFlatPlateWater") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type", x: "SolarCollectorFlatPlateWater") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type", x: "SolarCollectorFlatPlateWater") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorFlatPlateWaterVector

# Register SolarCollectorFlatPlateWaterVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorFlatPlateWaterVector_swigregister(SolarCollectorFlatPlateWaterVector)

class OptionalSolarCollectorFlatPlateWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalSolarCollectorFlatPlateWater(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorFlatPlateWater":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorFlatPlateWater":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_get(self)

    def set(self, t: "SolarCollectorFlatPlateWater") -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalSolarCollectorFlatPlateWater

# Register OptionalSolarCollectorFlatPlateWater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalSolarCollectorFlatPlateWater_swigregister(OptionalSolarCollectorFlatPlateWater)

class SolarCollectorIntegralCollectorStorageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::difference_type", j: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::difference_type") -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorIntegralCollectorStorage > > *":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::difference_type", j: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::value_type":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_pop(self)

    def append(self, x: "SolarCollectorIntegralCollectorStorage") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_size(self)

    def swap(self, v: "SolarCollectorIntegralCollectorStorageVector") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::reverse_iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::allocator_type":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::iterator":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorIntegralCollectorStorageVector(*args))

    def push_back(self, x: "SolarCollectorIntegralCollectorStorage") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::value_type const &":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type", x: "SolarCollectorIntegralCollectorStorage") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type", x: "SolarCollectorIntegralCollectorStorage") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage >::size_type":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorIntegralCollectorStorageVector

# Register SolarCollectorIntegralCollectorStorageVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorageVector_swigregister(SolarCollectorIntegralCollectorStorageVector)

class OptionalSolarCollectorIntegralCollectorStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalSolarCollectorIntegralCollectorStorage(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_reset(self)

    def __ref__(self) -> "openstudio::model::SolarCollectorIntegralCollectorStorage":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_isNull(self)

    def get(self) -> "openstudio::model::SolarCollectorIntegralCollectorStorage":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_get(self)

    def set(self, t: "SolarCollectorIntegralCollectorStorage") -> "void":
        return _openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalSolarCollectorIntegralCollectorStorage

# Register OptionalSolarCollectorIntegralCollectorStorage in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalSolarCollectorIntegralCollectorStorage_swigregister(OptionalSolarCollectorIntegralCollectorStorage)

class TemperingValveVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.TemperingValveVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValveVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValveVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::TemperingValve >::size_type":
        return _openstudiomodelstraightcomponent.TemperingValveVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::TemperingValve >::difference_type", j: "std::vector< openstudio::model::TemperingValve >::difference_type") -> "std::vector< openstudio::model::TemperingValve,std::allocator< openstudio::model::TemperingValve > > *":
        return _openstudiomodelstraightcomponent.TemperingValveVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::TemperingValve >::difference_type", j: "std::vector< openstudio::model::TemperingValve >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::TemperingValve >::value_type const &":
        return _openstudiomodelstraightcomponent.TemperingValveVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::TemperingValve >::value_type":
        return _openstudiomodelstraightcomponent.TemperingValveVector_pop(self)

    def append(self, x: "TemperingValve") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValveVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::TemperingValve >::size_type":
        return _openstudiomodelstraightcomponent.TemperingValveVector_size(self)

    def swap(self, v: "TemperingValveVector") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::TemperingValve >::iterator":
        return _openstudiomodelstraightcomponent.TemperingValveVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::TemperingValve >::iterator":
        return _openstudiomodelstraightcomponent.TemperingValveVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::TemperingValve >::reverse_iterator":
        return _openstudiomodelstraightcomponent.TemperingValveVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::TemperingValve >::reverse_iterator":
        return _openstudiomodelstraightcomponent.TemperingValveVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::TemperingValve >::allocator_type":
        return _openstudiomodelstraightcomponent.TemperingValveVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::TemperingValve >::iterator":
        return _openstudiomodelstraightcomponent.TemperingValveVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.TemperingValveVector_swiginit(self, _openstudiomodelstraightcomponent.new_TemperingValveVector(*args))

    def push_back(self, x: "TemperingValve") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::TemperingValve >::value_type const &":
        return _openstudiomodelstraightcomponent.TemperingValveVector_front(self)

    def back(self) -> "std::vector< openstudio::model::TemperingValve >::value_type const &":
        return _openstudiomodelstraightcomponent.TemperingValveVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::TemperingValve >::size_type", x: "TemperingValve") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::TemperingValve >::size_type", x: "TemperingValve") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::TemperingValve >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.TemperingValveVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::TemperingValve >::size_type":
        return _openstudiomodelstraightcomponent.TemperingValveVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_TemperingValveVector

# Register TemperingValveVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.TemperingValveVector_swigregister(TemperingValveVector)

class OptionalTemperingValve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalTemperingValve_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalTemperingValve(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve_reset(self)

    def __ref__(self) -> "openstudio::model::TemperingValve":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve_isNull(self)

    def get(self) -> "openstudio::model::TemperingValve":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve_get(self)

    def set(self, t: "TemperingValve") -> "void":
        return _openstudiomodelstraightcomponent.OptionalTemperingValve_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalTemperingValve

# Register OptionalTemperingValve in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalTemperingValve_swigregister(OptionalTemperingValve)

class ThermalStorageIceDetailedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ThermalStorageIceDetailed >::difference_type", j: "std::vector< openstudio::model::ThermalStorageIceDetailed >::difference_type") -> "std::vector< openstudio::model::ThermalStorageIceDetailed,std::allocator< openstudio::model::ThermalStorageIceDetailed > > *":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ThermalStorageIceDetailed >::difference_type", j: "std::vector< openstudio::model::ThermalStorageIceDetailed >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::value_type const &":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::value_type":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_pop(self)

    def append(self, x: "ThermalStorageIceDetailed") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_size(self)

    def swap(self, v: "ThermalStorageIceDetailedVector") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::iterator":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::iterator":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::reverse_iterator":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::allocator_type":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::iterator":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_swiginit(self, _openstudiomodelstraightcomponent.new_ThermalStorageIceDetailedVector(*args))

    def push_back(self, x: "ThermalStorageIceDetailed") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::value_type const &":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::value_type const &":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type", x: "ThermalStorageIceDetailed") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type", x: "ThermalStorageIceDetailed") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermalStorageIceDetailed >::size_type":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_ThermalStorageIceDetailedVector

# Register ThermalStorageIceDetailedVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.ThermalStorageIceDetailedVector_swigregister(ThermalStorageIceDetailedVector)

class OptionalThermalStorageIceDetailed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalThermalStorageIceDetailed(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_reset(self)

    def __ref__(self) -> "openstudio::model::ThermalStorageIceDetailed":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_isNull(self)

    def get(self) -> "openstudio::model::ThermalStorageIceDetailed":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_get(self)

    def set(self, t: "ThermalStorageIceDetailed") -> "void":
        return _openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalThermalStorageIceDetailed

# Register OptionalThermalStorageIceDetailed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalThermalStorageIceDetailed_swigregister(OptionalThermalStorageIceDetailed)

class WaterUseConnectionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterUseConnections >::size_type":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WaterUseConnections >::difference_type", j: "std::vector< openstudio::model::WaterUseConnections >::difference_type") -> "std::vector< openstudio::model::WaterUseConnections,std::allocator< openstudio::model::WaterUseConnections > > *":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WaterUseConnections >::difference_type", j: "std::vector< openstudio::model::WaterUseConnections >::difference_type") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterUseConnections >::value_type const &":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WaterUseConnections >::value_type":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_pop(self)

    def append(self, x: "WaterUseConnections") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterUseConnections >::size_type":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_size(self)

    def swap(self, v: "WaterUseConnectionsVector") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WaterUseConnections >::iterator":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterUseConnections >::iterator":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterUseConnections >::reverse_iterator":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterUseConnections >::reverse_iterator":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterUseConnections >::allocator_type":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterUseConnections >::iterator":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.WaterUseConnectionsVector_swiginit(self, _openstudiomodelstraightcomponent.new_WaterUseConnectionsVector(*args))

    def push_back(self, x: "WaterUseConnections") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterUseConnections >::value_type const &":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterUseConnections >::value_type const &":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WaterUseConnections >::size_type", x: "WaterUseConnections") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WaterUseConnections >::size_type", x: "WaterUseConnections") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WaterUseConnections >::size_type") -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterUseConnections >::size_type":
        return _openstudiomodelstraightcomponent.WaterUseConnectionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_WaterUseConnectionsVector

# Register WaterUseConnectionsVector in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.WaterUseConnectionsVector_swigregister(WaterUseConnectionsVector)

class OptionalWaterUseConnections(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.OptionalWaterUseConnections_swiginit(self, _openstudiomodelstraightcomponent.new_OptionalWaterUseConnections(*args))

    def reset(self) -> "void":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections_reset(self)

    def __ref__(self) -> "openstudio::model::WaterUseConnections":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections_isNull(self)

    def get(self) -> "openstudio::model::WaterUseConnections":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections_get(self)

    def set(self, t: "WaterUseConnections") -> "void":
        return _openstudiomodelstraightcomponent.OptionalWaterUseConnections_set(self, t)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_OptionalWaterUseConnections

# Register OptionalWaterUseConnections in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.OptionalWaterUseConnections_swigregister(OptionalWaterUseConnections)

class AirConditionerVariableRefrigerantFlow(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_swiginit(self, _openstudiomodelstraightcomponent.new_AirConditionerVariableRefrigerantFlow(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirConditionerVariableRefrigerantFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_iddObjectType()

    @staticmethod
    def heatingPerformanceCurveOutdoorTemperatureTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingPerformanceCurveOutdoorTemperatureTypeValues()

    @staticmethod
    def masterThermostatPriorityControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_masterThermostatPriorityControlTypeValues()

    @staticmethod
    def defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostStrategyValues()

    @staticmethod
    def defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostControlValues()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_fuelTypeValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setAvailabilitySchedule(self, schedule)

    def grossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_grossRatedTotalCoolingCapacity(self)

    def isGrossRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isGrossRatedTotalCoolingCapacityAutosized(self)

    def setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity)

    def autosizeGrossRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeGrossRatedTotalCoolingCapacity(self)

    def grossRatedCoolingCOP(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_grossRatedCoolingCOP(self)

    def setGrossRatedCoolingCOP(self, grossRatedCoolingCOP: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setGrossRatedCoolingCOP(self, grossRatedCoolingCOP)

    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedTotalCoolingCapacity(self)

    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isRatedTotalCoolingCapacityAutosized(self)

    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)

    def autosizeRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeRatedTotalCoolingCapacity(self)

    def ratedCoolingCOP(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedCoolingCOP(self)

    def setRatedCoolingCOP(self, ratedCoolingCOP: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedCoolingCOP(self, ratedCoolingCOP)

    def minimumOutdoorTemperatureinCoolingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_minimumOutdoorTemperatureinCoolingMode(self)

    def setMinimumOutdoorTemperatureinCoolingMode(self, minimumOutdoorTemperatureinCoolingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMinimumOutdoorTemperatureinCoolingMode(self, minimumOutdoorTemperatureinCoolingMode)

    def maximumOutdoorTemperatureinCoolingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_maximumOutdoorTemperatureinCoolingMode(self)

    def setMaximumOutdoorTemperatureinCoolingMode(self, maximumOutdoorTemperatureinCoolingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMaximumOutdoorTemperatureinCoolingMode(self, maximumOutdoorTemperatureinCoolingMode)

    def coolingCapacityRatioModifierFunctionofLowTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingCapacityRatioModifierFunctionofLowTemperatureCurve(self)

    def setCoolingCapacityRatioModifierFunctionofLowTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingCapacityRatioModifierFunctionofLowTemperatureCurve(self, curve)

    def resetCoolingCapacityRatioModifierFunctionofLowTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingCapacityRatioModifierFunctionofLowTemperatureCurve(self)

    def coolingCapacityRatioBoundaryCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingCapacityRatioBoundaryCurve(self)

    def setCoolingCapacityRatioBoundaryCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingCapacityRatioBoundaryCurve(self, curve)

    def resetCoolingCapacityRatioBoundaryCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingCapacityRatioBoundaryCurve(self)

    def coolingCapacityRatioModifierFunctionofHighTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingCapacityRatioModifierFunctionofHighTemperatureCurve(self)

    def setCoolingCapacityRatioModifierFunctionofHighTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingCapacityRatioModifierFunctionofHighTemperatureCurve(self, curve)

    def resetCoolingCapacityRatioModifierFunctionofHighTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingCapacityRatioModifierFunctionofHighTemperatureCurve(self)

    def coolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self)

    def setCoolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self, curve)

    def resetCoolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self)

    def coolingEnergyInputRatioBoundaryCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingEnergyInputRatioBoundaryCurve(self)

    def setCoolingEnergyInputRatioBoundaryCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingEnergyInputRatioBoundaryCurve(self, curve)

    def resetCoolingEnergyInputRatioBoundaryCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingEnergyInputRatioBoundaryCurve(self)

    def coolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self)

    def setCoolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self, curve)

    def resetCoolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self)

    def coolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self)

    def setCoolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self, curve)

    def resetCoolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self)

    def coolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self)

    def setCoolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self, curve)

    def resetCoolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self)

    def coolingCombinationRatioCorrectionFactorCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingCombinationRatioCorrectionFactorCurve(self)

    def setCoolingCombinationRatioCorrectionFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingCombinationRatioCorrectionFactorCurve(self, curve)

    def resetCoolingCombinationRatioCorrectionFactorCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingCombinationRatioCorrectionFactorCurve(self)

    def coolingPartLoadFractionCorrelationCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_coolingPartLoadFractionCorrelationCurve(self)

    def setCoolingPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCoolingPartLoadFractionCorrelationCurve(self, curve)

    def resetCoolingPartLoadFractionCorrelationCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCoolingPartLoadFractionCorrelationCurve(self)

    def grossRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_grossRatedHeatingCapacity(self)

    def isGrossRatedHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isGrossRatedHeatingCapacityAutosized(self)

    def setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity)

    def autosizeGrossRatedHeatingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeGrossRatedHeatingCapacity(self)

    def ratedHeatingCapacitySizingRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedHeatingCapacitySizingRatio(self)

    def setRatedHeatingCapacitySizingRatio(self, ratedHeatingCapacitySizingRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedHeatingCapacitySizingRatio(self, ratedHeatingCapacitySizingRatio)

    def ratedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedTotalHeatingCapacity(self)

    def isRatedTotalHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isRatedTotalHeatingCapacityAutosized(self)

    def setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity)

    def autosizeRatedTotalHeatingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeRatedTotalHeatingCapacity(self)

    def ratedTotalHeatingCapacitySizingRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedTotalHeatingCapacitySizingRatio(self)

    def setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio)

    def ratedHeatingCOP(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratedHeatingCOP(self)

    def setRatedHeatingCOP(self, ratedHeatingCOP: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatedHeatingCOP(self, ratedHeatingCOP)

    def minimumOutdoorTemperatureinHeatingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_minimumOutdoorTemperatureinHeatingMode(self)

    def setMinimumOutdoorTemperatureinHeatingMode(self, minimumOutdoorTemperatureinHeatingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMinimumOutdoorTemperatureinHeatingMode(self, minimumOutdoorTemperatureinHeatingMode)

    def maximumOutdoorTemperatureinHeatingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_maximumOutdoorTemperatureinHeatingMode(self)

    def setMaximumOutdoorTemperatureinHeatingMode(self, maximumOutdoorTemperatureinHeatingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMaximumOutdoorTemperatureinHeatingMode(self, maximumOutdoorTemperatureinHeatingMode)

    def heatingCapacityRatioModifierFunctionofLowTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingCapacityRatioModifierFunctionofLowTemperatureCurve(self)

    def setHeatingCapacityRatioModifierFunctionofLowTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingCapacityRatioModifierFunctionofLowTemperatureCurve(self, curve)

    def resetHeatingCapacityRatioModifierFunctionofLowTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingCapacityRatioModifierFunctionofLowTemperatureCurve(self)

    def heatingCapacityRatioBoundaryCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingCapacityRatioBoundaryCurve(self)

    def setHeatingCapacityRatioBoundaryCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingCapacityRatioBoundaryCurve(self, curve)

    def resetHeatingCapacityRatioBoundaryCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingCapacityRatioBoundaryCurve(self)

    def heatingCapacityRatioModifierFunctionofHighTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingCapacityRatioModifierFunctionofHighTemperatureCurve(self)

    def setHeatingCapacityRatioModifierFunctionofHighTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingCapacityRatioModifierFunctionofHighTemperatureCurve(self, curve)

    def resetHeatingCapacityRatioModifierFunctionofHighTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingCapacityRatioModifierFunctionofHighTemperatureCurve(self)

    def heatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self)

    def setHeatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self, curve)

    def resetHeatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingEnergyInputRatioModifierFunctionofLowTemperatureCurve(self)

    def heatingEnergyInputRatioBoundaryCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingEnergyInputRatioBoundaryCurve(self)

    def setHeatingEnergyInputRatioBoundaryCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingEnergyInputRatioBoundaryCurve(self, curve)

    def resetHeatingEnergyInputRatioBoundaryCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingEnergyInputRatioBoundaryCurve(self)

    def heatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self)

    def setHeatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self, curve)

    def resetHeatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingEnergyInputRatioModifierFunctionofHighTemperatureCurve(self)

    def heatingPerformanceCurveOutdoorTemperatureType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingPerformanceCurveOutdoorTemperatureType(self)

    def setHeatingPerformanceCurveOutdoorTemperatureType(self, heatingPerformanceCurveOutdoorTemperatureType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingPerformanceCurveOutdoorTemperatureType(self, heatingPerformanceCurveOutdoorTemperatureType)

    def heatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self)

    def setHeatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self, curve)

    def resetHeatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingEnergyInputRatioModifierFunctionofLowPartLoadRatioCurve(self)

    def heatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self)

    def setHeatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self, curve)

    def resetHeatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingEnergyInputRatioModifierFunctionofHighPartLoadRatioCurve(self)

    def heatingCombinationRatioCorrectionFactorCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingCombinationRatioCorrectionFactorCurve(self)

    def setHeatingCombinationRatioCorrectionFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingCombinationRatioCorrectionFactorCurve(self, curve)

    def resetHeatingCombinationRatioCorrectionFactorCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingCombinationRatioCorrectionFactorCurve(self)

    def heatingPartLoadFractionCorrelationCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingPartLoadFractionCorrelationCurve(self)

    def setHeatingPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatingPartLoadFractionCorrelationCurve(self, curve)

    def resetHeatingPartLoadFractionCorrelationCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatingPartLoadFractionCorrelationCurve(self)

    def minimumHeatPumpPartLoadRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_minimumHeatPumpPartLoadRatio(self)

    def setMinimumHeatPumpPartLoadRatio(self, minimumHeatPumpPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMinimumHeatPumpPartLoadRatio(self, minimumHeatPumpPartLoadRatio)

    def zoneforMasterThermostatLocation(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_zoneforMasterThermostatLocation(self)

    def setZoneforMasterThermostatLocation(self, zone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setZoneforMasterThermostatLocation(self, zone)

    def resetZoneforMasterThermostatLocation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetZoneforMasterThermostatLocation(self)

    def masterThermostatPriorityControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_masterThermostatPriorityControlType(self)

    def setMasterThermostatPriorityControlType(self, masterThermostatPriorityControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMasterThermostatPriorityControlType(self, masterThermostatPriorityControlType)

    def thermostatPrioritySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_thermostatPrioritySchedule(self)

    def setThermostatPrioritySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setThermostatPrioritySchedule(self, schedule)

    def resetThermostatPrioritySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetThermostatPrioritySchedule(self)

    def heatPumpWasteHeatRecovery(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatPumpWasteHeatRecovery(self)

    def setHeatPumpWasteHeatRecovery(self, heatPumpWasteHeatRecovery: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatPumpWasteHeatRecovery(self, heatPumpWasteHeatRecovery)

    def equivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_equivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode(self)

    def setEquivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode(self, equivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setEquivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode(self, equivalentPipingLengthusedforPipingCorrectionFactorinCoolingMode)

    def verticalHeightusedforPipingCorrectionFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_verticalHeightusedforPipingCorrectionFactor(self)

    def setVerticalHeightusedforPipingCorrectionFactor(self, verticalHeightusedforPipingCorrectionFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setVerticalHeightusedforPipingCorrectionFactor(self, verticalHeightusedforPipingCorrectionFactor)

    def pipingCorrectionFactorforLengthinCoolingModeCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_pipingCorrectionFactorforLengthinCoolingModeCurve(self)

    def setPipingCorrectionFactorforLengthinCoolingModeCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setPipingCorrectionFactorforLengthinCoolingModeCurve(self, curve)

    def resetPipingCorrectionFactorforLengthinCoolingModeCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetPipingCorrectionFactorforLengthinCoolingModeCurve(self)

    def pipingCorrectionFactorforHeightinCoolingModeCoefficient(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_pipingCorrectionFactorforHeightinCoolingModeCoefficient(self)

    def setPipingCorrectionFactorforHeightinCoolingModeCoefficient(self, pipingCorrectionFactorforHeightinCoolingModeCoefficient: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setPipingCorrectionFactorforHeightinCoolingModeCoefficient(self, pipingCorrectionFactorforHeightinCoolingModeCoefficient)

    def equivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_equivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode(self)

    def setEquivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode(self, equivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setEquivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode(self, equivalentPipingLengthusedforPipingCorrectionFactorinHeatingMode)

    def pipingCorrectionFactorforLengthinHeatingModeCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_pipingCorrectionFactorforLengthinHeatingModeCurve(self)

    def setPipingCorrectionFactorforLengthinHeatingModeCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setPipingCorrectionFactorforLengthinHeatingModeCurve(self, curve)

    def resetPipingCorrectionFactorforLengthinHeatingModeCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetPipingCorrectionFactorforLengthinHeatingModeCurve(self)

    def pipingCorrectionFactorforHeightinHeatingModeCoefficient(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_pipingCorrectionFactorforHeightinHeatingModeCoefficient(self)

    def setPipingCorrectionFactorforHeightinHeatingModeCoefficient(self, pipingCorrectionFactorforHeightinHeatingModeCoefficient: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setPipingCorrectionFactorforHeightinHeatingModeCoefficient(self, pipingCorrectionFactorforHeightinHeatingModeCoefficient)

    def crankcaseHeaterPowerperCompressor(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_crankcaseHeaterPowerperCompressor(self)

    def setCrankcaseHeaterPowerperCompressor(self, crankcaseHeaterPowerperCompressor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCrankcaseHeaterPowerperCompressor(self, crankcaseHeaterPowerperCompressor)

    def numberofCompressors(self) -> "int":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_numberofCompressors(self)

    def setNumberofCompressors(self, numberofCompressors: "int") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setNumberofCompressors(self, numberofCompressors)

    def ratioofCompressorSizetoTotalCompressorCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_ratioofCompressorSizetoTotalCompressorCapacity(self)

    def setRatioofCompressorSizetoTotalCompressorCapacity(self, ratioofCompressorSizetoTotalCompressorCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setRatioofCompressorSizetoTotalCompressorCapacity(self, ratioofCompressorSizetoTotalCompressorCapacity)

    def maximumOutdoorDrybulbTemperatureforCrankcaseHeater(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_maximumOutdoorDrybulbTemperatureforCrankcaseHeater(self)

    def setMaximumOutdoorDrybulbTemperatureforCrankcaseHeater(self, maximumOutdoorDrybulbTemperatureforCrankcaseHeater: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMaximumOutdoorDrybulbTemperatureforCrankcaseHeater(self, maximumOutdoorDrybulbTemperatureforCrankcaseHeater)

    def defrostStrategy(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostStrategy(self)

    def setDefrostStrategy(self, defrostStrategy: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setDefrostStrategy(self, defrostStrategy)

    def defrostControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostControl(self)

    def setDefrostControl(self, defrostControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setDefrostControl(self, defrostControl)

    def defrostEnergyInputRatioModifierFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostEnergyInputRatioModifierFunctionofTemperatureCurve(self)

    def setDefrostEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setDefrostEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve)

    def resetDefrostEnergyInputRatioModifierFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetDefrostEnergyInputRatioModifierFunctionofTemperatureCurve(self)

    def defrostTimePeriodFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostTimePeriodFraction(self)

    def setDefrostTimePeriodFraction(self, defrostTimePeriodFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setDefrostTimePeriodFraction(self, defrostTimePeriodFraction)

    def resistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resistiveDefrostHeaterCapacity(self)

    def isResistiveDefrostHeaterCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isResistiveDefrostHeaterCapacityAutosized(self)

    def setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity)

    def autosizeResistiveDefrostHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeResistiveDefrostHeaterCapacity(self)

    def maximumOutdoorDrybulbTemperatureforDefrostOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_maximumOutdoorDrybulbTemperatureforDefrostOperation(self)

    def setMaximumOutdoorDrybulbTemperatureforDefrostOperation(self, maximumOutdoorDrybulbTemperatureforDefrostOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMaximumOutdoorDrybulbTemperatureforDefrostOperation(self, maximumOutdoorDrybulbTemperatureforDefrostOperation)

    def condenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_condenserType(self)

    def setCondenserType(self, condenserType: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setCondenserType(self, condenserType)

    def isCondenserTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isCondenserTypeDefaulted(self)

    def resetCondenserType(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetCondenserType(self)

    def waterCondenserVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_waterCondenserVolumeFlowRate(self)

    def isWaterCondenserVolumeFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isWaterCondenserVolumeFlowRateAutosized(self)

    def setWaterCondenserVolumeFlowRate(self, waterCondenserVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setWaterCondenserVolumeFlowRate(self, waterCondenserVolumeFlowRate)

    def autosizeWaterCondenserVolumeFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeWaterCondenserVolumeFlowRate(self)

    def evaporativeCondenserEffectiveness(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_evaporativeCondenserEffectiveness(self)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_evaporativeCondenserAirFlowRate(self)

    def isEvaporativeCondenserAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isEvaporativeCondenserAirFlowRateAutosized(self)

    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)

    def autosizeEvaporativeCondenserAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeEvaporativeCondenserAirFlowRate(self)

    def evaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_evaporativeCondenserPumpRatedPowerConsumption(self)

    def isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self)

    def setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption)

    def autosizeEvaporativeCondenserPumpRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizeEvaporativeCondenserPumpRatedPowerConsumption(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_basinHeaterCapacity(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_basinHeaterSetpointTemperature(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_basinHeaterOperatingSchedule(self)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetBasinHeaterOperatingSchedule(self)

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_fuelType(self)

    def setFuelType(self, fuelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setFuelType(self, fuelType)

    def minimumOutdoorTemperatureinHeatRecoveryMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_minimumOutdoorTemperatureinHeatRecoveryMode(self)

    def setMinimumOutdoorTemperatureinHeatRecoveryMode(self, minimumOutdoorTemperatureinHeatRecoveryMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMinimumOutdoorTemperatureinHeatRecoveryMode(self, minimumOutdoorTemperatureinHeatRecoveryMode)

    def maximumOutdoorTemperatureinHeatRecoveryMode(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_maximumOutdoorTemperatureinHeatRecoveryMode(self)

    def setMaximumOutdoorTemperatureinHeatRecoveryMode(self, maximumOutdoorTemperatureinHeatRecoveryMode: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setMaximumOutdoorTemperatureinHeatRecoveryMode(self, maximumOutdoorTemperatureinHeatRecoveryMode)

    def heatRecoveryCoolingCapacityModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryCoolingCapacityModifierCurve(self)

    def setHeatRecoveryCoolingCapacityModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryCoolingCapacityModifierCurve(self, curve)

    def resetHeatRecoveryCoolingCapacityModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatRecoveryCoolingCapacityModifierCurve(self)

    def initialHeatRecoveryCoolingCapacityFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_initialHeatRecoveryCoolingCapacityFraction(self)

    def setInitialHeatRecoveryCoolingCapacityFraction(self, initialHeatRecoveryCoolingCapacityFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setInitialHeatRecoveryCoolingCapacityFraction(self, initialHeatRecoveryCoolingCapacityFraction)

    def heatRecoveryCoolingCapacityTimeConstant(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryCoolingCapacityTimeConstant(self)

    def setHeatRecoveryCoolingCapacityTimeConstant(self, heatRecoveryCoolingCapacityTimeConstant: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryCoolingCapacityTimeConstant(self, heatRecoveryCoolingCapacityTimeConstant)

    def heatRecoveryCoolingEnergyModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryCoolingEnergyModifierCurve(self)

    def setHeatRecoveryCoolingEnergyModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryCoolingEnergyModifierCurve(self, curve)

    def resetHeatRecoveryCoolingEnergyModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatRecoveryCoolingEnergyModifierCurve(self)

    def initialHeatRecoveryCoolingEnergyFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_initialHeatRecoveryCoolingEnergyFraction(self)

    def setInitialHeatRecoveryCoolingEnergyFraction(self, initialHeatRecoveryCoolingEnergyFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setInitialHeatRecoveryCoolingEnergyFraction(self, initialHeatRecoveryCoolingEnergyFraction)

    def heatRecoveryCoolingEnergyTimeConstant(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryCoolingEnergyTimeConstant(self)

    def setHeatRecoveryCoolingEnergyTimeConstant(self, heatRecoveryCoolingEnergyTimeConstant: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryCoolingEnergyTimeConstant(self, heatRecoveryCoolingEnergyTimeConstant)

    def heatRecoveryHeatingCapacityModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryHeatingCapacityModifierCurve(self)

    def setHeatRecoveryHeatingCapacityModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryHeatingCapacityModifierCurve(self, curve)

    def resetHeatRecoveryHeatingCapacityModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatRecoveryHeatingCapacityModifierCurve(self)

    def initialHeatRecoveryHeatingCapacityFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_initialHeatRecoveryHeatingCapacityFraction(self)

    def setInitialHeatRecoveryHeatingCapacityFraction(self, initialHeatRecoveryHeatingCapacityFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setInitialHeatRecoveryHeatingCapacityFraction(self, initialHeatRecoveryHeatingCapacityFraction)

    def heatRecoveryHeatingCapacityTimeConstant(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryHeatingCapacityTimeConstant(self)

    def setHeatRecoveryHeatingCapacityTimeConstant(self, heatRecoveryHeatingCapacityTimeConstant: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryHeatingCapacityTimeConstant(self, heatRecoveryHeatingCapacityTimeConstant)

    def heatRecoveryHeatingEnergyModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryHeatingEnergyModifierCurve(self)

    def setHeatRecoveryHeatingEnergyModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryHeatingEnergyModifierCurve(self, curve)

    def resetHeatRecoveryHeatingEnergyModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_resetHeatRecoveryHeatingEnergyModifierCurve(self)

    def initialHeatRecoveryHeatingEnergyFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_initialHeatRecoveryHeatingEnergyFraction(self)

    def setInitialHeatRecoveryHeatingEnergyFraction(self, initialHeatRecoveryHeatingEnergyFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setInitialHeatRecoveryHeatingEnergyFraction(self, initialHeatRecoveryHeatingEnergyFraction)

    def heatRecoveryHeatingEnergyTimeConstant(self) -> "double":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatRecoveryHeatingEnergyTimeConstant(self)

    def setHeatRecoveryHeatingEnergyTimeConstant(self, heatRecoveryHeatingEnergyTimeConstant: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_setHeatRecoveryHeatingEnergyTimeConstant(self, heatRecoveryHeatingEnergyTimeConstant)

    def addTerminal(self, vrf: "ZoneHVACTerminalUnitVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_addTerminal(self, vrf)

    def removeTerminal(self, vrf: "ZoneHVACTerminalUnitVariableRefrigerantFlow") -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_removeTerminal(self, vrf)

    def removeAllTerminals(self) -> "void":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_removeAllTerminals(self)

    def terminals(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow,std::allocator< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow > >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_terminals(self)

    def autosizedGrossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedGrossRatedTotalCoolingCapacity(self)

    def autosizedGrossRatedHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedGrossRatedHeatingCapacity(self)

    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedRatedTotalCoolingCapacity(self)

    def autosizedRatedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedRatedTotalHeatingCapacity(self)

    def autosizedResistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedResistiveDefrostHeaterCapacity(self)

    def autosizedWaterCondenserVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedWaterCondenserVolumeFlowRate(self)

    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedEvaporativeCondenserAirFlowRate(self)

    def autosizedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_autosizedEvaporativeCondenserPumpRatedPowerConsumption(self)

# Register AirConditionerVariableRefrigerantFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_swigregister(AirConditionerVariableRefrigerantFlow)

def AirConditionerVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_iddObjectType()

def AirConditionerVariableRefrigerantFlow_heatingPerformanceCurveOutdoorTemperatureTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_heatingPerformanceCurveOutdoorTemperatureTypeValues()

def AirConditionerVariableRefrigerantFlow_masterThermostatPriorityControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_masterThermostatPriorityControlTypeValues()

def AirConditionerVariableRefrigerantFlow_defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostStrategyValues()

def AirConditionerVariableRefrigerantFlow_defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_defrostControlValues()

def AirConditionerVariableRefrigerantFlow_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirConditionerVariableRefrigerantFlow_fuelTypeValues()


def toAirConditionerVariableRefrigerantFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirConditionerVariableRefrigerantFlow >":
    return _openstudiomodelstraightcomponent.toAirConditionerVariableRefrigerantFlow(idfObject)

def getAirConditionerVariableRefrigerantFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirConditionerVariableRefrigerantFlow >":
    return _openstudiomodelstraightcomponent.getAirConditionerVariableRefrigerantFlow(t_model, t_handle)

def getAirConditionerVariableRefrigerantFlows(t_model: "Model") -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow,std::allocator< openstudio::model::AirConditionerVariableRefrigerantFlow > >":
    return _openstudiomodelstraightcomponent.getAirConditionerVariableRefrigerantFlows(t_model)

def getAirConditionerVariableRefrigerantFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirConditionerVariableRefrigerantFlow >":
    return _openstudiomodelstraightcomponent.getAirConditionerVariableRefrigerantFlowByName(t_model, t_name)

def getAirConditionerVariableRefrigerantFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirConditionerVariableRefrigerantFlow,std::allocator< openstudio::model::AirConditionerVariableRefrigerantFlow > >":
    return _openstudiomodelstraightcomponent.getAirConditionerVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

def _to_AirConditionerVariableRefrigerantFlow(self) -> OptionalAirConditionerVariableRefrigerantFlow:
    return toAirConditionerVariableRefrigerantFlow(self)
openstudioutilitiesidf.IdfObject.to_AirConditionerVariableRefrigerantFlow = _to_AirConditionerVariableRefrigerantFlow

def _getAirConditionerVariableRefrigerantFlow(self, t_handle: "UUID") -> OptionalAirConditionerVariableRefrigerantFlow:
    return getAirConditionerVariableRefrigerantFlow(self, t_handle)
Model.getAirConditionerVariableRefrigerantFlow = _getAirConditionerVariableRefrigerantFlow

def _getAirConditionerVariableRefrigerantFlow(self, t_handle_str: str) -> OptionalAirConditionerVariableRefrigerantFlow:
    return getAirConditionerVariableRefrigerantFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirConditionerVariableRefrigerantFlow = _getAirConditionerVariableRefrigerantFlow

def _getAirConditionerVariableRefrigerantFlows(self) -> AirConditionerVariableRefrigerantFlowVector:
    return getAirConditionerVariableRefrigerantFlows(self)
Model.getAirConditionerVariableRefrigerantFlows = _getAirConditionerVariableRefrigerantFlows

def _getAirConditionerVariableRefrigerantFlowByName(self, t_name: str) -> OptionalAirConditionerVariableRefrigerantFlow:
    return getAirConditionerVariableRefrigerantFlowByName(self, t_name)
Model.getAirConditionerVariableRefrigerantFlowByName = _getAirConditionerVariableRefrigerantFlowByName

def _getAirConditionerVariableRefrigerantFlowsByName(self, t_name: str, t_exactMatch: bool) -> AirConditionerVariableRefrigerantFlowVector:
    return getAirConditionerVariableRefrigerantFlowsByName(self, t_name, t_exactMatch)
Model.getAirConditionerVariableRefrigerantFlowsByName = _getAirConditionerVariableRefrigerantFlowsByName

class AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fan: "HVACComponent", coolingCoil: "HVACComponent", heatingCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(model, fan, coolingCoil, heatingCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_iddObjectType()

    @staticmethod
    def supplyAirFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFanPlacementValues()

    @staticmethod
    def priorityControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_priorityControlModeValues()

    @staticmethod
    def dehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_dehumidificationControlTypeValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_availabilitySchedule(self)

    def systemAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_systemAirFlowRateDuringCoolingOperation(self)

    def isSystemAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isSystemAirFlowRateDuringCoolingOperationAutosized(self)

    def systemAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_systemAirFlowRateDuringHeatingOperation(self)

    def isSystemAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isSystemAirFlowRateDuringHeatingOperationAutosized(self)

    def systemAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_systemAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSystemAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isSystemAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def outdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def outdoorAirFlowRateMultiplierSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_outdoorAirFlowRateMultiplierSchedule(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFan(self)

    def supplyAirFanPlacement(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFanPlacement(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFanOperatingModeSchedule(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_coolingCoil(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_heatingCoil(self)

    def priorityControlMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_priorityControlMode(self)

    def minimumOutletAirTemperatureDuringCoolingOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_minimumOutletAirTemperatureDuringCoolingOperation(self)

    def maximumOutletAirTemperatureDuringHeatingOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_maximumOutletAirTemperatureDuringHeatingOperation(self)

    def dehumidificationControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_dehumidificationControlType(self)

    def minimumRuntimeBeforeOperatingModeChange(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_minimumRuntimeBeforeOperatingModeChange(self)

    def plenumorMixerAirPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_plenumorMixerAirPort(self)

    def plenumorMixerNode(self) -> "openstudio::model::Node":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_plenumorMixerNode(self)

    def plenumorMixer(self) -> "boost::optional< openstudio::model::Mixer >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_plenumorMixer(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_resetAvailabilitySchedule(self)

    def setSystemAirFlowRateDuringCoolingOperation(self, systemAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSystemAirFlowRateDuringCoolingOperation(self, systemAirFlowRateDuringCoolingOperation)

    def autosizeSystemAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeSystemAirFlowRateDuringCoolingOperation(self)

    def setSystemAirFlowRateDuringHeatingOperation(self, systemAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSystemAirFlowRateDuringHeatingOperation(self, systemAirFlowRateDuringHeatingOperation)

    def autosizeSystemAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeSystemAirFlowRateDuringHeatingOperation(self)

    def setSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self, systemAirFlowRateWhenNoCoolingorHeatingisNeeded: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self, systemAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def autosizeSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setOutdoorAirFlowRateMultiplierSchedule(self, outdoorAirFlowRateMultiplierSchedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setOutdoorAirFlowRateMultiplierSchedule(self, outdoorAirFlowRateMultiplierSchedule)

    def resetOutdoorAirFlowRateMultiplierSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_resetOutdoorAirFlowRateMultiplierSchedule(self)

    def setSupplyAirFan(self, fansCVandOnOff: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSupplyAirFan(self, fansCVandOnOff)

    def setSupplyAirFanPlacement(self, supplyAirFanPlacement: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSupplyAirFanPlacement(self, supplyAirFanPlacement)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_resetSupplyAirFanOperatingModeSchedule(self)

    def setCoolingCoil(self, coolingCoilsDXMultiModeOrSingleSpeed: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setCoolingCoil(self, coolingCoilsDXMultiModeOrSingleSpeed)

    def setHeatingCoil(self, heatingCoilName: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setHeatingCoil(self, heatingCoilName)

    def setPriorityControlMode(self, priorityControlMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setPriorityControlMode(self, priorityControlMode)

    def setMinimumOutletAirTemperatureDuringCoolingOperation(self, minimumOutletAirTemperatureDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setMinimumOutletAirTemperatureDuringCoolingOperation(self, minimumOutletAirTemperatureDuringCoolingOperation)

    def setMaximumOutletAirTemperatureDuringHeatingOperation(self, maximumOutletAirTemperatureDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setMaximumOutletAirTemperatureDuringHeatingOperation(self, maximumOutletAirTemperatureDuringHeatingOperation)

    def setDehumidificationControlType(self, dehumidificationControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setDehumidificationControlType(self, dehumidificationControlType)

    def setMinimumRuntimeBeforeOperatingModeChange(self, runtime: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setMinimumRuntimeBeforeOperatingModeChange(self, runtime)

    def setPlenumorMixer(self, returnPathComponent: "Mixer") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_setPlenumorMixer(self, returnPathComponent)

    def resetPlenumorMixer(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_resetPlenumorMixer(self)

    def autosizedSystemAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedSystemAirFlowRateDuringCoolingOperation(self)

    def autosizedSystemAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedSystemAirFlowRateDuringHeatingOperation(self)

    def autosizedSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedSystemAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

# Register AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_swigregister(AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass)

def AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_iddObjectType()

def AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_supplyAirFanPlacementValues()

def AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_priorityControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_priorityControlModeValues()

def AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_dehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass_dehumidificationControlTypeValues()


def toAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >":
    return _openstudiomodelstraightcomponent.toAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(idfObject)

def getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(t_model, t_handle)

def getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss(t_model)

def getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName(t_model, t_name)

def getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self) -> OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass:
    return toAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass = _to_AirLoopHVACUnitaryHeatCoolVAVChangeoverBypass

def _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self, t_handle: "UUID") -> OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass:
    return getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self, t_handle)
Model.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass = _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass

def _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self, t_handle_str: str) -> OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass:
    return getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass = _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass

def _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss(self) -> AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector:
    return getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss(self)
Model.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss = _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasss

def _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName(self, t_name: str) -> OptionalAirLoopHVACUnitaryHeatCoolVAVChangeoverBypass:
    return getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName(self, t_name)
Model.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName = _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypassByName

def _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACUnitaryHeatCoolVAVChangeoverBypassVector:
    return getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName = _getAirLoopHVACUnitaryHeatCoolVAVChangeoverBypasssByName

class AirLoopHVACUnitaryHeatPumpAirToAir(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", availabilitySchedule: "Schedule", supplyFan: "HVACComponent", heatingCoil: "HVACComponent", coolingCoil: "HVACComponent", supplementalHeatingCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatPumpAirToAir(model, availabilitySchedule, supplyFan, heatingCoil, coolingCoil, supplementalHeatingCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatPumpAirToAir

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_iddObjectType()

    @staticmethod
    def validFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_validFanPlacementValues()

    @staticmethod
    def validDehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_validDehumidificationControlTypeValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_availabilitySchedule(self)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def controllingZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_controllingZone(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplyAirFan(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_heatingCoil(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_coolingCoil(self)

    def supplementalHeatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_fanPlacement(self)

    def isFanPlacementDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isFanPlacementDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_supplyAirFanOperatingModeSchedule(self)

    def dehumidificationControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_dehumidificationControlType(self)

    def isDehumidificationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_isDehumidificationControlTypeDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setAvailabilitySchedule(self, schedule)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, n2: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplyAirFlowRateDuringHeatingOperation(self, n2)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setControllingZone(self, zone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setControllingZone(self, zone)

    def resetControllingZone(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetControllingZone(self)

    def setSupplyAirFan(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplyAirFan(self, hvacComponent)

    def setHeatingCoil(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setHeatingCoil(self, hvacComponent)

    def setCoolingCoil(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setCoolingCoil(self, hvacComponent)

    def setSupplementalHeatingCoil(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplementalHeatingCoil(self, hvacComponent)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setFanPlacement(self, fanPlacement: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetSupplyAirFanOperatingModeSchedule(self)

    def setDehumidificationControlType(self, dehumidificationControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_setDehumidificationControlType(self, dehumidificationControlType)

    def resetDehumidificationControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_resetDehumidificationControlType(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)

# Register AirLoopHVACUnitaryHeatPumpAirToAir in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_swigregister(AirLoopHVACUnitaryHeatPumpAirToAir)

def AirLoopHVACUnitaryHeatPumpAirToAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_iddObjectType()

def AirLoopHVACUnitaryHeatPumpAirToAir_validFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_validFanPlacementValues()

def AirLoopHVACUnitaryHeatPumpAirToAir_validDehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAir_validDehumidificationControlTypeValues()


def toAirLoopHVACUnitaryHeatPumpAirToAir(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >":
    return _openstudiomodelstraightcomponent.toAirLoopHVACUnitaryHeatPumpAirToAir(idfObject)

def getAirLoopHVACUnitaryHeatPumpAirToAir(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAir(t_model, t_handle)

def getAirLoopHVACUnitaryHeatPumpAirToAirs(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirs(t_model)

def getAirLoopHVACUnitaryHeatPumpAirToAirByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirByName(t_model, t_name)

def getAirLoopHVACUnitaryHeatPumpAirToAirsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACUnitaryHeatPumpAirToAir(self) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAir:
    return toAirLoopHVACUnitaryHeatPumpAirToAir(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACUnitaryHeatPumpAirToAir = _to_AirLoopHVACUnitaryHeatPumpAirToAir

def _getAirLoopHVACUnitaryHeatPumpAirToAir(self, t_handle: "UUID") -> OptionalAirLoopHVACUnitaryHeatPumpAirToAir:
    return getAirLoopHVACUnitaryHeatPumpAirToAir(self, t_handle)
Model.getAirLoopHVACUnitaryHeatPumpAirToAir = _getAirLoopHVACUnitaryHeatPumpAirToAir

def _getAirLoopHVACUnitaryHeatPumpAirToAir(self, t_handle_str: str) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAir:
    return getAirLoopHVACUnitaryHeatPumpAirToAir(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACUnitaryHeatPumpAirToAir = _getAirLoopHVACUnitaryHeatPumpAirToAir

def _getAirLoopHVACUnitaryHeatPumpAirToAirs(self) -> AirLoopHVACUnitaryHeatPumpAirToAirVector:
    return getAirLoopHVACUnitaryHeatPumpAirToAirs(self)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirs = _getAirLoopHVACUnitaryHeatPumpAirToAirs

def _getAirLoopHVACUnitaryHeatPumpAirToAirByName(self, t_name: str) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAir:
    return getAirLoopHVACUnitaryHeatPumpAirToAirByName(self, t_name)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirByName = _getAirLoopHVACUnitaryHeatPumpAirToAirByName

def _getAirLoopHVACUnitaryHeatPumpAirToAirsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACUnitaryHeatPumpAirToAirVector:
    return getAirLoopHVACUnitaryHeatPumpAirToAirsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirsByName = _getAirLoopHVACUnitaryHeatPumpAirToAirsByName

class AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fan: "HVACComponent", heatingCoil: "HVACComponent", coolingCoil: "HVACComponent", supplementalHeatingCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(model, fan, heatingCoil, coolingCoil, supplementalHeatingCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_iddObjectType()

    @staticmethod
    def supplyAirFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFanPlacementValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_availabilitySchedule(self)

    def controllingZoneorThermostatLocation(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_controllingZoneorThermostatLocation(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFan(self)

    def supplyAirFanPlacement(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFanPlacement(self)

    def supplyAirFanOperatingModeSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFanOperatingModeSchedule(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_heatingCoil(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_coolingCoil(self)

    def supplementalHeatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def auxiliaryOnCycleElectricPower(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_auxiliaryOnCycleElectricPower(self)

    def auxiliaryOffCycleElectricPower(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_auxiliaryOffCycleElectricPower(self)

    def designHeatRecoveryWaterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_designHeatRecoveryWaterFlowRate(self)

    def maximumTemperatureforHeatRecovery(self) -> "double":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_maximumTemperatureforHeatRecovery(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def numberofSpeedsforHeating(self) -> "int":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_numberofSpeedsforHeating(self)

    def numberofSpeedsforCooling(self) -> "int":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_numberofSpeedsforCooling(self)

    def speed1SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed1SupplyAirFlowRateDuringHeatingOperation(self)

    def isSpeed1SupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed1SupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def speed2SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed2SupplyAirFlowRateDuringHeatingOperation(self)

    def isSpeed2SupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed2SupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def speed3SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed3SupplyAirFlowRateDuringHeatingOperation(self)

    def isSpeed3SupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed3SupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def speed4SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed4SupplyAirFlowRateDuringHeatingOperation(self)

    def isSpeed4SupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed4SupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def speed1SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed1SupplyAirFlowRateDuringCoolingOperation(self)

    def isSpeed1SupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed1SupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def speed2SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed2SupplyAirFlowRateDuringCoolingOperation(self)

    def isSpeed2SupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed2SupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def speed3SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed3SupplyAirFlowRateDuringCoolingOperation(self)

    def isSpeed3SupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed3SupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def speed4SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_speed4SupplyAirFlowRateDuringCoolingOperation(self)

    def isSpeed4SupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_isSpeed4SupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_resetAvailabilitySchedule(self)

    def setControllingZoneorThermostatLocation(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setControllingZoneorThermostatLocation(self, thermalZone)

    def resetControllingZoneorThermostatLocation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_resetControllingZoneorThermostatLocation(self)

    def setSupplyAirFan(self, fan: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSupplyAirFan(self, fan)

    def setSupplyAirFanPlacement(self, supplyAirFanPlacement: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSupplyAirFanPlacement(self, supplyAirFanPlacement)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def setHeatingCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setHeatingCoil(self, coil)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setCoolingCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setCoolingCoil(self, coil)

    def setSupplementalHeatingCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSupplementalHeatingCoil(self, coil)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def setAuxiliaryOnCycleElectricPower(self, auxiliaryOnCycleElectricPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setAuxiliaryOnCycleElectricPower(self, auxiliaryOnCycleElectricPower)

    def setAuxiliaryOffCycleElectricPower(self, auxiliaryOffCycleElectricPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setAuxiliaryOffCycleElectricPower(self, auxiliaryOffCycleElectricPower)

    def setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate)

    def setMaximumTemperatureforHeatRecovery(self, maximumTemperatureforHeatRecovery: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setMaximumTemperatureforHeatRecovery(self, maximumTemperatureforHeatRecovery)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setNumberofSpeedsforHeating(self, numberofSpeedsforHeating: "int") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setNumberofSpeedsforHeating(self, numberofSpeedsforHeating)

    def setNumberofSpeedsforCooling(self, numberofSpeedsforCooling: "int") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setNumberofSpeedsforCooling(self, numberofSpeedsforCooling)

    def setSpeed1SupplyAirFlowRateDuringHeatingOperation(self, speed1SupplyAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed1SupplyAirFlowRateDuringHeatingOperation(self, speed1SupplyAirFlowRateDuringHeatingOperation)

    def autosizeSpeed1SupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed1SupplyAirFlowRateDuringHeatingOperation(self)

    def setSpeed2SupplyAirFlowRateDuringHeatingOperation(self, speed2SupplyAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed2SupplyAirFlowRateDuringHeatingOperation(self, speed2SupplyAirFlowRateDuringHeatingOperation)

    def autosizeSpeed2SupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed2SupplyAirFlowRateDuringHeatingOperation(self)

    def setSpeed3SupplyAirFlowRateDuringHeatingOperation(self, speed3SupplyAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed3SupplyAirFlowRateDuringHeatingOperation(self, speed3SupplyAirFlowRateDuringHeatingOperation)

    def autosizeSpeed3SupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed3SupplyAirFlowRateDuringHeatingOperation(self)

    def setSpeed4SupplyAirFlowRateDuringHeatingOperation(self, speed4SupplyAirFlowRateDuringHeatingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed4SupplyAirFlowRateDuringHeatingOperation(self, speed4SupplyAirFlowRateDuringHeatingOperation)

    def autosizeSpeed4SupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed4SupplyAirFlowRateDuringHeatingOperation(self)

    def setSpeed1SupplyAirFlowRateDuringCoolingOperation(self, speed1SupplyAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed1SupplyAirFlowRateDuringCoolingOperation(self, speed1SupplyAirFlowRateDuringCoolingOperation)

    def autosizeSpeed1SupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed1SupplyAirFlowRateDuringCoolingOperation(self)

    def setSpeed2SupplyAirFlowRateDuringCoolingOperation(self, speed2SupplyAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed2SupplyAirFlowRateDuringCoolingOperation(self, speed2SupplyAirFlowRateDuringCoolingOperation)

    def autosizeSpeed2SupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed2SupplyAirFlowRateDuringCoolingOperation(self)

    def setSpeed3SupplyAirFlowRateDuringCoolingOperation(self, speed3SupplyAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed3SupplyAirFlowRateDuringCoolingOperation(self, speed3SupplyAirFlowRateDuringCoolingOperation)

    def autosizeSpeed3SupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed3SupplyAirFlowRateDuringCoolingOperation(self)

    def setSpeed4SupplyAirFlowRateDuringCoolingOperation(self, speed4SupplyAirFlowRateDuringCoolingOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_setSpeed4SupplyAirFlowRateDuringCoolingOperation(self, speed4SupplyAirFlowRateDuringCoolingOperation)

    def autosizeSpeed4SupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizeSpeed4SupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedSpeed1SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed1SupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSpeed2SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed2SupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSpeed3SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed3SupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSpeed4SupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed4SupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSpeed1SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed1SupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSpeed2SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed2SupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSpeed3SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed3SupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSpeed4SupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_autosizedSpeed4SupplyAirFlowRateDuringCoolingOperation(self)

# Register AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_swigregister(AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed)

def AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_iddObjectType()

def AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed_supplyAirFanPlacementValues()


def toAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >":
    return _openstudiomodelstraightcomponent.toAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(idfObject)

def getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(t_model, t_handle)

def getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds(t_model: "Model") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds(t_model)

def getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName(t_model, t_name)

def getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed:
    return toAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed = _to_AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed

def _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self, t_handle: "UUID") -> OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed:
    return getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self, t_handle)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed = _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed

def _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self, t_handle_str: str) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed:
    return getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed = _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed

def _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds(self) -> AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector:
    return getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds(self)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds = _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeeds

def _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName(self, t_name: str) -> OptionalAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeed:
    return getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName(self, t_name)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName = _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedByName

def _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedVector:
    return getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName = _getAirLoopHVACUnitaryHeatPumpAirToAirMultiSpeedsByName

class AirTerminalSingleDuctConstantVolumeCooledBeam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", availabilitySchedule: "Schedule", coilCoolingCooledBeam: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeCooledBeam(model, availabilitySchedule, coilCoolingCooledBeam))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeCooledBeam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_availabilitySchedule(self)

    def coilCoolingCooledBeam(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_coilCoolingCooledBeam(self)

    @staticmethod
    def cooledBeamTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_cooledBeamTypeValues()

    def cooledBeamType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_cooledBeamType(self)

    def supplyAirVolumetricFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_supplyAirVolumetricFlowRate(self)

    def isSupplyAirVolumetricFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isSupplyAirVolumetricFlowRateDefaulted(self)

    def isSupplyAirVolumetricFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isSupplyAirVolumetricFlowRateAutosized(self)

    def maximumTotalChilledWaterVolumetricFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_maximumTotalChilledWaterVolumetricFlowRate(self)

    def isMaximumTotalChilledWaterVolumetricFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isMaximumTotalChilledWaterVolumetricFlowRateDefaulted(self)

    def isMaximumTotalChilledWaterVolumetricFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isMaximumTotalChilledWaterVolumetricFlowRateAutosized(self)

    def numberofBeams(self) -> "boost::optional< int >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_numberofBeams(self)

    def isNumberofBeamsDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isNumberofBeamsDefaulted(self)

    def isNumberofBeamsAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isNumberofBeamsAutosized(self)

    def beamLength(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_beamLength(self)

    def isBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isBeamLengthDefaulted(self)

    def isBeamLengthAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isBeamLengthAutosized(self)

    def designInletWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_designInletWaterTemperature(self)

    def isDesignInletWaterTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isDesignInletWaterTemperatureDefaulted(self)

    def designOutletWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_designOutletWaterTemperature(self)

    def isDesignOutletWaterTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isDesignOutletWaterTemperatureDefaulted(self)

    def coefficientofInductionKin(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_coefficientofInductionKin(self)

    def isCoefficientofInductionKinDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isCoefficientofInductionKinDefaulted(self)

    def isCoefficientofInductionKinAutocalculated(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_isCoefficientofInductionKinAutocalculated(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setAvailabilitySchedule(self, schedule)

    def setCoolingCoil(self, coilCoolingCooledBeam: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setCoolingCoil(self, coilCoolingCooledBeam)

    def setCooledBeamType(self, cooledBeamType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setCooledBeamType(self, cooledBeamType)

    def setSupplyAirVolumetricFlowRate(self, supplyAirVolumetricFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setSupplyAirVolumetricFlowRate(self, supplyAirVolumetricFlowRate)

    def resetSupplyAirVolumetricFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetSupplyAirVolumetricFlowRate(self)

    def autosizeSupplyAirVolumetricFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizeSupplyAirVolumetricFlowRate(self)

    def setMaximumTotalChilledWaterVolumetricFlowRate(self, maximumTotalChilledWaterVolumetricFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setMaximumTotalChilledWaterVolumetricFlowRate(self, maximumTotalChilledWaterVolumetricFlowRate)

    def resetMaximumTotalChilledWaterVolumetricFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetMaximumTotalChilledWaterVolumetricFlowRate(self)

    def autosizeMaximumTotalChilledWaterVolumetricFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizeMaximumTotalChilledWaterVolumetricFlowRate(self)

    def setNumberofBeams(self, numberofBeams: "int") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setNumberofBeams(self, numberofBeams)

    def resetNumberofBeams(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetNumberofBeams(self)

    def autosizeNumberofBeams(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizeNumberofBeams(self)

    def setBeamLength(self, beamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setBeamLength(self, beamLength)

    def resetBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetBeamLength(self)

    def autosizeBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizeBeamLength(self)

    def setDesignInletWaterTemperature(self, designInletWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setDesignInletWaterTemperature(self, designInletWaterTemperature)

    def resetDesignInletWaterTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetDesignInletWaterTemperature(self)

    def setDesignOutletWaterTemperature(self, designOutletWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setDesignOutletWaterTemperature(self, designOutletWaterTemperature)

    def resetDesignOutletWaterTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetDesignOutletWaterTemperature(self)

    def setCoefficientofInductionKin(self, coefficientofInductionKin: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_setCoefficientofInductionKin(self, coefficientofInductionKin)

    def resetCoefficientofInductionKin(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_resetCoefficientofInductionKin(self)

    def autocalculateCoefficientofInductionKin(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autocalculateCoefficientofInductionKin(self)

    def autosizedSupplyAirVolumetricFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizedSupplyAirVolumetricFlowRate(self)

    def autosizedMaximumTotalChilledWaterVolumetricFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizedMaximumTotalChilledWaterVolumetricFlowRate(self)

    def autosizedNumberofBeams(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizedNumberofBeams(self)

    def autosizedBeamLength(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizedBeamLength(self)

    def autosizedCoefficientofInductionKin(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_autosizedCoefficientofInductionKin(self)

# Register AirTerminalSingleDuctConstantVolumeCooledBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_swigregister(AirTerminalSingleDuctConstantVolumeCooledBeam)

def AirTerminalSingleDuctConstantVolumeCooledBeam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_iddObjectType()

def AirTerminalSingleDuctConstantVolumeCooledBeam_cooledBeamTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeCooledBeam_cooledBeamTypeValues()


def toAirTerminalSingleDuctConstantVolumeCooledBeam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctConstantVolumeCooledBeam(idfObject)

def getAirTerminalSingleDuctConstantVolumeCooledBeam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeCooledBeam(t_model, t_handle)

def getAirTerminalSingleDuctConstantVolumeCooledBeams(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeCooledBeams(t_model)

def getAirTerminalSingleDuctConstantVolumeCooledBeamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeCooledBeamByName(t_model, t_name)

def getAirTerminalSingleDuctConstantVolumeCooledBeamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeCooledBeam > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeCooledBeamsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctConstantVolumeCooledBeam(self) -> OptionalAirTerminalSingleDuctConstantVolumeCooledBeam:
    return toAirTerminalSingleDuctConstantVolumeCooledBeam(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctConstantVolumeCooledBeam = _to_AirTerminalSingleDuctConstantVolumeCooledBeam

def _getAirTerminalSingleDuctConstantVolumeCooledBeam(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctConstantVolumeCooledBeam:
    return getAirTerminalSingleDuctConstantVolumeCooledBeam(self, t_handle)
Model.getAirTerminalSingleDuctConstantVolumeCooledBeam = _getAirTerminalSingleDuctConstantVolumeCooledBeam

def _getAirTerminalSingleDuctConstantVolumeCooledBeam(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctConstantVolumeCooledBeam:
    return getAirTerminalSingleDuctConstantVolumeCooledBeam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctConstantVolumeCooledBeam = _getAirTerminalSingleDuctConstantVolumeCooledBeam

def _getAirTerminalSingleDuctConstantVolumeCooledBeams(self) -> AirTerminalSingleDuctConstantVolumeCooledBeamVector:
    return getAirTerminalSingleDuctConstantVolumeCooledBeams(self)
Model.getAirTerminalSingleDuctConstantVolumeCooledBeams = _getAirTerminalSingleDuctConstantVolumeCooledBeams

def _getAirTerminalSingleDuctConstantVolumeCooledBeamByName(self, t_name: str) -> OptionalAirTerminalSingleDuctConstantVolumeCooledBeam:
    return getAirTerminalSingleDuctConstantVolumeCooledBeamByName(self, t_name)
Model.getAirTerminalSingleDuctConstantVolumeCooledBeamByName = _getAirTerminalSingleDuctConstantVolumeCooledBeamByName

def _getAirTerminalSingleDuctConstantVolumeCooledBeamsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctConstantVolumeCooledBeamVector:
    return getAirTerminalSingleDuctConstantVolumeCooledBeamsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctConstantVolumeCooledBeamsByName = _getAirTerminalSingleDuctConstantVolumeCooledBeamsByName

class AirTerminalSingleDuctConstantVolumeFourPipeBeam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeFourPipeBeam(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeFourPipeBeam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_iddObjectType()

    def primaryAirAvailabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_primaryAirAvailabilitySchedule(self)

    def coolingAvailabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_coolingAvailabilitySchedule(self)

    def heatingAvailabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_heatingAvailabilitySchedule(self)

    def primaryAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_primaryAirInletNode(self)

    def primaryAirOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_primaryAirOutletNode(self)

    def coolingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_coolingCoil(self)

    def heatingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_heatingCoil(self)

    def designPrimaryAirVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_designPrimaryAirVolumeFlowRate(self)

    def isDesignPrimaryAirVolumeFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_isDesignPrimaryAirVolumeFlowRateAutosized(self)

    def designChilledWaterVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_designChilledWaterVolumeFlowRate(self)

    def isDesignChilledWaterVolumeFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_isDesignChilledWaterVolumeFlowRateAutosized(self)

    def designHotWaterVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_designHotWaterVolumeFlowRate(self)

    def isDesignHotWaterVolumeFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_isDesignHotWaterVolumeFlowRateAutosized(self)

    def zoneTotalBeamLength(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_zoneTotalBeamLength(self)

    def isZoneTotalBeamLengthAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_isZoneTotalBeamLengthAutosized(self)

    def ratedPrimaryAirFlowRateperBeamLength(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_ratedPrimaryAirFlowRateperBeamLength(self)

    def isRatedPrimaryAirFlowRateperBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_isRatedPrimaryAirFlowRateperBeamLengthDefaulted(self)

    def setPrimaryAirAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setPrimaryAirAvailabilitySchedule(self, schedule)

    def setCoolingAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setCoolingAvailabilitySchedule(self, schedule)

    def setHeatingAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setHeatingAvailabilitySchedule(self, schedule)

    def setCoolingCoil(self, coilCoolingFourPipeBeam: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setCoolingCoil(self, coilCoolingFourPipeBeam)

    def setHeatingCoil(self, coilHeatingFourPipeBeam: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setHeatingCoil(self, coilHeatingFourPipeBeam)

    def setDesignPrimaryAirVolumeFlowRate(self, designPrimaryAirVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setDesignPrimaryAirVolumeFlowRate(self, designPrimaryAirVolumeFlowRate)

    def autosizeDesignPrimaryAirVolumeFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizeDesignPrimaryAirVolumeFlowRate(self)

    def setDesignChilledWaterVolumeFlowRate(self, designChilledWaterVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setDesignChilledWaterVolumeFlowRate(self, designChilledWaterVolumeFlowRate)

    def autosizeDesignChilledWaterVolumeFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizeDesignChilledWaterVolumeFlowRate(self)

    def setDesignHotWaterVolumeFlowRate(self, designHotWaterVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setDesignHotWaterVolumeFlowRate(self, designHotWaterVolumeFlowRate)

    def autosizeDesignHotWaterVolumeFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizeDesignHotWaterVolumeFlowRate(self)

    def setZoneTotalBeamLength(self, zoneTotalBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setZoneTotalBeamLength(self, zoneTotalBeamLength)

    def autosizeZoneTotalBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizeZoneTotalBeamLength(self)

    def setRatedPrimaryAirFlowRateperBeamLength(self, ratedPrimaryAirFlowRateperBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_setRatedPrimaryAirFlowRateperBeamLength(self, ratedPrimaryAirFlowRateperBeamLength)

    def resetRatedPrimaryAirFlowRateperBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_resetRatedPrimaryAirFlowRateperBeamLength(self)

    def chilledWaterPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_chilledWaterPlantLoop(self)

    def chilledWaterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_chilledWaterInletNode(self)

    def chilledWaterOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_chilledWaterOutletNode(self)

    def hotWaterPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_hotWaterPlantLoop(self)

    def hotWaterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_hotWaterInletNode(self)

    def hotWaterOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_hotWaterOutletNode(self)

    def autosizedDesignPrimaryAirVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizedDesignPrimaryAirVolumeFlowRate(self)

    def autosizedDesignChilledWaterVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizedDesignChilledWaterVolumeFlowRate(self)

    def autosizedDesignHotWaterVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizedDesignHotWaterVolumeFlowRate(self)

    def autosizedZoneTotalBeamLength(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_autosizedZoneTotalBeamLength(self)

# Register AirTerminalSingleDuctConstantVolumeFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_swigregister(AirTerminalSingleDuctConstantVolumeFourPipeBeam)

def AirTerminalSingleDuctConstantVolumeFourPipeBeam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeBeam_iddObjectType()


def toAirTerminalSingleDuctConstantVolumeFourPipeBeam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctConstantVolumeFourPipeBeam(idfObject)

def getAirTerminalSingleDuctConstantVolumeFourPipeBeam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeBeam(t_model, t_handle)

def getAirTerminalSingleDuctConstantVolumeFourPipeBeams(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeBeams(t_model)

def getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName(t_model, t_name)

def getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctConstantVolumeFourPipeBeam(self) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam:
    return toAirTerminalSingleDuctConstantVolumeFourPipeBeam(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctConstantVolumeFourPipeBeam = _to_AirTerminalSingleDuctConstantVolumeFourPipeBeam

def _getAirTerminalSingleDuctConstantVolumeFourPipeBeam(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam:
    return getAirTerminalSingleDuctConstantVolumeFourPipeBeam(self, t_handle)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeBeam = _getAirTerminalSingleDuctConstantVolumeFourPipeBeam

def _getAirTerminalSingleDuctConstantVolumeFourPipeBeam(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam:
    return getAirTerminalSingleDuctConstantVolumeFourPipeBeam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctConstantVolumeFourPipeBeam = _getAirTerminalSingleDuctConstantVolumeFourPipeBeam

def _getAirTerminalSingleDuctConstantVolumeFourPipeBeams(self) -> AirTerminalSingleDuctConstantVolumeFourPipeBeamVector:
    return getAirTerminalSingleDuctConstantVolumeFourPipeBeams(self)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeBeams = _getAirTerminalSingleDuctConstantVolumeFourPipeBeams

def _getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName(self, t_name: str) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeBeam:
    return getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName(self, t_name)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName = _getAirTerminalSingleDuctConstantVolumeFourPipeBeamByName

def _getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctConstantVolumeFourPipeBeamVector:
    return getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName = _getAirTerminalSingleDuctConstantVolumeFourPipeBeamsByName

class AirTerminalSingleDuctConstantVolumeFourPipeInduction(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", heatingCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeFourPipeInduction(model, heatingCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeFourPipeInduction

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_availabilitySchedule(self)

    def maximumTotalAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_maximumTotalAirFlowRate(self)

    def isMaximumTotalAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isMaximumTotalAirFlowRateAutosized(self)

    def inductionRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_inductionRatio(self)

    def isInductionRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isInductionRatioDefaulted(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_heatingCoil(self)

    def maximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_maximumHotWaterFlowRate(self)

    def isMaximumHotWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isMaximumHotWaterFlowRateAutosized(self)

    def minimumHotWaterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_minimumHotWaterFlowRate(self)

    def isMinimumHotWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isMinimumHotWaterFlowRateDefaulted(self)

    def heatingConvergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isHeatingConvergenceToleranceDefaulted(self)

    def coolingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_coolingCoil(self)

    def maximumColdWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_maximumColdWaterFlowRate(self)

    def isMaximumColdWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isMaximumColdWaterFlowRateAutosized(self)

    def minimumColdWaterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_minimumColdWaterFlowRate(self)

    def isMinimumColdWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isMinimumColdWaterFlowRateDefaulted(self)

    def coolingConvergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_coolingConvergenceTolerance(self)

    def isCoolingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_isCoolingConvergenceToleranceDefaulted(self)

    def inducedAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_inducedAirInletNode(self)

    def inducedAirInletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_inducedAirInletPort(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetAvailabilitySchedule(self)

    def setMaximumTotalAirFlowRate(self, maximumTotalAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setMaximumTotalAirFlowRate(self, maximumTotalAirFlowRate)

    def autosizeMaximumTotalAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizeMaximumTotalAirFlowRate(self)

    def setInductionRatio(self, inductionRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setInductionRatio(self, inductionRatio)

    def resetInductionRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetInductionRatio(self)

    def setHeatingCoil(self, heatingCoil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setHeatingCoil(self, heatingCoil)

    def setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate)

    def resetMaximumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetMaximumHotWaterFlowRate(self)

    def autosizeMaximumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizeMaximumHotWaterFlowRate(self)

    def setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate)

    def resetMinimumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetMinimumHotWaterFlowRate(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetHeatingConvergenceTolerance(self)

    def setCoolingCoil(self, coolingCoil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetCoolingCoil(self)

    def setMaximumColdWaterFlowRate(self, maximumColdWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setMaximumColdWaterFlowRate(self, maximumColdWaterFlowRate)

    def resetMaximumColdWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetMaximumColdWaterFlowRate(self)

    def autosizeMaximumColdWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizeMaximumColdWaterFlowRate(self)

    def setMinimumColdWaterFlowRate(self, minimumColdWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setMinimumColdWaterFlowRate(self, minimumColdWaterFlowRate)

    def resetMinimumColdWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetMinimumColdWaterFlowRate(self)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def resetCoolingConvergenceTolerance(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_resetCoolingConvergenceTolerance(self)

    def autosizedMaximumTotalAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizedMaximumTotalAirFlowRate(self)

    def autosizedMaximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizedMaximumHotWaterFlowRate(self)

    def autosizedMaximumColdWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_autosizedMaximumColdWaterFlowRate(self)

# Register AirTerminalSingleDuctConstantVolumeFourPipeInduction in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_swigregister(AirTerminalSingleDuctConstantVolumeFourPipeInduction)

def AirTerminalSingleDuctConstantVolumeFourPipeInduction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeFourPipeInduction_iddObjectType()


def toAirTerminalSingleDuctConstantVolumeFourPipeInduction(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctConstantVolumeFourPipeInduction(idfObject)

def getAirTerminalSingleDuctConstantVolumeFourPipeInduction(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeInduction(t_model, t_handle)

def getAirTerminalSingleDuctConstantVolumeFourPipeInductions(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeInductions(t_model)

def getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName(t_model, t_name)

def getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeInduction > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctConstantVolumeFourPipeInduction(self) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction:
    return toAirTerminalSingleDuctConstantVolumeFourPipeInduction(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctConstantVolumeFourPipeInduction = _to_AirTerminalSingleDuctConstantVolumeFourPipeInduction

def _getAirTerminalSingleDuctConstantVolumeFourPipeInduction(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction:
    return getAirTerminalSingleDuctConstantVolumeFourPipeInduction(self, t_handle)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeInduction = _getAirTerminalSingleDuctConstantVolumeFourPipeInduction

def _getAirTerminalSingleDuctConstantVolumeFourPipeInduction(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction:
    return getAirTerminalSingleDuctConstantVolumeFourPipeInduction(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctConstantVolumeFourPipeInduction = _getAirTerminalSingleDuctConstantVolumeFourPipeInduction

def _getAirTerminalSingleDuctConstantVolumeFourPipeInductions(self) -> AirTerminalSingleDuctConstantVolumeFourPipeInductionVector:
    return getAirTerminalSingleDuctConstantVolumeFourPipeInductions(self)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeInductions = _getAirTerminalSingleDuctConstantVolumeFourPipeInductions

def _getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName(self, t_name: str) -> OptionalAirTerminalSingleDuctConstantVolumeFourPipeInduction:
    return getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName(self, t_name)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName = _getAirTerminalSingleDuctConstantVolumeFourPipeInductionByName

def _getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctConstantVolumeFourPipeInductionVector:
    return getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName = _getAirTerminalSingleDuctConstantVolumeFourPipeInductionsByName

class AirTerminalSingleDuctConstantVolumeReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", availabilitySchedule: "Schedule", coil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeReheat(model, availabilitySchedule, coil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_isMaximumAirFlowRateAutosized(self)

    def reheatCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_reheatCoil(self)

    def maximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_maximumHotWaterorSteamFlowRate(self)

    def isMaximumHotWaterorSteamFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_isMaximumHotWaterorSteamFlowRateAutosized(self)

    def minimumHotWaterorSteamFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_minimumHotWaterorSteamFlowRate(self)

    def isMinimumHotWaterorSteamFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_isMinimumHotWaterorSteamFlowRateDefaulted(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_convergenceTolerance(self)

    def isConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_isConvergenceToleranceDefaulted(self)

    def maximumReheatAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_maximumReheatAirTemperature(self)

    def isMaximumReheatAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_isMaximumReheatAirTemperatureDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setAvailabilitySchedule(self, schedule)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def resetMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetMaximumAirFlowRate(self)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_autosizeMaximumAirFlowRate(self)

    def setReheatCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setReheatCoil(self, coil)

    def resetReheatCoil(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetReheatCoil(self)

    def setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate)

    def resetMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetMaximumHotWaterorSteamFlowRate(self)

    def autosizeMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_autosizeMaximumHotWaterorSteamFlowRate(self)

    def setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate)

    def resetMinimumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetMinimumHotWaterorSteamFlowRate(self)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setConvergenceTolerance(self, convergenceTolerance)

    def resetConvergenceTolerance(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetConvergenceTolerance(self)

    def setMaximumReheatAirTemperature(self, maximumReheatAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_setMaximumReheatAirTemperature(self, maximumReheatAirTemperature)

    def resetMaximumReheatAirTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_resetMaximumReheatAirTemperature(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_airflowNetworkEquivalentDuct(self)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_autosizedMaximumAirFlowRate(self)

    def autosizedMaximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_autosizedMaximumHotWaterorSteamFlowRate(self)

# Register AirTerminalSingleDuctConstantVolumeReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_swigregister(AirTerminalSingleDuctConstantVolumeReheat)

def AirTerminalSingleDuctConstantVolumeReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeReheat_iddObjectType()


def toAirTerminalSingleDuctConstantVolumeReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctConstantVolumeReheat(idfObject)

def getAirTerminalSingleDuctConstantVolumeReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeReheat(t_model, t_handle)

def getAirTerminalSingleDuctConstantVolumeReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeReheats(t_model)

def getAirTerminalSingleDuctConstantVolumeReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeReheatByName(t_model, t_name)

def getAirTerminalSingleDuctConstantVolumeReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctConstantVolumeReheat(self) -> OptionalAirTerminalSingleDuctConstantVolumeReheat:
    return toAirTerminalSingleDuctConstantVolumeReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctConstantVolumeReheat = _to_AirTerminalSingleDuctConstantVolumeReheat

def _getAirTerminalSingleDuctConstantVolumeReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctConstantVolumeReheat:
    return getAirTerminalSingleDuctConstantVolumeReheat(self, t_handle)
Model.getAirTerminalSingleDuctConstantVolumeReheat = _getAirTerminalSingleDuctConstantVolumeReheat

def _getAirTerminalSingleDuctConstantVolumeReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctConstantVolumeReheat:
    return getAirTerminalSingleDuctConstantVolumeReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctConstantVolumeReheat = _getAirTerminalSingleDuctConstantVolumeReheat

def _getAirTerminalSingleDuctConstantVolumeReheats(self) -> AirTerminalSingleDuctConstantVolumeReheatVector:
    return getAirTerminalSingleDuctConstantVolumeReheats(self)
Model.getAirTerminalSingleDuctConstantVolumeReheats = _getAirTerminalSingleDuctConstantVolumeReheats

def _getAirTerminalSingleDuctConstantVolumeReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctConstantVolumeReheat:
    return getAirTerminalSingleDuctConstantVolumeReheatByName(self, t_name)
Model.getAirTerminalSingleDuctConstantVolumeReheatByName = _getAirTerminalSingleDuctConstantVolumeReheatByName

def _getAirTerminalSingleDuctConstantVolumeReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctConstantVolumeReheatVector:
    return getAirTerminalSingleDuctConstantVolumeReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctConstantVolumeReheatsByName = _getAirTerminalSingleDuctConstantVolumeReheatsByName

class AirTerminalSingleDuctInletSideMixer(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctInletSideMixer(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctInletSideMixer

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_iddObjectType()

    def secondaryAirInletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_secondaryAirInletPort(self)

    def secondaryAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_secondaryAirInletNode(self)

# Register AirTerminalSingleDuctInletSideMixer in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_swigregister(AirTerminalSingleDuctInletSideMixer)

def AirTerminalSingleDuctInletSideMixer_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctInletSideMixer_iddObjectType()


def toAirTerminalSingleDuctInletSideMixer(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctInletSideMixer >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctInletSideMixer(idfObject)

def getAirTerminalSingleDuctInletSideMixer(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctInletSideMixer >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctInletSideMixer(t_model, t_handle)

def getAirTerminalSingleDuctInletSideMixers(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer,std::allocator< openstudio::model::AirTerminalSingleDuctInletSideMixer > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctInletSideMixers(t_model)

def getAirTerminalSingleDuctInletSideMixerByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctInletSideMixer >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctInletSideMixerByName(t_model, t_name)

def getAirTerminalSingleDuctInletSideMixersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctInletSideMixer,std::allocator< openstudio::model::AirTerminalSingleDuctInletSideMixer > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctInletSideMixersByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctInletSideMixer(self) -> OptionalAirTerminalSingleDuctInletSideMixer:
    return toAirTerminalSingleDuctInletSideMixer(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctInletSideMixer = _to_AirTerminalSingleDuctInletSideMixer

def _getAirTerminalSingleDuctInletSideMixer(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctInletSideMixer:
    return getAirTerminalSingleDuctInletSideMixer(self, t_handle)
Model.getAirTerminalSingleDuctInletSideMixer = _getAirTerminalSingleDuctInletSideMixer

def _getAirTerminalSingleDuctInletSideMixer(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctInletSideMixer:
    return getAirTerminalSingleDuctInletSideMixer(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctInletSideMixer = _getAirTerminalSingleDuctInletSideMixer

def _getAirTerminalSingleDuctInletSideMixers(self) -> AirTerminalSingleDuctInletSideMixerVector:
    return getAirTerminalSingleDuctInletSideMixers(self)
Model.getAirTerminalSingleDuctInletSideMixers = _getAirTerminalSingleDuctInletSideMixers

def _getAirTerminalSingleDuctInletSideMixerByName(self, t_name: str) -> OptionalAirTerminalSingleDuctInletSideMixer:
    return getAirTerminalSingleDuctInletSideMixerByName(self, t_name)
Model.getAirTerminalSingleDuctInletSideMixerByName = _getAirTerminalSingleDuctInletSideMixerByName

def _getAirTerminalSingleDuctInletSideMixersByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctInletSideMixerVector:
    return getAirTerminalSingleDuctInletSideMixersByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctInletSideMixersByName = _getAirTerminalSingleDuctInletSideMixersByName

class AirTerminalSingleDuctParallelPIUReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", schedule: "Schedule", fan: "HVACComponent", reheatCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctParallelPIUReheat(model, schedule, fan, reheatCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctParallelPIUReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_availabilitySchedule(self)

    def maximumPrimaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_maximumPrimaryAirFlowRate(self)

    def isMaximumPrimaryAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isMaximumPrimaryAirFlowRateAutosized(self)

    def maximumSecondaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_maximumSecondaryAirFlowRate(self)

    def isMaximumSecondaryAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isMaximumSecondaryAirFlowRateAutosized(self)

    def minimumPrimaryAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_minimumPrimaryAirFlowFraction(self)

    def isMinimumPrimaryAirFlowFractionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isMinimumPrimaryAirFlowFractionAutosized(self)

    def fanOnFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_fanOnFlowFraction(self)

    def isFanOnFlowFractionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isFanOnFlowFractionAutosized(self)

    def secondaryAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_secondaryAirInletNode(self)

    def secondaryAirInletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_secondaryAirInletPort(self)

    def fan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_fan(self)

    def reheatCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_reheatCoil(self)

    def maximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_maximumHotWaterorSteamFlowRate(self)

    def isMaximumHotWaterorSteamFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isMaximumHotWaterorSteamFlowRateAutosized(self)

    def minimumHotWaterorSteamFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_minimumHotWaterorSteamFlowRate(self)

    def isMinimumHotWaterorSteamFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isMinimumHotWaterorSteamFlowRateDefaulted(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_convergenceTolerance(self)

    def isConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_isConvergenceToleranceDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setAvailabilitySchedule(self, schedule)

    def setMaximumPrimaryAirFlowRate(self, maximumPrimaryAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setMaximumPrimaryAirFlowRate(self, maximumPrimaryAirFlowRate)

    def autosizeMaximumPrimaryAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizeMaximumPrimaryAirFlowRate(self)

    def setMaximumSecondaryAirFlowRate(self, maximumSecondaryAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setMaximumSecondaryAirFlowRate(self, maximumSecondaryAirFlowRate)

    def autosizeMaximumSecondaryAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizeMaximumSecondaryAirFlowRate(self)

    def setMinimumPrimaryAirFlowFraction(self, minimumPrimaryAirFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setMinimumPrimaryAirFlowFraction(self, minimumPrimaryAirFlowFraction)

    def autosizeMinimumPrimaryAirFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizeMinimumPrimaryAirFlowFraction(self)

    def setFanOnFlowFraction(self, fanOnFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setFanOnFlowFraction(self, fanOnFlowFraction)

    def autosizeFanOnFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizeFanOnFlowFraction(self)

    def setFan(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setFan(self, hvacComponent)

    def setReheatCoil(self, hvacComponent: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setReheatCoil(self, hvacComponent)

    def setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate)

    def resetMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_resetMaximumHotWaterorSteamFlowRate(self)

    def autosizeMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizeMaximumHotWaterorSteamFlowRate(self)

    def setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate)

    def resetMinimumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_resetMinimumHotWaterorSteamFlowRate(self)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_setConvergenceTolerance(self, convergenceTolerance)

    def resetConvergenceTolerance(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_resetConvergenceTolerance(self)

    def autosizedMaximumPrimaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizedMaximumPrimaryAirFlowRate(self)

    def autosizedMaximumSecondaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizedMaximumSecondaryAirFlowRate(self)

    def autosizedMinimumPrimaryAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizedMinimumPrimaryAirFlowFraction(self)

    def autosizedFanOnFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizedFanOnFlowFraction(self)

    def autosizedMaximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_autosizedMaximumHotWaterorSteamFlowRate(self)

# Register AirTerminalSingleDuctParallelPIUReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_swigregister(AirTerminalSingleDuctParallelPIUReheat)

def AirTerminalSingleDuctParallelPIUReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctParallelPIUReheat_iddObjectType()


def toAirTerminalSingleDuctParallelPIUReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctParallelPIUReheat(idfObject)

def getAirTerminalSingleDuctParallelPIUReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctParallelPIUReheat(t_model, t_handle)

def getAirTerminalSingleDuctParallelPIUReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctParallelPIUReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctParallelPIUReheats(t_model)

def getAirTerminalSingleDuctParallelPIUReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctParallelPIUReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctParallelPIUReheatByName(t_model, t_name)

def getAirTerminalSingleDuctParallelPIUReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctParallelPIUReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctParallelPIUReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctParallelPIUReheat(self) -> OptionalAirTerminalSingleDuctParallelPIUReheat:
    return toAirTerminalSingleDuctParallelPIUReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctParallelPIUReheat = _to_AirTerminalSingleDuctParallelPIUReheat

def _getAirTerminalSingleDuctParallelPIUReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctParallelPIUReheat:
    return getAirTerminalSingleDuctParallelPIUReheat(self, t_handle)
Model.getAirTerminalSingleDuctParallelPIUReheat = _getAirTerminalSingleDuctParallelPIUReheat

def _getAirTerminalSingleDuctParallelPIUReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctParallelPIUReheat:
    return getAirTerminalSingleDuctParallelPIUReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctParallelPIUReheat = _getAirTerminalSingleDuctParallelPIUReheat

def _getAirTerminalSingleDuctParallelPIUReheats(self) -> AirTerminalSingleDuctParallelPIUReheatVector:
    return getAirTerminalSingleDuctParallelPIUReheats(self)
Model.getAirTerminalSingleDuctParallelPIUReheats = _getAirTerminalSingleDuctParallelPIUReheats

def _getAirTerminalSingleDuctParallelPIUReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctParallelPIUReheat:
    return getAirTerminalSingleDuctParallelPIUReheatByName(self, t_name)
Model.getAirTerminalSingleDuctParallelPIUReheatByName = _getAirTerminalSingleDuctParallelPIUReheatByName

def _getAirTerminalSingleDuctParallelPIUReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctParallelPIUReheatVector:
    return getAirTerminalSingleDuctParallelPIUReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctParallelPIUReheatsByName = _getAirTerminalSingleDuctParallelPIUReheatsByName

class AirTerminalSingleDuctSeriesPIUReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", fan: "HVACComponent", reheatCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctSeriesPIUReheat(model, fan, reheatCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctSeriesPIUReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_isMaximumAirFlowRateAutosized(self)

    def maximumPrimaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_maximumPrimaryAirFlowRate(self)

    def isMaximumPrimaryAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_isMaximumPrimaryAirFlowRateAutosized(self)

    def minimumPrimaryAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_minimumPrimaryAirFlowFraction(self)

    def isMinimumPrimaryAirFlowFractionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_isMinimumPrimaryAirFlowFractionAutosized(self)

    def fan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_fan(self)

    def reheatCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_reheatCoil(self)

    def maximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_maximumHotWaterorSteamFlowRate(self)

    def isMaximumHotWaterorSteamFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_isMaximumHotWaterorSteamFlowRateAutosized(self)

    def minimumHotWaterorSteamFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_minimumHotWaterorSteamFlowRate(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_convergenceTolerance(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_resetAvailabilitySchedule(self)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizeMaximumAirFlowRate(self)

    def setMaximumPrimaryAirFlowRate(self, maximumPrimaryAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setMaximumPrimaryAirFlowRate(self, maximumPrimaryAirFlowRate)

    def autosizeMaximumPrimaryAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizeMaximumPrimaryAirFlowRate(self)

    def setMinimumPrimaryAirFlowFraction(self, minimumPrimaryAirFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setMinimumPrimaryAirFlowFraction(self, minimumPrimaryAirFlowFraction)

    def autosizeMinimumPrimaryAirFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizeMinimumPrimaryAirFlowFraction(self)

    def setFan(self, fan: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setFan(self, fan)

    def setReheatCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setReheatCoil(self, coil)

    def setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate)

    def resetMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_resetMaximumHotWaterorSteamFlowRate(self)

    def autosizeMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizeMaximumHotWaterorSteamFlowRate(self)

    def setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_setConvergenceTolerance(self, convergenceTolerance)

    def secondaryAirInletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_secondaryAirInletPort(self)

    def secondaryAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_secondaryAirInletNode(self)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizedMaximumAirFlowRate(self)

    def autosizedMaximumPrimaryAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizedMaximumPrimaryAirFlowRate(self)

    def autosizedMinimumPrimaryAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizedMinimumPrimaryAirFlowFraction(self)

    def autosizedMaximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_autosizedMaximumHotWaterorSteamFlowRate(self)

# Register AirTerminalSingleDuctSeriesPIUReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_swigregister(AirTerminalSingleDuctSeriesPIUReheat)

def AirTerminalSingleDuctSeriesPIUReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctSeriesPIUReheat_iddObjectType()


def toAirTerminalSingleDuctSeriesPIUReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctSeriesPIUReheat(idfObject)

def getAirTerminalSingleDuctSeriesPIUReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctSeriesPIUReheat(t_model, t_handle)

def getAirTerminalSingleDuctSeriesPIUReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctSeriesPIUReheats(t_model)

def getAirTerminalSingleDuctSeriesPIUReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctSeriesPIUReheatByName(t_model, t_name)

def getAirTerminalSingleDuctSeriesPIUReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctSeriesPIUReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctSeriesPIUReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctSeriesPIUReheat(self) -> OptionalAirTerminalSingleDuctSeriesPIUReheat:
    return toAirTerminalSingleDuctSeriesPIUReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctSeriesPIUReheat = _to_AirTerminalSingleDuctSeriesPIUReheat

def _getAirTerminalSingleDuctSeriesPIUReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctSeriesPIUReheat:
    return getAirTerminalSingleDuctSeriesPIUReheat(self, t_handle)
Model.getAirTerminalSingleDuctSeriesPIUReheat = _getAirTerminalSingleDuctSeriesPIUReheat

def _getAirTerminalSingleDuctSeriesPIUReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctSeriesPIUReheat:
    return getAirTerminalSingleDuctSeriesPIUReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctSeriesPIUReheat = _getAirTerminalSingleDuctSeriesPIUReheat

def _getAirTerminalSingleDuctSeriesPIUReheats(self) -> AirTerminalSingleDuctSeriesPIUReheatVector:
    return getAirTerminalSingleDuctSeriesPIUReheats(self)
Model.getAirTerminalSingleDuctSeriesPIUReheats = _getAirTerminalSingleDuctSeriesPIUReheats

def _getAirTerminalSingleDuctSeriesPIUReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctSeriesPIUReheat:
    return getAirTerminalSingleDuctSeriesPIUReheatByName(self, t_name)
Model.getAirTerminalSingleDuctSeriesPIUReheatByName = _getAirTerminalSingleDuctSeriesPIUReheatByName

def _getAirTerminalSingleDuctSeriesPIUReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctSeriesPIUReheatVector:
    return getAirTerminalSingleDuctSeriesPIUReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctSeriesPIUReheatsByName = _getAirTerminalSingleDuctSeriesPIUReheatsByName

class AirTerminalSingleDuctConstantVolumeNoReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", availabilitySchedule: "Schedule"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctConstantVolumeNoReheat(model, availabilitySchedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctConstantVolumeNoReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_setAvailabilitySchedule(self, schedule)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_isMaximumAirFlowRateAutosized(self)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_autosizeMaximumAirFlowRate(self)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_autosizedMaximumAirFlowRate(self)

# Register AirTerminalSingleDuctConstantVolumeNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_swigregister(AirTerminalSingleDuctConstantVolumeNoReheat)

def AirTerminalSingleDuctConstantVolumeNoReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctConstantVolumeNoReheat_iddObjectType()


def toAirTerminalSingleDuctConstantVolumeNoReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctConstantVolumeNoReheat(idfObject)

def getAirTerminalSingleDuctConstantVolumeNoReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeNoReheat(t_model, t_handle)

def getAirTerminalSingleDuctConstantVolumeNoReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeNoReheats(t_model)

def getAirTerminalSingleDuctConstantVolumeNoReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeNoReheatByName(t_model, t_name)

def getAirTerminalSingleDuctConstantVolumeNoReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctConstantVolumeNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctConstantVolumeNoReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctConstantVolumeNoReheat(self) -> OptionalAirTerminalSingleDuctConstantVolumeNoReheat:
    return toAirTerminalSingleDuctConstantVolumeNoReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctConstantVolumeNoReheat = _to_AirTerminalSingleDuctConstantVolumeNoReheat

def _getAirTerminalSingleDuctConstantVolumeNoReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctConstantVolumeNoReheat:
    return getAirTerminalSingleDuctConstantVolumeNoReheat(self, t_handle)
Model.getAirTerminalSingleDuctConstantVolumeNoReheat = _getAirTerminalSingleDuctConstantVolumeNoReheat

def _getAirTerminalSingleDuctConstantVolumeNoReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctConstantVolumeNoReheat:
    return getAirTerminalSingleDuctConstantVolumeNoReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctConstantVolumeNoReheat = _getAirTerminalSingleDuctConstantVolumeNoReheat

def _getAirTerminalSingleDuctConstantVolumeNoReheats(self) -> AirTerminalSingleDuctConstantVolumeNoReheatVector:
    return getAirTerminalSingleDuctConstantVolumeNoReheats(self)
Model.getAirTerminalSingleDuctConstantVolumeNoReheats = _getAirTerminalSingleDuctConstantVolumeNoReheats

def _getAirTerminalSingleDuctConstantVolumeNoReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctConstantVolumeNoReheat:
    return getAirTerminalSingleDuctConstantVolumeNoReheatByName(self, t_name)
Model.getAirTerminalSingleDuctConstantVolumeNoReheatByName = _getAirTerminalSingleDuctConstantVolumeNoReheatByName

def _getAirTerminalSingleDuctConstantVolumeNoReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctConstantVolumeNoReheatVector:
    return getAirTerminalSingleDuctConstantVolumeNoReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctConstantVolumeNoReheatsByName = _getAirTerminalSingleDuctConstantVolumeNoReheatsByName

class AirTerminalSingleDuctVAVHeatAndCoolNoReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVHeatAndCoolNoReheat(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVHeatAndCoolNoReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_isMaximumAirFlowRateAutosized(self)

    def zoneMinimumAirFlowFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_zoneMinimumAirFlowFraction(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_resetAvailabilitySchedule(self)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_autosizeMaximumAirFlowRate(self)

    def setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_autosizedMaximumAirFlowRate(self)

# Register AirTerminalSingleDuctVAVHeatAndCoolNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_swigregister(AirTerminalSingleDuctVAVHeatAndCoolNoReheat)

def AirTerminalSingleDuctVAVHeatAndCoolNoReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolNoReheat_iddObjectType()


def toAirTerminalSingleDuctVAVHeatAndCoolNoReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctVAVHeatAndCoolNoReheat(idfObject)

def getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(t_model, t_handle)

def getAirTerminalSingleDuctVAVHeatAndCoolNoReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolNoReheats(t_model)

def getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName(t_model, t_name)

def getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctVAVHeatAndCoolNoReheat(self) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat:
    return toAirTerminalSingleDuctVAVHeatAndCoolNoReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctVAVHeatAndCoolNoReheat = _to_AirTerminalSingleDuctVAVHeatAndCoolNoReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(self, t_handle)
Model.getAirTerminalSingleDuctVAVHeatAndCoolNoReheat = _getAirTerminalSingleDuctVAVHeatAndCoolNoReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolNoReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctVAVHeatAndCoolNoReheat = _getAirTerminalSingleDuctVAVHeatAndCoolNoReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolNoReheats(self) -> AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector:
    return getAirTerminalSingleDuctVAVHeatAndCoolNoReheats(self)
Model.getAirTerminalSingleDuctVAVHeatAndCoolNoReheats = _getAirTerminalSingleDuctVAVHeatAndCoolNoReheats

def _getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolNoReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName(self, t_name)
Model.getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName = _getAirTerminalSingleDuctVAVHeatAndCoolNoReheatByName

def _getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctVAVHeatAndCoolNoReheatVector:
    return getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName = _getAirTerminalSingleDuctVAVHeatAndCoolNoReheatsByName

class AirTerminalSingleDuctVAVHeatAndCoolReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", reheatCoil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVHeatAndCoolReheat(model, reheatCoil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVHeatAndCoolReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_isMaximumAirFlowRateAutosized(self)

    def zoneMinimumAirFlowFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_zoneMinimumAirFlowFraction(self)

    def reheatCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_reheatCoil(self)

    def maximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_maximumHotWaterorSteamFlowRate(self)

    def isMaximumHotWaterorSteamFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_isMaximumHotWaterorSteamFlowRateAutosized(self)

    def minimumHotWaterorSteamFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_minimumHotWaterorSteamFlowRate(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_convergenceTolerance(self)

    def maximumReheatAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_maximumReheatAirTemperature(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_resetAvailabilitySchedule(self)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_autosizeMaximumAirFlowRate(self)

    def setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction)

    def setReheatCoil(self, heatingCoilName: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setReheatCoil(self, heatingCoilName)

    def setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setMaximumHotWaterorSteamFlowRate(self, maximumHotWaterorSteamFlowRate)

    def autosizeMaximumHotWaterorSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_autosizeMaximumHotWaterorSteamFlowRate(self)

    def setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setMinimumHotWaterorSteamFlowRate(self, minimumHotWaterorSteamFlowRate)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setConvergenceTolerance(self, convergenceTolerance)

    def setMaximumReheatAirTemperature(self, maximumReheatAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_setMaximumReheatAirTemperature(self, maximumReheatAirTemperature)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_autosizedMaximumAirFlowRate(self)

    def autosizedMaximumHotWaterorSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_autosizedMaximumHotWaterorSteamFlowRate(self)

# Register AirTerminalSingleDuctVAVHeatAndCoolReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_swigregister(AirTerminalSingleDuctVAVHeatAndCoolReheat)

def AirTerminalSingleDuctVAVHeatAndCoolReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVHeatAndCoolReheat_iddObjectType()


def toAirTerminalSingleDuctVAVHeatAndCoolReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctVAVHeatAndCoolReheat(idfObject)

def getAirTerminalSingleDuctVAVHeatAndCoolReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolReheat(t_model, t_handle)

def getAirTerminalSingleDuctVAVHeatAndCoolReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolReheats(t_model)

def getAirTerminalSingleDuctVAVHeatAndCoolReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolReheatByName(t_model, t_name)

def getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVHeatAndCoolReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctVAVHeatAndCoolReheat(self) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat:
    return toAirTerminalSingleDuctVAVHeatAndCoolReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctVAVHeatAndCoolReheat = _to_AirTerminalSingleDuctVAVHeatAndCoolReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolReheat(self, t_handle)
Model.getAirTerminalSingleDuctVAVHeatAndCoolReheat = _getAirTerminalSingleDuctVAVHeatAndCoolReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctVAVHeatAndCoolReheat = _getAirTerminalSingleDuctVAVHeatAndCoolReheat

def _getAirTerminalSingleDuctVAVHeatAndCoolReheats(self) -> AirTerminalSingleDuctVAVHeatAndCoolReheatVector:
    return getAirTerminalSingleDuctVAVHeatAndCoolReheats(self)
Model.getAirTerminalSingleDuctVAVHeatAndCoolReheats = _getAirTerminalSingleDuctVAVHeatAndCoolReheats

def _getAirTerminalSingleDuctVAVHeatAndCoolReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctVAVHeatAndCoolReheat:
    return getAirTerminalSingleDuctVAVHeatAndCoolReheatByName(self, t_name)
Model.getAirTerminalSingleDuctVAVHeatAndCoolReheatByName = _getAirTerminalSingleDuctVAVHeatAndCoolReheatByName

def _getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctVAVHeatAndCoolReheatVector:
    return getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName = _getAirTerminalSingleDuctVAVHeatAndCoolReheatsByName

class AirTerminalSingleDuctVAVNoReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", schedule: "Schedule"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVNoReheat(model, schedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVNoReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_iddObjectType()

    @staticmethod
    def zoneMinimumAirFlowInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_zoneMinimumAirFlowInputMethodValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_availabilitySchedule(self)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_maximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_isMaximumAirFlowRateAutosized(self)

    def zoneMinimumAirFlowInputMethod(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_zoneMinimumAirFlowInputMethod(self)

    def constantMinimumAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_constantMinimumAirFlowFraction(self)

    def isConstantMinimumAirFlowFractionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_isConstantMinimumAirFlowFractionAutosized(self)

    def isConstantMinimumAirFlowFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_isConstantMinimumAirFlowFractionDefaulted(self)

    def fixedMinimumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_fixedMinimumAirFlowRate(self)

    def isFixedMinimumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_isFixedMinimumAirFlowRateAutosized(self)

    def isFixedMinimumAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_isFixedMinimumAirFlowRateDefaulted(self)

    def minimumAirFlowFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_minimumAirFlowFractionSchedule(self)

    def controlForOutdoorAir(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_controlForOutdoorAir(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setAvailabilitySchedule(self, schedule)

    def setMaximumAirFlowRate(self, maximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setMaximumAirFlowRate(self, maximumAirFlowRate)

    def resetMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_resetMaximumAirFlowRate(self)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizeMaximumAirFlowRate(self)

    def setZoneMinimumAirFlowInputMethod(self, zoneMinimumAirFlowInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setZoneMinimumAirFlowInputMethod(self, zoneMinimumAirFlowInputMethod)

    def resetZoneMinimumAirFlowInputMethod(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_resetZoneMinimumAirFlowInputMethod(self)

    def setConstantMinimumAirFlowFraction(self, constantMinimumAirFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setConstantMinimumAirFlowFraction(self, constantMinimumAirFlowFraction)

    def autosizeConstantMinimumAirFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizeConstantMinimumAirFlowFraction(self)

    def resetConstantMinimumAirFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_resetConstantMinimumAirFlowFraction(self)

    def setFixedMinimumAirFlowRate(self, fixedMinimumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setFixedMinimumAirFlowRate(self, fixedMinimumAirFlowRate)

    def autosizeFixedMinimumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizeFixedMinimumAirFlowRate(self)

    def resetFixedMinimumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_resetFixedMinimumAirFlowRate(self)

    def setMinimumAirFlowFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setMinimumAirFlowFractionSchedule(self, schedule)

    def resetMinimumAirFlowFractionSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_resetMinimumAirFlowFractionSchedule(self)

    def setControlForOutdoorAir(self, controlForOutdoorAir: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_setControlForOutdoorAir(self, controlForOutdoorAir)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizedMaximumAirFlowRate(self)

    def autosizedConstantMinimumAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizedConstantMinimumAirFlowFraction(self)

    def autosizedFixedMinimumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_autosizedFixedMinimumAirFlowRate(self)

# Register AirTerminalSingleDuctVAVNoReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_swigregister(AirTerminalSingleDuctVAVNoReheat)

def AirTerminalSingleDuctVAVNoReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_iddObjectType()

def AirTerminalSingleDuctVAVNoReheat_zoneMinimumAirFlowInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVNoReheat_zoneMinimumAirFlowInputMethodValues()


def toAirTerminalSingleDuctVAVNoReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVNoReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctVAVNoReheat(idfObject)

def getAirTerminalSingleDuctVAVNoReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVNoReheat(t_model, t_handle)

def getAirTerminalSingleDuctVAVNoReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVNoReheats(t_model)

def getAirTerminalSingleDuctVAVNoReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVNoReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVNoReheatByName(t_model, t_name)

def getAirTerminalSingleDuctVAVNoReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVNoReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVNoReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVNoReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctVAVNoReheat(self) -> OptionalAirTerminalSingleDuctVAVNoReheat:
    return toAirTerminalSingleDuctVAVNoReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctVAVNoReheat = _to_AirTerminalSingleDuctVAVNoReheat

def _getAirTerminalSingleDuctVAVNoReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctVAVNoReheat:
    return getAirTerminalSingleDuctVAVNoReheat(self, t_handle)
Model.getAirTerminalSingleDuctVAVNoReheat = _getAirTerminalSingleDuctVAVNoReheat

def _getAirTerminalSingleDuctVAVNoReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctVAVNoReheat:
    return getAirTerminalSingleDuctVAVNoReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctVAVNoReheat = _getAirTerminalSingleDuctVAVNoReheat

def _getAirTerminalSingleDuctVAVNoReheats(self) -> AirTerminalSingleDuctVAVNoReheatVector:
    return getAirTerminalSingleDuctVAVNoReheats(self)
Model.getAirTerminalSingleDuctVAVNoReheats = _getAirTerminalSingleDuctVAVNoReheats

def _getAirTerminalSingleDuctVAVNoReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctVAVNoReheat:
    return getAirTerminalSingleDuctVAVNoReheatByName(self, t_name)
Model.getAirTerminalSingleDuctVAVNoReheatByName = _getAirTerminalSingleDuctVAVNoReheatByName

def _getAirTerminalSingleDuctVAVNoReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctVAVNoReheatVector:
    return getAirTerminalSingleDuctVAVNoReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctVAVNoReheatsByName = _getAirTerminalSingleDuctVAVNoReheatsByName

class AirTerminalSingleDuctVAVReheat(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", availabilitySchedule: "Schedule", coil: "HVACComponent"):
        _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_swiginit(self, _openstudiomodelstraightcomponent.new_AirTerminalSingleDuctVAVReheat(model, availabilitySchedule, coil))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_AirTerminalSingleDuctVAVReheat

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_iddObjectType()

    def reheatCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_reheatCoil(self)

    def setReheatCoil(self, coil: "HVACComponent") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setReheatCoil(self, coil)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setAvailabilitySchedule(self, schedule)

    def maximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_maximumAirFlowRate(self)

    def setMaximumAirFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMaximumAirFlowRate(self, value)

    def autosizeMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeMaximumAirFlowRate(self)

    def isMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isMaximumAirFlowRateAutosized(self)

    def zoneMinimumAirFlowInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_zoneMinimumAirFlowInputMethod(self)

    def zoneMinimumAirFlowMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_zoneMinimumAirFlowMethod(self)

    def setZoneMinimumAirFlowInputMethod(self, value: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setZoneMinimumAirFlowInputMethod(self, value)

    def setZoneMinimumAirFlowMethod(self, value: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setZoneMinimumAirFlowMethod(self, value)

    def constantMinimumAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_constantMinimumAirFlowFraction(self)

    def setConstantMinimumAirFlowFraction(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setConstantMinimumAirFlowFraction(self, value)

    def autosizeConstantMinimumAirFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeConstantMinimumAirFlowFraction(self)

    def isConstantMinimumAirFlowFractionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isConstantMinimumAirFlowFractionAutosized(self)

    def fixedMinimumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_fixedMinimumAirFlowRate(self)

    def setFixedMinimumAirFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setFixedMinimumAirFlowRate(self, value)

    def autosizeFixedMinimumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeFixedMinimumAirFlowRate(self)

    def isFixedMinimumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isFixedMinimumAirFlowRateAutosized(self)

    def minimumAirFlowFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_minimumAirFlowFractionSchedule(self)

    def setMinimumAirFlowFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMinimumAirFlowFractionSchedule(self, schedule)

    def resetMinimumAirFlowFractionSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_resetMinimumAirFlowFractionSchedule(self)

    def maximumHotWaterOrSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_maximumHotWaterOrSteamFlowRate(self)

    def setMaximumHotWaterOrSteamFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMaximumHotWaterOrSteamFlowRate(self, value)

    def autosizeMaximumHotWaterOrSteamFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeMaximumHotWaterOrSteamFlowRate(self)

    def isMaximumHotWaterOrSteamFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isMaximumHotWaterOrSteamFlowRateAutosized(self)

    def minimumHotWaterOrSteamFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_minimumHotWaterOrSteamFlowRate(self)

    def setMinimumHotWaterOrStreamFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMinimumHotWaterOrStreamFlowRate(self, value)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_convergenceTolerance(self)

    def setConvergenceTolerance(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setConvergenceTolerance(self, value)

    def damperHeatingAction(self) -> "std::string":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_damperHeatingAction(self)

    def setDamperHeatingAction(self, value: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setDamperHeatingAction(self, value)

    def maximumFlowPerZoneFloorAreaDuringReheat(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_maximumFlowPerZoneFloorAreaDuringReheat(self)

    def setMaximumFlowPerZoneFloorAreaDuringReheat(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMaximumFlowPerZoneFloorAreaDuringReheat(self, value)

    def autosizeMaximumFlowPerZoneFloorAreaDuringReheat(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeMaximumFlowPerZoneFloorAreaDuringReheat(self)

    def isMaximumFlowPerZoneFloorAreaDuringReheatAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isMaximumFlowPerZoneFloorAreaDuringReheatAutosized(self)

    def resetMaximumFlowPerZoneFloorAreaDuringReheat(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_resetMaximumFlowPerZoneFloorAreaDuringReheat(self)

    def maximumFlowFractionDuringReheat(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_maximumFlowFractionDuringReheat(self)

    def setMaximumFlowFractionDuringReheat(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMaximumFlowFractionDuringReheat(self, value)

    def autosizeMaximumFlowFractionDuringReheat(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizeMaximumFlowFractionDuringReheat(self)

    def isMaximumFlowFractionDuringReheatAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_isMaximumFlowFractionDuringReheatAutosized(self)

    def resetMaximumFlowFractionDuringReheat(self) -> "void":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_resetMaximumFlowFractionDuringReheat(self)

    def maximumReheatAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_maximumReheatAirTemperature(self)

    def setMaximumReheatAirTemperature(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setMaximumReheatAirTemperature(self, value)

    def controlForOutdoorAir(self) -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_controlForOutdoorAir(self)

    def setControlForOutdoorAir(self, controlForOutdoorAir: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_setControlForOutdoorAir(self, controlForOutdoorAir)

    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedMaximumAirFlowRate(self)

    def autosizedConstantMinimumAirFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedConstantMinimumAirFlowFraction(self)

    def autosizedFixedMinimumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedFixedMinimumAirFlowRate(self)

    def autosizedMaximumHotWaterOrSteamFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedMaximumHotWaterOrSteamFlowRate(self)

    def autosizedMaximumFlowPerZoneFloorAreaDuringReheat(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedMaximumFlowPerZoneFloorAreaDuringReheat(self)

    def autosizedMaximumFlowFractionDuringReheat(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_autosizedMaximumFlowFractionDuringReheat(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_airflowNetworkEquivalentDuct(self)

# Register AirTerminalSingleDuctVAVReheat in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_swigregister(AirTerminalSingleDuctVAVReheat)

def AirTerminalSingleDuctVAVReheat_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.AirTerminalSingleDuctVAVReheat_iddObjectType()


def toAirTerminalSingleDuctVAVReheat(idfObject: "IdfObject") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVReheat >":
    return _openstudiomodelstraightcomponent.toAirTerminalSingleDuctVAVReheat(idfObject)

def getAirTerminalSingleDuctVAVReheat(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVReheat(t_model, t_handle)

def getAirTerminalSingleDuctVAVReheats(t_model: "Model") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVReheats(t_model)

def getAirTerminalSingleDuctVAVReheatByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::AirTerminalSingleDuctVAVReheat >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVReheatByName(t_model, t_name)

def getAirTerminalSingleDuctVAVReheatsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::AirTerminalSingleDuctVAVReheat,std::allocator< openstudio::model::AirTerminalSingleDuctVAVReheat > >":
    return _openstudiomodelstraightcomponent.getAirTerminalSingleDuctVAVReheatsByName(t_model, t_name, t_exactMatch)

def _to_AirTerminalSingleDuctVAVReheat(self) -> OptionalAirTerminalSingleDuctVAVReheat:
    return toAirTerminalSingleDuctVAVReheat(self)
openstudioutilitiesidf.IdfObject.to_AirTerminalSingleDuctVAVReheat = _to_AirTerminalSingleDuctVAVReheat

def _getAirTerminalSingleDuctVAVReheat(self, t_handle: "UUID") -> OptionalAirTerminalSingleDuctVAVReheat:
    return getAirTerminalSingleDuctVAVReheat(self, t_handle)
Model.getAirTerminalSingleDuctVAVReheat = _getAirTerminalSingleDuctVAVReheat

def _getAirTerminalSingleDuctVAVReheat(self, t_handle_str: str) -> OptionalAirTerminalSingleDuctVAVReheat:
    return getAirTerminalSingleDuctVAVReheat(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getAirTerminalSingleDuctVAVReheat = _getAirTerminalSingleDuctVAVReheat

def _getAirTerminalSingleDuctVAVReheats(self) -> AirTerminalSingleDuctVAVReheatVector:
    return getAirTerminalSingleDuctVAVReheats(self)
Model.getAirTerminalSingleDuctVAVReheats = _getAirTerminalSingleDuctVAVReheats

def _getAirTerminalSingleDuctVAVReheatByName(self, t_name: str) -> OptionalAirTerminalSingleDuctVAVReheat:
    return getAirTerminalSingleDuctVAVReheatByName(self, t_name)
Model.getAirTerminalSingleDuctVAVReheatByName = _getAirTerminalSingleDuctVAVReheatByName

def _getAirTerminalSingleDuctVAVReheatsByName(self, t_name: str, t_exactMatch: bool) -> AirTerminalSingleDuctVAVReheatVector:
    return getAirTerminalSingleDuctVAVReheatsByName(self, t_name, t_exactMatch)
Model.getAirTerminalSingleDuctVAVReheatsByName = _getAirTerminalSingleDuctVAVReheatsByName

class BoilerHotWater(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.BoilerHotWater_swiginit(self, _openstudiomodelstraightcomponent.new_BoilerHotWater(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_BoilerHotWater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.BoilerHotWater_iddObjectType()

    @staticmethod
    def validFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_validFuelTypeValues()

    @staticmethod
    def validEfficiencyCurveTemperatureEvaluationVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_validEfficiencyCurveTemperatureEvaluationVariableValues()

    @staticmethod
    def validBoilerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_validBoilerFlowModeValues()

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.BoilerHotWater_fuelType(self)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isNominalCapacityAutosized(self)

    def nominalThermalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_nominalThermalEfficiency(self)

    def efficiencyCurveTemperatureEvaluationVariable(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_efficiencyCurveTemperatureEvaluationVariable(self)

    def normalizedBoilerEfficiencyCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_normalizedBoilerEfficiencyCurve(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isDesignWaterFlowRateAutosized(self)

    def minimumPartLoadRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_minimumPartLoadRatio(self)

    def isMinimumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isMinimumPartLoadRatioDefaulted(self)

    def maximumPartLoadRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_maximumPartLoadRatio(self)

    def isMaximumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isMaximumPartLoadRatioDefaulted(self)

    def optimumPartLoadRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_optimumPartLoadRatio(self)

    def isOptimumPartLoadRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isOptimumPartLoadRatioDefaulted(self)

    def waterOutletUpperTemperatureLimit(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_waterOutletUpperTemperatureLimit(self)

    def isWaterOutletUpperTemperatureLimitDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isWaterOutletUpperTemperatureLimitDefaulted(self)

    def boilerFlowMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.BoilerHotWater_boilerFlowMode(self)

    def isBoilerFlowModeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isBoilerFlowModeDefaulted(self)

    def parasiticElectricLoad(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_parasiticElectricLoad(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerHotWater_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_isSizingFactorDefaulted(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.BoilerHotWater_endUseSubcategory(self)

    def setFuelType(self, fuelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setFuelType(self, fuelType)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setNominalCapacity(self, nominalCapacity)

    def resetNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetNominalCapacity(self)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_autosizeNominalCapacity(self)

    def setNominalThermalEfficiency(self, nominalThermalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setNominalThermalEfficiency(self, nominalThermalEfficiency)

    def setEfficiencyCurveTemperatureEvaluationVariable(self, efficiencyCurveTemperatureEvaluationVariable: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setEfficiencyCurveTemperatureEvaluationVariable(self, efficiencyCurveTemperatureEvaluationVariable)

    def resetEfficiencyCurveTemperatureEvaluationVariable(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetEfficiencyCurveTemperatureEvaluationVariable(self)

    def setNormalizedBoilerEfficiencyCurve(self, normalizedBoilerEfficiencyCurve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setNormalizedBoilerEfficiencyCurve(self, normalizedBoilerEfficiencyCurve)

    def resetNormalizedBoilerEfficiencyCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetNormalizedBoilerEfficiencyCurve(self)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setDesignWaterFlowRate(self, designWaterFlowRate)

    def resetDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetDesignWaterFlowRate(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_autosizeDesignWaterFlowRate(self)

    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setMinimumPartLoadRatio(self, minimumPartLoadRatio)

    def resetMinimumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetMinimumPartLoadRatio(self)

    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setMaximumPartLoadRatio(self, maximumPartLoadRatio)

    def resetMaximumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetMaximumPartLoadRatio(self)

    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setOptimumPartLoadRatio(self, optimumPartLoadRatio)

    def resetOptimumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetOptimumPartLoadRatio(self)

    def setWaterOutletUpperTemperatureLimit(self, waterOutletUpperTemperatureLimit: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setWaterOutletUpperTemperatureLimit(self, waterOutletUpperTemperatureLimit)

    def resetWaterOutletUpperTemperatureLimit(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetWaterOutletUpperTemperatureLimit(self)

    def setBoilerFlowMode(self, boilerFlowMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setBoilerFlowMode(self, boilerFlowMode)

    def resetBoilerFlowMode(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetBoilerFlowMode(self)

    def setParasiticElectricLoad(self, parasiticElectricLoad: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setParasiticElectricLoad(self, parasiticElectricLoad)

    def resetParasiticElectricLoad(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetParasiticElectricLoad(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerHotWater_resetSizingFactor(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_autosizedNominalCapacity(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerHotWater_autosizedDesignWaterFlowRate(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerHotWater_setEndUseSubcategory(self, endUseSubcategory)

# Register BoilerHotWater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.BoilerHotWater_swigregister(BoilerHotWater)

def BoilerHotWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.BoilerHotWater_iddObjectType()

def BoilerHotWater_validFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.BoilerHotWater_validFuelTypeValues()

def BoilerHotWater_validEfficiencyCurveTemperatureEvaluationVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.BoilerHotWater_validEfficiencyCurveTemperatureEvaluationVariableValues()

def BoilerHotWater_validBoilerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.BoilerHotWater_validBoilerFlowModeValues()


def toBoilerHotWater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::BoilerHotWater >":
    return _openstudiomodelstraightcomponent.toBoilerHotWater(idfObject)

def getBoilerHotWater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::BoilerHotWater >":
    return _openstudiomodelstraightcomponent.getBoilerHotWater(t_model, t_handle)

def getBoilerHotWaters(t_model: "Model") -> "std::vector< openstudio::model::BoilerHotWater,std::allocator< openstudio::model::BoilerHotWater > >":
    return _openstudiomodelstraightcomponent.getBoilerHotWaters(t_model)

def getBoilerHotWaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::BoilerHotWater >":
    return _openstudiomodelstraightcomponent.getBoilerHotWaterByName(t_model, t_name)

def getBoilerHotWatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::BoilerHotWater,std::allocator< openstudio::model::BoilerHotWater > >":
    return _openstudiomodelstraightcomponent.getBoilerHotWatersByName(t_model, t_name, t_exactMatch)

def _to_BoilerHotWater(self) -> OptionalBoilerHotWater:
    return toBoilerHotWater(self)
openstudioutilitiesidf.IdfObject.to_BoilerHotWater = _to_BoilerHotWater

def _getBoilerHotWater(self, t_handle: "UUID") -> OptionalBoilerHotWater:
    return getBoilerHotWater(self, t_handle)
Model.getBoilerHotWater = _getBoilerHotWater

def _getBoilerHotWater(self, t_handle_str: str) -> OptionalBoilerHotWater:
    return getBoilerHotWater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getBoilerHotWater = _getBoilerHotWater

def _getBoilerHotWaters(self) -> BoilerHotWaterVector:
    return getBoilerHotWaters(self)
Model.getBoilerHotWaters = _getBoilerHotWaters

def _getBoilerHotWaterByName(self, t_name: str) -> OptionalBoilerHotWater:
    return getBoilerHotWaterByName(self, t_name)
Model.getBoilerHotWaterByName = _getBoilerHotWaterByName

def _getBoilerHotWatersByName(self, t_name: str, t_exactMatch: bool) -> BoilerHotWaterVector:
    return getBoilerHotWatersByName(self, t_name, t_exactMatch)
Model.getBoilerHotWatersByName = _getBoilerHotWatersByName

class BoilerSteam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.BoilerSteam_swiginit(self, _openstudiomodelstraightcomponent.new_BoilerSteam(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_BoilerSteam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.BoilerSteam_iddObjectType()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.BoilerSteam_fuelTypeValues()

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.BoilerSteam_fuelType(self)

    def setFuelType(self, fuelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setFuelType(self, fuelType)

    def maximumOperatingPressure(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_maximumOperatingPressure(self)

    def setMaximumOperatingPressure(self, maximumOperatingPressure: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setMaximumOperatingPressure(self, maximumOperatingPressure)

    def resetMaximumOperatingPressure(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetMaximumOperatingPressure(self)

    def theoreticalEfficiency(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_theoreticalEfficiency(self)

    def setTheoreticalEfficiency(self, theoreticalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setTheoreticalEfficiency(self, theoreticalEfficiency)

    def resetTheoreticalEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetTheoreticalEfficiency(self)

    def designOutletSteamTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_designOutletSteamTemperature(self)

    def setDesignOutletSteamTemperature(self, designOutletSteamTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setDesignOutletSteamTemperature(self, designOutletSteamTemperature)

    def resetDesignOutletSteamTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetDesignOutletSteamTemperature(self)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setNominalCapacity(self, nominalCapacity)

    def resetNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetNominalCapacity(self)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_autosizeNominalCapacity(self)

    def minimumPartLoadRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_minimumPartLoadRatio(self)

    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setMinimumPartLoadRatio(self, minimumPartLoadRatio)

    def resetMinimumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetMinimumPartLoadRatio(self)

    def maximumPartLoadRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_maximumPartLoadRatio(self)

    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setMaximumPartLoadRatio(self, maximumPartLoadRatio)

    def resetMaximumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetMaximumPartLoadRatio(self)

    def optimumPartLoadRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_optimumPartLoadRatio(self)

    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setOptimumPartLoadRatio(self, optimumPartLoadRatio)

    def resetOptimumPartLoadRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetOptimumPartLoadRatio(self)

    def coefficient1ofFuelUseFunctionofPartLoadRatioCurve(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_coefficient1ofFuelUseFunctionofPartLoadRatioCurve(self)

    def setCoefficient1ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient1ofFuelUseFunctionofPartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setCoefficient1ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient1ofFuelUseFunctionofPartLoadRatioCurve)

    def resetCoefficient1ofFuelUseFunctionofPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetCoefficient1ofFuelUseFunctionofPartLoadRatioCurve(self)

    def coefficient2ofFuelUseFunctionofPartLoadRatioCurve(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_coefficient2ofFuelUseFunctionofPartLoadRatioCurve(self)

    def setCoefficient2ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient2ofFuelUseFunctionofPartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setCoefficient2ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient2ofFuelUseFunctionofPartLoadRatioCurve)

    def resetCoefficient2ofFuelUseFunctionofPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetCoefficient2ofFuelUseFunctionofPartLoadRatioCurve(self)

    def coefficient3ofFuelUseFunctionofPartLoadRatioCurve(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_coefficient3ofFuelUseFunctionofPartLoadRatioCurve(self)

    def setCoefficient3ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient3ofFuelUseFunctionofPartLoadRatioCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setCoefficient3ofFuelUseFunctionofPartLoadRatioCurve(self, coefficient3ofFuelUseFunctionofPartLoadRatioCurve)

    def resetCoefficient3ofFuelUseFunctionofPartLoadRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetCoefficient3ofFuelUseFunctionofPartLoadRatioCurve(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.BoilerSteam_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_isSizingFactorDefaulted(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.BoilerSteam_resetSizingFactor(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.BoilerSteam_endUseSubcategory(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.BoilerSteam_setEndUseSubcategory(self, endUseSubcategory)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.BoilerSteam_autosizedNominalCapacity(self)

# Register BoilerSteam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.BoilerSteam_swigregister(BoilerSteam)

def BoilerSteam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.BoilerSteam_iddObjectType()

def BoilerSteam_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.BoilerSteam_fuelTypeValues()


def toBoilerSteam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::BoilerSteam >":
    return _openstudiomodelstraightcomponent.toBoilerSteam(idfObject)

def getBoilerSteam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::BoilerSteam >":
    return _openstudiomodelstraightcomponent.getBoilerSteam(t_model, t_handle)

def getBoilerSteams(t_model: "Model") -> "std::vector< openstudio::model::BoilerSteam,std::allocator< openstudio::model::BoilerSteam > >":
    return _openstudiomodelstraightcomponent.getBoilerSteams(t_model)

def getBoilerSteamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::BoilerSteam >":
    return _openstudiomodelstraightcomponent.getBoilerSteamByName(t_model, t_name)

def getBoilerSteamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::BoilerSteam,std::allocator< openstudio::model::BoilerSteam > >":
    return _openstudiomodelstraightcomponent.getBoilerSteamsByName(t_model, t_name, t_exactMatch)

def _to_BoilerSteam(self) -> OptionalBoilerSteam:
    return toBoilerSteam(self)
openstudioutilitiesidf.IdfObject.to_BoilerSteam = _to_BoilerSteam

def _getBoilerSteam(self, t_handle: "UUID") -> OptionalBoilerSteam:
    return getBoilerSteam(self, t_handle)
Model.getBoilerSteam = _getBoilerSteam

def _getBoilerSteam(self, t_handle_str: str) -> OptionalBoilerSteam:
    return getBoilerSteam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getBoilerSteam = _getBoilerSteam

def _getBoilerSteams(self) -> BoilerSteamVector:
    return getBoilerSteams(self)
Model.getBoilerSteams = _getBoilerSteams

def _getBoilerSteamByName(self, t_name: str) -> OptionalBoilerSteam:
    return getBoilerSteamByName(self, t_name)
Model.getBoilerSteamByName = _getBoilerSteamByName

def _getBoilerSteamsByName(self, t_name: str, t_exactMatch: bool) -> BoilerSteamVector:
    return getBoilerSteamsByName(self, t_name, t_exactMatch)
Model.getBoilerSteamsByName = _getBoilerSteamsByName

class CoilCoolingCooledBeam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingCooledBeam(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingCooledBeam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_iddObjectType()

    def coilSurfaceAreaperCoilLength(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_coilSurfaceAreaperCoilLength(self)

    def isCoilSurfaceAreaperCoilLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isCoilSurfaceAreaperCoilLengthDefaulted(self)

    def modelParametera(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametera(self)

    def isModelParameteraDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParameteraDefaulted(self)

    def modelParametern1(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametern1(self)

    def isModelParametern1Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParametern1Defaulted(self)

    def modelParametern2(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametern2(self)

    def isModelParametern2Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParametern2Defaulted(self)

    def modelParametern3(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametern3(self)

    def isModelParametern3Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParametern3Defaulted(self)

    def modelParametera0(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametera0(self)

    def isModelParametera0Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParametera0Defaulted(self)

    def modelParameterK1(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParameterK1(self)

    def isModelParameterK1Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParameterK1Defaulted(self)

    def modelParametern(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_modelParametern(self)

    def isModelParameternDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isModelParameternDefaulted(self)

    def leavingPipeInsideDiameter(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_leavingPipeInsideDiameter(self)

    def isLeavingPipeInsideDiameterDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_isLeavingPipeInsideDiameterDefaulted(self)

    def setCoilSurfaceAreaperCoilLength(self, coilSurfaceAreaperCoilLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setCoilSurfaceAreaperCoilLength(self, coilSurfaceAreaperCoilLength)

    def resetCoilSurfaceAreaperCoilLength(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetCoilSurfaceAreaperCoilLength(self)

    def setModelParametera(self, modelParametera: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametera(self, modelParametera)

    def resetModelParametera(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametera(self)

    def setModelParametern1(self, modelParametern1: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametern1(self, modelParametern1)

    def resetModelParametern1(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametern1(self)

    def setModelParametern2(self, modelParametern2: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametern2(self, modelParametern2)

    def resetModelParametern2(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametern2(self)

    def setModelParametern3(self, modelParametern3: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametern3(self, modelParametern3)

    def resetModelParametern3(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametern3(self)

    def setModelParametera0(self, modelParametera0: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametera0(self, modelParametera0)

    def resetModelParametera0(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametera0(self)

    def setModelParameterK1(self, modelParameterK1: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParameterK1(self, modelParameterK1)

    def resetModelParameterK1(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParameterK1(self)

    def setModelParametern(self, modelParametern: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setModelParametern(self, modelParametern)

    def resetModelParametern(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetModelParametern(self)

    def setLeavingPipeInsideDiameter(self, leavingPipeInsideDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_setLeavingPipeInsideDiameter(self, leavingPipeInsideDiameter)

    def resetLeavingPipeInsideDiameter(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_resetLeavingPipeInsideDiameter(self)

# Register CoilCoolingCooledBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingCooledBeam_swigregister(CoilCoolingCooledBeam)

def CoilCoolingCooledBeam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingCooledBeam_iddObjectType()


def toCoilCoolingCooledBeam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingCooledBeam >":
    return _openstudiomodelstraightcomponent.toCoilCoolingCooledBeam(idfObject)

def getCoilCoolingCooledBeam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingCooledBeam >":
    return _openstudiomodelstraightcomponent.getCoilCoolingCooledBeam(t_model, t_handle)

def getCoilCoolingCooledBeams(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingCooledBeam,std::allocator< openstudio::model::CoilCoolingCooledBeam > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingCooledBeams(t_model)

def getCoilCoolingCooledBeamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingCooledBeam >":
    return _openstudiomodelstraightcomponent.getCoilCoolingCooledBeamByName(t_model, t_name)

def getCoilCoolingCooledBeamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingCooledBeam,std::allocator< openstudio::model::CoilCoolingCooledBeam > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingCooledBeamsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingCooledBeam(self) -> OptionalCoilCoolingCooledBeam:
    return toCoilCoolingCooledBeam(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingCooledBeam = _to_CoilCoolingCooledBeam

def _getCoilCoolingCooledBeam(self, t_handle: "UUID") -> OptionalCoilCoolingCooledBeam:
    return getCoilCoolingCooledBeam(self, t_handle)
Model.getCoilCoolingCooledBeam = _getCoilCoolingCooledBeam

def _getCoilCoolingCooledBeam(self, t_handle_str: str) -> OptionalCoilCoolingCooledBeam:
    return getCoilCoolingCooledBeam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingCooledBeam = _getCoilCoolingCooledBeam

def _getCoilCoolingCooledBeams(self) -> CoilCoolingCooledBeamVector:
    return getCoilCoolingCooledBeams(self)
Model.getCoilCoolingCooledBeams = _getCoilCoolingCooledBeams

def _getCoilCoolingCooledBeamByName(self, t_name: str) -> OptionalCoilCoolingCooledBeam:
    return getCoilCoolingCooledBeamByName(self, t_name)
Model.getCoilCoolingCooledBeamByName = _getCoilCoolingCooledBeamByName

def _getCoilCoolingCooledBeamsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingCooledBeamVector:
    return getCoilCoolingCooledBeamsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingCooledBeamsByName = _getCoilCoolingCooledBeamsByName

class CoilCoolingDX(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", coilCoolingDXCurveFitPerformance: "CoilCoolingDXCurveFitPerformance"):
        _openstudiomodelstraightcomponent.CoilCoolingDX_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDX(model, coilCoolingDXCurveFitPerformance))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDX

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_availabilitySchedule(self)

    def condenserZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_condenserZone(self)

    def performanceObject(self) -> "openstudio::model::CoilCoolingDXCurveFitPerformance":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_performanceObject(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_setAvailabilitySchedule(self, schedule)

    def setCondenserZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_setCondenserZone(self, thermalZone)

    def resetCondenserZone(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_resetCondenserZone(self)

    def setPerformanceObject(self, coilCoolingDXCurveFitPerformance: "CoilCoolingDXCurveFitPerformance") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDX_setPerformanceObject(self, coilCoolingDXCurveFitPerformance)

# Register CoilCoolingDX in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDX_swigregister(CoilCoolingDX)

def CoilCoolingDX_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDX_iddObjectType()


def toCoilCoolingDX(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDX >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDX(idfObject)

def getCoilCoolingDX(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDX >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDX(t_model, t_handle)

def getCoilCoolingDXs(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDX,std::allocator< openstudio::model::CoilCoolingDX > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXs(t_model)

def getCoilCoolingDXByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDX >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXByName(t_model, t_name)

def getCoilCoolingDXsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDX,std::allocator< openstudio::model::CoilCoolingDX > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDX(self) -> OptionalCoilCoolingDX:
    return toCoilCoolingDX(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDX = _to_CoilCoolingDX

def _getCoilCoolingDX(self, t_handle: "UUID") -> OptionalCoilCoolingDX:
    return getCoilCoolingDX(self, t_handle)
Model.getCoilCoolingDX = _getCoilCoolingDX

def _getCoilCoolingDX(self, t_handle_str: str) -> OptionalCoilCoolingDX:
    return getCoilCoolingDX(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDX = _getCoilCoolingDX

def _getCoilCoolingDXs(self) -> CoilCoolingDXVector:
    return getCoilCoolingDXs(self)
Model.getCoilCoolingDXs = _getCoilCoolingDXs

def _getCoilCoolingDXByName(self, t_name: str) -> OptionalCoilCoolingDX:
    return getCoilCoolingDXByName(self, t_name)
Model.getCoilCoolingDXByName = _getCoilCoolingDXByName

def _getCoilCoolingDXsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXVector:
    return getCoilCoolingDXsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXsByName = _getCoilCoolingDXsByName

class CoilCoolingDXMultiSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXMultiSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXMultiSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_iddObjectType()

    @staticmethod
    def condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_condenserTypeValues()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_fuelTypeValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_availabilitySchedule(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_condenserType(self)

    def applyPartLoadFractiontoSpeedsGreaterthan1(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_applyPartLoadFractiontoSpeedsGreaterthan1(self)

    def applyLatentDegradationtoSpeedsGreaterthan1(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_applyLatentDegradationtoSpeedsGreaterthan1(self)

    def isApplyLatentDegradationtoSpeedsGreaterthan1Defaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_isApplyLatentDegradationtoSpeedsGreaterthan1Defaulted(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_basinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_basinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_basinHeaterOperatingSchedule(self)

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_fuelType(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_resetAvailabilitySchedule(self)

    def setCondenserType(self, condenserType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setCondenserType(self, condenserType)

    def setApplyPartLoadFractiontoSpeedsGreaterthan1(self, applyPartLoadFractiontoSpeedsGreaterthan1: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setApplyPartLoadFractiontoSpeedsGreaterthan1(self, applyPartLoadFractiontoSpeedsGreaterthan1)

    def setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1)

    def resetApplyLatentDegradationtoSpeedsGreaterthan1(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_resetApplyLatentDegradationtoSpeedsGreaterthan1(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_resetBasinHeaterOperatingSchedule(self)

    def setFuelType(self, fuelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setFuelType(self, fuelType)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def stages(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_stages(self)

    def numberOfStages(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_numberOfStages(self)

    def stageIndex(self, stage: "CoilCoolingDXMultiSpeedStageData") -> "boost::optional< unsigned int >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_stageIndex(self, stage)

    def addStage(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_addStage(self, *args)

    def setStageIndex(self, stage: "CoilCoolingDXMultiSpeedStageData", index: "unsigned int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setStageIndex(self, stage, index)

    def setStages(self, stages: "CoilCoolingDXMultiSpeedStageDataVector") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_setStages(self, stages)

    def removeAllStages(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_removeAllStages(self)

    def removeStage(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_removeStage(self, *args)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_airflowNetworkEquivalentDuct(self)

# Register CoilCoolingDXMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_swigregister(CoilCoolingDXMultiSpeed)

def CoilCoolingDXMultiSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_iddObjectType()

def CoilCoolingDXMultiSpeed_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_condenserTypeValues()

def CoilCoolingDXMultiSpeed_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilCoolingDXMultiSpeed_fuelTypeValues()


def toCoilCoolingDXMultiSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDXMultiSpeed(idfObject)

def getCoilCoolingDXMultiSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXMultiSpeed(t_model, t_handle)

def getCoilCoolingDXMultiSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed,std::allocator< openstudio::model::CoilCoolingDXMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXMultiSpeeds(t_model)

def getCoilCoolingDXMultiSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXMultiSpeedByName(t_model, t_name)

def getCoilCoolingDXMultiSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeed,std::allocator< openstudio::model::CoilCoolingDXMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXMultiSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXMultiSpeed(self) -> OptionalCoilCoolingDXMultiSpeed:
    return toCoilCoolingDXMultiSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXMultiSpeed = _to_CoilCoolingDXMultiSpeed

def _getCoilCoolingDXMultiSpeed(self, t_handle: "UUID") -> OptionalCoilCoolingDXMultiSpeed:
    return getCoilCoolingDXMultiSpeed(self, t_handle)
Model.getCoilCoolingDXMultiSpeed = _getCoilCoolingDXMultiSpeed

def _getCoilCoolingDXMultiSpeed(self, t_handle_str: str) -> OptionalCoilCoolingDXMultiSpeed:
    return getCoilCoolingDXMultiSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXMultiSpeed = _getCoilCoolingDXMultiSpeed

def _getCoilCoolingDXMultiSpeeds(self) -> CoilCoolingDXMultiSpeedVector:
    return getCoilCoolingDXMultiSpeeds(self)
Model.getCoilCoolingDXMultiSpeeds = _getCoilCoolingDXMultiSpeeds

def _getCoilCoolingDXMultiSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXMultiSpeed:
    return getCoilCoolingDXMultiSpeedByName(self, t_name)
Model.getCoilCoolingDXMultiSpeedByName = _getCoilCoolingDXMultiSpeedByName

def _getCoilCoolingDXMultiSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXMultiSpeedVector:
    return getCoilCoolingDXMultiSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXMultiSpeedsByName = _getCoilCoolingDXMultiSpeedsByName

class CoilCoolingDXSingleSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXSingleSpeed(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXSingleSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_iddObjectType()

    def condenserTypeValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_condenserTypeValues(self)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_availabilitySchedule(self)

    def ratedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratedCOP(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratedEvaporatorFanPowerPerVolumeFlowRate(self)

    def totalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_totalCoolingCapacityFunctionOfTemperatureCurve(self)

    def totalCoolingCapacityFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_totalCoolingCapacityFunctionOfFlowFractionCurve(self)

    def energyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_energyInputRatioFunctionOfTemperatureCurve(self)

    def energyInputRatioFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_energyInputRatioFunctionOfFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_partLoadFractionCorrelationCurve(self)

    def nominalTimeForCondensateRemovalToBegin(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_nominalTimeForCondensateRemovalToBegin(self)

    def ratioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self)

    def maximumCyclingRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_maximumCyclingRate(self)

    def latentCapacityTimeConstant(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_latentCapacityTimeConstant(self)

    def condenserAirInletNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_condenserAirInletNodeName(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_condenserType(self)

    def evaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_evaporativeCondenserEffectiveness(self)

    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_evaporativeCondenserAirFlowRate(self)

    def evaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_evaporativeCondenserPumpRatedPowerConsumption(self)

    def crankcaseHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_maximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self)

    def basinHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_basinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_basinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_basinHeaterOperatingSchedule(self)

    def getAvailabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getAvailabilitySchedule(self)

    def getRatedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getRatedCOP(self)

    def getRatedEvaporatorFanPowerPerVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getRatedEvaporatorFanPowerPerVolumeFlowRate(self)

    def getTotalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getTotalCoolingCapacityFunctionOfTemperatureCurve(self)

    def getTotalCoolingCapacityFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getTotalCoolingCapacityFunctionOfFlowFractionCurve(self)

    def getEnergyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getEnergyInputRatioFunctionOfTemperatureCurve(self)

    def getEnergyInputRatioFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getEnergyInputRatioFunctionOfFlowFractionCurve(self)

    def getPartLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getPartLoadFractionCorrelationCurve(self)

    def getNominalTimeForCondensateRemovalToBegin(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getNominalTimeForCondensateRemovalToBegin(self)

    def getRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self)

    def getMaximumCyclingRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getMaximumCyclingRate(self)

    def getLatentCapacityTimeConstant(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getLatentCapacityTimeConstant(self)

    def getCondenserAirInletNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getCondenserAirInletNodeName(self)

    def getCondenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getCondenserType(self)

    def getEvaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getEvaporativeCondenserEffectiveness(self)

    def getEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getEvaporativeCondenserAirFlowRate(self)

    def getEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getEvaporativeCondenserPumpRatedPowerConsumption(self)

    def getCrankcaseHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getCrankcaseHeaterCapacity(self)

    def getMaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getMaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self)

    def getBasinHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getBasinHeaterCapacity(self)

    def getBasinHeaterSetpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getBasinHeaterSetpointTemperature(self)

    def getBasinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getBasinHeaterOperatingSchedule(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setAvailabilitySchedule(self, schedule)

    def setRatedCOP(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatedCOP(self, *args)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatedEvaporatorFanPowerPerVolumeFlowRate(self, *args)

    def setTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionOfFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setTotalCoolingCapacityFunctionOfFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setEnergyInputRatioFunctionOfTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionOfFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setEnergyInputRatioFunctionOfFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setPartLoadFractionCorrelationCurve(self, curve)

    def setNominalTimeForCondensateRemovalToBegin(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setNominalTimeForCondensateRemovalToBegin(self, *args)

    def setRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity(self, *args)

    def setMaximumCyclingRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setMaximumCyclingRate(self, *args)

    def setLatentCapacityTimeConstant(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setLatentCapacityTimeConstant(self, *args)

    def setCondenserAirInletNodeName(self, arg2: "OptionalString") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setCondenserAirInletNodeName(self, arg2)

    def setCondenserType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setCondenserType(self, value)

    def setEvaporativeCondenserEffectiveness(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setEvaporativeCondenserEffectiveness(self, *args)

    def setEvaporativeCondenserAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setEvaporativeCondenserAirFlowRate(self, *args)

    def setEvaporativeCondenserPumpRatedPowerConsumption(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setEvaporativeCondenserPumpRatedPowerConsumption(self, *args)

    def setCrankcaseHeaterCapacity(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setCrankcaseHeaterCapacity(self, *args)

    def setMaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setMaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation(self, *args)

    def setBasinHeaterCapacity(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setBasinHeaterCapacity(self, *args)

    def setBasinHeaterSetpointTemperature(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setBasinHeaterSetpointTemperature(self, *args)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_resetBasinHeaterOperatingSchedule(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratedTotalCoolingCapacity(self)

    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_isRatedTotalCoolingCapacityAutosized(self)

    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)

    def autosizeRatedTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizeRatedTotalCoolingCapacity(self)

    def ratedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratedSensibleHeatRatio(self)

    def isRatedSensibleHeatRatioAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_isRatedSensibleHeatRatioAutosized(self)

    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)

    def autosizeRatedSensibleHeatRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizeRatedSensibleHeatRatio(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_isRatedAirFlowRateAutosized(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizeRatedAirFlowRate(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_airflowNetworkEquivalentDuct(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizedRatedAirFlowRate(self)

    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizedRatedTotalCoolingCapacity(self)

    def autosizedRatedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizedRatedSensibleHeatRatio(self)

    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizedEvaporativeCondenserAirFlowRate(self)

    def autosizedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_autosizedEvaporativeCondenserPumpRatedPowerConsumption(self)

# Register CoilCoolingDXSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_swigregister(CoilCoolingDXSingleSpeed)

def CoilCoolingDXSingleSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDXSingleSpeed_iddObjectType()


def toCoilCoolingDXSingleSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDXSingleSpeed(idfObject)

def getCoilCoolingDXSingleSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXSingleSpeed(t_model, t_handle)

def getCoilCoolingDXSingleSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed,std::allocator< openstudio::model::CoilCoolingDXSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXSingleSpeeds(t_model)

def getCoilCoolingDXSingleSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXSingleSpeedByName(t_model, t_name)

def getCoilCoolingDXSingleSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXSingleSpeed,std::allocator< openstudio::model::CoilCoolingDXSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXSingleSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXSingleSpeed(self) -> OptionalCoilCoolingDXSingleSpeed:
    return toCoilCoolingDXSingleSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXSingleSpeed = _to_CoilCoolingDXSingleSpeed

def _getCoilCoolingDXSingleSpeed(self, t_handle: "UUID") -> OptionalCoilCoolingDXSingleSpeed:
    return getCoilCoolingDXSingleSpeed(self, t_handle)
Model.getCoilCoolingDXSingleSpeed = _getCoilCoolingDXSingleSpeed

def _getCoilCoolingDXSingleSpeed(self, t_handle_str: str) -> OptionalCoilCoolingDXSingleSpeed:
    return getCoilCoolingDXSingleSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXSingleSpeed = _getCoilCoolingDXSingleSpeed

def _getCoilCoolingDXSingleSpeeds(self) -> CoilCoolingDXSingleSpeedVector:
    return getCoilCoolingDXSingleSpeeds(self)
Model.getCoilCoolingDXSingleSpeeds = _getCoilCoolingDXSingleSpeeds

def _getCoilCoolingDXSingleSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXSingleSpeed:
    return getCoilCoolingDXSingleSpeedByName(self, t_name)
Model.getCoilCoolingDXSingleSpeedByName = _getCoilCoolingDXSingleSpeedByName

def _getCoilCoolingDXSingleSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXSingleSpeedVector:
    return getCoilCoolingDXSingleSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXSingleSpeedsByName = _getCoilCoolingDXSingleSpeedsByName

class CoilCoolingDXTwoSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXTwoSpeed(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXTwoSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_availabilitySchedule(self)

    def getAvailabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getAvailabilitySchedule(self)

    def ratedHighSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedHighSpeedTotalCoolingCapacity(self)

    def getRatedHighSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedHighSpeedTotalCoolingCapacity(self)

    def ratedHighSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedHighSpeedSensibleHeatRatio(self)

    def getRatedHighSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedHighSpeedSensibleHeatRatio(self)

    def ratedHighSpeedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedHighSpeedCOP(self)

    def getRatedHighSpeedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedHighSpeedCOP(self)

    def ratedHighSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedHighSpeedAirFlowRate(self)

    def getRatedHighSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedHighSpeedAirFlowRate(self)

    def totalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_totalCoolingCapacityFunctionOfTemperatureCurve(self)

    def getTotalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getTotalCoolingCapacityFunctionOfTemperatureCurve(self)

    def totalCoolingCapacityFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_totalCoolingCapacityFunctionOfFlowFractionCurve(self)

    def getTotalCoolingCapacityFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getTotalCoolingCapacityFunctionOfFlowFractionCurve(self)

    def energyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_energyInputRatioFunctionOfTemperatureCurve(self)

    def getEnergyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getEnergyInputRatioFunctionOfTemperatureCurve(self)

    def energyInputRatioFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_energyInputRatioFunctionOfFlowFractionCurve(self)

    def getEnergyInputRatioFunctionOfFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getEnergyInputRatioFunctionOfFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_partLoadFractionCorrelationCurve(self)

    def getPartLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getPartLoadFractionCorrelationCurve(self)

    def ratedLowSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedLowSpeedTotalCoolingCapacity(self)

    def getRatedLowSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedLowSpeedTotalCoolingCapacity(self)

    def ratedLowSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedLowSpeedSensibleHeatRatio(self)

    def getRatedLowSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedLowSpeedSensibleHeatRatio(self)

    def ratedLowSpeedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedLowSpeedCOP(self)

    def getRatedLowSpeedCOP(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedLowSpeedCOP(self)

    def ratedLowSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_ratedLowSpeedAirFlowRate(self)

    def getRatedLowSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getRatedLowSpeedAirFlowRate(self)

    def lowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_lowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self)

    def getLowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getLowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self)

    def lowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_lowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self)

    def getLowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getLowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self)

    def condenserAirInletNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_condenserAirInletNodeName(self)

    def getCondenserAirInletNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getCondenserAirInletNodeName(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_condenserType(self)

    def getCondenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getCondenserType(self)

    def highSpeedEvaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_highSpeedEvaporativeCondenserEffectiveness(self)

    def getHighSpeedEvaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getHighSpeedEvaporativeCondenserEffectiveness(self)

    def highSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_highSpeedEvaporativeCondenserAirFlowRate(self)

    def getHighSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getHighSpeedEvaporativeCondenserAirFlowRate(self)

    def highSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_highSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def getHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def lowSpeedEvaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_lowSpeedEvaporativeCondenserEffectiveness(self)

    def getLowSpeedEvaporativeCondenserEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getLowSpeedEvaporativeCondenserEffectiveness(self)

    def lowSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_lowSpeedEvaporativeCondenserAirFlowRate(self)

    def getLowSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getLowSpeedEvaporativeCondenserAirFlowRate(self)

    def lowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_lowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def getLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def basinHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_basinHeaterCapacity(self)

    def getBasinHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getBasinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_basinHeaterSetpointTemperature(self)

    def getBasinHeaterSetpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getBasinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_basinHeaterOperatingSchedule(self)

    def getBasinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_getBasinHeaterOperatingSchedule(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def unitInternalStaticAirPressure(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_unitInternalStaticAirPressure(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setAvailabilitySchedule(self, schedule)

    def setRatedHighSpeedTotalCoolingCapacity(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedHighSpeedTotalCoolingCapacity(self, *args)

    def setRatedHighSpeedSensibleHeatRatio(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedHighSpeedSensibleHeatRatio(self, *args)

    def setRatedHighSpeedCOP(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedHighSpeedCOP(self, value)

    def setRatedHighSpeedAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedHighSpeedAirFlowRate(self, *args)

    def setTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve)

    def setTotalCoolingCapacityFunctionOfFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setTotalCoolingCapacityFunctionOfFlowFractionCurve(self, curve)

    def setEnergyInputRatioFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setEnergyInputRatioFunctionOfTemperatureCurve(self, curve)

    def setEnergyInputRatioFunctionOfFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setEnergyInputRatioFunctionOfFlowFractionCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setPartLoadFractionCorrelationCurve(self, curve)

    def setRatedLowSpeedTotalCoolingCapacity(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedLowSpeedTotalCoolingCapacity(self, *args)

    def setRatedLowSpeedSensibleHeatRatio(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedLowSpeedSensibleHeatRatio(self, *args)

    def setRatedLowSpeedCOP(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedLowSpeedCOP(self, value)

    def setRatedLowSpeedAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setRatedLowSpeedAirFlowRate(self, *args)

    def setLowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setLowSpeedTotalCoolingCapacityFunctionOfTemperatureCurve(self, curve)

    def setLowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setLowSpeedEnergyInputRatioFunctionOfTemperatureCurve(self, curve)

    def setCondenserAirInletNodeName(self, arg2: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setCondenserAirInletNodeName(self, arg2)

    def setCondenserType(self, value: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setCondenserType(self, value)

    def setHighSpeedEvaporativeCondenserEffectiveness(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setHighSpeedEvaporativeCondenserEffectiveness(self, value)

    def setHighSpeedEvaporativeCondenserAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setHighSpeedEvaporativeCondenserAirFlowRate(self, *args)

    def setHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self, *args)

    def setLowSpeedEvaporativeCondenserEffectiveness(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setLowSpeedEvaporativeCondenserEffectiveness(self, value)

    def setLowSpeedEvaporativeCondenserAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setLowSpeedEvaporativeCondenserAirFlowRate(self, *args)

    def setLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self, *args)

    def setBasinHeaterCapacity(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setBasinHeaterCapacity(self, value)

    def setBasinHeaterSetpointTemperature(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setBasinHeaterSetpointTemperature(self, value)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_resetBasinHeaterOperatingSchedule(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure)

    def autosizedRatedHighSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedHighSpeedTotalCoolingCapacity(self)

    def autosizedRatedHighSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedHighSpeedSensibleHeatRatio(self)

    def autosizedRatedHighSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedHighSpeedAirFlowRate(self)

    def autosizedRatedLowSpeedTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedLowSpeedTotalCoolingCapacity(self)

    def autosizedRatedLowSpeedSensibleHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedLowSpeedSensibleHeatRatio(self)

    def autosizedRatedLowSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedRatedLowSpeedAirFlowRate(self)

    def autosizedHighSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedHighSpeedEvaporativeCondenserAirFlowRate(self)

    def autosizedHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedHighSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

    def autosizedLowSpeedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedLowSpeedEvaporativeCondenserAirFlowRate(self)

    def autosizedLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_autosizedLowSpeedEvaporativeCondenserPumpRatedPowerConsumption(self)

# Register CoilCoolingDXTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_swigregister(CoilCoolingDXTwoSpeed)

def CoilCoolingDXTwoSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDXTwoSpeed_iddObjectType()


def toCoilCoolingDXTwoSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXTwoSpeed >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDXTwoSpeed(idfObject)

def getCoilCoolingDXTwoSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXTwoSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoSpeed(t_model, t_handle)

def getCoilCoolingDXTwoSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed,std::allocator< openstudio::model::CoilCoolingDXTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoSpeeds(t_model)

def getCoilCoolingDXTwoSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXTwoSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoSpeedByName(t_model, t_name)

def getCoilCoolingDXTwoSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXTwoSpeed,std::allocator< openstudio::model::CoilCoolingDXTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXTwoSpeed(self) -> OptionalCoilCoolingDXTwoSpeed:
    return toCoilCoolingDXTwoSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXTwoSpeed = _to_CoilCoolingDXTwoSpeed

def _getCoilCoolingDXTwoSpeed(self, t_handle: "UUID") -> OptionalCoilCoolingDXTwoSpeed:
    return getCoilCoolingDXTwoSpeed(self, t_handle)
Model.getCoilCoolingDXTwoSpeed = _getCoilCoolingDXTwoSpeed

def _getCoilCoolingDXTwoSpeed(self, t_handle_str: str) -> OptionalCoilCoolingDXTwoSpeed:
    return getCoilCoolingDXTwoSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXTwoSpeed = _getCoilCoolingDXTwoSpeed

def _getCoilCoolingDXTwoSpeeds(self) -> CoilCoolingDXTwoSpeedVector:
    return getCoilCoolingDXTwoSpeeds(self)
Model.getCoilCoolingDXTwoSpeeds = _getCoilCoolingDXTwoSpeeds

def _getCoilCoolingDXTwoSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXTwoSpeed:
    return getCoilCoolingDXTwoSpeedByName(self, t_name)
Model.getCoilCoolingDXTwoSpeedByName = _getCoilCoolingDXTwoSpeedByName

def _getCoilCoolingDXTwoSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXTwoSpeedVector:
    return getCoilCoolingDXTwoSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXTwoSpeedsByName = _getCoilCoolingDXTwoSpeedsByName

class CoilCoolingDXTwoStageWithHumidityControlMode(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXTwoStageWithHumidityControlMode(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXTwoStageWithHumidityControlMode

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_availabilitySchedule(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def numberofCapacityStages(self) -> "int":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_numberofCapacityStages(self)

    def numberofEnhancedDehumidificationModes(self) -> "int":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_numberofEnhancedDehumidificationModes(self)

    def normalModeStage1CoilPerformance(self) -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_normalModeStage1CoilPerformance(self)

    def normalModeStage1Plus2CoilPerformance(self) -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_normalModeStage1Plus2CoilPerformance(self)

    def dehumidificationMode1Stage1CoilPerformance(self) -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_dehumidificationMode1Stage1CoilPerformance(self)

    def dehumidificationMode1Stage1Plus2CoilPerformance(self) -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_dehumidificationMode1Stage1Plus2CoilPerformance(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_basinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_basinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_basinHeaterOperatingSchedule(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetAvailabilitySchedule(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setNumberofCapacityStages(self, numberofCapacityStages: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setNumberofCapacityStages(self, numberofCapacityStages)

    def setNumberofEnhancedDehumidificationModes(self, numberofEnhancedDehumidificationModes: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setNumberofEnhancedDehumidificationModes(self, numberofEnhancedDehumidificationModes)

    def setNormalModeStage1CoilPerformance(self, coilPerformanceDXCooling: "CoilPerformanceDXCooling") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setNormalModeStage1CoilPerformance(self, coilPerformanceDXCooling)

    def resetNormalModeStage1CoilPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetNormalModeStage1CoilPerformance(self)

    def setNormalModeStage1Plus2CoilPerformance(self, coilPerformanceDXCooling: "CoilPerformanceDXCooling") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setNormalModeStage1Plus2CoilPerformance(self, coilPerformanceDXCooling)

    def resetNormalModeStage1Plus2CoilPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetNormalModeStage1Plus2CoilPerformance(self)

    def setDehumidificationMode1Stage1CoilPerformance(self, coilPerformanceDXCooling: "CoilPerformanceDXCooling") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setDehumidificationMode1Stage1CoilPerformance(self, coilPerformanceDXCooling)

    def resetDehumidificationMode1Stage1CoilPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetDehumidificationMode1Stage1CoilPerformance(self)

    def setDehumidificationMode1Stage1Plus2CoilPerformance(self, coilPerformanceDXCooling: "CoilPerformanceDXCooling") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setDehumidificationMode1Stage1Plus2CoilPerformance(self, coilPerformanceDXCooling)

    def resetDehumidificationMode1Stage1Plus2CoilPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetDehumidificationMode1Stage1Plus2CoilPerformance(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_resetBasinHeaterOperatingSchedule(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_airflowNetworkEquivalentDuct(self)

# Register CoilCoolingDXTwoStageWithHumidityControlMode in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_swigregister(CoilCoolingDXTwoStageWithHumidityControlMode)

def CoilCoolingDXTwoStageWithHumidityControlMode_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDXTwoStageWithHumidityControlMode_iddObjectType()


def toCoilCoolingDXTwoStageWithHumidityControlMode(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDXTwoStageWithHumidityControlMode(idfObject)

def getCoilCoolingDXTwoStageWithHumidityControlMode(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoStageWithHumidityControlMode(t_model, t_handle)

def getCoilCoolingDXTwoStageWithHumidityControlModes(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode,std::allocator< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoStageWithHumidityControlModes(t_model)

def getCoilCoolingDXTwoStageWithHumidityControlModeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoStageWithHumidityControlModeByName(t_model, t_name)

def getCoilCoolingDXTwoStageWithHumidityControlModesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode,std::allocator< openstudio::model::CoilCoolingDXTwoStageWithHumidityControlMode > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXTwoStageWithHumidityControlModesByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXTwoStageWithHumidityControlMode(self) -> OptionalCoilCoolingDXTwoStageWithHumidityControlMode:
    return toCoilCoolingDXTwoStageWithHumidityControlMode(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXTwoStageWithHumidityControlMode = _to_CoilCoolingDXTwoStageWithHumidityControlMode

def _getCoilCoolingDXTwoStageWithHumidityControlMode(self, t_handle: "UUID") -> OptionalCoilCoolingDXTwoStageWithHumidityControlMode:
    return getCoilCoolingDXTwoStageWithHumidityControlMode(self, t_handle)
Model.getCoilCoolingDXTwoStageWithHumidityControlMode = _getCoilCoolingDXTwoStageWithHumidityControlMode

def _getCoilCoolingDXTwoStageWithHumidityControlMode(self, t_handle_str: str) -> OptionalCoilCoolingDXTwoStageWithHumidityControlMode:
    return getCoilCoolingDXTwoStageWithHumidityControlMode(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXTwoStageWithHumidityControlMode = _getCoilCoolingDXTwoStageWithHumidityControlMode

def _getCoilCoolingDXTwoStageWithHumidityControlModes(self) -> CoilCoolingDXTwoStageWithHumidityControlModeVector:
    return getCoilCoolingDXTwoStageWithHumidityControlModes(self)
Model.getCoilCoolingDXTwoStageWithHumidityControlModes = _getCoilCoolingDXTwoStageWithHumidityControlModes

def _getCoilCoolingDXTwoStageWithHumidityControlModeByName(self, t_name: str) -> OptionalCoilCoolingDXTwoStageWithHumidityControlMode:
    return getCoilCoolingDXTwoStageWithHumidityControlModeByName(self, t_name)
Model.getCoilCoolingDXTwoStageWithHumidityControlModeByName = _getCoilCoolingDXTwoStageWithHumidityControlModeByName

def _getCoilCoolingDXTwoStageWithHumidityControlModesByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXTwoStageWithHumidityControlModeVector:
    return getCoilCoolingDXTwoStageWithHumidityControlModesByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXTwoStageWithHumidityControlModesByName = _getCoilCoolingDXTwoStageWithHumidityControlModesByName

class CoilCoolingDXVariableSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingDXVariableSpeed(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingDXVariableSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_iddObjectType()

    @staticmethod
    def condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_condenserTypeValues()

    def nominalSpeedLevel(self) -> "int":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_nominalSpeedLevel(self)

    def grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self)

    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def nominalTimeforCondensatetoBeginLeavingtheCoil(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_nominalTimeforCondensatetoBeginLeavingtheCoil(self)

    def initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self)

    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_energyPartLoadFractionCurve(self)

    def condenserType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_condenserType(self)

    def evaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_evaporativeCondenserPumpRatedPowerConsumption(self)

    def isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_basinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_basinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_basinHeaterOperatingSchedule(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setNominalSpeedLevel(self, nominalSpeedLevel: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setNominalSpeedLevel(self, nominalSpeedLevel)

    def setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel)

    def autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil)

    def setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity)

    def setEnergyPartLoadFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setEnergyPartLoadFractionCurve(self, curve)

    def setCondenserType(self, condenserType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setCondenserType(self, condenserType)

    def setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption)

    def autosizeEvaporativeCondenserPumpRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizeEvaporativeCondenserPumpRatedPowerConsumption(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_resetBasinHeaterOperatingSchedule(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def speeds(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_speeds(self)

    def addSpeed(self, speed: "CoilCoolingDXVariableSpeedSpeedData") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_addSpeed(self, speed)

    def removeSpeed(self, speed: "CoilCoolingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_removeSpeed(self, speed)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_removeAllSpeeds(self)

    def autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)

    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def autosizedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_autosizedEvaporativeCondenserPumpRatedPowerConsumption(self)

# Register CoilCoolingDXVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_swigregister(CoilCoolingDXVariableSpeed)

def CoilCoolingDXVariableSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_iddObjectType()

def CoilCoolingDXVariableSpeed_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilCoolingDXVariableSpeed_condenserTypeValues()


def toCoilCoolingDXVariableSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.toCoilCoolingDXVariableSpeed(idfObject)

def getCoilCoolingDXVariableSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXVariableSpeed(t_model, t_handle)

def getCoilCoolingDXVariableSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed,std::allocator< openstudio::model::CoilCoolingDXVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXVariableSpeeds(t_model)

def getCoilCoolingDXVariableSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXVariableSpeedByName(t_model, t_name)

def getCoilCoolingDXVariableSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeed,std::allocator< openstudio::model::CoilCoolingDXVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingDXVariableSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXVariableSpeed(self) -> OptionalCoilCoolingDXVariableSpeed:
    return toCoilCoolingDXVariableSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXVariableSpeed = _to_CoilCoolingDXVariableSpeed

def _getCoilCoolingDXVariableSpeed(self, t_handle: "UUID") -> OptionalCoilCoolingDXVariableSpeed:
    return getCoilCoolingDXVariableSpeed(self, t_handle)
Model.getCoilCoolingDXVariableSpeed = _getCoilCoolingDXVariableSpeed

def _getCoilCoolingDXVariableSpeed(self, t_handle_str: str) -> OptionalCoilCoolingDXVariableSpeed:
    return getCoilCoolingDXVariableSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingDXVariableSpeed = _getCoilCoolingDXVariableSpeed

def _getCoilCoolingDXVariableSpeeds(self) -> CoilCoolingDXVariableSpeedVector:
    return getCoilCoolingDXVariableSpeeds(self)
Model.getCoilCoolingDXVariableSpeeds = _getCoilCoolingDXVariableSpeeds

def _getCoilCoolingDXVariableSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXVariableSpeed:
    return getCoilCoolingDXVariableSpeedByName(self, t_name)
Model.getCoilCoolingDXVariableSpeedByName = _getCoilCoolingDXVariableSpeedByName

def _getCoilCoolingDXVariableSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXVariableSpeedVector:
    return getCoilCoolingDXVariableSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXVariableSpeedsByName = _getCoilCoolingDXVariableSpeedsByName

class CoilCoolingFourPipeBeam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingFourPipeBeam(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingFourPipeBeam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_iddObjectType()

    def chilledWaterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_chilledWaterInletNode(self)

    def chilledWaterOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_chilledWaterOutletNode(self)

    def beamRatedCoolingCapacityperBeamLength(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamRatedCoolingCapacityperBeamLength(self)

    def isBeamRatedCoolingCapacityperBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_isBeamRatedCoolingCapacityperBeamLengthDefaulted(self)

    def beamRatedCoolingRoomAirChilledWaterTemperatureDifference(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamRatedCoolingRoomAirChilledWaterTemperatureDifference(self)

    def isBeamRatedCoolingRoomAirChilledWaterTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_isBeamRatedCoolingRoomAirChilledWaterTemperatureDifferenceDefaulted(self)

    def beamRatedChilledWaterVolumeFlowRateperBeamLength(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamRatedChilledWaterVolumeFlowRateperBeamLength(self)

    def isBeamRatedChilledWaterVolumeFlowRateperBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_isBeamRatedChilledWaterVolumeFlowRateperBeamLengthDefaulted(self)

    def beamCoolingCapacityTemperatureDifferenceModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamCoolingCapacityTemperatureDifferenceModificationFactorCurve(self)

    def beamCoolingCapacityAirFlowModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamCoolingCapacityAirFlowModificationFactorCurve(self)

    def beamCoolingCapacityChilledWaterFlowModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_beamCoolingCapacityChilledWaterFlowModificationFactorCurve(self)

    def setBeamRatedCoolingCapacityperBeamLength(self, beamRatedCoolingCapacityperBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamRatedCoolingCapacityperBeamLength(self, beamRatedCoolingCapacityperBeamLength)

    def resetBeamRatedCoolingCapacityperBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_resetBeamRatedCoolingCapacityperBeamLength(self)

    def setBeamRatedCoolingRoomAirChilledWaterTemperatureDifference(self, beamRatedCoolingRoomAirChilledWaterTemperatureDifference: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamRatedCoolingRoomAirChilledWaterTemperatureDifference(self, beamRatedCoolingRoomAirChilledWaterTemperatureDifference)

    def resetBeamRatedCoolingRoomAirChilledWaterTemperatureDifference(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_resetBeamRatedCoolingRoomAirChilledWaterTemperatureDifference(self)

    def setBeamRatedChilledWaterVolumeFlowRateperBeamLength(self, beamRatedChilledWaterVolumeFlowRateperBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamRatedChilledWaterVolumeFlowRateperBeamLength(self, beamRatedChilledWaterVolumeFlowRateperBeamLength)

    def resetBeamRatedChilledWaterVolumeFlowRateperBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_resetBeamRatedChilledWaterVolumeFlowRateperBeamLength(self)

    def setBeamCoolingCapacityTemperatureDifferenceModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamCoolingCapacityTemperatureDifferenceModificationFactorCurve(self, curve)

    def setBeamCoolingCapacityAirFlowModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamCoolingCapacityAirFlowModificationFactorCurve(self, curve)

    def setBeamCoolingCapacityChilledWaterFlowModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_setBeamCoolingCapacityChilledWaterFlowModificationFactorCurve(self, curve)

    def airTerminalSingleDuctConstantVolumeFourPipeBeam(self) -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >":
        return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_airTerminalSingleDuctConstantVolumeFourPipeBeam(self)

# Register CoilCoolingFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_swigregister(CoilCoolingFourPipeBeam)

def CoilCoolingFourPipeBeam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingFourPipeBeam_iddObjectType()


def toCoilCoolingFourPipeBeam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.toCoilCoolingFourPipeBeam(idfObject)

def getCoilCoolingFourPipeBeam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getCoilCoolingFourPipeBeam(t_model, t_handle)

def getCoilCoolingFourPipeBeams(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam,std::allocator< openstudio::model::CoilCoolingFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingFourPipeBeams(t_model)

def getCoilCoolingFourPipeBeamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getCoilCoolingFourPipeBeamByName(t_model, t_name)

def getCoilCoolingFourPipeBeamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingFourPipeBeam,std::allocator< openstudio::model::CoilCoolingFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingFourPipeBeamsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingFourPipeBeam(self) -> OptionalCoilCoolingFourPipeBeam:
    return toCoilCoolingFourPipeBeam(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingFourPipeBeam = _to_CoilCoolingFourPipeBeam

def _getCoilCoolingFourPipeBeam(self, t_handle: "UUID") -> OptionalCoilCoolingFourPipeBeam:
    return getCoilCoolingFourPipeBeam(self, t_handle)
Model.getCoilCoolingFourPipeBeam = _getCoilCoolingFourPipeBeam

def _getCoilCoolingFourPipeBeam(self, t_handle_str: str) -> OptionalCoilCoolingFourPipeBeam:
    return getCoilCoolingFourPipeBeam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingFourPipeBeam = _getCoilCoolingFourPipeBeam

def _getCoilCoolingFourPipeBeams(self) -> CoilCoolingFourPipeBeamVector:
    return getCoilCoolingFourPipeBeams(self)
Model.getCoilCoolingFourPipeBeams = _getCoilCoolingFourPipeBeams

def _getCoilCoolingFourPipeBeamByName(self, t_name: str) -> OptionalCoilCoolingFourPipeBeam:
    return getCoilCoolingFourPipeBeamByName(self, t_name)
Model.getCoilCoolingFourPipeBeamByName = _getCoilCoolingFourPipeBeamByName

def _getCoilCoolingFourPipeBeamsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingFourPipeBeamVector:
    return getCoilCoolingFourPipeBeamsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingFourPipeBeamsByName = _getCoilCoolingFourPipeBeamsByName

class CoilCoolingLowTempRadiantConstFlow(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", coolingHighWaterTemperatureSchedule: "Schedule", coolingLowWaterTemperatureSchedule: "Schedule", coolingHighControlTemperatureSchedule: "Schedule", coolingLowControlTemperatureSchedule: "Schedule"):
        _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingLowTempRadiantConstFlow(model, coolingHighWaterTemperatureSchedule, coolingLowWaterTemperatureSchedule, coolingHighControlTemperatureSchedule, coolingLowControlTemperatureSchedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingLowTempRadiantConstFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_iddObjectType()

    @staticmethod
    def condensationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_condensationControlTypeValues()

    def coolingHighWaterTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_coolingHighWaterTemperatureSchedule(self)

    def coolingLowWaterTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_coolingLowWaterTemperatureSchedule(self)

    def coolingHighControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_coolingHighControlTemperatureSchedule(self)

    def coolingLowControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_coolingLowControlTemperatureSchedule(self)

    def condensationControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_condensationControlType(self)

    def isCondensationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_isCondensationControlTypeDefaulted(self)

    def condensationControlDewpointOffset(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_condensationControlDewpointOffset(self)

    def isCondensationControlDewpointOffsetDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_isCondensationControlDewpointOffsetDefaulted(self)

    def setCoolingHighWaterTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCoolingHighWaterTemperatureSchedule(self, schedule)

    def resetCoolingHighWaterTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCoolingHighWaterTemperatureSchedule(self)

    def setCoolingLowWaterTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCoolingLowWaterTemperatureSchedule(self, schedule)

    def resetCoolingLowWaterTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCoolingLowWaterTemperatureSchedule(self)

    def setCoolingHighControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCoolingHighControlTemperatureSchedule(self, schedule)

    def resetCoolingHighControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCoolingHighControlTemperatureSchedule(self)

    def setCoolingLowControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCoolingLowControlTemperatureSchedule(self, schedule)

    def resetCoolingLowControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCoolingLowControlTemperatureSchedule(self)

    def setCondensationControlType(self, condensationControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCondensationControlType(self, condensationControlType)

    def resetCondensationControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCondensationControlType(self)

    def setCondensationControlDewpointOffset(self, condensationControlDewpointOffset: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_setCondensationControlDewpointOffset(self, condensationControlDewpointOffset)

    def resetCondensationControlDewpointOffset(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_resetCondensationControlDewpointOffset(self)

# Register CoilCoolingLowTempRadiantConstFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_swigregister(CoilCoolingLowTempRadiantConstFlow)

def CoilCoolingLowTempRadiantConstFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_iddObjectType()

def CoilCoolingLowTempRadiantConstFlow_condensationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantConstFlow_condensationControlTypeValues()


def toCoilCoolingLowTempRadiantConstFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.toCoilCoolingLowTempRadiantConstFlow(idfObject)

def getCoilCoolingLowTempRadiantConstFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantConstFlow(t_model, t_handle)

def getCoilCoolingLowTempRadiantConstFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantConstFlow > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantConstFlows(t_model)

def getCoilCoolingLowTempRadiantConstFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantConstFlowByName(t_model, t_name)

def getCoilCoolingLowTempRadiantConstFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantConstFlow > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantConstFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingLowTempRadiantConstFlow(self) -> OptionalCoilCoolingLowTempRadiantConstFlow:
    return toCoilCoolingLowTempRadiantConstFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingLowTempRadiantConstFlow = _to_CoilCoolingLowTempRadiantConstFlow

def _getCoilCoolingLowTempRadiantConstFlow(self, t_handle: "UUID") -> OptionalCoilCoolingLowTempRadiantConstFlow:
    return getCoilCoolingLowTempRadiantConstFlow(self, t_handle)
Model.getCoilCoolingLowTempRadiantConstFlow = _getCoilCoolingLowTempRadiantConstFlow

def _getCoilCoolingLowTempRadiantConstFlow(self, t_handle_str: str) -> OptionalCoilCoolingLowTempRadiantConstFlow:
    return getCoilCoolingLowTempRadiantConstFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingLowTempRadiantConstFlow = _getCoilCoolingLowTempRadiantConstFlow

def _getCoilCoolingLowTempRadiantConstFlows(self) -> CoilCoolingLowTempRadiantConstFlowVector:
    return getCoilCoolingLowTempRadiantConstFlows(self)
Model.getCoilCoolingLowTempRadiantConstFlows = _getCoilCoolingLowTempRadiantConstFlows

def _getCoilCoolingLowTempRadiantConstFlowByName(self, t_name: str) -> OptionalCoilCoolingLowTempRadiantConstFlow:
    return getCoilCoolingLowTempRadiantConstFlowByName(self, t_name)
Model.getCoilCoolingLowTempRadiantConstFlowByName = _getCoilCoolingLowTempRadiantConstFlowByName

def _getCoilCoolingLowTempRadiantConstFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingLowTempRadiantConstFlowVector:
    return getCoilCoolingLowTempRadiantConstFlowsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingLowTempRadiantConstFlowsByName = _getCoilCoolingLowTempRadiantConstFlowsByName

class CoilCoolingLowTempRadiantVarFlow(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", coolingControlTemperatureSchedule: "Schedule"):
        _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_swiginit(self, _openstudiomodelstraightcomponent.new_CoilCoolingLowTempRadiantVarFlow(model, coolingControlTemperatureSchedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilCoolingLowTempRadiantVarFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_iddObjectType()

    @staticmethod
    def condensationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_condensationControlTypeValues()

    def maximumColdWaterFlow(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_maximumColdWaterFlow(self)

    def isMaximumColdWaterFlowDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_isMaximumColdWaterFlowDefaulted(self)

    def isMaximumColdWaterFlowAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_isMaximumColdWaterFlowAutosized(self)

    def coolingControlThrottlingRange(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_coolingControlThrottlingRange(self)

    def isCoolingControlThrottlingRangeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_isCoolingControlThrottlingRangeDefaulted(self)

    def coolingControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_coolingControlTemperatureSchedule(self)

    def condensationControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_condensationControlType(self)

    def isCondensationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_isCondensationControlTypeDefaulted(self)

    def condensationControlDewpointOffset(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_condensationControlDewpointOffset(self)

    def isCondensationControlDewpointOffsetDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_isCondensationControlDewpointOffsetDefaulted(self)

    def setMaximumColdWaterFlow(self, maximumColdWaterFlow: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_setMaximumColdWaterFlow(self, maximumColdWaterFlow)

    def resetMaximumColdWaterFlow(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_resetMaximumColdWaterFlow(self)

    def autosizeMaximumColdWaterFlow(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_autosizeMaximumColdWaterFlow(self)

    def setCoolingControlThrottlingRange(self, coolingControlThrottlingRange: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_setCoolingControlThrottlingRange(self, coolingControlThrottlingRange)

    def resetCoolingControlThrottlingRange(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_resetCoolingControlThrottlingRange(self)

    def setCoolingControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_setCoolingControlTemperatureSchedule(self, schedule)

    def resetCoolingControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_resetCoolingControlTemperatureSchedule(self)

    def setCondensationControlType(self, condensationControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_setCondensationControlType(self, condensationControlType)

    def resetCondensationControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_resetCondensationControlType(self)

    def setCondensationControlDewpointOffset(self, condensationControlDewpointOffset: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_setCondensationControlDewpointOffset(self, condensationControlDewpointOffset)

    def resetCondensationControlDewpointOffset(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_resetCondensationControlDewpointOffset(self)

    def autosizedMaximumColdWaterFlow(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_autosizedMaximumColdWaterFlow(self)

# Register CoilCoolingLowTempRadiantVarFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_swigregister(CoilCoolingLowTempRadiantVarFlow)

def CoilCoolingLowTempRadiantVarFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_iddObjectType()

def CoilCoolingLowTempRadiantVarFlow_condensationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilCoolingLowTempRadiantVarFlow_condensationControlTypeValues()


def toCoilCoolingLowTempRadiantVarFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.toCoilCoolingLowTempRadiantVarFlow(idfObject)

def getCoilCoolingLowTempRadiantVarFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantVarFlow(t_model, t_handle)

def getCoilCoolingLowTempRadiantVarFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantVarFlow > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantVarFlows(t_model)

def getCoilCoolingLowTempRadiantVarFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilCoolingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantVarFlowByName(t_model, t_name)

def getCoilCoolingLowTempRadiantVarFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilCoolingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilCoolingLowTempRadiantVarFlow > >":
    return _openstudiomodelstraightcomponent.getCoilCoolingLowTempRadiantVarFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingLowTempRadiantVarFlow(self) -> OptionalCoilCoolingLowTempRadiantVarFlow:
    return toCoilCoolingLowTempRadiantVarFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingLowTempRadiantVarFlow = _to_CoilCoolingLowTempRadiantVarFlow

def _getCoilCoolingLowTempRadiantVarFlow(self, t_handle: "UUID") -> OptionalCoilCoolingLowTempRadiantVarFlow:
    return getCoilCoolingLowTempRadiantVarFlow(self, t_handle)
Model.getCoilCoolingLowTempRadiantVarFlow = _getCoilCoolingLowTempRadiantVarFlow

def _getCoilCoolingLowTempRadiantVarFlow(self, t_handle_str: str) -> OptionalCoilCoolingLowTempRadiantVarFlow:
    return getCoilCoolingLowTempRadiantVarFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilCoolingLowTempRadiantVarFlow = _getCoilCoolingLowTempRadiantVarFlow

def _getCoilCoolingLowTempRadiantVarFlows(self) -> CoilCoolingLowTempRadiantVarFlowVector:
    return getCoilCoolingLowTempRadiantVarFlows(self)
Model.getCoilCoolingLowTempRadiantVarFlows = _getCoilCoolingLowTempRadiantVarFlows

def _getCoilCoolingLowTempRadiantVarFlowByName(self, t_name: str) -> OptionalCoilCoolingLowTempRadiantVarFlow:
    return getCoilCoolingLowTempRadiantVarFlowByName(self, t_name)
Model.getCoilCoolingLowTempRadiantVarFlowByName = _getCoilCoolingLowTempRadiantVarFlowByName

def _getCoilCoolingLowTempRadiantVarFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingLowTempRadiantVarFlowVector:
    return getCoilCoolingLowTempRadiantVarFlowsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingLowTempRadiantVarFlowsByName = _getCoilCoolingLowTempRadiantVarFlowsByName

class CoilHeatingDesuperheater(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDesuperheater(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDesuperheater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_availabilitySchedule(self)

    def heatReclaimRecoveryEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_heatReclaimRecoveryEfficiency(self)

    def isHeatReclaimRecoveryEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_isHeatReclaimRecoveryEfficiencyDefaulted(self)

    def heatingSource(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_heatingSource(self)

    def parasiticElectricLoad(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_parasiticElectricLoad(self)

    def isParasiticElectricLoadDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_isParasiticElectricLoadDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_resetAvailabilitySchedule(self)

    def setHeatReclaimRecoveryEfficiency(self, heatReclaimRecoveryEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_setHeatReclaimRecoveryEfficiency(self, heatReclaimRecoveryEfficiency)

    def resetHeatReclaimRecoveryEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_resetHeatReclaimRecoveryEfficiency(self)

    def setHeatingSource(self, modelObject: "ModelObject") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_setHeatingSource(self, modelObject)

    def resetHeatingSource(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_resetHeatingSource(self)

    def setParasiticElectricLoad(self, parasiticElectricLoad: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_setParasiticElectricLoad(self, parasiticElectricLoad)

    def resetParasiticElectricLoad(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_resetParasiticElectricLoad(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_airflowNetworkEquivalentDuct(self)

# Register CoilHeatingDesuperheater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDesuperheater_swigregister(CoilHeatingDesuperheater)

def CoilHeatingDesuperheater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingDesuperheater_iddObjectType()


def toCoilHeatingDesuperheater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.toCoilHeatingDesuperheater(idfObject)

def getCoilHeatingDesuperheater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDesuperheater(t_model, t_handle)

def getCoilHeatingDesuperheaters(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDesuperheater,std::allocator< openstudio::model::CoilHeatingDesuperheater > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDesuperheaters(t_model)

def getCoilHeatingDesuperheaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDesuperheaterByName(t_model, t_name)

def getCoilHeatingDesuperheatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDesuperheater,std::allocator< openstudio::model::CoilHeatingDesuperheater > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDesuperheatersByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDesuperheater(self) -> OptionalCoilHeatingDesuperheater:
    return toCoilHeatingDesuperheater(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDesuperheater = _to_CoilHeatingDesuperheater

def _getCoilHeatingDesuperheater(self, t_handle: "UUID") -> OptionalCoilHeatingDesuperheater:
    return getCoilHeatingDesuperheater(self, t_handle)
Model.getCoilHeatingDesuperheater = _getCoilHeatingDesuperheater

def _getCoilHeatingDesuperheater(self, t_handle_str: str) -> OptionalCoilHeatingDesuperheater:
    return getCoilHeatingDesuperheater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDesuperheater = _getCoilHeatingDesuperheater

def _getCoilHeatingDesuperheaters(self) -> CoilHeatingDesuperheaterVector:
    return getCoilHeatingDesuperheaters(self)
Model.getCoilHeatingDesuperheaters = _getCoilHeatingDesuperheaters

def _getCoilHeatingDesuperheaterByName(self, t_name: str) -> OptionalCoilHeatingDesuperheater:
    return getCoilHeatingDesuperheaterByName(self, t_name)
Model.getCoilHeatingDesuperheaterByName = _getCoilHeatingDesuperheaterByName

def _getCoilHeatingDesuperheatersByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDesuperheaterVector:
    return getCoilHeatingDesuperheatersByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDesuperheatersByName = _getCoilHeatingDesuperheatersByName

class CoilHeatingDXMultiSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXMultiSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXMultiSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_iddObjectType()

    @staticmethod
    def defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostStrategyValues()

    @staticmethod
    def defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostControlValues()

    @staticmethod
    def fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_fuelTypeValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_availabilitySchedule(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def outdoorDryBulbTemperaturetoTurnOnCompressor(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_outdoorDryBulbTemperaturetoTurnOnCompressor(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def defrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def maximumOutdoorDryBulbTemperatureforDefrostOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_maximumOutdoorDryBulbTemperatureforDefrostOperation(self)

    def defrostStrategy(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostStrategy(self)

    def defrostControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostControl(self)

    def defrostTimePeriodFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostTimePeriodFraction(self)

    def resistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_resistiveDefrostHeaterCapacity(self)

    def isResistiveDefrostHeaterCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_isResistiveDefrostHeaterCapacityAutosized(self)

    def applyPartLoadFractiontoSpeedsGreaterthan1(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_applyPartLoadFractiontoSpeedsGreaterthan1(self)

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_fuelType(self)

    def regionnumberforCalculatingHSPF(self) -> "int":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_regionnumberforCalculatingHSPF(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_resetAvailabilitySchedule(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setOutdoorDryBulbTemperaturetoTurnOnCompressor(self, outdoorDryBulbTemperaturetoTurnOnCompressor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setOutdoorDryBulbTemperaturetoTurnOnCompressor(self, outdoorDryBulbTemperaturetoTurnOnCompressor)

    def resetOutdoorDryBulbTemperaturetoTurnOnCompressor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_resetOutdoorDryBulbTemperaturetoTurnOnCompressor(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation)

    def setDefrostStrategy(self, defrostStrategy: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setDefrostStrategy(self, defrostStrategy)

    def setDefrostControl(self, defrostControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setDefrostControl(self, defrostControl)

    def setDefrostTimePeriodFraction(self, defrostTimePeriodFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setDefrostTimePeriodFraction(self, defrostTimePeriodFraction)

    def setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity)

    def autosizeResistiveDefrostHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_autosizeResistiveDefrostHeaterCapacity(self)

    def setApplyPartLoadFractiontoSpeedsGreaterthan1(self, applyPartLoadFractiontoSpeedsGreaterthan1: "bool") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setApplyPartLoadFractiontoSpeedsGreaterthan1(self, applyPartLoadFractiontoSpeedsGreaterthan1)

    def setFuelType(self, fuelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setFuelType(self, fuelType)

    def setRegionnumberforCalculatingHSPF(self, regionnumberforCalculatingHSPF: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_setRegionnumberforCalculatingHSPF(self, regionnumberforCalculatingHSPF)

    def stages(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_stages(self)

    def addStage(self, stage: "CoilHeatingDXMultiSpeedStageData") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_addStage(self, stage)

    def removeStage(self, stage: "CoilHeatingDXMultiSpeedStageData") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_removeStage(self, stage)

    def removeAllStages(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_removeAllStages(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_airflowNetworkEquivalentDuct(self)

    def autosizedResistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_autosizedResistiveDefrostHeaterCapacity(self)

# Register CoilHeatingDXMultiSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_swigregister(CoilHeatingDXMultiSpeed)

def CoilHeatingDXMultiSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_iddObjectType()

def CoilHeatingDXMultiSpeed_defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostStrategyValues()

def CoilHeatingDXMultiSpeed_defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_defrostControlValues()

def CoilHeatingDXMultiSpeed_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXMultiSpeed_fuelTypeValues()


def toCoilHeatingDXMultiSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.toCoilHeatingDXMultiSpeed(idfObject)

def getCoilHeatingDXMultiSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXMultiSpeed(t_model, t_handle)

def getCoilHeatingDXMultiSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed,std::allocator< openstudio::model::CoilHeatingDXMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXMultiSpeeds(t_model)

def getCoilHeatingDXMultiSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXMultiSpeedByName(t_model, t_name)

def getCoilHeatingDXMultiSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeed,std::allocator< openstudio::model::CoilHeatingDXMultiSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXMultiSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXMultiSpeed(self) -> OptionalCoilHeatingDXMultiSpeed:
    return toCoilHeatingDXMultiSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXMultiSpeed = _to_CoilHeatingDXMultiSpeed

def _getCoilHeatingDXMultiSpeed(self, t_handle: "UUID") -> OptionalCoilHeatingDXMultiSpeed:
    return getCoilHeatingDXMultiSpeed(self, t_handle)
Model.getCoilHeatingDXMultiSpeed = _getCoilHeatingDXMultiSpeed

def _getCoilHeatingDXMultiSpeed(self, t_handle_str: str) -> OptionalCoilHeatingDXMultiSpeed:
    return getCoilHeatingDXMultiSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXMultiSpeed = _getCoilHeatingDXMultiSpeed

def _getCoilHeatingDXMultiSpeeds(self) -> CoilHeatingDXMultiSpeedVector:
    return getCoilHeatingDXMultiSpeeds(self)
Model.getCoilHeatingDXMultiSpeeds = _getCoilHeatingDXMultiSpeeds

def _getCoilHeatingDXMultiSpeedByName(self, t_name: str) -> OptionalCoilHeatingDXMultiSpeed:
    return getCoilHeatingDXMultiSpeedByName(self, t_name)
Model.getCoilHeatingDXMultiSpeedByName = _getCoilHeatingDXMultiSpeedByName

def _getCoilHeatingDXMultiSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXMultiSpeedVector:
    return getCoilHeatingDXMultiSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXMultiSpeedsByName = _getCoilHeatingDXMultiSpeedsByName

class CoilHeatingDXSingleSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXSingleSpeed(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXSingleSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_iddObjectType()

    @staticmethod
    def validDefrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_validDefrostStrategyValues()

    @staticmethod
    def validDefrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_validDefrostControlValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_availabilitySchedule(self)

    def ratedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_ratedTotalHeatingCapacity(self)

    def isRatedTotalHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isRatedTotalHeatingCapacityAutosized(self)

    def ratedCOP(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_ratedCOP(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_ratedAirFlowRate(self)

    def isRatedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isRatedAirFlowRateAutosized(self)

    def ratedSupplyFanPowerPerVolumeFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_ratedSupplyFanPowerPerVolumeFlowRate(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self)

    def maximumOutdoorDryBulbTemperatureforDefrostOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_maximumOutdoorDryBulbTemperatureforDefrostOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforDefrostOperationDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isMaximumOutdoorDryBulbTemperatureforDefrostOperationDefaulted(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_crankcaseHeaterCapacity(self)

    def isCrankcaseHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isCrankcaseHeaterCapacityDefaulted(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperationDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperationDefaulted(self)

    def defrostStrategy(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_defrostStrategy(self)

    def isDefrostStrategyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isDefrostStrategyDefaulted(self)

    def defrostControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_defrostControl(self)

    def isDefrostControlDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isDefrostControlDefaulted(self)

    def defrostTimePeriodFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_defrostTimePeriodFraction(self)

    def isDefrostTimePeriodFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isDefrostTimePeriodFractionDefaulted(self)

    def resistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resistiveDefrostHeaterCapacity(self)

    def isResistiveDefrostHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isResistiveDefrostHeaterCapacityDefaulted(self)

    def isResistiveDefrostHeaterCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_isResistiveDefrostHeaterCapacityAutosized(self)

    def setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity)

    def autosizeRatedTotalHeatingCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizeRatedTotalHeatingCapacity(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setAvailabilitySchedule(self, schedule)

    def setRatedCOP(self, ratedCOP: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setRatedCOP(self, ratedCOP)

    def setRatedAirFlowRate(self, ratedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setRatedAirFlowRate(self, ratedAirFlowRate)

    def autosizeRatedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizeRatedAirFlowRate(self)

    def setRatedSupplyFanPowerPerVolumeFlowRate(self, ratedSupplyFanPowerPerVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setRatedSupplyFanPowerPerVolumeFlowRate(self, ratedSupplyFanPowerPerVolumeFlowRate)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation)

    def resetMaximumOutdoorDryBulbTemperatureforDefrostOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetMaximumOutdoorDryBulbTemperatureforDefrostOperation(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def resetCrankcaseHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetCrankcaseHeaterCapacity(self)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def setDefrostStrategy(self, defrostStrategy: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setDefrostStrategy(self, defrostStrategy)

    def resetDefrostStrategy(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetDefrostStrategy(self)

    def setDefrostControl(self, defrostControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setDefrostControl(self, defrostControl)

    def resetDefrostControl(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetDefrostControl(self)

    def setDefrostTimePeriodFraction(self, defrostTimePeriodFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setDefrostTimePeriodFraction(self, defrostTimePeriodFraction)

    def resetDefrostTimePeriodFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetDefrostTimePeriodFraction(self)

    def setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity)

    def resetResistiveDefrostHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetResistiveDefrostHeaterCapacity(self)

    def autosizeResistiveDefrostHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizeResistiveDefrostHeaterCapacity(self)

    def totalHeatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_totalHeatingCapacityFunctionofTemperatureCurve(self)

    def setTotalHeatingCapacityFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setTotalHeatingCapacityFunctionofTemperatureCurve(self, curve)

    def totalHeatingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_totalHeatingCapacityFunctionofFlowFractionCurve(self)

    def setTotalHeatingCapacityFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setTotalHeatingCapacityFunctionofFlowFractionCurve(self, curve)

    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_energyInputRatioFunctionofTemperatureCurve(self)

    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_energyInputRatioFunctionofFlowFractionCurve(self)

    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_partLoadFractionCorrelationCurve(self)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setPartLoadFractionCorrelationCurve(self, curve)

    def defrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_defrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def autosizedRatedTotalHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizedRatedTotalHeatingCapacity(self)

    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizedRatedAirFlowRate(self)

    def autosizedResistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_autosizedResistiveDefrostHeaterCapacity(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_airflowNetworkEquivalentDuct(self)

# Register CoilHeatingDXSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_swigregister(CoilHeatingDXSingleSpeed)

def CoilHeatingDXSingleSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_iddObjectType()

def CoilHeatingDXSingleSpeed_validDefrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_validDefrostStrategyValues()

def CoilHeatingDXSingleSpeed_validDefrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXSingleSpeed_validDefrostControlValues()


def toCoilHeatingDXSingleSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.toCoilHeatingDXSingleSpeed(idfObject)

def getCoilHeatingDXSingleSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXSingleSpeed(t_model, t_handle)

def getCoilHeatingDXSingleSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed,std::allocator< openstudio::model::CoilHeatingDXSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXSingleSpeeds(t_model)

def getCoilHeatingDXSingleSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXSingleSpeedByName(t_model, t_name)

def getCoilHeatingDXSingleSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXSingleSpeed,std::allocator< openstudio::model::CoilHeatingDXSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXSingleSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXSingleSpeed(self) -> OptionalCoilHeatingDXSingleSpeed:
    return toCoilHeatingDXSingleSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXSingleSpeed = _to_CoilHeatingDXSingleSpeed

def _getCoilHeatingDXSingleSpeed(self, t_handle: "UUID") -> OptionalCoilHeatingDXSingleSpeed:
    return getCoilHeatingDXSingleSpeed(self, t_handle)
Model.getCoilHeatingDXSingleSpeed = _getCoilHeatingDXSingleSpeed

def _getCoilHeatingDXSingleSpeed(self, t_handle_str: str) -> OptionalCoilHeatingDXSingleSpeed:
    return getCoilHeatingDXSingleSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXSingleSpeed = _getCoilHeatingDXSingleSpeed

def _getCoilHeatingDXSingleSpeeds(self) -> CoilHeatingDXSingleSpeedVector:
    return getCoilHeatingDXSingleSpeeds(self)
Model.getCoilHeatingDXSingleSpeeds = _getCoilHeatingDXSingleSpeeds

def _getCoilHeatingDXSingleSpeedByName(self, t_name: str) -> OptionalCoilHeatingDXSingleSpeed:
    return getCoilHeatingDXSingleSpeedByName(self, t_name)
Model.getCoilHeatingDXSingleSpeedByName = _getCoilHeatingDXSingleSpeedByName

def _getCoilHeatingDXSingleSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXSingleSpeedVector:
    return getCoilHeatingDXSingleSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXSingleSpeedsByName = _getCoilHeatingDXSingleSpeedsByName

class CoilHeatingDXVariableSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingDXVariableSpeed(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingDXVariableSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_iddObjectType()

    @staticmethod
    def defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostStrategyValues()

    @staticmethod
    def defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostControlValues()

    def nominalSpeedLevel(self) -> "int":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_nominalSpeedLevel(self)

    def ratedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_ratedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self)

    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)

    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_energyPartLoadFractionCurve(self)

    def defrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def outdoorDryBulbTemperaturetoTurnOnCompressor(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_outdoorDryBulbTemperaturetoTurnOnCompressor(self)

    def maximumOutdoorDryBulbTemperatureforDefrostOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_maximumOutdoorDryBulbTemperatureforDefrostOperation(self)

    def crankcaseHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_crankcaseHeaterCapacity(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def defrostStrategy(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostStrategy(self)

    def defrostControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostControl(self)

    def defrostTimePeriodFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostTimePeriodFraction(self)

    def resistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_resistiveDefrostHeaterCapacity(self)

    def isResistiveDefrostHeaterCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_isResistiveDefrostHeaterCapacityAutosized(self)

    def setNominalSpeedLevel(self, nominalSpeedLevel: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setNominalSpeedLevel(self, nominalSpeedLevel)

    def setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel)

    def autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)

    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def setEnergyPartLoadFractionCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setEnergyPartLoadFractionCurve(self, curve)

    def setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setDefrostEnergyInputRatioFunctionofTemperatureCurve(self, curve)

    def resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_resetDefrostEnergyInputRatioFunctionofTemperatureCurve(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setOutdoorDryBulbTemperaturetoTurnOnCompressor(self, outdoorDryBulbTemperaturetoTurnOnCompressor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setOutdoorDryBulbTemperaturetoTurnOnCompressor(self, outdoorDryBulbTemperaturetoTurnOnCompressor)

    def resetOutdoorDryBulbTemperaturetoTurnOnCompressor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_resetOutdoorDryBulbTemperaturetoTurnOnCompressor(self)

    def setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setMaximumOutdoorDryBulbTemperatureforDefrostOperation(self, maximumOutdoorDryBulbTemperatureforDefrostOperation)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setDefrostStrategy(self, defrostStrategy: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setDefrostStrategy(self, defrostStrategy)

    def setDefrostControl(self, defrostControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setDefrostControl(self, defrostControl)

    def setDefrostTimePeriodFraction(self, defrostTimePeriodFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setDefrostTimePeriodFraction(self, defrostTimePeriodFraction)

    def setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_setResistiveDefrostHeaterCapacity(self, resistiveDefrostHeaterCapacity)

    def autosizeResistiveDefrostHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizeResistiveDefrostHeaterCapacity(self)

    def speeds(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_speeds(self)

    def addSpeed(self, speed: "CoilHeatingDXVariableSpeedSpeedData") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_addSpeed(self, speed)

    def removeSpeed(self, speed: "CoilHeatingDXVariableSpeedSpeedData") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_removeSpeed(self, speed)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_removeAllSpeeds(self)

    def autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)

    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)

    def autosizedResistiveDefrostHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_autosizedResistiveDefrostHeaterCapacity(self)

# Register CoilHeatingDXVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_swigregister(CoilHeatingDXVariableSpeed)

def CoilHeatingDXVariableSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_iddObjectType()

def CoilHeatingDXVariableSpeed_defrostStrategyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostStrategyValues()

def CoilHeatingDXVariableSpeed_defrostControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingDXVariableSpeed_defrostControlValues()


def toCoilHeatingDXVariableSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.toCoilHeatingDXVariableSpeed(idfObject)

def getCoilHeatingDXVariableSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXVariableSpeed(t_model, t_handle)

def getCoilHeatingDXVariableSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed,std::allocator< openstudio::model::CoilHeatingDXVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXVariableSpeeds(t_model)

def getCoilHeatingDXVariableSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXVariableSpeedByName(t_model, t_name)

def getCoilHeatingDXVariableSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeed,std::allocator< openstudio::model::CoilHeatingDXVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingDXVariableSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingDXVariableSpeed(self) -> OptionalCoilHeatingDXVariableSpeed:
    return toCoilHeatingDXVariableSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingDXVariableSpeed = _to_CoilHeatingDXVariableSpeed

def _getCoilHeatingDXVariableSpeed(self, t_handle: "UUID") -> OptionalCoilHeatingDXVariableSpeed:
    return getCoilHeatingDXVariableSpeed(self, t_handle)
Model.getCoilHeatingDXVariableSpeed = _getCoilHeatingDXVariableSpeed

def _getCoilHeatingDXVariableSpeed(self, t_handle_str: str) -> OptionalCoilHeatingDXVariableSpeed:
    return getCoilHeatingDXVariableSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingDXVariableSpeed = _getCoilHeatingDXVariableSpeed

def _getCoilHeatingDXVariableSpeeds(self) -> CoilHeatingDXVariableSpeedVector:
    return getCoilHeatingDXVariableSpeeds(self)
Model.getCoilHeatingDXVariableSpeeds = _getCoilHeatingDXVariableSpeeds

def _getCoilHeatingDXVariableSpeedByName(self, t_name: str) -> OptionalCoilHeatingDXVariableSpeed:
    return getCoilHeatingDXVariableSpeedByName(self, t_name)
Model.getCoilHeatingDXVariableSpeedByName = _getCoilHeatingDXVariableSpeedByName

def _getCoilHeatingDXVariableSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingDXVariableSpeedVector:
    return getCoilHeatingDXVariableSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingDXVariableSpeedsByName = _getCoilHeatingDXVariableSpeedsByName

class CoilHeatingElectric(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingElectric_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingElectric(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingElectric

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_availabilitySchedule(self)

    def efficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_efficiency(self)

    def isEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_isEfficiencyDefaulted(self)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_nominalCapacity(self)

    def isNominalCapacityDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_isNominalCapacityDefaulted(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_isNominalCapacityAutosized(self)

    def temperatureSetpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_temperatureSetpointNode(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_setAvailabilitySchedule(self, schedule)

    def setEfficiency(self, efficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_setEfficiency(self, efficiency)

    def resetEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_resetEfficiency(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_setNominalCapacity(self, nominalCapacity)

    def resetNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_resetNominalCapacity(self)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_autosizeNominalCapacity(self)

    def setTemperatureSetpointNode(self, temperatureSetpointNode: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_setTemperatureSetpointNode(self, temperatureSetpointNode)

    def resetTemperatureSetpointNode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_resetTemperatureSetpointNode(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_airflowNetworkEquivalentDuct(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingElectric_autosizedNominalCapacity(self)

# Register CoilHeatingElectric in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingElectric_swigregister(CoilHeatingElectric)

def CoilHeatingElectric_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingElectric_iddObjectType()


def toCoilHeatingElectric(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingElectric >":
    return _openstudiomodelstraightcomponent.toCoilHeatingElectric(idfObject)

def getCoilHeatingElectric(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingElectric >":
    return _openstudiomodelstraightcomponent.getCoilHeatingElectric(t_model, t_handle)

def getCoilHeatingElectrics(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingElectric,std::allocator< openstudio::model::CoilHeatingElectric > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingElectrics(t_model)

def getCoilHeatingElectricByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingElectric >":
    return _openstudiomodelstraightcomponent.getCoilHeatingElectricByName(t_model, t_name)

def getCoilHeatingElectricsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingElectric,std::allocator< openstudio::model::CoilHeatingElectric > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingElectricsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingElectric(self) -> OptionalCoilHeatingElectric:
    return toCoilHeatingElectric(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingElectric = _to_CoilHeatingElectric

def _getCoilHeatingElectric(self, t_handle: "UUID") -> OptionalCoilHeatingElectric:
    return getCoilHeatingElectric(self, t_handle)
Model.getCoilHeatingElectric = _getCoilHeatingElectric

def _getCoilHeatingElectric(self, t_handle_str: str) -> OptionalCoilHeatingElectric:
    return getCoilHeatingElectric(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingElectric = _getCoilHeatingElectric

def _getCoilHeatingElectrics(self) -> CoilHeatingElectricVector:
    return getCoilHeatingElectrics(self)
Model.getCoilHeatingElectrics = _getCoilHeatingElectrics

def _getCoilHeatingElectricByName(self, t_name: str) -> OptionalCoilHeatingElectric:
    return getCoilHeatingElectricByName(self, t_name)
Model.getCoilHeatingElectricByName = _getCoilHeatingElectricByName

def _getCoilHeatingElectricsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingElectricVector:
    return getCoilHeatingElectricsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingElectricsByName = _getCoilHeatingElectricsByName

class CoilHeatingFourPipeBeam(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingFourPipeBeam(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingFourPipeBeam

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_iddObjectType()

    def hotWaterInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_hotWaterInletNode(self)

    def hotWaterOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_hotWaterOutletNode(self)

    def beamRatedHeatingCapacityperBeamLength(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamRatedHeatingCapacityperBeamLength(self)

    def isBeamRatedHeatingCapacityperBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_isBeamRatedHeatingCapacityperBeamLengthDefaulted(self)

    def beamRatedHeatingRoomAirHotWaterTemperatureDifference(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamRatedHeatingRoomAirHotWaterTemperatureDifference(self)

    def isBeamRatedHeatingRoomAirHotWaterTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_isBeamRatedHeatingRoomAirHotWaterTemperatureDifferenceDefaulted(self)

    def beamRatedHotWaterVolumeFlowRateperBeamLength(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamRatedHotWaterVolumeFlowRateperBeamLength(self)

    def isBeamRatedHotWaterVolumeFlowRateperBeamLengthDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_isBeamRatedHotWaterVolumeFlowRateperBeamLengthDefaulted(self)

    def beamHeatingCapacityTemperatureDifferenceModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamHeatingCapacityTemperatureDifferenceModificationFactorCurve(self)

    def beamHeatingCapacityAirFlowModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamHeatingCapacityAirFlowModificationFactorCurve(self)

    def beamHeatingCapacityHotWaterFlowModificationFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_beamHeatingCapacityHotWaterFlowModificationFactorCurve(self)

    def setBeamRatedHeatingCapacityperBeamLength(self, beamRatedHeatingCapacityperBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamRatedHeatingCapacityperBeamLength(self, beamRatedHeatingCapacityperBeamLength)

    def resetBeamRatedHeatingCapacityperBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_resetBeamRatedHeatingCapacityperBeamLength(self)

    def setBeamRatedHeatingRoomAirHotWaterTemperatureDifference(self, beamRatedHeatingRoomAirHotWaterTemperatureDifference: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamRatedHeatingRoomAirHotWaterTemperatureDifference(self, beamRatedHeatingRoomAirHotWaterTemperatureDifference)

    def resetBeamRatedHeatingRoomAirHotWaterTemperatureDifference(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_resetBeamRatedHeatingRoomAirHotWaterTemperatureDifference(self)

    def setBeamRatedHotWaterVolumeFlowRateperBeamLength(self, beamRatedHotWaterVolumeFlowRateperBeamLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamRatedHotWaterVolumeFlowRateperBeamLength(self, beamRatedHotWaterVolumeFlowRateperBeamLength)

    def resetBeamRatedHotWaterVolumeFlowRateperBeamLength(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_resetBeamRatedHotWaterVolumeFlowRateperBeamLength(self)

    def setBeamHeatingCapacityTemperatureDifferenceModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamHeatingCapacityTemperatureDifferenceModificationFactorCurve(self, curve)

    def setBeamHeatingCapacityAirFlowModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamHeatingCapacityAirFlowModificationFactorCurve(self, curve)

    def setBeamHeatingCapacityHotWaterFlowModificationFactorCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_setBeamHeatingCapacityHotWaterFlowModificationFactorCurve(self, curve)

    def airTerminalSingleDuctConstantVolumeFourPipeBeam(self) -> "boost::optional< openstudio::model::AirTerminalSingleDuctConstantVolumeFourPipeBeam >":
        return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_airTerminalSingleDuctConstantVolumeFourPipeBeam(self)

# Register CoilHeatingFourPipeBeam in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_swigregister(CoilHeatingFourPipeBeam)

def CoilHeatingFourPipeBeam_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingFourPipeBeam_iddObjectType()


def toCoilHeatingFourPipeBeam(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.toCoilHeatingFourPipeBeam(idfObject)

def getCoilHeatingFourPipeBeam(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getCoilHeatingFourPipeBeam(t_model, t_handle)

def getCoilHeatingFourPipeBeams(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam,std::allocator< openstudio::model::CoilHeatingFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingFourPipeBeams(t_model)

def getCoilHeatingFourPipeBeamByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingFourPipeBeam >":
    return _openstudiomodelstraightcomponent.getCoilHeatingFourPipeBeamByName(t_model, t_name)

def getCoilHeatingFourPipeBeamsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingFourPipeBeam,std::allocator< openstudio::model::CoilHeatingFourPipeBeam > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingFourPipeBeamsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingFourPipeBeam(self) -> OptionalCoilHeatingFourPipeBeam:
    return toCoilHeatingFourPipeBeam(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingFourPipeBeam = _to_CoilHeatingFourPipeBeam

def _getCoilHeatingFourPipeBeam(self, t_handle: "UUID") -> OptionalCoilHeatingFourPipeBeam:
    return getCoilHeatingFourPipeBeam(self, t_handle)
Model.getCoilHeatingFourPipeBeam = _getCoilHeatingFourPipeBeam

def _getCoilHeatingFourPipeBeam(self, t_handle_str: str) -> OptionalCoilHeatingFourPipeBeam:
    return getCoilHeatingFourPipeBeam(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingFourPipeBeam = _getCoilHeatingFourPipeBeam

def _getCoilHeatingFourPipeBeams(self) -> CoilHeatingFourPipeBeamVector:
    return getCoilHeatingFourPipeBeams(self)
Model.getCoilHeatingFourPipeBeams = _getCoilHeatingFourPipeBeams

def _getCoilHeatingFourPipeBeamByName(self, t_name: str) -> OptionalCoilHeatingFourPipeBeam:
    return getCoilHeatingFourPipeBeamByName(self, t_name)
Model.getCoilHeatingFourPipeBeamByName = _getCoilHeatingFourPipeBeamByName

def _getCoilHeatingFourPipeBeamsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingFourPipeBeamVector:
    return getCoilHeatingFourPipeBeamsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingFourPipeBeamsByName = _getCoilHeatingFourPipeBeamsByName

class CoilHeatingGas(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.CoilHeatingGas_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingGas(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingGas

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_availabilitySchedule(self)

    def availableSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_availableSchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setAvailabilitySchedule(self, schedule)

    def setAvailableSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setAvailableSchedule(self, schedule)

    @staticmethod
    def validFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_validFuelTypeValues()

    def fuelType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_fuelType(self)

    def setFuelType(self, fuelType: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setFuelType(self, fuelType)

    def resetFuelType(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_resetFuelType(self)

    def gasBurnerEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_gasBurnerEfficiency(self)

    def setGasBurnerEfficiency(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setGasBurnerEfficiency(self, value)

    def parasiticElectricLoad(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_parasiticElectricLoad(self)

    def setParasiticElectricLoad(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setParasiticElectricLoad(self, value)

    def parasiticGasLoad(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_parasiticGasLoad(self)

    def setParasiticGasLoad(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setParasiticGasLoad(self, value)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setNominalCapacity(self, nominalCapacity)

    def resetNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_resetNominalCapacity(self)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_autosizeNominalCapacity(self)

    def partLoadFractionCorrelationCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_partLoadFractionCorrelationCurve(self)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_setPartLoadFractionCorrelationCurve(self, curve)

    def resetPartLoadFractionCorrelationCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_resetPartLoadFractionCorrelationCurve(self)

    def getAirflowNetworkEquivalentDuct(self, length: "double", diameter: "double") -> "openstudio::model::AirflowNetworkEquivalentDuct":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_getAirflowNetworkEquivalentDuct(self, length, diameter)

    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_airflowNetworkEquivalentDuct(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingGas_autosizedNominalCapacity(self)

# Register CoilHeatingGas in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingGas_swigregister(CoilHeatingGas)

def CoilHeatingGas_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingGas_iddObjectType()

def CoilHeatingGas_validFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingGas_validFuelTypeValues()


def toCoilHeatingGas(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingGas >":
    return _openstudiomodelstraightcomponent.toCoilHeatingGas(idfObject)

def getCoilHeatingGas(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingGas >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGas(t_model, t_handle)

def getCoilHeatingGass(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingGas,std::allocator< openstudio::model::CoilHeatingGas > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGass(t_model)

def getCoilHeatingGasByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingGas >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGasByName(t_model, t_name)

def getCoilHeatingGassByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingGas,std::allocator< openstudio::model::CoilHeatingGas > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGassByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingGas(self) -> OptionalCoilHeatingGas:
    return toCoilHeatingGas(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingGas = _to_CoilHeatingGas

def _getCoilHeatingGas(self, t_handle: "UUID") -> OptionalCoilHeatingGas:
    return getCoilHeatingGas(self, t_handle)
Model.getCoilHeatingGas = _getCoilHeatingGas

def _getCoilHeatingGas(self, t_handle_str: str) -> OptionalCoilHeatingGas:
    return getCoilHeatingGas(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingGas = _getCoilHeatingGas

def _getCoilHeatingGass(self) -> CoilHeatingGasVector:
    return getCoilHeatingGass(self)
Model.getCoilHeatingGass = _getCoilHeatingGass

def _getCoilHeatingGasByName(self, t_name: str) -> OptionalCoilHeatingGas:
    return getCoilHeatingGasByName(self, t_name)
Model.getCoilHeatingGasByName = _getCoilHeatingGasByName

def _getCoilHeatingGassByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingGasVector:
    return getCoilHeatingGassByName(self, t_name, t_exactMatch)
Model.getCoilHeatingGassByName = _getCoilHeatingGassByName

class CoilHeatingGasMultiStage(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingGasMultiStage(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingGasMultiStage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_availabilitySchedule(self)

    def partLoadFractionCorrelationCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_partLoadFractionCorrelationCurve(self)

    def parasiticGasLoad(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_parasiticGasLoad(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_resetAvailabilitySchedule(self)

    def setPartLoadFractionCorrelationCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_setPartLoadFractionCorrelationCurve(self, curve)

    def resetPartLoadFractionCorrelationCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_resetPartLoadFractionCorrelationCurve(self)

    def setParasiticGasLoad(self, parasiticGasLoad: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_setParasiticGasLoad(self, parasiticGasLoad)

    def resetParasiticGasLoad(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_resetParasiticGasLoad(self)

    def stages(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > >":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_stages(self)

    def addStage(self, stage: "CoilHeatingGasMultiStageStageData") -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_addStage(self, stage)

# Register CoilHeatingGasMultiStage in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_swigregister(CoilHeatingGasMultiStage)

def CoilHeatingGasMultiStage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingGasMultiStage_iddObjectType()


def toCoilHeatingGasMultiStage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStage >":
    return _openstudiomodelstraightcomponent.toCoilHeatingGasMultiStage(idfObject)

def getCoilHeatingGasMultiStage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStage >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGasMultiStage(t_model, t_handle)

def getCoilHeatingGasMultiStages(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingGasMultiStage,std::allocator< openstudio::model::CoilHeatingGasMultiStage > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGasMultiStages(t_model)

def getCoilHeatingGasMultiStageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingGasMultiStage >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGasMultiStageByName(t_model, t_name)

def getCoilHeatingGasMultiStagesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingGasMultiStage,std::allocator< openstudio::model::CoilHeatingGasMultiStage > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingGasMultiStagesByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingGasMultiStage(self) -> OptionalCoilHeatingGasMultiStage:
    return toCoilHeatingGasMultiStage(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingGasMultiStage = _to_CoilHeatingGasMultiStage

def _getCoilHeatingGasMultiStage(self, t_handle: "UUID") -> OptionalCoilHeatingGasMultiStage:
    return getCoilHeatingGasMultiStage(self, t_handle)
Model.getCoilHeatingGasMultiStage = _getCoilHeatingGasMultiStage

def _getCoilHeatingGasMultiStage(self, t_handle_str: str) -> OptionalCoilHeatingGasMultiStage:
    return getCoilHeatingGasMultiStage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingGasMultiStage = _getCoilHeatingGasMultiStage

def _getCoilHeatingGasMultiStages(self) -> CoilHeatingGasMultiStageVector:
    return getCoilHeatingGasMultiStages(self)
Model.getCoilHeatingGasMultiStages = _getCoilHeatingGasMultiStages

def _getCoilHeatingGasMultiStageByName(self, t_name: str) -> OptionalCoilHeatingGasMultiStage:
    return getCoilHeatingGasMultiStageByName(self, t_name)
Model.getCoilHeatingGasMultiStageByName = _getCoilHeatingGasMultiStageByName

def _getCoilHeatingGasMultiStagesByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingGasMultiStageVector:
    return getCoilHeatingGasMultiStagesByName(self, t_name, t_exactMatch)
Model.getCoilHeatingGasMultiStagesByName = _getCoilHeatingGasMultiStagesByName

class CoilHeatingLowTempRadiantConstFlow(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", heatingHighWaterTemperatureSchedule: "Schedule", heatingLowWaterTemperatureSchedule: "Schedule", heatingHighControlTemperatureSchedule: "Schedule", heatingLowControlTemperatureSchedule: "Schedule"):
        _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingLowTempRadiantConstFlow(model, heatingHighWaterTemperatureSchedule, heatingLowWaterTemperatureSchedule, heatingHighControlTemperatureSchedule, heatingLowControlTemperatureSchedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingLowTempRadiantConstFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_iddObjectType()

    def heatingHighWaterTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_heatingHighWaterTemperatureSchedule(self)

    def heatingLowWaterTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_heatingLowWaterTemperatureSchedule(self)

    def heatingHighControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_heatingHighControlTemperatureSchedule(self)

    def heatingLowControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_heatingLowControlTemperatureSchedule(self)

    def setHeatingHighWaterTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_setHeatingHighWaterTemperatureSchedule(self, schedule)

    def resetHeatingHighWaterTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_resetHeatingHighWaterTemperatureSchedule(self)

    def setHeatingLowWaterTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_setHeatingLowWaterTemperatureSchedule(self, schedule)

    def resetHeatingLowWaterTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_resetHeatingLowWaterTemperatureSchedule(self)

    def setHeatingHighControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_setHeatingHighControlTemperatureSchedule(self, schedule)

    def resetHeatingHighControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_resetHeatingHighControlTemperatureSchedule(self)

    def setHeatingLowControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_setHeatingLowControlTemperatureSchedule(self, schedule)

    def resetHeatingLowControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_resetHeatingLowControlTemperatureSchedule(self)

# Register CoilHeatingLowTempRadiantConstFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_swigregister(CoilHeatingLowTempRadiantConstFlow)

def CoilHeatingLowTempRadiantConstFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantConstFlow_iddObjectType()


def toCoilHeatingLowTempRadiantConstFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.toCoilHeatingLowTempRadiantConstFlow(idfObject)

def getCoilHeatingLowTempRadiantConstFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantConstFlow(t_model, t_handle)

def getCoilHeatingLowTempRadiantConstFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantConstFlow > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantConstFlows(t_model)

def getCoilHeatingLowTempRadiantConstFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantConstFlow >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantConstFlowByName(t_model, t_name)

def getCoilHeatingLowTempRadiantConstFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantConstFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantConstFlow > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantConstFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingLowTempRadiantConstFlow(self) -> OptionalCoilHeatingLowTempRadiantConstFlow:
    return toCoilHeatingLowTempRadiantConstFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingLowTempRadiantConstFlow = _to_CoilHeatingLowTempRadiantConstFlow

def _getCoilHeatingLowTempRadiantConstFlow(self, t_handle: "UUID") -> OptionalCoilHeatingLowTempRadiantConstFlow:
    return getCoilHeatingLowTempRadiantConstFlow(self, t_handle)
Model.getCoilHeatingLowTempRadiantConstFlow = _getCoilHeatingLowTempRadiantConstFlow

def _getCoilHeatingLowTempRadiantConstFlow(self, t_handle_str: str) -> OptionalCoilHeatingLowTempRadiantConstFlow:
    return getCoilHeatingLowTempRadiantConstFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingLowTempRadiantConstFlow = _getCoilHeatingLowTempRadiantConstFlow

def _getCoilHeatingLowTempRadiantConstFlows(self) -> CoilHeatingLowTempRadiantConstFlowVector:
    return getCoilHeatingLowTempRadiantConstFlows(self)
Model.getCoilHeatingLowTempRadiantConstFlows = _getCoilHeatingLowTempRadiantConstFlows

def _getCoilHeatingLowTempRadiantConstFlowByName(self, t_name: str) -> OptionalCoilHeatingLowTempRadiantConstFlow:
    return getCoilHeatingLowTempRadiantConstFlowByName(self, t_name)
Model.getCoilHeatingLowTempRadiantConstFlowByName = _getCoilHeatingLowTempRadiantConstFlowByName

def _getCoilHeatingLowTempRadiantConstFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingLowTempRadiantConstFlowVector:
    return getCoilHeatingLowTempRadiantConstFlowsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingLowTempRadiantConstFlowsByName = _getCoilHeatingLowTempRadiantConstFlowsByName

class CoilHeatingLowTempRadiantVarFlow(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", heatingControlTemperature: "Schedule"):
        _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingLowTempRadiantVarFlow(model, heatingControlTemperature))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingLowTempRadiantVarFlow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_iddObjectType()

    def maximumHotWaterFlow(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_maximumHotWaterFlow(self)

    def isMaximumHotWaterFlowDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_isMaximumHotWaterFlowDefaulted(self)

    def isMaximumHotWaterFlowAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_isMaximumHotWaterFlowAutosized(self)

    def heatingControlThrottlingRange(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_heatingControlThrottlingRange(self)

    def isHeatingControlThrottlingRangeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_isHeatingControlThrottlingRangeDefaulted(self)

    def heatingControlTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_heatingControlTemperatureSchedule(self)

    def setMaximumHotWaterFlow(self, maximumHotWaterFlow: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_setMaximumHotWaterFlow(self, maximumHotWaterFlow)

    def resetMaximumHotWaterFlow(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_resetMaximumHotWaterFlow(self)

    def autosizeMaximumHotWaterFlow(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_autosizeMaximumHotWaterFlow(self)

    def setHeatingControlThrottlingRange(self, heatingControlThrottlingRange: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_setHeatingControlThrottlingRange(self, heatingControlThrottlingRange)

    def resetHeatingControlThrottlingRange(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_resetHeatingControlThrottlingRange(self)

    def setHeatingControlTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_setHeatingControlTemperatureSchedule(self, schedule)

    def resetHeatingControlTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_resetHeatingControlTemperatureSchedule(self)

    def autosizedMaximumHotWaterFlow(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_autosizedMaximumHotWaterFlow(self)

# Register CoilHeatingLowTempRadiantVarFlow in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_swigregister(CoilHeatingLowTempRadiantVarFlow)

def CoilHeatingLowTempRadiantVarFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingLowTempRadiantVarFlow_iddObjectType()


def toCoilHeatingLowTempRadiantVarFlow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.toCoilHeatingLowTempRadiantVarFlow(idfObject)

def getCoilHeatingLowTempRadiantVarFlow(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantVarFlow(t_model, t_handle)

def getCoilHeatingLowTempRadiantVarFlows(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantVarFlow > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantVarFlows(t_model)

def getCoilHeatingLowTempRadiantVarFlowByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingLowTempRadiantVarFlow >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantVarFlowByName(t_model, t_name)

def getCoilHeatingLowTempRadiantVarFlowsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingLowTempRadiantVarFlow,std::allocator< openstudio::model::CoilHeatingLowTempRadiantVarFlow > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingLowTempRadiantVarFlowsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingLowTempRadiantVarFlow(self) -> OptionalCoilHeatingLowTempRadiantVarFlow:
    return toCoilHeatingLowTempRadiantVarFlow(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingLowTempRadiantVarFlow = _to_CoilHeatingLowTempRadiantVarFlow

def _getCoilHeatingLowTempRadiantVarFlow(self, t_handle: "UUID") -> OptionalCoilHeatingLowTempRadiantVarFlow:
    return getCoilHeatingLowTempRadiantVarFlow(self, t_handle)
Model.getCoilHeatingLowTempRadiantVarFlow = _getCoilHeatingLowTempRadiantVarFlow

def _getCoilHeatingLowTempRadiantVarFlow(self, t_handle_str: str) -> OptionalCoilHeatingLowTempRadiantVarFlow:
    return getCoilHeatingLowTempRadiantVarFlow(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingLowTempRadiantVarFlow = _getCoilHeatingLowTempRadiantVarFlow

def _getCoilHeatingLowTempRadiantVarFlows(self) -> CoilHeatingLowTempRadiantVarFlowVector:
    return getCoilHeatingLowTempRadiantVarFlows(self)
Model.getCoilHeatingLowTempRadiantVarFlows = _getCoilHeatingLowTempRadiantVarFlows

def _getCoilHeatingLowTempRadiantVarFlowByName(self, t_name: str) -> OptionalCoilHeatingLowTempRadiantVarFlow:
    return getCoilHeatingLowTempRadiantVarFlowByName(self, t_name)
Model.getCoilHeatingLowTempRadiantVarFlowByName = _getCoilHeatingLowTempRadiantVarFlowByName

def _getCoilHeatingLowTempRadiantVarFlowsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingLowTempRadiantVarFlowVector:
    return getCoilHeatingLowTempRadiantVarFlowsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingLowTempRadiantVarFlowsByName = _getCoilHeatingLowTempRadiantVarFlowsByName

class CoilHeatingWaterBaseboard(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingWaterBaseboard(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingWaterBaseboard

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_iddObjectType()

    @staticmethod
    def heatingDesignCapacityMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_heatingDesignCapacityMethodValues()

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_inletPort(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_outletPort(self)

    def heatingDesignCapacityMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_heatingDesignCapacityMethod(self)

    def heatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_heatingDesignCapacity(self)

    def isHeatingDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isHeatingDesignCapacityAutosized(self)

    def heatingDesignCapacityPerFloorArea(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_heatingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedHeatingDesignCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_fractionofAutosizedHeatingDesignCapacity(self)

    def uFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_uFactorTimesAreaValue(self)

    def isUFactorTimesAreaValueDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isUFactorTimesAreaValueDefaulted(self)

    def isUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isUFactorTimesAreaValueAutosized(self)

    def maximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_maximumWaterFlowRate(self)

    def isMaximumWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isMaximumWaterFlowRateDefaulted(self)

    def isMaximumWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isMaximumWaterFlowRateAutosized(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_convergenceTolerance(self)

    def isConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_isConvergenceToleranceDefaulted(self)

    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)

    def setHeatingDesignCapacity(self, heatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setHeatingDesignCapacity(self, heatingDesignCapacity)

    def autosizeHeatingDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizeHeatingDesignCapacity(self)

    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)

    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)

    def setUFactorTimesAreaValue(self, uFactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setUFactorTimesAreaValue(self, uFactorTimesAreaValue)

    def resetUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_resetUFactorTimesAreaValue(self)

    def autosizeUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizeUFactorTimesAreaValue(self)

    def setMaximumWaterFlowRate(self, maximumWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setMaximumWaterFlowRate(self, maximumWaterFlowRate)

    def resetMaximumWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_resetMaximumWaterFlowRate(self)

    def autosizeMaximumWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizeMaximumWaterFlowRate(self)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_setConvergenceTolerance(self, convergenceTolerance)

    def resetConvergenceTolerance(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_resetConvergenceTolerance(self)

    def autosizedHeatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizedHeatingDesignCapacity(self)

    def autosizedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizedUFactorTimesAreaValue(self)

    def autosizedMaximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_autosizedMaximumWaterFlowRate(self)

# Register CoilHeatingWaterBaseboard in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_swigregister(CoilHeatingWaterBaseboard)

def CoilHeatingWaterBaseboard_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_iddObjectType()

def CoilHeatingWaterBaseboard_heatingDesignCapacityMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboard_heatingDesignCapacityMethodValues()


def toCoilHeatingWaterBaseboard(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboard >":
    return _openstudiomodelstraightcomponent.toCoilHeatingWaterBaseboard(idfObject)

def getCoilHeatingWaterBaseboard(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboard >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboard(t_model, t_handle)

def getCoilHeatingWaterBaseboards(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard,std::allocator< openstudio::model::CoilHeatingWaterBaseboard > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboards(t_model)

def getCoilHeatingWaterBaseboardByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboard >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardByName(t_model, t_name)

def getCoilHeatingWaterBaseboardsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboard,std::allocator< openstudio::model::CoilHeatingWaterBaseboard > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWaterBaseboard(self) -> OptionalCoilHeatingWaterBaseboard:
    return toCoilHeatingWaterBaseboard(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWaterBaseboard = _to_CoilHeatingWaterBaseboard

def _getCoilHeatingWaterBaseboard(self, t_handle: "UUID") -> OptionalCoilHeatingWaterBaseboard:
    return getCoilHeatingWaterBaseboard(self, t_handle)
Model.getCoilHeatingWaterBaseboard = _getCoilHeatingWaterBaseboard

def _getCoilHeatingWaterBaseboard(self, t_handle_str: str) -> OptionalCoilHeatingWaterBaseboard:
    return getCoilHeatingWaterBaseboard(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWaterBaseboard = _getCoilHeatingWaterBaseboard

def _getCoilHeatingWaterBaseboards(self) -> CoilHeatingWaterBaseboardVector:
    return getCoilHeatingWaterBaseboards(self)
Model.getCoilHeatingWaterBaseboards = _getCoilHeatingWaterBaseboards

def _getCoilHeatingWaterBaseboardByName(self, t_name: str) -> OptionalCoilHeatingWaterBaseboard:
    return getCoilHeatingWaterBaseboardByName(self, t_name)
Model.getCoilHeatingWaterBaseboardByName = _getCoilHeatingWaterBaseboardByName

def _getCoilHeatingWaterBaseboardsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterBaseboardVector:
    return getCoilHeatingWaterBaseboardsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWaterBaseboardsByName = _getCoilHeatingWaterBaseboardsByName

class CoilHeatingWaterBaseboardRadiant(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_swiginit(self, _openstudiomodelstraightcomponent.new_CoilHeatingWaterBaseboardRadiant(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilHeatingWaterBaseboardRadiant

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_iddObjectType()

    @staticmethod
    def heatingDesignCapacityMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_heatingDesignCapacityMethodValues()

    def ratedAverageWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_ratedAverageWaterTemperature(self)

    def ratedWaterMassFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_ratedWaterMassFlowRate(self)

    def heatingDesignCapacityMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_heatingDesignCapacityMethod(self)

    def heatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_heatingDesignCapacity(self)

    def isHeatingDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_isHeatingDesignCapacityAutosized(self)

    def heatingDesignCapacityPerFloorArea(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_heatingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedHeatingDesignCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_fractionofAutosizedHeatingDesignCapacity(self)

    def maximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_maximumWaterFlowRate(self)

    def isMaximumWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_isMaximumWaterFlowRateAutosized(self)

    def convergenceTolerance(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_convergenceTolerance(self)

    def setRatedAverageWaterTemperature(self, ratedAverageWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setRatedAverageWaterTemperature(self, ratedAverageWaterTemperature)

    def setRatedWaterMassFlowRate(self, ratedWaterMassFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setRatedWaterMassFlowRate(self, ratedWaterMassFlowRate)

    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)

    def setHeatingDesignCapacity(self, heatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setHeatingDesignCapacity(self, heatingDesignCapacity)

    def autosizeHeatingDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_autosizeHeatingDesignCapacity(self)

    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)

    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)

    def setMaximumWaterFlowRate(self, maximumWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setMaximumWaterFlowRate(self, maximumWaterFlowRate)

    def autosizeMaximumWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_autosizeMaximumWaterFlowRate(self)

    def setConvergenceTolerance(self, convergenceTolerance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_setConvergenceTolerance(self, convergenceTolerance)

    def autosizedHeatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_autosizedHeatingDesignCapacity(self)

    def autosizedMaximumWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_autosizedMaximumWaterFlowRate(self)

# Register CoilHeatingWaterBaseboardRadiant in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_swigregister(CoilHeatingWaterBaseboardRadiant)

def CoilHeatingWaterBaseboardRadiant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_iddObjectType()

def CoilHeatingWaterBaseboardRadiant_heatingDesignCapacityMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoilHeatingWaterBaseboardRadiant_heatingDesignCapacityMethodValues()


def toCoilHeatingWaterBaseboardRadiant(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboardRadiant >":
    return _openstudiomodelstraightcomponent.toCoilHeatingWaterBaseboardRadiant(idfObject)

def getCoilHeatingWaterBaseboardRadiant(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboardRadiant >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardRadiant(t_model, t_handle)

def getCoilHeatingWaterBaseboardRadiants(t_model: "Model") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant,std::allocator< openstudio::model::CoilHeatingWaterBaseboardRadiant > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardRadiants(t_model)

def getCoilHeatingWaterBaseboardRadiantByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilHeatingWaterBaseboardRadiant >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardRadiantByName(t_model, t_name)

def getCoilHeatingWaterBaseboardRadiantsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilHeatingWaterBaseboardRadiant,std::allocator< openstudio::model::CoilHeatingWaterBaseboardRadiant > >":
    return _openstudiomodelstraightcomponent.getCoilHeatingWaterBaseboardRadiantsByName(t_model, t_name, t_exactMatch)

def _to_CoilHeatingWaterBaseboardRadiant(self) -> OptionalCoilHeatingWaterBaseboardRadiant:
    return toCoilHeatingWaterBaseboardRadiant(self)
openstudioutilitiesidf.IdfObject.to_CoilHeatingWaterBaseboardRadiant = _to_CoilHeatingWaterBaseboardRadiant

def _getCoilHeatingWaterBaseboardRadiant(self, t_handle: "UUID") -> OptionalCoilHeatingWaterBaseboardRadiant:
    return getCoilHeatingWaterBaseboardRadiant(self, t_handle)
Model.getCoilHeatingWaterBaseboardRadiant = _getCoilHeatingWaterBaseboardRadiant

def _getCoilHeatingWaterBaseboardRadiant(self, t_handle_str: str) -> OptionalCoilHeatingWaterBaseboardRadiant:
    return getCoilHeatingWaterBaseboardRadiant(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilHeatingWaterBaseboardRadiant = _getCoilHeatingWaterBaseboardRadiant

def _getCoilHeatingWaterBaseboardRadiants(self) -> CoilHeatingWaterBaseboardRadiantVector:
    return getCoilHeatingWaterBaseboardRadiants(self)
Model.getCoilHeatingWaterBaseboardRadiants = _getCoilHeatingWaterBaseboardRadiants

def _getCoilHeatingWaterBaseboardRadiantByName(self, t_name: str) -> OptionalCoilHeatingWaterBaseboardRadiant:
    return getCoilHeatingWaterBaseboardRadiantByName(self, t_name)
Model.getCoilHeatingWaterBaseboardRadiantByName = _getCoilHeatingWaterBaseboardRadiantByName

def _getCoilHeatingWaterBaseboardRadiantsByName(self, t_name: str, t_exactMatch: bool) -> CoilHeatingWaterBaseboardRadiantVector:
    return getCoilHeatingWaterBaseboardRadiantsByName(self, t_name, t_exactMatch)
Model.getCoilHeatingWaterBaseboardRadiantsByName = _getCoilHeatingWaterBaseboardRadiantsByName

class CoilSystemCoolingDXHeatExchangerAssisted(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_swiginit(self, _openstudiomodelstraightcomponent.new_CoilSystemCoolingDXHeatExchangerAssisted(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilSystemCoolingDXHeatExchangerAssisted

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_iddObjectType()

    def heatExchanger(self) -> "openstudio::model::AirToAirComponent":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_heatExchanger(self)

    def coolingCoil(self) -> "openstudio::model::StraightComponent":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_coolingCoil(self)

    def setHeatExchanger(self, heatExchanger: "AirToAirComponent") -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_setHeatExchanger(self, heatExchanger)

    def setCoolingCoil(self, coolingCoil: "StraightComponent") -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_setCoolingCoil(self, coolingCoil)

# Register CoilSystemCoolingDXHeatExchangerAssisted in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_swigregister(CoilSystemCoolingDXHeatExchangerAssisted)

def CoilSystemCoolingDXHeatExchangerAssisted_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilSystemCoolingDXHeatExchangerAssisted_iddObjectType()


def toCoilSystemCoolingDXHeatExchangerAssisted(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.toCoilSystemCoolingDXHeatExchangerAssisted(idfObject)

def getCoilSystemCoolingDXHeatExchangerAssisted(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingDXHeatExchangerAssisted(t_model, t_handle)

def getCoilSystemCoolingDXHeatExchangerAssisteds(t_model: "Model") -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted > >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingDXHeatExchangerAssisteds(t_model)

def getCoilSystemCoolingDXHeatExchangerAssistedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingDXHeatExchangerAssistedByName(t_model, t_name)

def getCoilSystemCoolingDXHeatExchangerAssistedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingDXHeatExchangerAssisted > >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingDXHeatExchangerAssistedsByName(t_model, t_name, t_exactMatch)

def _to_CoilSystemCoolingDXHeatExchangerAssisted(self) -> OptionalCoilSystemCoolingDXHeatExchangerAssisted:
    return toCoilSystemCoolingDXHeatExchangerAssisted(self)
openstudioutilitiesidf.IdfObject.to_CoilSystemCoolingDXHeatExchangerAssisted = _to_CoilSystemCoolingDXHeatExchangerAssisted

def _getCoilSystemCoolingDXHeatExchangerAssisted(self, t_handle: "UUID") -> OptionalCoilSystemCoolingDXHeatExchangerAssisted:
    return getCoilSystemCoolingDXHeatExchangerAssisted(self, t_handle)
Model.getCoilSystemCoolingDXHeatExchangerAssisted = _getCoilSystemCoolingDXHeatExchangerAssisted

def _getCoilSystemCoolingDXHeatExchangerAssisted(self, t_handle_str: str) -> OptionalCoilSystemCoolingDXHeatExchangerAssisted:
    return getCoilSystemCoolingDXHeatExchangerAssisted(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilSystemCoolingDXHeatExchangerAssisted = _getCoilSystemCoolingDXHeatExchangerAssisted

def _getCoilSystemCoolingDXHeatExchangerAssisteds(self) -> CoilSystemCoolingDXHeatExchangerAssistedVector:
    return getCoilSystemCoolingDXHeatExchangerAssisteds(self)
Model.getCoilSystemCoolingDXHeatExchangerAssisteds = _getCoilSystemCoolingDXHeatExchangerAssisteds

def _getCoilSystemCoolingDXHeatExchangerAssistedByName(self, t_name: str) -> OptionalCoilSystemCoolingDXHeatExchangerAssisted:
    return getCoilSystemCoolingDXHeatExchangerAssistedByName(self, t_name)
Model.getCoilSystemCoolingDXHeatExchangerAssistedByName = _getCoilSystemCoolingDXHeatExchangerAssistedByName

def _getCoilSystemCoolingDXHeatExchangerAssistedsByName(self, t_name: str, t_exactMatch: bool) -> CoilSystemCoolingDXHeatExchangerAssistedVector:
    return getCoilSystemCoolingDXHeatExchangerAssistedsByName(self, t_name, t_exactMatch)
Model.getCoilSystemCoolingDXHeatExchangerAssistedsByName = _getCoilSystemCoolingDXHeatExchangerAssistedsByName

class CoilSystemCoolingWaterHeatExchangerAssisted(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_swiginit(self, _openstudiomodelstraightcomponent.new_CoilSystemCoolingWaterHeatExchangerAssisted(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilSystemCoolingWaterHeatExchangerAssisted

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_iddObjectType()

    def heatExchanger(self) -> "openstudio::model::AirToAirComponent":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_heatExchanger(self)

    def coolingCoil(self) -> "openstudio::model::WaterToAirComponent":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_coolingCoil(self)

    def setHeatExchanger(self, heatExchanger: "AirToAirComponent") -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_setHeatExchanger(self, heatExchanger)

    def setCoolingCoil(self, coolingCoil: "WaterToAirComponent") -> "bool":
        return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_setCoolingCoil(self, coolingCoil)

# Register CoilSystemCoolingWaterHeatExchangerAssisted in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_swigregister(CoilSystemCoolingWaterHeatExchangerAssisted)

def CoilSystemCoolingWaterHeatExchangerAssisted_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilSystemCoolingWaterHeatExchangerAssisted_iddObjectType()


def toCoilSystemCoolingWaterHeatExchangerAssisted(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.toCoilSystemCoolingWaterHeatExchangerAssisted(idfObject)

def getCoilSystemCoolingWaterHeatExchangerAssisted(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingWaterHeatExchangerAssisted(t_model, t_handle)

def getCoilSystemCoolingWaterHeatExchangerAssisteds(t_model: "Model") -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted > >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingWaterHeatExchangerAssisteds(t_model)

def getCoilSystemCoolingWaterHeatExchangerAssistedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingWaterHeatExchangerAssistedByName(t_model, t_name)

def getCoilSystemCoolingWaterHeatExchangerAssistedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted,std::allocator< openstudio::model::CoilSystemCoolingWaterHeatExchangerAssisted > >":
    return _openstudiomodelstraightcomponent.getCoilSystemCoolingWaterHeatExchangerAssistedsByName(t_model, t_name, t_exactMatch)

def _to_CoilSystemCoolingWaterHeatExchangerAssisted(self) -> OptionalCoilSystemCoolingWaterHeatExchangerAssisted:
    return toCoilSystemCoolingWaterHeatExchangerAssisted(self)
openstudioutilitiesidf.IdfObject.to_CoilSystemCoolingWaterHeatExchangerAssisted = _to_CoilSystemCoolingWaterHeatExchangerAssisted

def _getCoilSystemCoolingWaterHeatExchangerAssisted(self, t_handle: "UUID") -> OptionalCoilSystemCoolingWaterHeatExchangerAssisted:
    return getCoilSystemCoolingWaterHeatExchangerAssisted(self, t_handle)
Model.getCoilSystemCoolingWaterHeatExchangerAssisted = _getCoilSystemCoolingWaterHeatExchangerAssisted

def _getCoilSystemCoolingWaterHeatExchangerAssisted(self, t_handle_str: str) -> OptionalCoilSystemCoolingWaterHeatExchangerAssisted:
    return getCoilSystemCoolingWaterHeatExchangerAssisted(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilSystemCoolingWaterHeatExchangerAssisted = _getCoilSystemCoolingWaterHeatExchangerAssisted

def _getCoilSystemCoolingWaterHeatExchangerAssisteds(self) -> CoilSystemCoolingWaterHeatExchangerAssistedVector:
    return getCoilSystemCoolingWaterHeatExchangerAssisteds(self)
Model.getCoilSystemCoolingWaterHeatExchangerAssisteds = _getCoilSystemCoolingWaterHeatExchangerAssisteds

def _getCoilSystemCoolingWaterHeatExchangerAssistedByName(self, t_name: str) -> OptionalCoilSystemCoolingWaterHeatExchangerAssisted:
    return getCoilSystemCoolingWaterHeatExchangerAssistedByName(self, t_name)
Model.getCoilSystemCoolingWaterHeatExchangerAssistedByName = _getCoilSystemCoolingWaterHeatExchangerAssistedByName

def _getCoilSystemCoolingWaterHeatExchangerAssistedsByName(self, t_name: str, t_exactMatch: bool) -> CoilSystemCoolingWaterHeatExchangerAssistedVector:
    return getCoilSystemCoolingWaterHeatExchangerAssistedsByName(self, t_name, t_exactMatch)
Model.getCoilSystemCoolingWaterHeatExchangerAssistedsByName = _getCoilSystemCoolingWaterHeatExchangerAssistedsByName

class CoilWaterHeatingDesuperheater(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", setpointTemperatureSchedule: "Schedule"):
        _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_swiginit(self, _openstudiomodelstraightcomponent.new_CoilWaterHeatingDesuperheater(model, setpointTemperatureSchedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoilWaterHeatingDesuperheater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_iddObjectType()

    def heatRejectionTarget(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_heatRejectionTarget(self)

    def addToHeatRejectionTarget(self, heatRejectionTarget: "ModelObject") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_addToHeatRejectionTarget(self, heatRejectionTarget)

    def removeFromHeatRejectionTarget(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_removeFromHeatRejectionTarget(self)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_availabilitySchedule(self)

    def setpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setpointTemperatureSchedule(self)

    def deadBandTemperatureDifference(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_deadBandTemperatureDifference(self)

    def isDeadBandTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_isDeadBandTemperatureDifferenceDefaulted(self)

    def ratedHeatReclaimRecoveryEfficiency(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_ratedHeatReclaimRecoveryEfficiency(self)

    def ratedInletWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_ratedInletWaterTemperature(self)

    def ratedOutdoorAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_ratedOutdoorAirTemperature(self)

    def maximumInletWaterTemperatureforHeatReclaim(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_maximumInletWaterTemperatureforHeatReclaim(self)

    def heatReclaimEfficiencyFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::CurveBiquadratic >":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_heatReclaimEfficiencyFunctionofTemperatureCurve(self)

    def heatingSource(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_heatingSource(self)

    def waterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_waterFlowRate(self)

    def waterPumpPower(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_waterPumpPower(self)

    def isWaterPumpPowerDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_isWaterPumpPowerDefaulted(self)

    def fractionofPumpHeattoWater(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_fractionofPumpHeattoWater(self)

    def isFractionofPumpHeattoWaterDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_isFractionofPumpHeattoWaterDefaulted(self)

    def onCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_onCycleParasiticElectricLoad(self)

    def isOnCycleParasiticElectricLoadDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_isOnCycleParasiticElectricLoadDefaulted(self)

    def offCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_offCycleParasiticElectricLoad(self)

    def isOffCycleParasiticElectricLoadDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_isOffCycleParasiticElectricLoadDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetAvailabilitySchedule(self)

    def setSetpointTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setSetpointTemperatureSchedule(self, schedule)

    def setDeadBandTemperatureDifference(self, deadBandTemperatureDifference: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setDeadBandTemperatureDifference(self, deadBandTemperatureDifference)

    def resetDeadBandTemperatureDifference(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetDeadBandTemperatureDifference(self)

    def setRatedHeatReclaimRecoveryEfficiency(self, ratedHeatReclaimRecoveryEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setRatedHeatReclaimRecoveryEfficiency(self, ratedHeatReclaimRecoveryEfficiency)

    def resetRatedHeatReclaimRecoveryEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetRatedHeatReclaimRecoveryEfficiency(self)

    def setRatedInletWaterTemperature(self, ratedInletWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setRatedInletWaterTemperature(self, ratedInletWaterTemperature)

    def setRatedOutdoorAirTemperature(self, ratedOutdoorAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setRatedOutdoorAirTemperature(self, ratedOutdoorAirTemperature)

    def setMaximumInletWaterTemperatureforHeatReclaim(self, maximumInletWaterTemperatureforHeatReclaim: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setMaximumInletWaterTemperatureforHeatReclaim(self, maximumInletWaterTemperatureforHeatReclaim)

    def setHeatReclaimEfficiencyFunctionofTemperatureCurve(self, curveBiquadratic: "CurveBiquadratic") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setHeatReclaimEfficiencyFunctionofTemperatureCurve(self, curveBiquadratic)

    def resetHeatReclaimEfficiencyFunctionofTemperatureCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetHeatReclaimEfficiencyFunctionofTemperatureCurve(self)

    def setHeatingSource(self, heatingSource: "ModelObject") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setHeatingSource(self, heatingSource)

    def resetHeatingSource(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetHeatingSource(self)

    def setWaterFlowRate(self, waterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setWaterFlowRate(self, waterFlowRate)

    def setWaterPumpPower(self, waterPumpPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setWaterPumpPower(self, waterPumpPower)

    def resetWaterPumpPower(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetWaterPumpPower(self)

    def setFractionofPumpHeattoWater(self, fractionofPumpHeattoWater: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setFractionofPumpHeattoWater(self, fractionofPumpHeattoWater)

    def resetFractionofPumpHeattoWater(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetFractionofPumpHeattoWater(self)

    def setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad)

    def resetOnCycleParasiticElectricLoad(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetOnCycleParasiticElectricLoad(self)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

    def resetOffCycleParasiticElectricLoad(self) -> "void":
        return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_resetOffCycleParasiticElectricLoad(self)

# Register CoilWaterHeatingDesuperheater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_swigregister(CoilWaterHeatingDesuperheater)

def CoilWaterHeatingDesuperheater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoilWaterHeatingDesuperheater_iddObjectType()


def toCoilWaterHeatingDesuperheater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoilWaterHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.toCoilWaterHeatingDesuperheater(idfObject)

def getCoilWaterHeatingDesuperheater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoilWaterHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.getCoilWaterHeatingDesuperheater(t_model, t_handle)

def getCoilWaterHeatingDesuperheaters(t_model: "Model") -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater,std::allocator< openstudio::model::CoilWaterHeatingDesuperheater > >":
    return _openstudiomodelstraightcomponent.getCoilWaterHeatingDesuperheaters(t_model)

def getCoilWaterHeatingDesuperheaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoilWaterHeatingDesuperheater >":
    return _openstudiomodelstraightcomponent.getCoilWaterHeatingDesuperheaterByName(t_model, t_name)

def getCoilWaterHeatingDesuperheatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoilWaterHeatingDesuperheater,std::allocator< openstudio::model::CoilWaterHeatingDesuperheater > >":
    return _openstudiomodelstraightcomponent.getCoilWaterHeatingDesuperheatersByName(t_model, t_name, t_exactMatch)

def _to_CoilWaterHeatingDesuperheater(self) -> OptionalCoilWaterHeatingDesuperheater:
    return toCoilWaterHeatingDesuperheater(self)
openstudioutilitiesidf.IdfObject.to_CoilWaterHeatingDesuperheater = _to_CoilWaterHeatingDesuperheater

def _getCoilWaterHeatingDesuperheater(self, t_handle: "UUID") -> OptionalCoilWaterHeatingDesuperheater:
    return getCoilWaterHeatingDesuperheater(self, t_handle)
Model.getCoilWaterHeatingDesuperheater = _getCoilWaterHeatingDesuperheater

def _getCoilWaterHeatingDesuperheater(self, t_handle_str: str) -> OptionalCoilWaterHeatingDesuperheater:
    return getCoilWaterHeatingDesuperheater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoilWaterHeatingDesuperheater = _getCoilWaterHeatingDesuperheater

def _getCoilWaterHeatingDesuperheaters(self) -> CoilWaterHeatingDesuperheaterVector:
    return getCoilWaterHeatingDesuperheaters(self)
Model.getCoilWaterHeatingDesuperheaters = _getCoilWaterHeatingDesuperheaters

def _getCoilWaterHeatingDesuperheaterByName(self, t_name: str) -> OptionalCoilWaterHeatingDesuperheater:
    return getCoilWaterHeatingDesuperheaterByName(self, t_name)
Model.getCoilWaterHeatingDesuperheaterByName = _getCoilWaterHeatingDesuperheaterByName

def _getCoilWaterHeatingDesuperheatersByName(self, t_name: str, t_exactMatch: bool) -> CoilWaterHeatingDesuperheaterVector:
    return getCoilWaterHeatingDesuperheatersByName(self, t_name, t_exactMatch)
Model.getCoilWaterHeatingDesuperheatersByName = _getCoilWaterHeatingDesuperheatersByName

class CoolingTowerSingleSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerSingleSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerSingleSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_performanceInputMethodValues()

    @staticmethod
    def evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_evaporationLossModeValues()

    @staticmethod
    def blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_blowdownCalculationModeValues()

    @staticmethod
    def capacityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_capacityControlValues()

    @staticmethod
    def cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_cellControlValues()

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isDesignWaterFlowRateAutosized(self)

    def designAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designAirFlowRate(self)

    def isDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isDesignAirFlowRateAutosized(self)

    def fanPoweratDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_fanPoweratDesignAirFlowRate(self)

    def isFanPoweratDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isFanPoweratDesignAirFlowRateAutosized(self)

    def uFactorTimesAreaValueatDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_uFactorTimesAreaValueatDesignAirFlowRate(self)

    def isUFactorTimesAreaValueatDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isUFactorTimesAreaValueatDesignAirFlowRateAutosized(self)

    def airFlowRateinFreeConvectionRegime(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_airFlowRateinFreeConvectionRegime(self)

    def isAirFlowRateinFreeConvectionRegimeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isAirFlowRateinFreeConvectionRegimeDefaulted(self)

    def isAirFlowRateinFreeConvectionRegimeAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isAirFlowRateinFreeConvectionRegimeAutosized(self)

    def uFactorTimesAreaValueatFreeConvectionAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_uFactorTimesAreaValueatFreeConvectionAirFlowRate(self)

    def isUFactorTimesAreaValueatFreeConvectionAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isUFactorTimesAreaValueatFreeConvectionAirFlowRateDefaulted(self)

    def isUFactorTimesAreaValueatFreeConvectionAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isUFactorTimesAreaValueatFreeConvectionAirFlowRateAutosized(self)

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_performanceInputMethod(self)

    def isPerformanceInputMethodDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isPerformanceInputMethodDefaulted(self)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_nominalCapacity(self)

    def freeConvectionCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_freeConvectionCapacity(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_basinHeaterCapacity(self)

    def isBasinHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isBasinHeaterCapacityDefaulted(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_basinHeaterSetpointTemperature(self)

    def isBasinHeaterSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isBasinHeaterSetpointTemperatureDefaulted(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_basinHeaterOperatingSchedule(self)

    def evaporationLossMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_evaporationLossMode(self)

    def evaporationLossFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_evaporationLossFactor(self)

    def isEvaporationLossFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isEvaporationLossFactorDefaulted(self)

    def driftLossPercent(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_driftLossPercent(self)

    def isDriftLossPercentDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isDriftLossPercentDefaulted(self)

    def blowdownCalculationMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_blowdownCalculationMode(self)

    def blowdownConcentrationRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_blowdownConcentrationRatio(self)

    def isBlowdownConcentrationRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isBlowdownConcentrationRatioDefaulted(self)

    def blowdownMakeupWaterUsageSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_blowdownMakeupWaterUsageSchedule(self)

    def capacityControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_capacityControl(self)

    def isCapacityControlDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isCapacityControlDefaulted(self)

    def numberofCells(self) -> "int":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_numberofCells(self)

    def isNumberofCellsDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isNumberofCellsDefaulted(self)

    def cellControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_cellControl(self)

    def isCellControlDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isCellControlDefaulted(self)

    def cellMinimumWaterFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_cellMinimumWaterFlowRateFraction(self)

    def isCellMinimumWaterFlowRateFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isCellMinimumWaterFlowRateFractionDefaulted(self)

    def cellMaximumWaterFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_cellMaximumWaterFlowRateFraction(self)

    def isCellMaximumWaterFlowRateFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isCellMaximumWaterFlowRateFractionDefaulted(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isSizingFactorDefaulted(self)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def resetDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetDesignWaterFlowRate(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeDesignWaterFlowRate(self)

    def setDesignAirFlowRate(self, designAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignAirFlowRate(self, designAirFlowRate)

    def autosizeDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeDesignAirFlowRate(self)

    def setFanPoweratDesignAirFlowRate(self, fanPoweratDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setFanPoweratDesignAirFlowRate(self, fanPoweratDesignAirFlowRate)

    def autosizeFanPoweratDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeFanPoweratDesignAirFlowRate(self)

    def setUFactorTimesAreaValueatDesignAirFlowRate(self, uFactorTimesAreaValueatDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setUFactorTimesAreaValueatDesignAirFlowRate(self, uFactorTimesAreaValueatDesignAirFlowRate)

    def resetUFactorTimesAreaValueatDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetUFactorTimesAreaValueatDesignAirFlowRate(self)

    def autosizeUFactorTimesAreaValueatDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeUFactorTimesAreaValueatDesignAirFlowRate(self)

    def setAirFlowRateinFreeConvectionRegime(self, airFlowRateinFreeConvectionRegime: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setAirFlowRateinFreeConvectionRegime(self, airFlowRateinFreeConvectionRegime)

    def resetAirFlowRateinFreeConvectionRegime(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetAirFlowRateinFreeConvectionRegime(self)

    def autosizeAirFlowRateinFreeConvectionRegime(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeAirFlowRateinFreeConvectionRegime(self)

    def setUFactorTimesAreaValueatFreeConvectionAirFlowRate(self, uFactorTimesAreaValueatFreeConvectionAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setUFactorTimesAreaValueatFreeConvectionAirFlowRate(self, uFactorTimesAreaValueatFreeConvectionAirFlowRate)

    def resetUFactorTimesAreaValueatFreeConvectionAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetUFactorTimesAreaValueatFreeConvectionAirFlowRate(self)

    def autosizeUFactorTimesAreaValueatFreeConvectionAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeUFactorTimesAreaValueatFreeConvectionAirFlowRate(self)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def resetPerformanceInputMethod(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetPerformanceInputMethod(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setNominalCapacity(self, nominalCapacity)

    def resetNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetNominalCapacity(self)

    def setFreeConvectionCapacity(self, freeConvectionCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setFreeConvectionCapacity(self, freeConvectionCapacity)

    def resetFreeConvectionCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetFreeConvectionCapacity(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBasinHeaterCapacity(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBasinHeaterSetpointTemperature(self)

    def setBasinHeaterOperatingSchedule(self, basinHeaterOperatingSchedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBasinHeaterOperatingSchedule(self, basinHeaterOperatingSchedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBasinHeaterOperatingSchedule(self)

    def setEvaporationLossMode(self, evaporationLossMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setEvaporationLossMode(self, evaporationLossMode)

    def resetEvaporationLossMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetEvaporationLossMode(self)

    def setEvaporationLossFactor(self, evaporationLossFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setEvaporationLossFactor(self, evaporationLossFactor)

    def resetEvaporationLossFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetEvaporationLossFactor(self)

    def setDriftLossPercent(self, driftLossPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDriftLossPercent(self, driftLossPercent)

    def resetDriftLossPercent(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetDriftLossPercent(self)

    def setBlowdownCalculationMode(self, blowdownCalculationMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBlowdownCalculationMode(self, blowdownCalculationMode)

    def resetBlowdownCalculationMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBlowdownCalculationMode(self)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def resetBlowdownConcentrationRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBlowdownConcentrationRatio(self)

    def setBlowdownMakeupWaterUsageSchedule(self, blowdownMakeupWaterUsageSchedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setBlowdownMakeupWaterUsageSchedule(self, blowdownMakeupWaterUsageSchedule)

    def resetBlowdownMakeupWaterUsageSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetBlowdownMakeupWaterUsageSchedule(self)

    def setCapacityControl(self, capacityControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setCapacityControl(self, capacityControl)

    def resetCapacityControl(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetCapacityControl(self)

    def setNumberofCells(self, numberofCells: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setNumberofCells(self, numberofCells)

    def resetNumberofCells(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetNumberofCells(self)

    def setCellControl(self, cellControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setCellControl(self, cellControl)

    def resetCellControl(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetCellControl(self)

    def setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction)

    def resetCellMinimumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetCellMinimumWaterFlowRateFraction(self)

    def setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction)

    def resetCellMaximumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetCellMaximumWaterFlowRateFraction(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_resetSizingFactor(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedDesignAirFlowRate(self)

    def autosizedFanPoweratDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedFanPoweratDesignAirFlowRate(self)

    def autosizedUFactorTimesAreaValueatDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedUFactorTimesAreaValueatDesignAirFlowRate(self)

    def autosizedAirFlowRateinFreeConvectionRegime(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedAirFlowRateinFreeConvectionRegime(self)

    def autosizedUFactorTimesAreaValueatFreeConvectionAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedUFactorTimesAreaValueatFreeConvectionAirFlowRate(self)

    def autosizedDesignApproachTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedDesignApproachTemperature(self)

    def autosizedDesignRangeTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizedDesignRangeTemperature(self)

    def freeConvectionAirFlowRateSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_freeConvectionAirFlowRateSizingFactor(self)

    def setFreeConvectionAirFlowRateSizingFactor(self, freeConvectionAirFlowRateSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setFreeConvectionAirFlowRateSizingFactor(self, freeConvectionAirFlowRateSizingFactor)

    def freeConvectionUFactorTimesAreaValueSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_freeConvectionUFactorTimesAreaValueSizingFactor(self)

    def setFreeConvectionUFactorTimesAreaValueSizingFactor(self, freeConvectionUFactorTimesAreaValueSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setFreeConvectionUFactorTimesAreaValueSizingFactor(self, freeConvectionUFactorTimesAreaValueSizingFactor)

    def heatRejectionCapacityAndNominalCapacitySizingRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_heatRejectionCapacityAndNominalCapacitySizingRatio(self)

    def setHeatRejectionCapacityAndNominalCapacitySizingRatio(self, heatRejectionCapacityAndNominalCapacitySizingRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setHeatRejectionCapacityAndNominalCapacitySizingRatio(self, heatRejectionCapacityAndNominalCapacitySizingRatio)

    def freeConvectionNominalCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_freeConvectionNominalCapacitySizingFactor(self)

    def setFreeConvectionNominalCapacitySizingFactor(self, freeConvectionNominalCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setFreeConvectionNominalCapacitySizingFactor(self, freeConvectionNominalCapacitySizingFactor)

    def designInletAirDryBulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designInletAirDryBulbTemperature(self)

    def setDesignInletAirDryBulbTemperature(self, designInletAirDryBulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignInletAirDryBulbTemperature(self, designInletAirDryBulbTemperature)

    def designInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designInletAirWetBulbTemperature(self)

    def setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature)

    def designApproachTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designApproachTemperature(self)

    def isDesignApproachTemperatureAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isDesignApproachTemperatureAutosized(self)

    def setDesignApproachTemperature(self, designApproachTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignApproachTemperature(self, designApproachTemperature)

    def autosizeDesignApproachTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeDesignApproachTemperature(self)

    def designRangeTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_designRangeTemperature(self)

    def isDesignRangeTemperatureAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_isDesignRangeTemperatureAutosized(self)

    def setDesignRangeTemperature(self, designRangeTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setDesignRangeTemperature(self, designRangeTemperature)

    def autosizeDesignRangeTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_autosizeDesignRangeTemperature(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_endUseSubcategory(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_setEndUseSubcategory(self, endUseSubcategory)

# Register CoolingTowerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_swigregister(CoolingTowerSingleSpeed)

def CoolingTowerSingleSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_iddObjectType()

def CoolingTowerSingleSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_performanceInputMethodValues()

def CoolingTowerSingleSpeed_evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_evaporationLossModeValues()

def CoolingTowerSingleSpeed_blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_blowdownCalculationModeValues()

def CoolingTowerSingleSpeed_capacityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_capacityControlValues()

def CoolingTowerSingleSpeed_cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerSingleSpeed_cellControlValues()


def toCoolingTowerSingleSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoolingTowerSingleSpeed >":
    return _openstudiomodelstraightcomponent.toCoolingTowerSingleSpeed(idfObject)

def getCoolingTowerSingleSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoolingTowerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerSingleSpeed(t_model, t_handle)

def getCoolingTowerSingleSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoolingTowerSingleSpeed,std::allocator< openstudio::model::CoolingTowerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerSingleSpeeds(t_model)

def getCoolingTowerSingleSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoolingTowerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerSingleSpeedByName(t_model, t_name)

def getCoolingTowerSingleSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoolingTowerSingleSpeed,std::allocator< openstudio::model::CoolingTowerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerSingleSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoolingTowerSingleSpeed(self) -> OptionalCoolingTowerSingleSpeed:
    return toCoolingTowerSingleSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoolingTowerSingleSpeed = _to_CoolingTowerSingleSpeed

def _getCoolingTowerSingleSpeed(self, t_handle: "UUID") -> OptionalCoolingTowerSingleSpeed:
    return getCoolingTowerSingleSpeed(self, t_handle)
Model.getCoolingTowerSingleSpeed = _getCoolingTowerSingleSpeed

def _getCoolingTowerSingleSpeed(self, t_handle_str: str) -> OptionalCoolingTowerSingleSpeed:
    return getCoolingTowerSingleSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoolingTowerSingleSpeed = _getCoolingTowerSingleSpeed

def _getCoolingTowerSingleSpeeds(self) -> CoolingTowerSingleSpeedVector:
    return getCoolingTowerSingleSpeeds(self)
Model.getCoolingTowerSingleSpeeds = _getCoolingTowerSingleSpeeds

def _getCoolingTowerSingleSpeedByName(self, t_name: str) -> OptionalCoolingTowerSingleSpeed:
    return getCoolingTowerSingleSpeedByName(self, t_name)
Model.getCoolingTowerSingleSpeedByName = _getCoolingTowerSingleSpeedByName

def _getCoolingTowerSingleSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoolingTowerSingleSpeedVector:
    return getCoolingTowerSingleSpeedsByName(self, t_name, t_exactMatch)
Model.getCoolingTowerSingleSpeedsByName = _getCoolingTowerSingleSpeedsByName

class CoolingTowerTwoSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerTwoSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerTwoSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_performanceInputMethodValues()

    @staticmethod
    def evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_evaporationLossModeValues()

    @staticmethod
    def blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_blowdownCalculationModeValues()

    @staticmethod
    def cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_cellControlValues()

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isDesignWaterFlowRateAutosized(self)

    def highFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_highFanSpeedAirFlowRate(self)

    def isHighFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isHighFanSpeedAirFlowRateAutosized(self)

    def highFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_highFanSpeedFanPower(self)

    def isHighFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isHighFanSpeedFanPowerAutosized(self)

    def highFanSpeedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_highFanSpeedUFactorTimesAreaValue(self)

    def isHighFanSpeedUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isHighFanSpeedUFactorTimesAreaValueAutosized(self)

    def lowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedAirFlowRate(self)

    def isLowFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedAirFlowRateAutosized(self)

    def lowFanSpeedAirFlowRateSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedAirFlowRateSizingFactor(self)

    def isLowFanSpeedAirFlowRateSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedAirFlowRateSizingFactorDefaulted(self)

    def lowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedFanPower(self)

    def isLowFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedFanPowerAutosized(self)

    def lowFanSpeedFanPowerSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedFanPowerSizingFactor(self)

    def isLowFanSpeedFanPowerSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedFanPowerSizingFactorDefaulted(self)

    def lowFanSpeedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedUFactorTimesAreaValue(self)

    def isLowFanSpeedUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedUFactorTimesAreaValueAutosized(self)

    def lowFanSpeedUFactorTimesAreaSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowFanSpeedUFactorTimesAreaSizingFactor(self)

    def isLowFanSpeedUFactorTimesAreaSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowFanSpeedUFactorTimesAreaSizingFactorDefaulted(self)

    def freeConvectionRegimeAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionRegimeAirFlowRate(self)

    def isFreeConvectionRegimeAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionRegimeAirFlowRateDefaulted(self)

    def isFreeConvectionRegimeAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionRegimeAirFlowRateAutosized(self)

    def freeConvectionRegimeAirFlowRateSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionRegimeAirFlowRateSizingFactor(self)

    def isFreeConvectionRegimeAirFlowRateSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionRegimeAirFlowRateSizingFactorDefaulted(self)

    def freeConvectionRegimeUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionRegimeUFactorTimesAreaValue(self)

    def isFreeConvectionRegimeUFactorTimesAreaValueDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionRegimeUFactorTimesAreaValueDefaulted(self)

    def isFreeConvectionRegimeUFactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionRegimeUFactorTimesAreaValueAutosized(self)

    def freeConvectionUFactorTimesAreaValueSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionUFactorTimesAreaValueSizingFactor(self)

    def isFreeConvectionUFactorTimesAreaValueSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionUFactorTimesAreaValueSizingFactorDefaulted(self)

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_performanceInputMethod(self)

    def isPerformanceInputMethodDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isPerformanceInputMethodDefaulted(self)

    def heatRejectionCapacityandNominalCapacitySizingRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_heatRejectionCapacityandNominalCapacitySizingRatio(self)

    def isHeatRejectionCapacityandNominalCapacitySizingRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isHeatRejectionCapacityandNominalCapacitySizingRatioDefaulted(self)

    def highSpeedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_highSpeedNominalCapacity(self)

    def lowSpeedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowSpeedNominalCapacity(self)

    def isLowSpeedNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowSpeedNominalCapacityAutosized(self)

    def lowSpeedNominalCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_lowSpeedNominalCapacitySizingFactor(self)

    def isLowSpeedNominalCapacitySizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isLowSpeedNominalCapacitySizingFactorDefaulted(self)

    def freeConvectionNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionNominalCapacity(self)

    def isFreeConvectionNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionNominalCapacityAutosized(self)

    def freeConvectionNominalCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_freeConvectionNominalCapacitySizingFactor(self)

    def isFreeConvectionNominalCapacitySizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isFreeConvectionNominalCapacitySizingFactorDefaulted(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_basinHeaterCapacity(self)

    def isBasinHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isBasinHeaterCapacityDefaulted(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_basinHeaterSetpointTemperature(self)

    def isBasinHeaterSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isBasinHeaterSetpointTemperatureDefaulted(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_basinHeaterOperatingSchedule(self)

    def evaporationLossMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_evaporationLossMode(self)

    def evaporationLossFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_evaporationLossFactor(self)

    def isEvaporationLossFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isEvaporationLossFactorDefaulted(self)

    def driftLossPercent(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_driftLossPercent(self)

    def isDriftLossPercentDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isDriftLossPercentDefaulted(self)

    def blowdownCalculationMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_blowdownCalculationMode(self)

    def blowdownConcentrationRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_blowdownConcentrationRatio(self)

    def isBlowdownConcentrationRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isBlowdownConcentrationRatioDefaulted(self)

    def blowdownMakeupWaterUsageSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_blowdownMakeupWaterUsageSchedule(self)

    def numberofCells(self) -> "int":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_numberofCells(self)

    def isNumberofCellsDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isNumberofCellsDefaulted(self)

    def cellControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_cellControl(self)

    def isCellControlDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isCellControlDefaulted(self)

    def cellMinimumWaterFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_cellMinimumWaterFlowRateFraction(self)

    def isCellMinimumWaterFlowRateFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isCellMinimumWaterFlowRateFractionDefaulted(self)

    def cellMaximumWaterFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_cellMaximumWaterFlowRateFraction(self)

    def isCellMaximumWaterFlowRateFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isCellMaximumWaterFlowRateFractionDefaulted(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isSizingFactorDefaulted(self)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def resetDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetDesignWaterFlowRate(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeDesignWaterFlowRate(self)

    def setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate)

    def autosizeHighFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeHighFanSpeedAirFlowRate(self)

    def setHighFanSpeedFanPower(self, highFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setHighFanSpeedFanPower(self, highFanSpeedFanPower)

    def autosizeHighFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeHighFanSpeedFanPower(self)

    def setHighFanSpeedUFactorTimesAreaValue(self, highFanSpeedUFactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setHighFanSpeedUFactorTimesAreaValue(self, highFanSpeedUFactorTimesAreaValue)

    def resetHighFanSpeedUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetHighFanSpeedUFactorTimesAreaValue(self)

    def autosizeHighFanSpeedUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeHighFanSpeedUFactorTimesAreaValue(self)

    def setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate)

    def autosizeLowFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeLowFanSpeedAirFlowRate(self)

    def setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor)

    def resetLowFanSpeedAirFlowRateSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowFanSpeedAirFlowRateSizingFactor(self)

    def setLowFanSpeedFanPower(self, lowFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedFanPower(self, lowFanSpeedFanPower)

    def autosizeLowFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeLowFanSpeedFanPower(self)

    def setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor)

    def resetLowFanSpeedFanPowerSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowFanSpeedFanPowerSizingFactor(self)

    def setLowFanSpeedUFactorTimesAreaValue(self, lowFanSpeedUFactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedUFactorTimesAreaValue(self, lowFanSpeedUFactorTimesAreaValue)

    def resetLowFanSpeedUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowFanSpeedUFactorTimesAreaValue(self)

    def autosizeLowFanSpeedUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeLowFanSpeedUFactorTimesAreaValue(self)

    def setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor)

    def resetLowFanSpeedUFactorTimesAreaSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowFanSpeedUFactorTimesAreaSizingFactor(self)

    def setFreeConvectionRegimeAirFlowRate(self, freeConvectionRegimeAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionRegimeAirFlowRate(self, freeConvectionRegimeAirFlowRate)

    def resetFreeConvectionRegimeAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionRegimeAirFlowRate(self)

    def autosizeFreeConvectionRegimeAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeFreeConvectionRegimeAirFlowRate(self)

    def setFreeConvectionRegimeAirFlowRateSizingFactor(self, freeConvectionRegimeAirFlowRateSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionRegimeAirFlowRateSizingFactor(self, freeConvectionRegimeAirFlowRateSizingFactor)

    def resetFreeConvectionRegimeAirFlowRateSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionRegimeAirFlowRateSizingFactor(self)

    def setFreeConvectionRegimeUFactorTimesAreaValue(self, freeConvectionRegimeUFactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionRegimeUFactorTimesAreaValue(self, freeConvectionRegimeUFactorTimesAreaValue)

    def resetFreeConvectionRegimeUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionRegimeUFactorTimesAreaValue(self)

    def autosizeFreeConvectionRegimeUFactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeFreeConvectionRegimeUFactorTimesAreaValue(self)

    def setFreeConvectionUFactorTimesAreaValueSizingFactor(self, freeConvectionUFactorTimesAreaValueSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionUFactorTimesAreaValueSizingFactor(self, freeConvectionUFactorTimesAreaValueSizingFactor)

    def resetFreeConvectionUFactorTimesAreaValueSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionUFactorTimesAreaValueSizingFactor(self)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def resetPerformanceInputMethod(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetPerformanceInputMethod(self)

    def setHeatRejectionCapacityandNominalCapacitySizingRatio(self, heatRejectionCapacityandNominalCapacitySizingRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setHeatRejectionCapacityandNominalCapacitySizingRatio(self, heatRejectionCapacityandNominalCapacitySizingRatio)

    def resetHeatRejectionCapacityandNominalCapacitySizingRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetHeatRejectionCapacityandNominalCapacitySizingRatio(self)

    def setHighSpeedNominalCapacity(self, highSpeedNominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setHighSpeedNominalCapacity(self, highSpeedNominalCapacity)

    def resetHighSpeedNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetHighSpeedNominalCapacity(self)

    def setLowSpeedNominalCapacity(self, lowSpeedNominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowSpeedNominalCapacity(self, lowSpeedNominalCapacity)

    def resetLowSpeedNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowSpeedNominalCapacity(self)

    def autosizeLowSpeedNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeLowSpeedNominalCapacity(self)

    def setLowSpeedNominalCapacitySizingFactor(self, lowSpeedNominalCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setLowSpeedNominalCapacitySizingFactor(self, lowSpeedNominalCapacitySizingFactor)

    def resetLowSpeedNominalCapacitySizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetLowSpeedNominalCapacitySizingFactor(self)

    def setFreeConvectionNominalCapacity(self, freeConvectionNominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionNominalCapacity(self, freeConvectionNominalCapacity)

    def resetFreeConvectionNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionNominalCapacity(self)

    def autosizeFreeConvectionNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeFreeConvectionNominalCapacity(self)

    def setFreeConvectionNominalCapacitySizingFactor(self, freeConvectionNominalCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setFreeConvectionNominalCapacitySizingFactor(self, freeConvectionNominalCapacitySizingFactor)

    def resetFreeConvectionNominalCapacitySizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetFreeConvectionNominalCapacitySizingFactor(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBasinHeaterCapacity(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBasinHeaterSetpointTemperature(self)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBasinHeaterOperatingSchedule(self)

    def setEvaporationLossMode(self, evaporationLossMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setEvaporationLossMode(self, evaporationLossMode)

    def resetEvaporationLossMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetEvaporationLossMode(self)

    def setEvaporationLossFactor(self, evaporationLossFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setEvaporationLossFactor(self, evaporationLossFactor)

    def resetEvaporationLossFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetEvaporationLossFactor(self)

    def setDriftLossPercent(self, driftLossPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDriftLossPercent(self, driftLossPercent)

    def resetDriftLossPercent(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetDriftLossPercent(self)

    def setBlowdownCalculationMode(self, blowdownCalculationMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBlowdownCalculationMode(self, blowdownCalculationMode)

    def resetBlowdownCalculationMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBlowdownCalculationMode(self)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def resetBlowdownConcentrationRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBlowdownConcentrationRatio(self)

    def setBlowdownMakeupWaterUsageSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setBlowdownMakeupWaterUsageSchedule(self, schedule)

    def resetBlowdownMakeupWaterUsageSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetBlowdownMakeupWaterUsageSchedule(self)

    def setNumberofCells(self, numberofCells: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setNumberofCells(self, numberofCells)

    def resetNumberofCells(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetNumberofCells(self)

    def setCellControl(self, cellControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setCellControl(self, cellControl)

    def resetCellControl(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetCellControl(self)

    def setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction)

    def resetCellMinimumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetCellMinimumWaterFlowRateFraction(self)

    def setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction)

    def resetCellMaximumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetCellMaximumWaterFlowRateFraction(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_resetSizingFactor(self)

    def designInletAirDryBulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_designInletAirDryBulbTemperature(self)

    def setDesignInletAirDryBulbTemperature(self, designInletAirDryBulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDesignInletAirDryBulbTemperature(self, designInletAirDryBulbTemperature)

    def designInletAirWetBulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_designInletAirWetBulbTemperature(self)

    def setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature)

    def designApproachTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_designApproachTemperature(self)

    def isDesignApproachTemperatureAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isDesignApproachTemperatureAutosized(self)

    def setDesignApproachTemperature(self, designApproachTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDesignApproachTemperature(self, designApproachTemperature)

    def autosizeDesignApproachTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeDesignApproachTemperature(self)

    def designRangeTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_designRangeTemperature(self)

    def isDesignRangeTemperatureAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_isDesignRangeTemperatureAutosized(self)

    def setDesignRangeTemperature(self, designRangeTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setDesignRangeTemperature(self, designRangeTemperature)

    def autosizeDesignRangeTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizeDesignRangeTemperature(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_endUseSubcategory(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_setEndUseSubcategory(self, endUseSubcategory)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedHighFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedHighFanSpeedAirFlowRate(self)

    def autosizedHighFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedHighFanSpeedFanPower(self)

    def autosizedHighFanSpeedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedHighFanSpeedUFactorTimesAreaValue(self)

    def autosizedLowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedLowFanSpeedAirFlowRate(self)

    def autosizedLowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedLowFanSpeedFanPower(self)

    def autosizedLowFanSpeedUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedLowFanSpeedUFactorTimesAreaValue(self)

    def autosizedFreeConvectionRegimeAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedFreeConvectionRegimeAirFlowRate(self)

    def autosizedFreeConvectionRegimeUFactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedFreeConvectionRegimeUFactorTimesAreaValue(self)

    def autosizedLowSpeedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedLowSpeedNominalCapacity(self)

    def autosizedFreeConvectionNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedFreeConvectionNominalCapacity(self)

    def autosizedDesignApproachTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedDesignApproachTemperature(self)

    def autosizedDesignRangeTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_autosizedDesignRangeTemperature(self)

# Register CoolingTowerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_swigregister(CoolingTowerTwoSpeed)

def CoolingTowerTwoSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_iddObjectType()

def CoolingTowerTwoSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_performanceInputMethodValues()

def CoolingTowerTwoSpeed_evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_evaporationLossModeValues()

def CoolingTowerTwoSpeed_blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_blowdownCalculationModeValues()

def CoolingTowerTwoSpeed_cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerTwoSpeed_cellControlValues()


def toCoolingTowerTwoSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoolingTowerTwoSpeed >":
    return _openstudiomodelstraightcomponent.toCoolingTowerTwoSpeed(idfObject)

def getCoolingTowerTwoSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoolingTowerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerTwoSpeed(t_model, t_handle)

def getCoolingTowerTwoSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoolingTowerTwoSpeed,std::allocator< openstudio::model::CoolingTowerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerTwoSpeeds(t_model)

def getCoolingTowerTwoSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoolingTowerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerTwoSpeedByName(t_model, t_name)

def getCoolingTowerTwoSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoolingTowerTwoSpeed,std::allocator< openstudio::model::CoolingTowerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerTwoSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoolingTowerTwoSpeed(self) -> OptionalCoolingTowerTwoSpeed:
    return toCoolingTowerTwoSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoolingTowerTwoSpeed = _to_CoolingTowerTwoSpeed

def _getCoolingTowerTwoSpeed(self, t_handle: "UUID") -> OptionalCoolingTowerTwoSpeed:
    return getCoolingTowerTwoSpeed(self, t_handle)
Model.getCoolingTowerTwoSpeed = _getCoolingTowerTwoSpeed

def _getCoolingTowerTwoSpeed(self, t_handle_str: str) -> OptionalCoolingTowerTwoSpeed:
    return getCoolingTowerTwoSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoolingTowerTwoSpeed = _getCoolingTowerTwoSpeed

def _getCoolingTowerTwoSpeeds(self) -> CoolingTowerTwoSpeedVector:
    return getCoolingTowerTwoSpeeds(self)
Model.getCoolingTowerTwoSpeeds = _getCoolingTowerTwoSpeeds

def _getCoolingTowerTwoSpeedByName(self, t_name: str) -> OptionalCoolingTowerTwoSpeed:
    return getCoolingTowerTwoSpeedByName(self, t_name)
Model.getCoolingTowerTwoSpeedByName = _getCoolingTowerTwoSpeedByName

def _getCoolingTowerTwoSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoolingTowerTwoSpeedVector:
    return getCoolingTowerTwoSpeedsByName(self, t_name, t_exactMatch)
Model.getCoolingTowerTwoSpeedsByName = _getCoolingTowerTwoSpeedsByName

class CoolingTowerVariableSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_CoolingTowerVariableSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_CoolingTowerVariableSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_iddObjectType()

    @staticmethod
    def modelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_modelTypeValues()

    @staticmethod
    def evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_evaporationLossModeValues()

    @staticmethod
    def blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_blowdownCalculationModeValues()

    @staticmethod
    def cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_cellControlValues()

    def modelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_modelType(self)

    def setModelType(self, modelType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setModelType(self, modelType)

    def resetModelType(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetModelType(self)

    def modelCoefficient(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_modelCoefficient(self)

    def setModelCoefficient(self, variableSpeedTowerCoefficient: "ModelObject") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setModelCoefficient(self, variableSpeedTowerCoefficient)

    def resetModelCoefficient(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetModelCoefficient(self)

    def designInletAirWetBulbTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designInletAirWetBulbTemperature(self)

    def setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignInletAirWetBulbTemperature(self, designInletAirWetBulbTemperature)

    def resetDesignInletAirWetBulbTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetDesignInletAirWetBulbTemperature(self)

    def designApproachTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designApproachTemperature(self)

    def setDesignApproachTemperature(self, designApproachTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignApproachTemperature(self, designApproachTemperature)

    def resetDesignApproachTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetDesignApproachTemperature(self)

    def designRangeTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designRangeTemperature(self)

    def setDesignRangeTemperature(self, designRangeTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignRangeTemperature(self, designRangeTemperature)

    def resetDesignRangeTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetDesignRangeTemperature(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_isDesignWaterFlowRateAutosized(self)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizeDesignWaterFlowRate(self)

    def designAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designAirFlowRate(self)

    def isDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_isDesignAirFlowRateAutosized(self)

    def setDesignAirFlowRate(self, designAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignAirFlowRate(self, designAirFlowRate)

    def autosizeDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizeDesignAirFlowRate(self)

    def designFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_designFanPower(self)

    def isDesignFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_isDesignFanPowerAutosized(self)

    def setDesignFanPower(self, designFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDesignFanPower(self, designFanPower)

    def autosizeDesignFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizeDesignFanPower(self)

    def fanPowerRatioFunctionofAirFlowRateRatioCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_fanPowerRatioFunctionofAirFlowRateRatioCurve(self)

    def setFanPowerRatioFunctionofAirFlowRateRatioCurve(self, curve: "CurveCubic") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setFanPowerRatioFunctionofAirFlowRateRatioCurve(self, curve)

    def resetFanPowerRatioFunctionofAirFlowRateRatioCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetFanPowerRatioFunctionofAirFlowRateRatioCurve(self)

    def minimumAirFlowRateRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_minimumAirFlowRateRatio(self)

    def setMinimumAirFlowRateRatio(self, minimumAirFlowRateRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setMinimumAirFlowRateRatio(self, minimumAirFlowRateRatio)

    def resetMinimumAirFlowRateRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetMinimumAirFlowRateRatio(self)

    def fractionofTowerCapacityinFreeConvectionRegime(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_fractionofTowerCapacityinFreeConvectionRegime(self)

    def setFractionofTowerCapacityinFreeConvectionRegime(self, fractionofTowerCapacityinFreeConvectionRegime: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setFractionofTowerCapacityinFreeConvectionRegime(self, fractionofTowerCapacityinFreeConvectionRegime)

    def resetFractionofTowerCapacityinFreeConvectionRegime(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetFractionofTowerCapacityinFreeConvectionRegime(self)

    def basinHeaterCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_basinHeaterCapacity(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBasinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_basinHeaterSetpointTemperature(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBasinHeaterSetpointTemperature(self)

    def basinHeaterOperatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_basinHeaterOperatingSchedule(self)

    def setBasinHeaterOperatingSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBasinHeaterOperatingSchedule(self, schedule)

    def resetBasinHeaterOperatingSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBasinHeaterOperatingSchedule(self)

    def evaporationLossMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_evaporationLossMode(self)

    def setEvaporationLossMode(self, evaporationLossMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setEvaporationLossMode(self, evaporationLossMode)

    def resetEvaporationLossMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetEvaporationLossMode(self)

    def evaporationLossFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_evaporationLossFactor(self)

    def isEvaporationLossFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_isEvaporationLossFactorDefaulted(self)

    def setEvaporationLossFactor(self, evaporationLossFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setEvaporationLossFactor(self, evaporationLossFactor)

    def resetEvaporationLossFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetEvaporationLossFactor(self)

    def driftLossPercent(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_driftLossPercent(self)

    def setDriftLossPercent(self, driftLossPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setDriftLossPercent(self, driftLossPercent)

    def resetDriftLossPercent(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetDriftLossPercent(self)

    def blowdownCalculationMode(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_blowdownCalculationMode(self)

    def setBlowdownCalculationMode(self, blowdownCalculationMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBlowdownCalculationMode(self, blowdownCalculationMode)

    def resetBlowdownCalculationMode(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBlowdownCalculationMode(self)

    def blowdownConcentrationRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_blowdownConcentrationRatio(self)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def resetBlowdownConcentrationRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBlowdownConcentrationRatio(self)

    def blowdownMakeupWaterUsageSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_blowdownMakeupWaterUsageSchedule(self)

    def setBlowdownMakeupWaterUsageSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setBlowdownMakeupWaterUsageSchedule(self, schedule)

    def resetBlowdownMakeupWaterUsageSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetBlowdownMakeupWaterUsageSchedule(self)

    def numberofCells(self) -> "boost::optional< int >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_numberofCells(self)

    def setNumberofCells(self, numberofCells: "int") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setNumberofCells(self, numberofCells)

    def resetNumberofCells(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetNumberofCells(self)

    def cellControl(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_cellControl(self)

    def setCellControl(self, cellControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setCellControl(self, cellControl)

    def resetCellControl(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetCellControl(self)

    def cellMinimumWaterFlowRateFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_cellMinimumWaterFlowRateFraction(self)

    def setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setCellMinimumWaterFlowRateFraction(self, cellMinimumWaterFlowRateFraction)

    def resetCellMinimumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetCellMinimumWaterFlowRateFraction(self)

    def cellMaximumWaterFlowRateFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_cellMaximumWaterFlowRateFraction(self)

    def setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setCellMaximumWaterFlowRateFraction(self, cellMaximumWaterFlowRateFraction)

    def resetCellMaximumWaterFlowRateFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetCellMaximumWaterFlowRateFraction(self)

    def sizingFactor(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_sizingFactor(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_resetSizingFactor(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizedDesignAirFlowRate(self)

    def autosizedDesignFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_autosizedDesignFanPower(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_endUseSubcategory(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_setEndUseSubcategory(self, endUseSubcategory)

# Register CoolingTowerVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_swigregister(CoolingTowerVariableSpeed)

def CoolingTowerVariableSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_iddObjectType()

def CoolingTowerVariableSpeed_modelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_modelTypeValues()

def CoolingTowerVariableSpeed_evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_evaporationLossModeValues()

def CoolingTowerVariableSpeed_blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_blowdownCalculationModeValues()

def CoolingTowerVariableSpeed_cellControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.CoolingTowerVariableSpeed_cellControlValues()


def toCoolingTowerVariableSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::CoolingTowerVariableSpeed >":
    return _openstudiomodelstraightcomponent.toCoolingTowerVariableSpeed(idfObject)

def getCoolingTowerVariableSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::CoolingTowerVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerVariableSpeed(t_model, t_handle)

def getCoolingTowerVariableSpeeds(t_model: "Model") -> "std::vector< openstudio::model::CoolingTowerVariableSpeed,std::allocator< openstudio::model::CoolingTowerVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerVariableSpeeds(t_model)

def getCoolingTowerVariableSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::CoolingTowerVariableSpeed >":
    return _openstudiomodelstraightcomponent.getCoolingTowerVariableSpeedByName(t_model, t_name)

def getCoolingTowerVariableSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::CoolingTowerVariableSpeed,std::allocator< openstudio::model::CoolingTowerVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getCoolingTowerVariableSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoolingTowerVariableSpeed(self) -> OptionalCoolingTowerVariableSpeed:
    return toCoolingTowerVariableSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoolingTowerVariableSpeed = _to_CoolingTowerVariableSpeed

def _getCoolingTowerVariableSpeed(self, t_handle: "UUID") -> OptionalCoolingTowerVariableSpeed:
    return getCoolingTowerVariableSpeed(self, t_handle)
Model.getCoolingTowerVariableSpeed = _getCoolingTowerVariableSpeed

def _getCoolingTowerVariableSpeed(self, t_handle_str: str) -> OptionalCoolingTowerVariableSpeed:
    return getCoolingTowerVariableSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getCoolingTowerVariableSpeed = _getCoolingTowerVariableSpeed

def _getCoolingTowerVariableSpeeds(self) -> CoolingTowerVariableSpeedVector:
    return getCoolingTowerVariableSpeeds(self)
Model.getCoolingTowerVariableSpeeds = _getCoolingTowerVariableSpeeds

def _getCoolingTowerVariableSpeedByName(self, t_name: str) -> OptionalCoolingTowerVariableSpeed:
    return getCoolingTowerVariableSpeedByName(self, t_name)
Model.getCoolingTowerVariableSpeedByName = _getCoolingTowerVariableSpeedByName

def _getCoolingTowerVariableSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoolingTowerVariableSpeedVector:
    return getCoolingTowerVariableSpeedsByName(self, t_name, t_exactMatch)
Model.getCoolingTowerVariableSpeedsByName = _getCoolingTowerVariableSpeedsByName

class DistrictCooling(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.DistrictCooling_swiginit(self, _openstudiomodelstraightcomponent.new_DistrictCooling(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_DistrictCooling

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.DistrictCooling_iddObjectType()

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.DistrictCooling_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictCooling_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.DistrictCooling_setNominalCapacity(self, nominalCapacity)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictCooling_autosizeNominalCapacity(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.DistrictCooling_autosizedNominalCapacity(self)

# Register DistrictCooling in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.DistrictCooling_swigregister(DistrictCooling)

def DistrictCooling_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.DistrictCooling_iddObjectType()


def toDistrictCooling(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DistrictCooling >":
    return _openstudiomodelstraightcomponent.toDistrictCooling(idfObject)

def getDistrictCooling(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DistrictCooling >":
    return _openstudiomodelstraightcomponent.getDistrictCooling(t_model, t_handle)

def getDistrictCoolings(t_model: "Model") -> "std::vector< openstudio::model::DistrictCooling,std::allocator< openstudio::model::DistrictCooling > >":
    return _openstudiomodelstraightcomponent.getDistrictCoolings(t_model)

def getDistrictCoolingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DistrictCooling >":
    return _openstudiomodelstraightcomponent.getDistrictCoolingByName(t_model, t_name)

def getDistrictCoolingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DistrictCooling,std::allocator< openstudio::model::DistrictCooling > >":
    return _openstudiomodelstraightcomponent.getDistrictCoolingsByName(t_model, t_name, t_exactMatch)

def _to_DistrictCooling(self) -> OptionalDistrictCooling:
    return toDistrictCooling(self)
openstudioutilitiesidf.IdfObject.to_DistrictCooling = _to_DistrictCooling

def _getDistrictCooling(self, t_handle: "UUID") -> OptionalDistrictCooling:
    return getDistrictCooling(self, t_handle)
Model.getDistrictCooling = _getDistrictCooling

def _getDistrictCooling(self, t_handle_str: str) -> OptionalDistrictCooling:
    return getDistrictCooling(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDistrictCooling = _getDistrictCooling

def _getDistrictCoolings(self) -> DistrictCoolingVector:
    return getDistrictCoolings(self)
Model.getDistrictCoolings = _getDistrictCoolings

def _getDistrictCoolingByName(self, t_name: str) -> OptionalDistrictCooling:
    return getDistrictCoolingByName(self, t_name)
Model.getDistrictCoolingByName = _getDistrictCoolingByName

def _getDistrictCoolingsByName(self, t_name: str, t_exactMatch: bool) -> DistrictCoolingVector:
    return getDistrictCoolingsByName(self, t_name, t_exactMatch)
Model.getDistrictCoolingsByName = _getDistrictCoolingsByName

class DistrictHeating(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.DistrictHeating_swiginit(self, _openstudiomodelstraightcomponent.new_DistrictHeating(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_DistrictHeating

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.DistrictHeating_iddObjectType()

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.DistrictHeating_nominalCapacity(self)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.DistrictHeating_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.DistrictHeating_setNominalCapacity(self, nominalCapacity)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.DistrictHeating_autosizeNominalCapacity(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.DistrictHeating_autosizedNominalCapacity(self)

# Register DistrictHeating in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.DistrictHeating_swigregister(DistrictHeating)

def DistrictHeating_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.DistrictHeating_iddObjectType()


def toDistrictHeating(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DistrictHeating >":
    return _openstudiomodelstraightcomponent.toDistrictHeating(idfObject)

def getDistrictHeating(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DistrictHeating >":
    return _openstudiomodelstraightcomponent.getDistrictHeating(t_model, t_handle)

def getDistrictHeatings(t_model: "Model") -> "std::vector< openstudio::model::DistrictHeating,std::allocator< openstudio::model::DistrictHeating > >":
    return _openstudiomodelstraightcomponent.getDistrictHeatings(t_model)

def getDistrictHeatingByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DistrictHeating >":
    return _openstudiomodelstraightcomponent.getDistrictHeatingByName(t_model, t_name)

def getDistrictHeatingsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DistrictHeating,std::allocator< openstudio::model::DistrictHeating > >":
    return _openstudiomodelstraightcomponent.getDistrictHeatingsByName(t_model, t_name, t_exactMatch)

def _to_DistrictHeating(self) -> OptionalDistrictHeating:
    return toDistrictHeating(self)
openstudioutilitiesidf.IdfObject.to_DistrictHeating = _to_DistrictHeating

def _getDistrictHeating(self, t_handle: "UUID") -> OptionalDistrictHeating:
    return getDistrictHeating(self, t_handle)
Model.getDistrictHeating = _getDistrictHeating

def _getDistrictHeating(self, t_handle_str: str) -> OptionalDistrictHeating:
    return getDistrictHeating(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDistrictHeating = _getDistrictHeating

def _getDistrictHeatings(self) -> DistrictHeatingVector:
    return getDistrictHeatings(self)
Model.getDistrictHeatings = _getDistrictHeatings

def _getDistrictHeatingByName(self, t_name: str) -> OptionalDistrictHeating:
    return getDistrictHeatingByName(self, t_name)
Model.getDistrictHeatingByName = _getDistrictHeatingByName

def _getDistrictHeatingsByName(self, t_name: str, t_exactMatch: bool) -> DistrictHeatingVector:
    return getDistrictHeatingsByName(self, t_name, t_exactMatch)
Model.getDistrictHeatingsByName = _getDistrictHeatingsByName

class Duct(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.Duct_swiginit(self, _openstudiomodelstraightcomponent.new_Duct(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_Duct

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.Duct_iddObjectType()

# Register Duct in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.Duct_swigregister(Duct)

def Duct_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.Duct_iddObjectType()


def toDuct(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Duct >":
    return _openstudiomodelstraightcomponent.toDuct(idfObject)

def getDuct(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::Duct >":
    return _openstudiomodelstraightcomponent.getDuct(t_model, t_handle)

def getDucts(t_model: "Model") -> "std::vector< openstudio::model::Duct,std::allocator< openstudio::model::Duct > >":
    return _openstudiomodelstraightcomponent.getDucts(t_model)

def getDuctByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::Duct >":
    return _openstudiomodelstraightcomponent.getDuctByName(t_model, t_name)

def getDuctsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::Duct,std::allocator< openstudio::model::Duct > >":
    return _openstudiomodelstraightcomponent.getDuctsByName(t_model, t_name, t_exactMatch)

def _to_Duct(self) -> OptionalDuct:
    return toDuct(self)
openstudioutilitiesidf.IdfObject.to_Duct = _to_Duct

def _getDuct(self, t_handle: "UUID") -> OptionalDuct:
    return getDuct(self, t_handle)
Model.getDuct = _getDuct

def _getDuct(self, t_handle_str: str) -> OptionalDuct:
    return getDuct(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDuct = _getDuct

def _getDucts(self) -> DuctVector:
    return getDucts(self)
Model.getDucts = _getDucts

def _getDuctByName(self, t_name: str) -> OptionalDuct:
    return getDuctByName(self, t_name)
Model.getDuctByName = _getDuctByName

def _getDuctsByName(self, t_name: str, t_exactMatch: bool) -> DuctVector:
    return getDuctsByName(self, t_name, t_exactMatch)
Model.getDuctsByName = _getDuctsByName

class EvaporativeCoolerDirectResearchSpecial(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model", schedule: "Schedule"):
        _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeCoolerDirectResearchSpecial(model, schedule))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeCoolerDirectResearchSpecial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_availabilitySchedule(self)

    def availableSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_availableSchedule(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setAvailabilitySchedule(self, schedule)

    def setAvailableSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setAvailableSchedule(self, schedule)

    def coolerDesignEffectiveness(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_coolerDesignEffectiveness(self)

    def coolerEffectiveness(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_coolerEffectiveness(self)

    def setCoolerDesignEffectiveness(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setCoolerDesignEffectiveness(self, value)

    def setCoolerEffectiveness(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setCoolerEffectiveness(self, value)

    def recirculatingWaterPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_recirculatingWaterPumpPowerConsumption(self)

    def setRecirculatingWaterPumpPowerConsumption(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setRecirculatingWaterPumpPowerConsumption(self, value)

    def autosizeRecirculatingWaterPumpPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_autosizeRecirculatingWaterPumpPowerConsumption(self)

    def isRecirculatingWaterPumpPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_isRecirculatingWaterPumpPowerConsumptionAutosized(self)

    def primaryAirDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_primaryAirDesignFlowRate(self)

    def setPrimaryAirDesignFlowRate(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setPrimaryAirDesignFlowRate(self, value)

    def autosizePrimaryAirDesignFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_autosizePrimaryAirDesignFlowRate(self)

    def isPrimaryAirDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_isPrimaryAirDesignFlowRateAutosized(self)

    def sensorNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_sensorNode(self)

    def setSensorNode(self, node: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setSensorNode(self, node)

    def driftLossFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_driftLossFraction(self)

    def setDriftLossFraction(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setDriftLossFraction(self, value)

    def blowdownConcentrationRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_blowdownConcentrationRatio(self)

    def setBlowdownConcentrationRatio(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setBlowdownConcentrationRatio(self, value)

    def effectivenessFlowRatioModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_effectivenessFlowRatioModifierCurve(self)

    def setEffectivenessFlowRatioModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setEffectivenessFlowRatioModifierCurve(self, curve)

    def resetEffectivenessFlowRatioModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_resetEffectivenessFlowRatioModifierCurve(self)

    def waterPumpPowerSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_waterPumpPowerSizingFactor(self)

    def setWaterPumpPowerSizingFactor(self, waterPumpPowerSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setWaterPumpPowerSizingFactor(self, waterPumpPowerSizingFactor)

    def waterPumpPowerModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_waterPumpPowerModifierCurve(self)

    def setWaterPumpPowerModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setWaterPumpPowerModifierCurve(self, curve)

    def resetWaterPumpPowerModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_resetWaterPumpPowerModifierCurve(self)

    def evaporativeOperationMinimumDrybulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_evaporativeOperationMinimumDrybulbTemperature(self)

    def setEvaporativeOperationMinimumDrybulbTemperature(self, evaporativeOperationMinimumDrybulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setEvaporativeOperationMinimumDrybulbTemperature(self, evaporativeOperationMinimumDrybulbTemperature)

    def evaporativeOperationMaximumLimitWetbulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_evaporativeOperationMaximumLimitWetbulbTemperature(self)

    def setEvaporativeOperationMaximumLimitWetbulbTemperature(self, evaporativeOperationMaximumLimitWetbulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setEvaporativeOperationMaximumLimitWetbulbTemperature(self, evaporativeOperationMaximumLimitWetbulbTemperature)

    def evaporativeOperationMaximumLimitDrybulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_evaporativeOperationMaximumLimitDrybulbTemperature(self)

    def setEvaporativeOperationMaximumLimitDrybulbTemperature(self, evaporativeOperationMaximumLimitDrybulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_setEvaporativeOperationMaximumLimitDrybulbTemperature(self, evaporativeOperationMaximumLimitDrybulbTemperature)

    def autosizedRecirculatingWaterPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_autosizedRecirculatingWaterPumpPowerConsumption(self)

    def autosizedPrimaryAirDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_autosizedPrimaryAirDesignFlowRate(self)

# Register EvaporativeCoolerDirectResearchSpecial in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_swigregister(EvaporativeCoolerDirectResearchSpecial)

def EvaporativeCoolerDirectResearchSpecial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.EvaporativeCoolerDirectResearchSpecial_iddObjectType()


def toEvaporativeCoolerDirectResearchSpecial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EvaporativeCoolerDirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.toEvaporativeCoolerDirectResearchSpecial(idfObject)

def getEvaporativeCoolerDirectResearchSpecial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EvaporativeCoolerDirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerDirectResearchSpecial(t_model, t_handle)

def getEvaporativeCoolerDirectResearchSpecials(t_model: "Model") -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerDirectResearchSpecial > >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerDirectResearchSpecials(t_model)

def getEvaporativeCoolerDirectResearchSpecialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EvaporativeCoolerDirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerDirectResearchSpecialByName(t_model, t_name)

def getEvaporativeCoolerDirectResearchSpecialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerDirectResearchSpecial > >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerDirectResearchSpecialsByName(t_model, t_name, t_exactMatch)

def _to_EvaporativeCoolerDirectResearchSpecial(self) -> OptionalEvaporativeCoolerDirectResearchSpecial:
    return toEvaporativeCoolerDirectResearchSpecial(self)
openstudioutilitiesidf.IdfObject.to_EvaporativeCoolerDirectResearchSpecial = _to_EvaporativeCoolerDirectResearchSpecial

def _getEvaporativeCoolerDirectResearchSpecial(self, t_handle: "UUID") -> OptionalEvaporativeCoolerDirectResearchSpecial:
    return getEvaporativeCoolerDirectResearchSpecial(self, t_handle)
Model.getEvaporativeCoolerDirectResearchSpecial = _getEvaporativeCoolerDirectResearchSpecial

def _getEvaporativeCoolerDirectResearchSpecial(self, t_handle_str: str) -> OptionalEvaporativeCoolerDirectResearchSpecial:
    return getEvaporativeCoolerDirectResearchSpecial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEvaporativeCoolerDirectResearchSpecial = _getEvaporativeCoolerDirectResearchSpecial

def _getEvaporativeCoolerDirectResearchSpecials(self) -> EvaporativeCoolerDirectResearchSpecialVector:
    return getEvaporativeCoolerDirectResearchSpecials(self)
Model.getEvaporativeCoolerDirectResearchSpecials = _getEvaporativeCoolerDirectResearchSpecials

def _getEvaporativeCoolerDirectResearchSpecialByName(self, t_name: str) -> OptionalEvaporativeCoolerDirectResearchSpecial:
    return getEvaporativeCoolerDirectResearchSpecialByName(self, t_name)
Model.getEvaporativeCoolerDirectResearchSpecialByName = _getEvaporativeCoolerDirectResearchSpecialByName

def _getEvaporativeCoolerDirectResearchSpecialsByName(self, t_name: str, t_exactMatch: bool) -> EvaporativeCoolerDirectResearchSpecialVector:
    return getEvaporativeCoolerDirectResearchSpecialsByName(self, t_name, t_exactMatch)
Model.getEvaporativeCoolerDirectResearchSpecialsByName = _getEvaporativeCoolerDirectResearchSpecialsByName

class EvaporativeCoolerIndirectResearchSpecial(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeCoolerIndirectResearchSpecial(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeCoolerIndirectResearchSpecial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_availabilitySchedule(self)

    def coolerMaximumEffectiveness(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_coolerMaximumEffectiveness(self)

    def recirculatingWaterPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_recirculatingWaterPumpPowerConsumption(self)

    def isRecirculatingWaterPumpPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_isRecirculatingWaterPumpPowerConsumptionAutosized(self)

    def secondaryFanFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryFanFlowRate(self)

    def isSecondaryFanFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_isSecondaryFanFlowRateAutosized(self)

    def secondaryFanTotalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryFanTotalEfficiency(self)

    def secondaryFanDeltaPressure(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryFanDeltaPressure(self)

    def dewpointEffectivenessFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_dewpointEffectivenessFactor(self)

    def driftLossFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_driftLossFraction(self)

    def blowdownConcentrationRatio(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_blowdownConcentrationRatio(self)

    def wetbulbEffectivenessFlowRatioModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_wetbulbEffectivenessFlowRatioModifierCurve(self)

    def coolerDrybulbDesignEffectiveness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_coolerDrybulbDesignEffectiveness(self)

    def drybulbEffectivenessFlowRatioModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_drybulbEffectivenessFlowRatioModifierCurve(self)

    def waterPumpPowerSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_waterPumpPowerSizingFactor(self)

    def waterPumpPowerModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_waterPumpPowerModifierCurve(self)

    def secondaryAirFlowScalingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryAirFlowScalingFactor(self)

    def secondaryAirFanDesignPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryAirFanDesignPower(self)

    def isSecondaryAirFanDesignPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_isSecondaryAirFanDesignPowerAutosized(self)

    def secondaryAirFanPowerModifierCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_secondaryAirFanPowerModifierCurve(self)

    def primaryDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_primaryDesignAirFlowRate(self)

    def isPrimaryDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_isPrimaryDesignAirFlowRateAutosized(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetAvailabilitySchedule(self)

    def setCoolerMaximumEffectiveness(self, coolerMaximumEffectiveness: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setCoolerMaximumEffectiveness(self, coolerMaximumEffectiveness)

    def setRecirculatingWaterPumpPowerConsumption(self, recirculatingWaterPumpPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setRecirculatingWaterPumpPowerConsumption(self, recirculatingWaterPumpPowerConsumption)

    def autosizeRecirculatingWaterPumpPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizeRecirculatingWaterPumpPowerConsumption(self)

    def setSecondaryFanFlowRate(self, secondaryFanFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryFanFlowRate(self, secondaryFanFlowRate)

    def resetSecondaryFanFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetSecondaryFanFlowRate(self)

    def autosizeSecondaryFanFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizeSecondaryFanFlowRate(self)

    def setSecondaryFanTotalEfficiency(self, secondaryFanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryFanTotalEfficiency(self, secondaryFanTotalEfficiency)

    def setSecondaryFanDeltaPressure(self, secondaryFanDeltaPressure: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryFanDeltaPressure(self, secondaryFanDeltaPressure)

    def setDewpointEffectivenessFactor(self, dewpointEffectivenessFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setDewpointEffectivenessFactor(self, dewpointEffectivenessFactor)

    def setDriftLossFraction(self, driftLossFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setDriftLossFraction(self, driftLossFraction)

    def resetDriftLossFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetDriftLossFraction(self)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def resetBlowdownConcentrationRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetBlowdownConcentrationRatio(self)

    def setWetbulbEffectivenessFlowRatioModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setWetbulbEffectivenessFlowRatioModifierCurve(self, curve)

    def resetWetbulbEffectivenessFlowRatioModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetWetbulbEffectivenessFlowRatioModifierCurve(self)

    def setCoolerDrybulbDesignEffectiveness(self, coolerDrybulbDesignEffectiveness: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setCoolerDrybulbDesignEffectiveness(self, coolerDrybulbDesignEffectiveness)

    def resetCoolerDrybulbDesignEffectiveness(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetCoolerDrybulbDesignEffectiveness(self)

    def setDrybulbEffectivenessFlowRatioModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setDrybulbEffectivenessFlowRatioModifierCurve(self, curve)

    def resetDrybulbEffectivenessFlowRatioModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetDrybulbEffectivenessFlowRatioModifierCurve(self)

    def setWaterPumpPowerSizingFactor(self, waterPumpPowerSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setWaterPumpPowerSizingFactor(self, waterPumpPowerSizingFactor)

    def setWaterPumpPowerModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setWaterPumpPowerModifierCurve(self, curve)

    def resetWaterPumpPowerModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetWaterPumpPowerModifierCurve(self)

    def setSecondaryAirFlowScalingFactor(self, secondaryAirFlowScalingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryAirFlowScalingFactor(self, secondaryAirFlowScalingFactor)

    def setSecondaryAirFanDesignPower(self, secondaryAirFanDesignPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryAirFanDesignPower(self, secondaryAirFanDesignPower)

    def autosizeSecondaryAirFanDesignPower(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizeSecondaryAirFanDesignPower(self)

    def setSecondaryAirFanPowerModifierCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setSecondaryAirFanPowerModifierCurve(self, curve)

    def resetSecondaryAirFanPowerModifierCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetSecondaryAirFanPowerModifierCurve(self)

    def setPrimaryDesignAirFlowRate(self, primaryDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_setPrimaryDesignAirFlowRate(self, primaryDesignAirFlowRate)

    def resetPrimaryDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_resetPrimaryDesignAirFlowRate(self)

    def autosizePrimaryDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizePrimaryDesignAirFlowRate(self)

    def autosizedRecirculatingWaterPumpPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizedRecirculatingWaterPumpPowerConsumption(self)

    def autosizedSecondaryFanFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizedSecondaryFanFlowRate(self)

    def autosizedSecondaryAirFanDesignPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizedSecondaryAirFanDesignPower(self)

    def autosizedPrimaryDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_autosizedPrimaryDesignAirFlowRate(self)

# Register EvaporativeCoolerIndirectResearchSpecial in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_swigregister(EvaporativeCoolerIndirectResearchSpecial)

def EvaporativeCoolerIndirectResearchSpecial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.EvaporativeCoolerIndirectResearchSpecial_iddObjectType()


def toEvaporativeCoolerIndirectResearchSpecial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.toEvaporativeCoolerIndirectResearchSpecial(idfObject)

def getEvaporativeCoolerIndirectResearchSpecial(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerIndirectResearchSpecial(t_model, t_handle)

def getEvaporativeCoolerIndirectResearchSpecials(t_model: "Model") -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerIndirectResearchSpecial > >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerIndirectResearchSpecials(t_model)

def getEvaporativeCoolerIndirectResearchSpecialByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EvaporativeCoolerIndirectResearchSpecial >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerIndirectResearchSpecialByName(t_model, t_name)

def getEvaporativeCoolerIndirectResearchSpecialsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EvaporativeCoolerIndirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerIndirectResearchSpecial > >":
    return _openstudiomodelstraightcomponent.getEvaporativeCoolerIndirectResearchSpecialsByName(t_model, t_name, t_exactMatch)

def _to_EvaporativeCoolerIndirectResearchSpecial(self) -> OptionalEvaporativeCoolerIndirectResearchSpecial:
    return toEvaporativeCoolerIndirectResearchSpecial(self)
openstudioutilitiesidf.IdfObject.to_EvaporativeCoolerIndirectResearchSpecial = _to_EvaporativeCoolerIndirectResearchSpecial

def _getEvaporativeCoolerIndirectResearchSpecial(self, t_handle: "UUID") -> OptionalEvaporativeCoolerIndirectResearchSpecial:
    return getEvaporativeCoolerIndirectResearchSpecial(self, t_handle)
Model.getEvaporativeCoolerIndirectResearchSpecial = _getEvaporativeCoolerIndirectResearchSpecial

def _getEvaporativeCoolerIndirectResearchSpecial(self, t_handle_str: str) -> OptionalEvaporativeCoolerIndirectResearchSpecial:
    return getEvaporativeCoolerIndirectResearchSpecial(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEvaporativeCoolerIndirectResearchSpecial = _getEvaporativeCoolerIndirectResearchSpecial

def _getEvaporativeCoolerIndirectResearchSpecials(self) -> EvaporativeCoolerIndirectResearchSpecialVector:
    return getEvaporativeCoolerIndirectResearchSpecials(self)
Model.getEvaporativeCoolerIndirectResearchSpecials = _getEvaporativeCoolerIndirectResearchSpecials

def _getEvaporativeCoolerIndirectResearchSpecialByName(self, t_name: str) -> OptionalEvaporativeCoolerIndirectResearchSpecial:
    return getEvaporativeCoolerIndirectResearchSpecialByName(self, t_name)
Model.getEvaporativeCoolerIndirectResearchSpecialByName = _getEvaporativeCoolerIndirectResearchSpecialByName

def _getEvaporativeCoolerIndirectResearchSpecialsByName(self, t_name: str, t_exactMatch: bool) -> EvaporativeCoolerIndirectResearchSpecialVector:
    return getEvaporativeCoolerIndirectResearchSpecialsByName(self, t_name, t_exactMatch)
Model.getEvaporativeCoolerIndirectResearchSpecialsByName = _getEvaporativeCoolerIndirectResearchSpecialsByName

class EvaporativeFluidCoolerSingleSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeFluidCoolerSingleSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeFluidCoolerSingleSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_performanceInputMethodValues()

    @staticmethod
    def capacityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_capacityControlValues()

    @staticmethod
    def evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_evaporationLossModeValues()

    @staticmethod
    def blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_blowdownCalculationModeValues()

    def designAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designAirFlowRate(self)

    def isDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isDesignAirFlowRateAutosized(self)

    def fanPoweratDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_fanPoweratDesignAirFlowRate(self)

    def isFanPoweratDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isFanPoweratDesignAirFlowRateAutosized(self)

    def designSprayWaterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designSprayWaterFlowRate(self)

    def performanceInputMethod(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_performanceInputMethod(self)

    def standardDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_standardDesignCapacity(self)

    def ufactorTimesAreaValueatDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_ufactorTimesAreaValueatDesignAirFlowRate(self)

    def isUfactorTimesAreaValueatDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isUfactorTimesAreaValueatDesignAirFlowRateAutosized(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isDesignWaterFlowRateAutosized(self)

    def userSpecifiedDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_userSpecifiedDesignCapacity(self)

    def designEnteringWaterTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designEnteringWaterTemperature(self)

    def designEnteringAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designEnteringAirTemperature(self)

    def designEnteringAirWetbulbTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_designEnteringAirWetbulbTemperature(self)

    def capacityControl(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_capacityControl(self)

    def isCapacityControlDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isCapacityControlDefaulted(self)

    def sizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_sizingFactor(self)

    def isSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isSizingFactorDefaulted(self)

    def evaporationLossMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_evaporationLossMode(self)

    def isEvaporationLossModeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isEvaporationLossModeDefaulted(self)

    def evaporationLossFactor(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_evaporationLossFactor(self)

    def driftLossPercent(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_driftLossPercent(self)

    def isDriftLossPercentDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isDriftLossPercentDefaulted(self)

    def blowdownCalculationMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_blowdownCalculationMode(self)

    def isBlowdownCalculationModeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isBlowdownCalculationModeDefaulted(self)

    def blowdownConcentrationRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_blowdownConcentrationRatio(self)

    def isBlowdownConcentrationRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_isBlowdownConcentrationRatioDefaulted(self)

    def blowdownMakeupWaterUsageSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_blowdownMakeupWaterUsageSchedule(self)

    def setDesignAirFlowRate(self, designAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignAirFlowRate(self, designAirFlowRate)

    def autosizeDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizeDesignAirFlowRate(self)

    def setFanPoweratDesignAirFlowRate(self, fanPoweratDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setFanPoweratDesignAirFlowRate(self, fanPoweratDesignAirFlowRate)

    def autosizeFanPoweratDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizeFanPoweratDesignAirFlowRate(self)

    def setDesignSprayWaterFlowRate(self, designSprayWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignSprayWaterFlowRate(self, designSprayWaterFlowRate)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def resetPerformanceInputMethod(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetPerformanceInputMethod(self)

    def setStandardDesignCapacity(self, standardDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setStandardDesignCapacity(self, standardDesignCapacity)

    def resetStandardDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetStandardDesignCapacity(self)

    def setUfactorTimesAreaValueatDesignAirFlowRate(self, ufactorTimesAreaValueatDesignAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setUfactorTimesAreaValueatDesignAirFlowRate(self, ufactorTimesAreaValueatDesignAirFlowRate)

    def resetUfactorTimesAreaValueatDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetUfactorTimesAreaValueatDesignAirFlowRate(self)

    def autosizeUfactorTimesAreaValueatDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizeUfactorTimesAreaValueatDesignAirFlowRate(self)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def resetDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetDesignWaterFlowRate(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizeDesignWaterFlowRate(self)

    def setUserSpecifiedDesignCapacity(self, userSpecifiedDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setUserSpecifiedDesignCapacity(self, userSpecifiedDesignCapacity)

    def resetUserSpecifiedDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetUserSpecifiedDesignCapacity(self)

    def setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature)

    def resetDesignEnteringWaterTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetDesignEnteringWaterTemperature(self)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def resetDesignEnteringAirTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetDesignEnteringAirTemperature(self)

    def setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature)

    def resetDesignEnteringAirWetbulbTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetDesignEnteringAirWetbulbTemperature(self)

    def setCapacityControl(self, capacityControl: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setCapacityControl(self, capacityControl)

    def resetCapacityControl(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetCapacityControl(self)

    def setSizingFactor(self, sizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setSizingFactor(self, sizingFactor)

    def resetSizingFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetSizingFactor(self)

    def setEvaporationLossMode(self, evaporationLossMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setEvaporationLossMode(self, evaporationLossMode)

    def resetEvaporationLossMode(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetEvaporationLossMode(self)

    def setEvaporationLossFactor(self, evaporationLossFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setEvaporationLossFactor(self, evaporationLossFactor)

    def resetEvaporationLossFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetEvaporationLossFactor(self)

    def setDriftLossPercent(self, driftLossPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setDriftLossPercent(self, driftLossPercent)

    def resetDriftLossPercent(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetDriftLossPercent(self)

    def setBlowdownCalculationMode(self, blowdownCalculationMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setBlowdownCalculationMode(self, blowdownCalculationMode)

    def resetBlowdownCalculationMode(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetBlowdownCalculationMode(self)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def resetBlowdownConcentrationRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetBlowdownConcentrationRatio(self)

    def setBlowdownMakeupWaterUsageSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_setBlowdownMakeupWaterUsageSchedule(self, schedule)

    def resetBlowdownMakeupWaterUsageSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_resetBlowdownMakeupWaterUsageSchedule(self)

    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizedDesignAirFlowRate(self)

    def autosizedFanPoweratDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizedFanPoweratDesignAirFlowRate(self)

    def autosizedUfactorTimesAreaValueatDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizedUfactorTimesAreaValueatDesignAirFlowRate(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_autosizedDesignWaterFlowRate(self)

# Register EvaporativeFluidCoolerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_swigregister(EvaporativeFluidCoolerSingleSpeed)

def EvaporativeFluidCoolerSingleSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_iddObjectType()

def EvaporativeFluidCoolerSingleSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_performanceInputMethodValues()

def EvaporativeFluidCoolerSingleSpeed_capacityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_capacityControlValues()

def EvaporativeFluidCoolerSingleSpeed_evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_evaporationLossModeValues()

def EvaporativeFluidCoolerSingleSpeed_blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerSingleSpeed_blowdownCalculationModeValues()


def toEvaporativeFluidCoolerSingleSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.toEvaporativeFluidCoolerSingleSpeed(idfObject)

def getEvaporativeFluidCoolerSingleSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerSingleSpeed(t_model, t_handle)

def getEvaporativeFluidCoolerSingleSpeeds(t_model: "Model") -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerSingleSpeeds(t_model)

def getEvaporativeFluidCoolerSingleSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerSingleSpeedByName(t_model, t_name)

def getEvaporativeFluidCoolerSingleSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EvaporativeFluidCoolerSingleSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerSingleSpeedsByName(t_model, t_name, t_exactMatch)

def _to_EvaporativeFluidCoolerSingleSpeed(self) -> OptionalEvaporativeFluidCoolerSingleSpeed:
    return toEvaporativeFluidCoolerSingleSpeed(self)
openstudioutilitiesidf.IdfObject.to_EvaporativeFluidCoolerSingleSpeed = _to_EvaporativeFluidCoolerSingleSpeed

def _getEvaporativeFluidCoolerSingleSpeed(self, t_handle: "UUID") -> OptionalEvaporativeFluidCoolerSingleSpeed:
    return getEvaporativeFluidCoolerSingleSpeed(self, t_handle)
Model.getEvaporativeFluidCoolerSingleSpeed = _getEvaporativeFluidCoolerSingleSpeed

def _getEvaporativeFluidCoolerSingleSpeed(self, t_handle_str: str) -> OptionalEvaporativeFluidCoolerSingleSpeed:
    return getEvaporativeFluidCoolerSingleSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEvaporativeFluidCoolerSingleSpeed = _getEvaporativeFluidCoolerSingleSpeed

def _getEvaporativeFluidCoolerSingleSpeeds(self) -> EvaporativeFluidCoolerSingleSpeedVector:
    return getEvaporativeFluidCoolerSingleSpeeds(self)
Model.getEvaporativeFluidCoolerSingleSpeeds = _getEvaporativeFluidCoolerSingleSpeeds

def _getEvaporativeFluidCoolerSingleSpeedByName(self, t_name: str) -> OptionalEvaporativeFluidCoolerSingleSpeed:
    return getEvaporativeFluidCoolerSingleSpeedByName(self, t_name)
Model.getEvaporativeFluidCoolerSingleSpeedByName = _getEvaporativeFluidCoolerSingleSpeedByName

def _getEvaporativeFluidCoolerSingleSpeedsByName(self, t_name: str, t_exactMatch: bool) -> EvaporativeFluidCoolerSingleSpeedVector:
    return getEvaporativeFluidCoolerSingleSpeedsByName(self, t_name, t_exactMatch)
Model.getEvaporativeFluidCoolerSingleSpeedsByName = _getEvaporativeFluidCoolerSingleSpeedsByName

class EvaporativeFluidCoolerTwoSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_EvaporativeFluidCoolerTwoSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_EvaporativeFluidCoolerTwoSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_performanceInputMethodValues()

    @staticmethod
    def evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_evaporationLossModeValues()

    @staticmethod
    def blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_blowdownCalculationModeValues()

    def highFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highFanSpeedAirFlowRate(self)

    def isHighFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isHighFanSpeedAirFlowRateAutosized(self)

    def highFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highFanSpeedFanPower(self)

    def isHighFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isHighFanSpeedFanPowerAutosized(self)

    def lowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedAirFlowRate(self)

    def isLowFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isLowFanSpeedAirFlowRateAutosized(self)

    def lowFanSpeedAirFlowRateSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedAirFlowRateSizingFactor(self)

    def lowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedFanPower(self)

    def isLowFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isLowFanSpeedFanPowerAutosized(self)

    def lowFanSpeedFanPowerSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedFanPowerSizingFactor(self)

    def designSprayWaterFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_designSprayWaterFlowRate(self)

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_performanceInputMethod(self)

    def outdoorAirInletNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_outdoorAirInletNodeName(self)

    def heatRejectionCapacityandNominalCapacitySizingRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_heatRejectionCapacityandNominalCapacitySizingRatio(self)

    def highSpeedStandardDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highSpeedStandardDesignCapacity(self)

    def lowSpeedStandardDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowSpeedStandardDesignCapacity(self)

    def isLowSpeedStandardDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isLowSpeedStandardDesignCapacityAutosized(self)

    def lowSpeedStandardCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowSpeedStandardCapacitySizingFactor(self)

    def highFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highFanSpeedUfactorTimesAreaValue(self)

    def isHighFanSpeedUfactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isHighFanSpeedUfactorTimesAreaValueAutosized(self)

    def lowFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedUfactorTimesAreaValue(self)

    def isLowFanSpeedUfactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isLowFanSpeedUfactorTimesAreaValueAutosized(self)

    def lowFanSpeedUFactorTimesAreaSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowFanSpeedUFactorTimesAreaSizingFactor(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isDesignWaterFlowRateAutosized(self)

    def highSpeedUserSpecifiedDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highSpeedUserSpecifiedDesignCapacity(self)

    def lowSpeedUserSpecifiedDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowSpeedUserSpecifiedDesignCapacity(self)

    def isLowSpeedUserSpecifiedDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_isLowSpeedUserSpecifiedDesignCapacityAutosized(self)

    def lowSpeedUserSpecifiedDesignCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_lowSpeedUserSpecifiedDesignCapacitySizingFactor(self)

    def designEnteringWaterTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_designEnteringWaterTemperature(self)

    def designEnteringAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_designEnteringAirTemperature(self)

    def designEnteringAirWetbulbTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_designEnteringAirWetbulbTemperature(self)

    def highSpeedSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_highSpeedSizingFactor(self)

    def evaporationLossMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_evaporationLossMode(self)

    def evaporationLossFactor(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_evaporationLossFactor(self)

    def driftLossPercent(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_driftLossPercent(self)

    def blowdownCalculationMode(self) -> "std::string":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_blowdownCalculationMode(self)

    def blowdownConcentrationRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_blowdownConcentrationRatio(self)

    def blowdownMakeupWaterUsageSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_blowdownMakeupWaterUsageSchedule(self)

    def setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate)

    def autosizeHighFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeHighFanSpeedAirFlowRate(self)

    def setHighFanSpeedFanPower(self, highFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighFanSpeedFanPower(self, highFanSpeedFanPower)

    def autosizeHighFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeHighFanSpeedFanPower(self)

    def setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate)

    def autosizeLowFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeLowFanSpeedAirFlowRate(self)

    def setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor)

    def setLowFanSpeedFanPower(self, lowFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedFanPower(self, lowFanSpeedFanPower)

    def autosizeLowFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeLowFanSpeedFanPower(self)

    def setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor)

    def setDesignSprayWaterFlowRate(self, designSprayWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDesignSprayWaterFlowRate(self, designSprayWaterFlowRate)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def setOutdoorAirInletNodeName(self, outdoorAirInletNodeName: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setOutdoorAirInletNodeName(self, outdoorAirInletNodeName)

    def resetOutdoorAirInletNodeName(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetOutdoorAirInletNodeName(self)

    def setHeatRejectionCapacityandNominalCapacitySizingRatio(self, heatRejectionCapacityandNominalCapacitySizingRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHeatRejectionCapacityandNominalCapacitySizingRatio(self, heatRejectionCapacityandNominalCapacitySizingRatio)

    def setHighSpeedStandardDesignCapacity(self, highSpeedStandardDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighSpeedStandardDesignCapacity(self, highSpeedStandardDesignCapacity)

    def resetHighSpeedStandardDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetHighSpeedStandardDesignCapacity(self)

    def setLowSpeedStandardDesignCapacity(self, lowSpeedStandardDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowSpeedStandardDesignCapacity(self, lowSpeedStandardDesignCapacity)

    def resetLowSpeedStandardDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetLowSpeedStandardDesignCapacity(self)

    def autosizeLowSpeedStandardDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeLowSpeedStandardDesignCapacity(self)

    def setLowSpeedStandardCapacitySizingFactor(self, lowSpeedStandardCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowSpeedStandardCapacitySizingFactor(self, lowSpeedStandardCapacitySizingFactor)

    def setHighFanSpeedUfactorTimesAreaValue(self, highFanSpeedUfactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighFanSpeedUfactorTimesAreaValue(self, highFanSpeedUfactorTimesAreaValue)

    def resetHighFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetHighFanSpeedUfactorTimesAreaValue(self)

    def autosizeHighFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeHighFanSpeedUfactorTimesAreaValue(self)

    def setLowFanSpeedUfactorTimesAreaValue(self, lowFanSpeedUfactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedUfactorTimesAreaValue(self, lowFanSpeedUfactorTimesAreaValue)

    def resetLowFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetLowFanSpeedUfactorTimesAreaValue(self)

    def autosizeLowFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeLowFanSpeedUfactorTimesAreaValue(self)

    def setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def resetDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetDesignWaterFlowRate(self)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeDesignWaterFlowRate(self)

    def setHighSpeedUserSpecifiedDesignCapacity(self, highSpeedUserSpecifiedDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighSpeedUserSpecifiedDesignCapacity(self, highSpeedUserSpecifiedDesignCapacity)

    def resetHighSpeedUserSpecifiedDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetHighSpeedUserSpecifiedDesignCapacity(self)

    def setLowSpeedUserSpecifiedDesignCapacity(self, lowSpeedUserSpecifiedDesignCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowSpeedUserSpecifiedDesignCapacity(self, lowSpeedUserSpecifiedDesignCapacity)

    def resetLowSpeedUserSpecifiedDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetLowSpeedUserSpecifiedDesignCapacity(self)

    def autosizeLowSpeedUserSpecifiedDesignCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizeLowSpeedUserSpecifiedDesignCapacity(self)

    def setLowSpeedUserSpecifiedDesignCapacitySizingFactor(self, lowSpeedUserSpecifiedDesignCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setLowSpeedUserSpecifiedDesignCapacitySizingFactor(self, lowSpeedUserSpecifiedDesignCapacitySizingFactor)

    def setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature)

    def resetDesignEnteringWaterTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetDesignEnteringWaterTemperature(self)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def resetDesignEnteringAirTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetDesignEnteringAirTemperature(self)

    def setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature)

    def resetDesignEnteringAirWetbulbTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetDesignEnteringAirWetbulbTemperature(self)

    def setHighSpeedSizingFactor(self, highSpeedSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setHighSpeedSizingFactor(self, highSpeedSizingFactor)

    def setEvaporationLossMode(self, evaporationLossMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setEvaporationLossMode(self, evaporationLossMode)

    def setEvaporationLossFactor(self, evaporationLossFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setEvaporationLossFactor(self, evaporationLossFactor)

    def resetEvaporationLossFactor(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetEvaporationLossFactor(self)

    def setDriftLossPercent(self, driftLossPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setDriftLossPercent(self, driftLossPercent)

    def setBlowdownCalculationMode(self, blowdownCalculationMode: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setBlowdownCalculationMode(self, blowdownCalculationMode)

    def setBlowdownConcentrationRatio(self, blowdownConcentrationRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setBlowdownConcentrationRatio(self, blowdownConcentrationRatio)

    def setBlowdownMakeupWaterUsageSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_setBlowdownMakeupWaterUsageSchedule(self, schedule)

    def resetBlowdownMakeupWaterUsageSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_resetBlowdownMakeupWaterUsageSchedule(self)

    def autosizedHighFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedHighFanSpeedAirFlowRate(self)

    def autosizedHighFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedHighFanSpeedFanPower(self)

    def autosizedLowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedLowFanSpeedAirFlowRate(self)

    def autosizedLowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedLowFanSpeedFanPower(self)

    def autosizedLowSpeedStandardDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedLowSpeedStandardDesignCapacity(self)

    def autosizedHighFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedHighFanSpeedUfactorTimesAreaValue(self)

    def autosizedLowFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedLowFanSpeedUfactorTimesAreaValue(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedLowSpeedUserSpecifiedDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_autosizedLowSpeedUserSpecifiedDesignCapacity(self)

# Register EvaporativeFluidCoolerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_swigregister(EvaporativeFluidCoolerTwoSpeed)

def EvaporativeFluidCoolerTwoSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_iddObjectType()

def EvaporativeFluidCoolerTwoSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_performanceInputMethodValues()

def EvaporativeFluidCoolerTwoSpeed_evaporationLossModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_evaporationLossModeValues()

def EvaporativeFluidCoolerTwoSpeed_blowdownCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.EvaporativeFluidCoolerTwoSpeed_blowdownCalculationModeValues()


def toEvaporativeFluidCoolerTwoSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.toEvaporativeFluidCoolerTwoSpeed(idfObject)

def getEvaporativeFluidCoolerTwoSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerTwoSpeed(t_model, t_handle)

def getEvaporativeFluidCoolerTwoSpeeds(t_model: "Model") -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerTwoSpeeds(t_model)

def getEvaporativeFluidCoolerTwoSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::EvaporativeFluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerTwoSpeedByName(t_model, t_name)

def getEvaporativeFluidCoolerTwoSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::EvaporativeFluidCoolerTwoSpeed,std::allocator< openstudio::model::EvaporativeFluidCoolerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getEvaporativeFluidCoolerTwoSpeedsByName(t_model, t_name, t_exactMatch)

def _to_EvaporativeFluidCoolerTwoSpeed(self) -> OptionalEvaporativeFluidCoolerTwoSpeed:
    return toEvaporativeFluidCoolerTwoSpeed(self)
openstudioutilitiesidf.IdfObject.to_EvaporativeFluidCoolerTwoSpeed = _to_EvaporativeFluidCoolerTwoSpeed

def _getEvaporativeFluidCoolerTwoSpeed(self, t_handle: "UUID") -> OptionalEvaporativeFluidCoolerTwoSpeed:
    return getEvaporativeFluidCoolerTwoSpeed(self, t_handle)
Model.getEvaporativeFluidCoolerTwoSpeed = _getEvaporativeFluidCoolerTwoSpeed

def _getEvaporativeFluidCoolerTwoSpeed(self, t_handle_str: str) -> OptionalEvaporativeFluidCoolerTwoSpeed:
    return getEvaporativeFluidCoolerTwoSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getEvaporativeFluidCoolerTwoSpeed = _getEvaporativeFluidCoolerTwoSpeed

def _getEvaporativeFluidCoolerTwoSpeeds(self) -> EvaporativeFluidCoolerTwoSpeedVector:
    return getEvaporativeFluidCoolerTwoSpeeds(self)
Model.getEvaporativeFluidCoolerTwoSpeeds = _getEvaporativeFluidCoolerTwoSpeeds

def _getEvaporativeFluidCoolerTwoSpeedByName(self, t_name: str) -> OptionalEvaporativeFluidCoolerTwoSpeed:
    return getEvaporativeFluidCoolerTwoSpeedByName(self, t_name)
Model.getEvaporativeFluidCoolerTwoSpeedByName = _getEvaporativeFluidCoolerTwoSpeedByName

def _getEvaporativeFluidCoolerTwoSpeedsByName(self, t_name: str, t_exactMatch: bool) -> EvaporativeFluidCoolerTwoSpeedVector:
    return getEvaporativeFluidCoolerTwoSpeedsByName(self, t_name, t_exactMatch)
Model.getEvaporativeFluidCoolerTwoSpeedsByName = _getEvaporativeFluidCoolerTwoSpeedsByName

class FanConstantVolume(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanConstantVolume_swiginit(self, _openstudiomodelstraightcomponent.new_FanConstantVolume(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanConstantVolume

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FanConstantVolume_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.FanConstantVolume_availabilitySchedule(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanConstantVolume_fanTotalEfficiency(self)

    def fanEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanConstantVolume_fanEfficiency(self)

    def pressureRise(self) -> "double":
        return _openstudiomodelstraightcomponent.FanConstantVolume_pressureRise(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanConstantVolume_motorEfficiency(self)

    def motorInAirstreamFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanConstantVolume_motorInAirstreamFraction(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanConstantVolume_endUseSubcategory(self)

    def setAvailabilitySchedule(self, s: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setAvailabilitySchedule(self, s)

    def setFanTotalEfficiency(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setFanTotalEfficiency(self, value)

    def setFanEfficiency(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setFanEfficiency(self, value)

    def setPressureRise(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setPressureRise(self, value)

    def setMotorEfficiency(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setMotorEfficiency(self, value)

    def setMotorInAirstreamFraction(self, value: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setMotorInAirstreamFraction(self, value)

    def setEndUseSubcategory(self, value: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setEndUseSubcategory(self, value)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanConstantVolume_maximumFlowRate(self)

    def isMaximumFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_isMaximumFlowRateAutosized(self)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanConstantVolume_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolume_resetMaximumFlowRate(self)

    def autosizeMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanConstantVolume_autosizeMaximumFlowRate(self)

    def getAirflowNetworkFan(self) -> "openstudio::model::AirflowNetworkFan":
        return _openstudiomodelstraightcomponent.FanConstantVolume_getAirflowNetworkFan(self)

    def airflowNetworkFan(self) -> "boost::optional< openstudio::model::AirflowNetworkFan >":
        return _openstudiomodelstraightcomponent.FanConstantVolume_airflowNetworkFan(self)

    def autosizedMaximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanConstantVolume_autosizedMaximumFlowRate(self)

# Register FanConstantVolume in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanConstantVolume_swigregister(FanConstantVolume)

def FanConstantVolume_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FanConstantVolume_iddObjectType()


def toFanConstantVolume(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FanConstantVolume >":
    return _openstudiomodelstraightcomponent.toFanConstantVolume(idfObject)

def getFanConstantVolume(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FanConstantVolume >":
    return _openstudiomodelstraightcomponent.getFanConstantVolume(t_model, t_handle)

def getFanConstantVolumes(t_model: "Model") -> "std::vector< openstudio::model::FanConstantVolume,std::allocator< openstudio::model::FanConstantVolume > >":
    return _openstudiomodelstraightcomponent.getFanConstantVolumes(t_model)

def getFanConstantVolumeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FanConstantVolume >":
    return _openstudiomodelstraightcomponent.getFanConstantVolumeByName(t_model, t_name)

def getFanConstantVolumesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FanConstantVolume,std::allocator< openstudio::model::FanConstantVolume > >":
    return _openstudiomodelstraightcomponent.getFanConstantVolumesByName(t_model, t_name, t_exactMatch)

def _to_FanConstantVolume(self) -> OptionalFanConstantVolume:
    return toFanConstantVolume(self)
openstudioutilitiesidf.IdfObject.to_FanConstantVolume = _to_FanConstantVolume

def _getFanConstantVolume(self, t_handle: "UUID") -> OptionalFanConstantVolume:
    return getFanConstantVolume(self, t_handle)
Model.getFanConstantVolume = _getFanConstantVolume

def _getFanConstantVolume(self, t_handle_str: str) -> OptionalFanConstantVolume:
    return getFanConstantVolume(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFanConstantVolume = _getFanConstantVolume

def _getFanConstantVolumes(self) -> FanConstantVolumeVector:
    return getFanConstantVolumes(self)
Model.getFanConstantVolumes = _getFanConstantVolumes

def _getFanConstantVolumeByName(self, t_name: str) -> OptionalFanConstantVolume:
    return getFanConstantVolumeByName(self, t_name)
Model.getFanConstantVolumeByName = _getFanConstantVolumeByName

def _getFanConstantVolumesByName(self, t_name: str, t_exactMatch: bool) -> FanConstantVolumeVector:
    return getFanConstantVolumesByName(self, t_name, t_exactMatch)
Model.getFanConstantVolumesByName = _getFanConstantVolumesByName

class FanOnOff(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanOnOff_swiginit(self, _openstudiomodelstraightcomponent.new_FanOnOff(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanOnOff

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FanOnOff_iddObjectType()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.FanOnOff_availabilitySchedule(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanOnOff_fanTotalEfficiency(self)

    def isFanTotalEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_isFanTotalEfficiencyDefaulted(self)

    def fanEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanOnOff_fanEfficiency(self)

    def isFanEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_isFanEfficiencyDefaulted(self)

    def pressureRise(self) -> "double":
        return _openstudiomodelstraightcomponent.FanOnOff_pressureRise(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanOnOff_maximumFlowRate(self)

    def isMaximumFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_isMaximumFlowRateAutosized(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanOnOff_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_isMotorEfficiencyDefaulted(self)

    def motorInAirstreamFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanOnOff_motorInAirstreamFraction(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanOnOff_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_isEndUseSubcategoryDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setAvailabilitySchedule(self, schedule)

    def setFanTotalEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setFanTotalEfficiency(self, fanTotalEfficiency)

    def resetFanTotalEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetFanTotalEfficiency(self)

    def setFanEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setFanEfficiency(self, fanTotalEfficiency)

    def resetFanEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetFanEfficiency(self)

    def setPressureRise(self, pressureRise: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setPressureRise(self, pressureRise)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetMaximumFlowRate(self)

    def autosizeMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_autosizeMaximumFlowRate(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetMotorEfficiency(self)

    def setMotorInAirstreamFraction(self, motorInAirstreamFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setMotorInAirstreamFraction(self, motorInAirstreamFraction)

    def resetMotorInAirstreamFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetMotorInAirstreamFraction(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelstraightcomponent.FanOnOff_resetEndUseSubcategory(self)

    def fanPowerRatioFunctionofSpeedRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.FanOnOff_fanPowerRatioFunctionofSpeedRatioCurve(self)

    def setFanPowerRatioFunctionofSpeedRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setFanPowerRatioFunctionofSpeedRatioCurve(self, curve)

    def fanEfficiencyRatioFunctionofSpeedRatioCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.FanOnOff_fanEfficiencyRatioFunctionofSpeedRatioCurve(self)

    def setFanEfficiencyRatioFunctionofSpeedRatioCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.FanOnOff_setFanEfficiencyRatioFunctionofSpeedRatioCurve(self, curve)

    def getAirflowNetworkFan(self) -> "openstudio::model::AirflowNetworkFan":
        return _openstudiomodelstraightcomponent.FanOnOff_getAirflowNetworkFan(self)

    def airflowNetworkFan(self) -> "boost::optional< openstudio::model::AirflowNetworkFan >":
        return _openstudiomodelstraightcomponent.FanOnOff_airflowNetworkFan(self)

    def autosizedMaximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanOnOff_autosizedMaximumFlowRate(self)

# Register FanOnOff in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanOnOff_swigregister(FanOnOff)

def FanOnOff_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FanOnOff_iddObjectType()


def toFanOnOff(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FanOnOff >":
    return _openstudiomodelstraightcomponent.toFanOnOff(idfObject)

def getFanOnOff(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FanOnOff >":
    return _openstudiomodelstraightcomponent.getFanOnOff(t_model, t_handle)

def getFanOnOffs(t_model: "Model") -> "std::vector< openstudio::model::FanOnOff,std::allocator< openstudio::model::FanOnOff > >":
    return _openstudiomodelstraightcomponent.getFanOnOffs(t_model)

def getFanOnOffByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FanOnOff >":
    return _openstudiomodelstraightcomponent.getFanOnOffByName(t_model, t_name)

def getFanOnOffsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FanOnOff,std::allocator< openstudio::model::FanOnOff > >":
    return _openstudiomodelstraightcomponent.getFanOnOffsByName(t_model, t_name, t_exactMatch)

def _to_FanOnOff(self) -> OptionalFanOnOff:
    return toFanOnOff(self)
openstudioutilitiesidf.IdfObject.to_FanOnOff = _to_FanOnOff

def _getFanOnOff(self, t_handle: "UUID") -> OptionalFanOnOff:
    return getFanOnOff(self, t_handle)
Model.getFanOnOff = _getFanOnOff

def _getFanOnOff(self, t_handle_str: str) -> OptionalFanOnOff:
    return getFanOnOff(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFanOnOff = _getFanOnOff

def _getFanOnOffs(self) -> FanOnOffVector:
    return getFanOnOffs(self)
Model.getFanOnOffs = _getFanOnOffs

def _getFanOnOffByName(self, t_name: str) -> OptionalFanOnOff:
    return getFanOnOffByName(self, t_name)
Model.getFanOnOffByName = _getFanOnOffByName

def _getFanOnOffsByName(self, t_name: str, t_exactMatch: bool) -> FanOnOffVector:
    return getFanOnOffsByName(self, t_name, t_exactMatch)
Model.getFanOnOffsByName = _getFanOnOffsByName

class FanSystemModelSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, flowFraction: "double", electricPowerFraction: "double"):
        _openstudiomodelstraightcomponent.FanSystemModelSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_FanSystemModelSpeed(flowFraction, electricPowerFraction))

    def flowFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeed_flowFraction(self)

    def electricPowerFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeed_electricPowerFraction(self)

    def __lt__(self, other: "FanSystemModelSpeed") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeed___lt__(self, other)

    def __str__(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanSystemModelSpeed___str__(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanSystemModelSpeed

# Register FanSystemModelSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanSystemModelSpeed_swigregister(FanSystemModelSpeed)


def __lshift__(*args) -> "std::ostream &":
    return _openstudiomodelstraightcomponent.__lshift__(*args)
class FanSystemModel(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.FanSystemModel_swiginit(self, _openstudiomodelstraightcomponent.new_FanSystemModel(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanSystemModel

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FanSystemModel_iddObjectType()

    @staticmethod
    def speedControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FanSystemModel_speedControlMethodValues()

    @staticmethod
    def designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FanSystemModel_designPowerSizingMethodValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.FanSystemModel_availabilitySchedule(self)

    def designMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_designMaximumAirFlowRate(self)

    def isDesignMaximumAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_isDesignMaximumAirFlowRateAutosized(self)

    def autosizedDesignMaximumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_autosizedDesignMaximumAirFlowRate(self)

    def speedControlMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanSystemModel_speedControlMethod(self)

    def electricPowerMinimumFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_electricPowerMinimumFlowRateFraction(self)

    def designPressureRise(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_designPressureRise(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_motorEfficiency(self)

    def motorInAirStreamFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_motorInAirStreamFraction(self)

    def designElectricPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_designElectricPowerConsumption(self)

    def isDesignElectricPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_isDesignElectricPowerConsumptionAutosized(self)

    def autosizedDesignElectricPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_autosizedDesignElectricPowerConsumption(self)

    def designPowerSizingMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanSystemModel_designPowerSizingMethod(self)

    def electricPowerPerUnitFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_electricPowerPerUnitFlowRate(self)

    def electricPowerPerUnitFlowRatePerUnitPressure(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_electricPowerPerUnitFlowRatePerUnitPressure(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_fanTotalEfficiency(self)

    def electricPowerFunctionofFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.FanSystemModel_electricPowerFunctionofFlowFractionCurve(self)

    def nightVentilationModePressureRise(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_nightVentilationModePressureRise(self)

    def nightVentilationModeFlowFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanSystemModel_nightVentilationModeFlowFraction(self)

    def motorLossZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.FanSystemModel_motorLossZone(self)

    def motorLossRadiativeFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanSystemModel_motorLossRadiativeFraction(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanSystemModel_endUseSubcategory(self)

    def numberofSpeeds(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.FanSystemModel_numberofSpeeds(self)

    def speeds(self) -> "std::vector< openstudio::model::FanSystemModelSpeed,std::allocator< openstudio::model::FanSystemModelSpeed > >":
        return _openstudiomodelstraightcomponent.FanSystemModel_speeds(self)

    def speedIndex(self, speed: "FanSystemModelSpeed") -> "boost::optional< unsigned int >":
        return _openstudiomodelstraightcomponent.FanSystemModel_speedIndex(self, speed)

    def getSpeed(self, speedIndex: "unsigned int") -> "boost::optional< openstudio::model::FanSystemModelSpeed >":
        return _openstudiomodelstraightcomponent.FanSystemModel_getSpeed(self, speedIndex)

    def addSpeed(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_addSpeed(self, *args)

    def removeSpeed(self, speedIndex: "unsigned int") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_removeSpeed(self, speedIndex)

    def removeAllSpeeds(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_removeAllSpeeds(self)

    def setSpeeds(self, speeds: "FanSystemModelSpeedVector") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setSpeeds(self, speeds)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setAvailabilitySchedule(self, schedule)

    def setDesignMaximumAirFlowRate(self, designMaximumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setDesignMaximumAirFlowRate(self, designMaximumAirFlowRate)

    def autosizeDesignMaximumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_autosizeDesignMaximumAirFlowRate(self)

    def setSpeedControlMethod(self, speedControlMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setSpeedControlMethod(self, speedControlMethod)

    def setElectricPowerMinimumFlowRateFraction(self, electricPowerMinimumFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setElectricPowerMinimumFlowRateFraction(self, electricPowerMinimumFlowRateFraction)

    def setDesignPressureRise(self, designPressureRise: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setDesignPressureRise(self, designPressureRise)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setMotorEfficiency(self, motorEfficiency)

    def setMotorInAirStreamFraction(self, motorInAirStreamFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setMotorInAirStreamFraction(self, motorInAirStreamFraction)

    def setDesignElectricPowerConsumption(self, designElectricPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setDesignElectricPowerConsumption(self, designElectricPowerConsumption)

    def autosizeDesignElectricPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_autosizeDesignElectricPowerConsumption(self)

    def setDesignPowerSizingMethod(self, designPowerSizingMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setDesignPowerSizingMethod(self, designPowerSizingMethod)

    def setElectricPowerPerUnitFlowRate(self, electricPowerPerUnitFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setElectricPowerPerUnitFlowRate(self, electricPowerPerUnitFlowRate)

    def setElectricPowerPerUnitFlowRatePerUnitPressure(self, electricPowerPerUnitFlowRatePerUnitPressure: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setElectricPowerPerUnitFlowRatePerUnitPressure(self, electricPowerPerUnitFlowRatePerUnitPressure)

    def setFanTotalEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setFanTotalEfficiency(self, fanTotalEfficiency)

    def setElectricPowerFunctionofFlowFractionCurve(self, univariateFunctions: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setElectricPowerFunctionofFlowFractionCurve(self, univariateFunctions)

    def resetElectricPowerFunctionofFlowFractionCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_resetElectricPowerFunctionofFlowFractionCurve(self)

    def setNightVentilationModePressureRise(self, nightVentilationModePressureRise: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setNightVentilationModePressureRise(self, nightVentilationModePressureRise)

    def resetNightVentilationModePressureRise(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_resetNightVentilationModePressureRise(self)

    def setNightVentilationModeFlowFraction(self, nightVentilationModeFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setNightVentilationModeFlowFraction(self, nightVentilationModeFlowFraction)

    def resetNightVentilationModeFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_resetNightVentilationModeFlowFraction(self)

    def setMotorLossZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setMotorLossZone(self, thermalZone)

    def resetMotorLossZone(self) -> "void":
        return _openstudiomodelstraightcomponent.FanSystemModel_resetMotorLossZone(self)

    def setMotorLossRadiativeFraction(self, motorLossRadiativeFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setMotorLossRadiativeFraction(self, motorLossRadiativeFraction)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.FanSystemModel_setEndUseSubcategory(self, endUseSubcategory)

    def getAirflowNetworkFan(self) -> "openstudio::model::AirflowNetworkFan":
        return _openstudiomodelstraightcomponent.FanSystemModel_getAirflowNetworkFan(self)

    def airflowNetworkFan(self) -> "boost::optional< openstudio::model::AirflowNetworkFan >":
        return _openstudiomodelstraightcomponent.FanSystemModel_airflowNetworkFan(self)

# Register FanSystemModel in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanSystemModel_swigregister(FanSystemModel)

def FanSystemModel_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FanSystemModel_iddObjectType()

def FanSystemModel_speedControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FanSystemModel_speedControlMethodValues()

def FanSystemModel_designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FanSystemModel_designPowerSizingMethodValues()


def toFanSystemModel(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FanSystemModel >":
    return _openstudiomodelstraightcomponent.toFanSystemModel(idfObject)

def getFanSystemModel(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FanSystemModel >":
    return _openstudiomodelstraightcomponent.getFanSystemModel(t_model, t_handle)

def getFanSystemModels(t_model: "Model") -> "std::vector< openstudio::model::FanSystemModel,std::allocator< openstudio::model::FanSystemModel > >":
    return _openstudiomodelstraightcomponent.getFanSystemModels(t_model)

def getFanSystemModelByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FanSystemModel >":
    return _openstudiomodelstraightcomponent.getFanSystemModelByName(t_model, t_name)

def getFanSystemModelsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FanSystemModel,std::allocator< openstudio::model::FanSystemModel > >":
    return _openstudiomodelstraightcomponent.getFanSystemModelsByName(t_model, t_name, t_exactMatch)

def _to_FanSystemModel(self) -> OptionalFanSystemModel:
    return toFanSystemModel(self)
openstudioutilitiesidf.IdfObject.to_FanSystemModel = _to_FanSystemModel

def _getFanSystemModel(self, t_handle: "UUID") -> OptionalFanSystemModel:
    return getFanSystemModel(self, t_handle)
Model.getFanSystemModel = _getFanSystemModel

def _getFanSystemModel(self, t_handle_str: str) -> OptionalFanSystemModel:
    return getFanSystemModel(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFanSystemModel = _getFanSystemModel

def _getFanSystemModels(self) -> FanSystemModelVector:
    return getFanSystemModels(self)
Model.getFanSystemModels = _getFanSystemModels

def _getFanSystemModelByName(self, t_name: str) -> OptionalFanSystemModel:
    return getFanSystemModelByName(self, t_name)
Model.getFanSystemModelByName = _getFanSystemModelByName

def _getFanSystemModelsByName(self, t_name: str, t_exactMatch: bool) -> FanSystemModelVector:
    return getFanSystemModelsByName(self, t_name, t_exactMatch)
Model.getFanSystemModelsByName = _getFanSystemModelsByName

class FanVariableVolume(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.FanVariableVolume_swiginit(self, _openstudiomodelstraightcomponent.new_FanVariableVolume(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FanVariableVolume

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FanVariableVolume_iddObjectType()

    @staticmethod
    def fanPowerMinimumFlowRateInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerMinimumFlowRateInputMethodValues()

    @staticmethod
    def validFanPowerMinimumFlowRateInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_validFanPowerMinimumFlowRateInputMethodValues()

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.FanVariableVolume_availabilitySchedule(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanTotalEfficiency(self)

    def fanEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanEfficiency(self)

    def isFanTotalEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isFanTotalEfficiencyDefaulted(self)

    def isFanEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isFanEfficiencyDefaulted(self)

    def pressureRise(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_pressureRise(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_maximumFlowRate(self)

    def isMaximumFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isMaximumFlowRateAutosized(self)

    def fanPowerMinimumFlowRateInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerMinimumFlowRateInputMethod(self)

    def isFanPowerMinimumFlowRateInputMethodDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isFanPowerMinimumFlowRateInputMethodDefaulted(self)

    def fanPowerMinimumFlowFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerMinimumFlowFraction(self)

    def isFanPowerMinimumFlowFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isFanPowerMinimumFlowFractionDefaulted(self)

    def fanPowerMinimumAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerMinimumAirFlowRate(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isMotorEfficiencyDefaulted(self)

    def motorInAirstreamFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.FanVariableVolume_motorInAirstreamFraction(self)

    def isMotorInAirstreamFractionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isMotorInAirstreamFractionDefaulted(self)

    def fanPowerCoefficient1(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerCoefficient1(self)

    def fanPowerCoefficient2(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerCoefficient2(self)

    def fanPowerCoefficient3(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerCoefficient3(self)

    def fanPowerCoefficient4(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerCoefficient4(self)

    def fanPowerCoefficient5(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerCoefficient5(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FanVariableVolume_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_isEndUseSubcategoryDefaulted(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setAvailabilitySchedule(self, schedule)

    def setFanTotalEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanTotalEfficiency(self, fanTotalEfficiency)

    def resetFanTotalEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanTotalEfficiency(self)

    def setFanEfficiency(self, fanTotalEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanEfficiency(self, fanTotalEfficiency)

    def resetFanEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanEfficiency(self)

    def setPressureRise(self, pressureRise: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setPressureRise(self, pressureRise)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetMaximumFlowRate(self)

    def autosizeMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_autosizeMaximumFlowRate(self)

    def setFanPowerMinimumFlowRateInputMethod(self, fanPowerMinimumFlowRateInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerMinimumFlowRateInputMethod(self, fanPowerMinimumFlowRateInputMethod)

    def resetFanPowerMinimumFlowRateInputMethod(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerMinimumFlowRateInputMethod(self)

    def setFanPowerMinimumFlowFraction(self, fanPowerMinimumFlowFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerMinimumFlowFraction(self, fanPowerMinimumFlowFraction)

    def resetFanPowerMinimumFlowFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerMinimumFlowFraction(self)

    def setFanPowerMinimumAirFlowRate(self, fanPowerMinimumAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerMinimumAirFlowRate(self, fanPowerMinimumAirFlowRate)

    def resetFanPowerMinimumAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerMinimumAirFlowRate(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetMotorEfficiency(self)

    def setMotorInAirstreamFraction(self, motorInAirstreamFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setMotorInAirstreamFraction(self, motorInAirstreamFraction)

    def resetMotorInAirstreamFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetMotorInAirstreamFraction(self)

    def setFanPowerCoefficient1(self, fanPowerCoefficient1: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerCoefficient1(self, fanPowerCoefficient1)

    def resetFanPowerCoefficient1(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerCoefficient1(self)

    def setFanPowerCoefficient2(self, fanPowerCoefficient2: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerCoefficient2(self, fanPowerCoefficient2)

    def resetFanPowerCoefficient2(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerCoefficient2(self)

    def setFanPowerCoefficient3(self, fanPowerCoefficient3: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerCoefficient3(self, fanPowerCoefficient3)

    def resetFanPowerCoefficient3(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerCoefficient3(self)

    def setFanPowerCoefficient4(self, fanPowerCoefficient4: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerCoefficient4(self, fanPowerCoefficient4)

    def resetFanPowerCoefficient4(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerCoefficient4(self)

    def setFanPowerCoefficient5(self, fanPowerCoefficient5: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setFanPowerCoefficient5(self, fanPowerCoefficient5)

    def resetFanPowerCoefficient5(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetFanPowerCoefficient5(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FanVariableVolume_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelstraightcomponent.FanVariableVolume_resetEndUseSubcategory(self)

    def getAirflowNetworkFan(self) -> "openstudio::model::AirflowNetworkFan":
        return _openstudiomodelstraightcomponent.FanVariableVolume_getAirflowNetworkFan(self)

    def airflowNetworkFan(self) -> "boost::optional< openstudio::model::AirflowNetworkFan >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_airflowNetworkFan(self)

    def autosizedMaximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FanVariableVolume_autosizedMaximumFlowRate(self)

# Register FanVariableVolume in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FanVariableVolume_swigregister(FanVariableVolume)

def FanVariableVolume_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FanVariableVolume_iddObjectType()

def FanVariableVolume_fanPowerMinimumFlowRateInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FanVariableVolume_fanPowerMinimumFlowRateInputMethodValues()

def FanVariableVolume_validFanPowerMinimumFlowRateInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FanVariableVolume_validFanPowerMinimumFlowRateInputMethodValues()


def toFanVariableVolume(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FanVariableVolume >":
    return _openstudiomodelstraightcomponent.toFanVariableVolume(idfObject)

def getFanVariableVolume(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FanVariableVolume >":
    return _openstudiomodelstraightcomponent.getFanVariableVolume(t_model, t_handle)

def getFanVariableVolumes(t_model: "Model") -> "std::vector< openstudio::model::FanVariableVolume,std::allocator< openstudio::model::FanVariableVolume > >":
    return _openstudiomodelstraightcomponent.getFanVariableVolumes(t_model)

def getFanVariableVolumeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FanVariableVolume >":
    return _openstudiomodelstraightcomponent.getFanVariableVolumeByName(t_model, t_name)

def getFanVariableVolumesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FanVariableVolume,std::allocator< openstudio::model::FanVariableVolume > >":
    return _openstudiomodelstraightcomponent.getFanVariableVolumesByName(t_model, t_name, t_exactMatch)

def _to_FanVariableVolume(self) -> OptionalFanVariableVolume:
    return toFanVariableVolume(self)
openstudioutilitiesidf.IdfObject.to_FanVariableVolume = _to_FanVariableVolume

def _getFanVariableVolume(self, t_handle: "UUID") -> OptionalFanVariableVolume:
    return getFanVariableVolume(self, t_handle)
Model.getFanVariableVolume = _getFanVariableVolume

def _getFanVariableVolume(self, t_handle_str: str) -> OptionalFanVariableVolume:
    return getFanVariableVolume(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFanVariableVolume = _getFanVariableVolume

def _getFanVariableVolumes(self) -> FanVariableVolumeVector:
    return getFanVariableVolumes(self)
Model.getFanVariableVolumes = _getFanVariableVolumes

def _getFanVariableVolumeByName(self, t_name: str) -> OptionalFanVariableVolume:
    return getFanVariableVolumeByName(self, t_name)
Model.getFanVariableVolumeByName = _getFanVariableVolumeByName

def _getFanVariableVolumesByName(self, t_name: str, t_exactMatch: bool) -> FanVariableVolumeVector:
    return getFanVariableVolumesByName(self, t_name, t_exactMatch)
Model.getFanVariableVolumesByName = _getFanVariableVolumesByName

class FluidCoolerSingleSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_FluidCoolerSingleSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FluidCoolerSingleSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_performanceInputMethodValues()

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_performanceInputMethod(self)

    def designAirFlowRateUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designAirFlowRateUfactorTimesAreaValue(self)

    def isDesignAirFlowRateUfactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_isDesignAirFlowRateUfactorTimesAreaValueAutosized(self)

    def nominalCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_nominalCapacity(self)

    def designEnteringWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designEnteringWaterTemperature(self)

    def designEnteringAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designEnteringAirTemperature(self)

    def designEnteringAirWetbulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designEnteringAirWetbulbTemperature(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_isDesignWaterFlowRateAutosized(self)

    def designAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designAirFlowRate(self)

    def isDesignAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_isDesignAirFlowRateAutosized(self)

    def designAirFlowRateFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_designAirFlowRateFanPower(self)

    def isDesignAirFlowRateFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_isDesignAirFlowRateFanPowerAutosized(self)

    def outdoorAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_outdoorAirInletNode(self)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def setDesignAirFlowRateUfactorTimesAreaValue(self, designAirFlowRateUfactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignAirFlowRateUfactorTimesAreaValue(self, designAirFlowRateUfactorTimesAreaValue)

    def autosizeDesignAirFlowRateUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizeDesignAirFlowRateUfactorTimesAreaValue(self)

    def setNominalCapacity(self, nominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setNominalCapacity(self, nominalCapacity)

    def setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizeDesignWaterFlowRate(self)

    def setDesignAirFlowRate(self, designAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignAirFlowRate(self, designAirFlowRate)

    def autosizeDesignAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizeDesignAirFlowRate(self)

    def setDesignAirFlowRateFanPower(self, designAirFlowRateFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setDesignAirFlowRateFanPower(self, designAirFlowRateFanPower)

    def autosizeDesignAirFlowRateFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizeDesignAirFlowRateFanPower(self)

    def setOutdoorAirInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_setOutdoorAirInletNode(self, node)

    def resetOutdoorAirInletNode(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_resetOutdoorAirInletNode(self)

    def autosizedDesignAirFlowRateUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizedDesignAirFlowRateUfactorTimesAreaValue(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizedDesignAirFlowRate(self)

    def autosizedDesignAirFlowRateFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_autosizedDesignAirFlowRateFanPower(self)

# Register FluidCoolerSingleSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_swigregister(FluidCoolerSingleSpeed)

def FluidCoolerSingleSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_iddObjectType()

def FluidCoolerSingleSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FluidCoolerSingleSpeed_performanceInputMethodValues()


def toFluidCoolerSingleSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.toFluidCoolerSingleSpeed(idfObject)

def getFluidCoolerSingleSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getFluidCoolerSingleSpeed(t_model, t_handle)

def getFluidCoolerSingleSpeeds(t_model: "Model") -> "std::vector< openstudio::model::FluidCoolerSingleSpeed,std::allocator< openstudio::model::FluidCoolerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getFluidCoolerSingleSpeeds(t_model)

def getFluidCoolerSingleSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FluidCoolerSingleSpeed >":
    return _openstudiomodelstraightcomponent.getFluidCoolerSingleSpeedByName(t_model, t_name)

def getFluidCoolerSingleSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FluidCoolerSingleSpeed,std::allocator< openstudio::model::FluidCoolerSingleSpeed > >":
    return _openstudiomodelstraightcomponent.getFluidCoolerSingleSpeedsByName(t_model, t_name, t_exactMatch)

def _to_FluidCoolerSingleSpeed(self) -> OptionalFluidCoolerSingleSpeed:
    return toFluidCoolerSingleSpeed(self)
openstudioutilitiesidf.IdfObject.to_FluidCoolerSingleSpeed = _to_FluidCoolerSingleSpeed

def _getFluidCoolerSingleSpeed(self, t_handle: "UUID") -> OptionalFluidCoolerSingleSpeed:
    return getFluidCoolerSingleSpeed(self, t_handle)
Model.getFluidCoolerSingleSpeed = _getFluidCoolerSingleSpeed

def _getFluidCoolerSingleSpeed(self, t_handle_str: str) -> OptionalFluidCoolerSingleSpeed:
    return getFluidCoolerSingleSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFluidCoolerSingleSpeed = _getFluidCoolerSingleSpeed

def _getFluidCoolerSingleSpeeds(self) -> FluidCoolerSingleSpeedVector:
    return getFluidCoolerSingleSpeeds(self)
Model.getFluidCoolerSingleSpeeds = _getFluidCoolerSingleSpeeds

def _getFluidCoolerSingleSpeedByName(self, t_name: str) -> OptionalFluidCoolerSingleSpeed:
    return getFluidCoolerSingleSpeedByName(self, t_name)
Model.getFluidCoolerSingleSpeedByName = _getFluidCoolerSingleSpeedByName

def _getFluidCoolerSingleSpeedsByName(self, t_name: str, t_exactMatch: bool) -> FluidCoolerSingleSpeedVector:
    return getFluidCoolerSingleSpeedsByName(self, t_name, t_exactMatch)
Model.getFluidCoolerSingleSpeedsByName = _getFluidCoolerSingleSpeedsByName

class FluidCoolerTwoSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_FluidCoolerTwoSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_FluidCoolerTwoSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_iddObjectType()

    @staticmethod
    def performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_performanceInputMethodValues()

    def performanceInputMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_performanceInputMethod(self)

    def highFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_highFanSpeedUfactorTimesAreaValue(self)

    def isHighFanSpeedUfactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isHighFanSpeedUfactorTimesAreaValueAutosized(self)

    def lowFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedUfactorTimesAreaValue(self)

    def isLowFanSpeedUfactorTimesAreaValueAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isLowFanSpeedUfactorTimesAreaValueAutosized(self)

    def lowFanSpeedUFactorTimesAreaSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedUFactorTimesAreaSizingFactor(self)

    def highSpeedNominalCapacity(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_highSpeedNominalCapacity(self)

    def lowSpeedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowSpeedNominalCapacity(self)

    def isLowSpeedNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isLowSpeedNominalCapacityAutosized(self)

    def lowSpeedNominalCapacitySizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowSpeedNominalCapacitySizingFactor(self)

    def designEnteringWaterTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_designEnteringWaterTemperature(self)

    def designEnteringAirTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_designEnteringAirTemperature(self)

    def designEnteringAirWetbulbTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_designEnteringAirWetbulbTemperature(self)

    def designWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_designWaterFlowRate(self)

    def isDesignWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isDesignWaterFlowRateAutosized(self)

    def highFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_highFanSpeedAirFlowRate(self)

    def isHighFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isHighFanSpeedAirFlowRateAutosized(self)

    def highFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_highFanSpeedFanPower(self)

    def isHighFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isHighFanSpeedFanPowerAutosized(self)

    def lowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedAirFlowRate(self)

    def isLowFanSpeedAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isLowFanSpeedAirFlowRateAutosized(self)

    def lowFanSpeedAirFlowRateSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedAirFlowRateSizingFactor(self)

    def lowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedFanPower(self)

    def isLowFanSpeedFanPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_isLowFanSpeedFanPowerAutosized(self)

    def lowFanSpeedFanPowerSizingFactor(self) -> "double":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_lowFanSpeedFanPowerSizingFactor(self)

    def outdoorAirInletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_outdoorAirInletNode(self)

    def setPerformanceInputMethod(self, performanceInputMethod: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setPerformanceInputMethod(self, performanceInputMethod)

    def setHighFanSpeedUfactorTimesAreaValue(self, highFanSpeedUfactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setHighFanSpeedUfactorTimesAreaValue(self, highFanSpeedUfactorTimesAreaValue)

    def autosizeHighFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeHighFanSpeedUfactorTimesAreaValue(self)

    def setLowFanSpeedUfactorTimesAreaValue(self, lowFanSpeedUfactorTimesAreaValue: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedUfactorTimesAreaValue(self, lowFanSpeedUfactorTimesAreaValue)

    def autosizeLowFanSpeedUfactorTimesAreaValue(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeLowFanSpeedUfactorTimesAreaValue(self)

    def setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedUFactorTimesAreaSizingFactor(self, lowFanSpeedUFactorTimesAreaSizingFactor)

    def setHighSpeedNominalCapacity(self, highSpeedNominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setHighSpeedNominalCapacity(self, highSpeedNominalCapacity)

    def setLowSpeedNominalCapacity(self, lowSpeedNominalCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowSpeedNominalCapacity(self, lowSpeedNominalCapacity)

    def autosizeLowSpeedNominalCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeLowSpeedNominalCapacity(self)

    def setLowSpeedNominalCapacitySizingFactor(self, lowSpeedNominalCapacitySizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowSpeedNominalCapacitySizingFactor(self, lowSpeedNominalCapacitySizingFactor)

    def setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setDesignEnteringWaterTemperature(self, designEnteringWaterTemperature)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setDesignEnteringAirWetbulbTemperature(self, designEnteringAirWetbulbTemperature)

    def setDesignWaterFlowRate(self, designWaterFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setDesignWaterFlowRate(self, designWaterFlowRate)

    def autosizeDesignWaterFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeDesignWaterFlowRate(self)

    def setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setHighFanSpeedAirFlowRate(self, highFanSpeedAirFlowRate)

    def autosizeHighFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeHighFanSpeedAirFlowRate(self)

    def setHighFanSpeedFanPower(self, highFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setHighFanSpeedFanPower(self, highFanSpeedFanPower)

    def autosizeHighFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeHighFanSpeedFanPower(self)

    def setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedAirFlowRate(self, lowFanSpeedAirFlowRate)

    def autosizeLowFanSpeedAirFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeLowFanSpeedAirFlowRate(self)

    def setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedAirFlowRateSizingFactor(self, lowFanSpeedAirFlowRateSizingFactor)

    def setLowFanSpeedFanPower(self, lowFanSpeedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedFanPower(self, lowFanSpeedFanPower)

    def autosizeLowFanSpeedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizeLowFanSpeedFanPower(self)

    def setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor: "double") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setLowFanSpeedFanPowerSizingFactor(self, lowFanSpeedFanPowerSizingFactor)

    def setOutdoorAirInletNode(self, node: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_setOutdoorAirInletNode(self, node)

    def resetOutdoorAirInletNode(self) -> "void":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_resetOutdoorAirInletNode(self)

    def autosizedHighFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedHighFanSpeedUfactorTimesAreaValue(self)

    def autosizedLowFanSpeedUfactorTimesAreaValue(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedLowFanSpeedUfactorTimesAreaValue(self)

    def autosizedLowSpeedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedLowSpeedNominalCapacity(self)

    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedDesignWaterFlowRate(self)

    def autosizedHighFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedHighFanSpeedAirFlowRate(self)

    def autosizedHighFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedHighFanSpeedFanPower(self)

    def autosizedLowFanSpeedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedLowFanSpeedAirFlowRate(self)

    def autosizedLowFanSpeedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_autosizedLowFanSpeedFanPower(self)

# Register FluidCoolerTwoSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_swigregister(FluidCoolerTwoSpeed)

def FluidCoolerTwoSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_iddObjectType()

def FluidCoolerTwoSpeed_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.FluidCoolerTwoSpeed_performanceInputMethodValues()


def toFluidCoolerTwoSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.toFluidCoolerTwoSpeed(idfObject)

def getFluidCoolerTwoSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::FluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getFluidCoolerTwoSpeed(t_model, t_handle)

def getFluidCoolerTwoSpeeds(t_model: "Model") -> "std::vector< openstudio::model::FluidCoolerTwoSpeed,std::allocator< openstudio::model::FluidCoolerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getFluidCoolerTwoSpeeds(t_model)

def getFluidCoolerTwoSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::FluidCoolerTwoSpeed >":
    return _openstudiomodelstraightcomponent.getFluidCoolerTwoSpeedByName(t_model, t_name)

def getFluidCoolerTwoSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::FluidCoolerTwoSpeed,std::allocator< openstudio::model::FluidCoolerTwoSpeed > >":
    return _openstudiomodelstraightcomponent.getFluidCoolerTwoSpeedsByName(t_model, t_name, t_exactMatch)

def _to_FluidCoolerTwoSpeed(self) -> OptionalFluidCoolerTwoSpeed:
    return toFluidCoolerTwoSpeed(self)
openstudioutilitiesidf.IdfObject.to_FluidCoolerTwoSpeed = _to_FluidCoolerTwoSpeed

def _getFluidCoolerTwoSpeed(self, t_handle: "UUID") -> OptionalFluidCoolerTwoSpeed:
    return getFluidCoolerTwoSpeed(self, t_handle)
Model.getFluidCoolerTwoSpeed = _getFluidCoolerTwoSpeed

def _getFluidCoolerTwoSpeed(self, t_handle_str: str) -> OptionalFluidCoolerTwoSpeed:
    return getFluidCoolerTwoSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getFluidCoolerTwoSpeed = _getFluidCoolerTwoSpeed

def _getFluidCoolerTwoSpeeds(self) -> FluidCoolerTwoSpeedVector:
    return getFluidCoolerTwoSpeeds(self)
Model.getFluidCoolerTwoSpeeds = _getFluidCoolerTwoSpeeds

def _getFluidCoolerTwoSpeedByName(self, t_name: str) -> OptionalFluidCoolerTwoSpeed:
    return getFluidCoolerTwoSpeedByName(self, t_name)
Model.getFluidCoolerTwoSpeedByName = _getFluidCoolerTwoSpeedByName

def _getFluidCoolerTwoSpeedsByName(self, t_name: str, t_exactMatch: bool) -> FluidCoolerTwoSpeedVector:
    return getFluidCoolerTwoSpeedsByName(self, t_name, t_exactMatch)
Model.getFluidCoolerTwoSpeedsByName = _getFluidCoolerTwoSpeedsByName

class GroundHeatExchangerHorizontalTrench(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_swiginit(self, _openstudiomodelstraightcomponent.new_GroundHeatExchangerHorizontalTrench(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GroundHeatExchangerHorizontalTrench

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_iddObjectType()

    @staticmethod
    def groundTemperatureModelValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_groundTemperatureModelValues()

    def designFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_designFlowRate(self)

    def trenchLengthinPipeAxialDirection(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_trenchLengthinPipeAxialDirection(self)

    def numberofTrenches(self) -> "int":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_numberofTrenches(self)

    def horizontalSpacingBetweenPipes(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_horizontalSpacingBetweenPipes(self)

    def pipeInnerDiameter(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_pipeInnerDiameter(self)

    def pipeOuterDiameter(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_pipeOuterDiameter(self)

    def burialDepth(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_burialDepth(self)

    def soilThermalConductivity(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_soilThermalConductivity(self)

    def soilDensity(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_soilDensity(self)

    def soilSpecificHeat(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_soilSpecificHeat(self)

    def pipeThermalConductivity(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_pipeThermalConductivity(self)

    def pipeDensity(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_pipeDensity(self)

    def pipeSpecificHeat(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_pipeSpecificHeat(self)

    def soilMoistureContentPercent(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_soilMoistureContentPercent(self)

    def soilMoistureContentPercentatSaturation(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_soilMoistureContentPercentatSaturation(self)

    def groundTemperatureModel(self) -> "std::string":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_groundTemperatureModel(self)

    def isGroundTemperatureModelDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_isGroundTemperatureModelDefaulted(self)

    def kusudaAchenbachAverageSurfaceTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_kusudaAchenbachAverageSurfaceTemperature(self)

    def kusudaAchenbachAverageAmplitudeofSurfaceTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_kusudaAchenbachAverageAmplitudeofSurfaceTemperature(self)

    def kusudaAchenbachPhaseShiftofMinimumSurfaceTemperature(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_kusudaAchenbachPhaseShiftofMinimumSurfaceTemperature(self)

    def evapotranspirationGroundCoverParameter(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_evapotranspirationGroundCoverParameter(self)

    def setDesignFlowRate(self, designFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setDesignFlowRate(self, designFlowRate)

    def setTrenchLengthinPipeAxialDirection(self, trenchLengthinPipeAxialDirection: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setTrenchLengthinPipeAxialDirection(self, trenchLengthinPipeAxialDirection)

    def setNumberofTrenches(self, numberofTrenches: "int") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setNumberofTrenches(self, numberofTrenches)

    def setHorizontalSpacingBetweenPipes(self, horizontalSpacingBetweenPipes: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setHorizontalSpacingBetweenPipes(self, horizontalSpacingBetweenPipes)

    def setPipeInnerDiameter(self, pipeInnerDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setPipeInnerDiameter(self, pipeInnerDiameter)

    def setPipeOuterDiameter(self, pipeOuterDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setPipeOuterDiameter(self, pipeOuterDiameter)

    def setBurialDepth(self, burialDepth: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setBurialDepth(self, burialDepth)

    def setSoilThermalConductivity(self, soilThermalConductivity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setSoilThermalConductivity(self, soilThermalConductivity)

    def setSoilDensity(self, soilDensity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setSoilDensity(self, soilDensity)

    def setSoilSpecificHeat(self, soilSpecificHeat: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setSoilSpecificHeat(self, soilSpecificHeat)

    def setPipeThermalConductivity(self, pipeThermalConductivity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setPipeThermalConductivity(self, pipeThermalConductivity)

    def setPipeDensity(self, pipeDensity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setPipeDensity(self, pipeDensity)

    def setPipeSpecificHeat(self, pipeSpecificHeat: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setPipeSpecificHeat(self, pipeSpecificHeat)

    def setSoilMoistureContentPercent(self, soilMoistureContentPercent: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setSoilMoistureContentPercent(self, soilMoistureContentPercent)

    def setSoilMoistureContentPercentatSaturation(self, soilMoistureContentPercentatSaturation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setSoilMoistureContentPercentatSaturation(self, soilMoistureContentPercentatSaturation)

    def setGroundTemperatureModel(self, groundTemperatureModel: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setGroundTemperatureModel(self, groundTemperatureModel)

    def resetGroundTemperatureModel(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_resetGroundTemperatureModel(self)

    def setKusudaAchenbachAverageSurfaceTemperature(self, kusudaAchenbachAverageSurfaceTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setKusudaAchenbachAverageSurfaceTemperature(self, kusudaAchenbachAverageSurfaceTemperature)

    def setKusudaAchenbachAverageAmplitudeofSurfaceTemperature(self, kusudaAchenbachAverageAmplitudeofSurfaceTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setKusudaAchenbachAverageAmplitudeofSurfaceTemperature(self, kusudaAchenbachAverageAmplitudeofSurfaceTemperature)

    def setKusudaAchenbachPhaseShiftofMinimumSurfaceTemperature(self, kusudaAchenbachPhaseShiftofMinimumSurfaceTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setKusudaAchenbachPhaseShiftofMinimumSurfaceTemperature(self, kusudaAchenbachPhaseShiftofMinimumSurfaceTemperature)

    def setEvapotranspirationGroundCoverParameter(self, evapotranspirationGroundCoverParameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_setEvapotranspirationGroundCoverParameter(self, evapotranspirationGroundCoverParameter)

# Register GroundHeatExchangerHorizontalTrench in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_swigregister(GroundHeatExchangerHorizontalTrench)

def GroundHeatExchangerHorizontalTrench_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_iddObjectType()

def GroundHeatExchangerHorizontalTrench_groundTemperatureModelValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.GroundHeatExchangerHorizontalTrench_groundTemperatureModelValues()


def toGroundHeatExchangerHorizontalTrench(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GroundHeatExchangerHorizontalTrench >":
    return _openstudiomodelstraightcomponent.toGroundHeatExchangerHorizontalTrench(idfObject)

def getGroundHeatExchangerHorizontalTrench(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GroundHeatExchangerHorizontalTrench >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerHorizontalTrench(t_model, t_handle)

def getGroundHeatExchangerHorizontalTrenchs(t_model: "Model") -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench,std::allocator< openstudio::model::GroundHeatExchangerHorizontalTrench > >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerHorizontalTrenchs(t_model)

def getGroundHeatExchangerHorizontalTrenchByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GroundHeatExchangerHorizontalTrench >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerHorizontalTrenchByName(t_model, t_name)

def getGroundHeatExchangerHorizontalTrenchsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GroundHeatExchangerHorizontalTrench,std::allocator< openstudio::model::GroundHeatExchangerHorizontalTrench > >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerHorizontalTrenchsByName(t_model, t_name, t_exactMatch)

def _to_GroundHeatExchangerHorizontalTrench(self) -> OptionalGroundHeatExchangerHorizontalTrench:
    return toGroundHeatExchangerHorizontalTrench(self)
openstudioutilitiesidf.IdfObject.to_GroundHeatExchangerHorizontalTrench = _to_GroundHeatExchangerHorizontalTrench

def _getGroundHeatExchangerHorizontalTrench(self, t_handle: "UUID") -> OptionalGroundHeatExchangerHorizontalTrench:
    return getGroundHeatExchangerHorizontalTrench(self, t_handle)
Model.getGroundHeatExchangerHorizontalTrench = _getGroundHeatExchangerHorizontalTrench

def _getGroundHeatExchangerHorizontalTrench(self, t_handle_str: str) -> OptionalGroundHeatExchangerHorizontalTrench:
    return getGroundHeatExchangerHorizontalTrench(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGroundHeatExchangerHorizontalTrench = _getGroundHeatExchangerHorizontalTrench

def _getGroundHeatExchangerHorizontalTrenchs(self) -> GroundHeatExchangerHorizontalTrenchVector:
    return getGroundHeatExchangerHorizontalTrenchs(self)
Model.getGroundHeatExchangerHorizontalTrenchs = _getGroundHeatExchangerHorizontalTrenchs

def _getGroundHeatExchangerHorizontalTrenchByName(self, t_name: str) -> OptionalGroundHeatExchangerHorizontalTrench:
    return getGroundHeatExchangerHorizontalTrenchByName(self, t_name)
Model.getGroundHeatExchangerHorizontalTrenchByName = _getGroundHeatExchangerHorizontalTrenchByName

def _getGroundHeatExchangerHorizontalTrenchsByName(self, t_name: str, t_exactMatch: bool) -> GroundHeatExchangerHorizontalTrenchVector:
    return getGroundHeatExchangerHorizontalTrenchsByName(self, t_name, t_exactMatch)
Model.getGroundHeatExchangerHorizontalTrenchsByName = _getGroundHeatExchangerHorizontalTrenchsByName

class GFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lnValue: "double", gValue: "double"):
        _openstudiomodelstraightcomponent.GFunction_swiginit(self, _openstudiomodelstraightcomponent.new_GFunction(lnValue, gValue))

    def lnValue(self) -> "double":
        return _openstudiomodelstraightcomponent.GFunction_lnValue(self)

    def gValue(self) -> "double":
        return _openstudiomodelstraightcomponent.GFunction_gValue(self)
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GFunction

# Register GFunction in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GFunction_swigregister(GFunction)

class GroundHeatExchangerVertical(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_swiginit(self, _openstudiomodelstraightcomponent.new_GroundHeatExchangerVertical(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_GroundHeatExchangerVertical

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_iddObjectType()

    def addGFunction(self, *args) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_addGFunction(self, *args)

    def removeGFunction(self, groupIndex: "int") -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_removeGFunction(self, groupIndex)

    def removeAllGFunctions(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_removeAllGFunctions(self)

    def gFunctions(self) -> "std::vector< openstudio::model::GFunction,std::allocator< openstudio::model::GFunction > >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_gFunctions(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_maximumFlowRate(self)

    def numberofBoreHoles(self) -> "boost::optional< int >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_numberofBoreHoles(self)

    def boreHoleLength(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_boreHoleLength(self)

    def boreHoleRadius(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_boreHoleRadius(self)

    def groundThermalConductivity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_groundThermalConductivity(self)

    def groundThermalHeatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_groundThermalHeatCapacity(self)

    def groundTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_groundTemperature(self)

    def designFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_designFlowRate(self)

    def groutThermalConductivity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_groutThermalConductivity(self)

    def pipeThermalConductivity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_pipeThermalConductivity(self)

    def pipeOutDiameter(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_pipeOutDiameter(self)

    def uTubeDistance(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_uTubeDistance(self)

    def pipeThickness(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_pipeThickness(self)

    def maximumLengthofSimulation(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_maximumLengthofSimulation(self)

    def gFunctionReferenceRatio(self) -> "double":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_gFunctionReferenceRatio(self)

    def isGFunctionReferenceRatioDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_isGFunctionReferenceRatioDefaulted(self)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetMaximumFlowRate(self)

    def setNumberofBoreHoles(self, numberofBoreHoles: "int") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setNumberofBoreHoles(self, numberofBoreHoles)

    def resetNumberofBoreHoles(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetNumberofBoreHoles(self)

    def setBoreHoleLength(self, boreHoleLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setBoreHoleLength(self, boreHoleLength)

    def resetBoreHoleLength(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetBoreHoleLength(self)

    def setBoreHoleRadius(self, boreHoleRadius: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setBoreHoleRadius(self, boreHoleRadius)

    def resetBoreHoleRadius(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetBoreHoleRadius(self)

    def setGroundThermalConductivity(self, groundThermalConductivity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setGroundThermalConductivity(self, groundThermalConductivity)

    def resetGroundThermalConductivity(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetGroundThermalConductivity(self)

    def setGroundThermalHeatCapacity(self, groundThermalHeatCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setGroundThermalHeatCapacity(self, groundThermalHeatCapacity)

    def resetGroundThermalHeatCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetGroundThermalHeatCapacity(self)

    def setGroundTemperature(self, groundTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setGroundTemperature(self, groundTemperature)

    def resetGroundTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetGroundTemperature(self)

    def setDesignFlowRate(self, designFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setDesignFlowRate(self, designFlowRate)

    def resetDesignFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetDesignFlowRate(self)

    def setGroutThermalConductivity(self, groutThermalConductivity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setGroutThermalConductivity(self, groutThermalConductivity)

    def resetGroutThermalConductivity(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetGroutThermalConductivity(self)

    def setPipeThermalConductivity(self, pipeThermalConductivity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setPipeThermalConductivity(self, pipeThermalConductivity)

    def resetPipeThermalConductivity(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetPipeThermalConductivity(self)

    def setPipeOutDiameter(self, pipeOutDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setPipeOutDiameter(self, pipeOutDiameter)

    def resetPipeOutDiameter(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetPipeOutDiameter(self)

    def setUTubeDistance(self, uTubeDistance: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setUTubeDistance(self, uTubeDistance)

    def resetUTubeDistance(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetUTubeDistance(self)

    def setPipeThickness(self, pipeThickness: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setPipeThickness(self, pipeThickness)

    def resetPipeThickness(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetPipeThickness(self)

    def setMaximumLengthofSimulation(self, maximumLengthofSimulation: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setMaximumLengthofSimulation(self, maximumLengthofSimulation)

    def resetMaximumLengthofSimulation(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetMaximumLengthofSimulation(self)

    def setGFunctionReferenceRatio(self, gFunctionReferenceRatio: "double") -> "bool":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_setGFunctionReferenceRatio(self, gFunctionReferenceRatio)

    def resetGFunctionReferenceRatio(self) -> "void":
        return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_resetGFunctionReferenceRatio(self)

# Register GroundHeatExchangerVertical in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.GroundHeatExchangerVertical_swigregister(GroundHeatExchangerVertical)

def GroundHeatExchangerVertical_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.GroundHeatExchangerVertical_iddObjectType()


def toGroundHeatExchangerVertical(idfObject: "IdfObject") -> "boost::optional< openstudio::model::GroundHeatExchangerVertical >":
    return _openstudiomodelstraightcomponent.toGroundHeatExchangerVertical(idfObject)

def getGroundHeatExchangerVertical(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::GroundHeatExchangerVertical >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerVertical(t_model, t_handle)

def getGroundHeatExchangerVerticals(t_model: "Model") -> "std::vector< openstudio::model::GroundHeatExchangerVertical,std::allocator< openstudio::model::GroundHeatExchangerVertical > >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerVerticals(t_model)

def getGroundHeatExchangerVerticalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::GroundHeatExchangerVertical >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerVerticalByName(t_model, t_name)

def getGroundHeatExchangerVerticalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::GroundHeatExchangerVertical,std::allocator< openstudio::model::GroundHeatExchangerVertical > >":
    return _openstudiomodelstraightcomponent.getGroundHeatExchangerVerticalsByName(t_model, t_name, t_exactMatch)

def _to_GroundHeatExchangerVertical(self) -> OptionalGroundHeatExchangerVertical:
    return toGroundHeatExchangerVertical(self)
openstudioutilitiesidf.IdfObject.to_GroundHeatExchangerVertical = _to_GroundHeatExchangerVertical

def _getGroundHeatExchangerVertical(self, t_handle: "UUID") -> OptionalGroundHeatExchangerVertical:
    return getGroundHeatExchangerVertical(self, t_handle)
Model.getGroundHeatExchangerVertical = _getGroundHeatExchangerVertical

def _getGroundHeatExchangerVertical(self, t_handle_str: str) -> OptionalGroundHeatExchangerVertical:
    return getGroundHeatExchangerVertical(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getGroundHeatExchangerVertical = _getGroundHeatExchangerVertical

def _getGroundHeatExchangerVerticals(self) -> GroundHeatExchangerVerticalVector:
    return getGroundHeatExchangerVerticals(self)
Model.getGroundHeatExchangerVerticals = _getGroundHeatExchangerVerticals

def _getGroundHeatExchangerVerticalByName(self, t_name: str) -> OptionalGroundHeatExchangerVertical:
    return getGroundHeatExchangerVerticalByName(self, t_name)
Model.getGroundHeatExchangerVerticalByName = _getGroundHeatExchangerVerticalByName

def _getGroundHeatExchangerVerticalsByName(self, t_name: str, t_exactMatch: bool) -> GroundHeatExchangerVerticalVector:
    return getGroundHeatExchangerVerticalsByName(self, t_name, t_exactMatch)
Model.getGroundHeatExchangerVerticalsByName = _getGroundHeatExchangerVerticalsByName

class HeaderedPumpsConstantSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_HeaderedPumpsConstantSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HeaderedPumpsConstantSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_iddObjectType()

    @staticmethod
    def flowSequencingControlSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_flowSequencingControlSchemeValues()

    @staticmethod
    def pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_pumpControlTypeValues()

    @staticmethod
    def designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_designPowerSizingMethodValues()

    def totalRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_totalRatedFlowRate(self)

    def isTotalRatedFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_isTotalRatedFlowRateAutosized(self)

    def numberofPumpsinBank(self) -> "int":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_numberofPumpsinBank(self)

    def flowSequencingControlScheme(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_flowSequencingControlScheme(self)

    def ratedPumpHead(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_ratedPumpHead(self)

    def ratedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_ratedPowerConsumption(self)

    def isRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_isRatedPowerConsumptionAutosized(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_motorEfficiency(self)

    def fractionofMotorInefficienciestoFluidStream(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_fractionofMotorInefficienciestoFluidStream(self)

    def pumpControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_pumpControlType(self)

    def pumpFlowRateSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_pumpFlowRateSchedule(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_thermalZone(self)

    def skinLossRadiativeFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_skinLossRadiativeFraction(self)

    def designPowerSizingMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_designPowerSizingMethod(self)

    def designElectricPowerPerUnitFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_designElectricPowerPerUnitFlowRate(self)

    def designShaftPowerPerUnitFlowRatePerUnitHead(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_designShaftPowerPerUnitFlowRatePerUnitHead(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_endUseSubcategory(self)

    def setTotalRatedFlowRate(self, totalRatedFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setTotalRatedFlowRate(self, totalRatedFlowRate)

    def autosizeTotalRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_autosizeTotalRatedFlowRate(self)

    def setNumberofPumpsinBank(self, numberofPumpsinBank: "int") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setNumberofPumpsinBank(self, numberofPumpsinBank)

    def setFlowSequencingControlScheme(self, flowSequencingControlScheme: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setFlowSequencingControlScheme(self, flowSequencingControlScheme)

    def setRatedPumpHead(self, ratedPumpHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setRatedPumpHead(self, ratedPumpHead)

    def setRatedPowerConsumption(self, ratedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setRatedPowerConsumption(self, ratedPowerConsumption)

    def autosizeRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_autosizeRatedPowerConsumption(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setMotorEfficiency(self, motorEfficiency)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def setPumpControlType(self, pumpControlType: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setPumpControlType(self, pumpControlType)

    def setPumpFlowRateSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_resetPumpFlowRateSchedule(self)

    def setThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_resetThermalZone(self)

    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)

    def setDesignPowerSizingMethod(self, designPowerSizingMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setDesignPowerSizingMethod(self, designPowerSizingMethod)

    def setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate)

    def setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_setEndUseSubcategory(self, endUseSubcategory)

    def autosizedTotalRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_autosizedTotalRatedFlowRate(self)

    def autosizedRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_autosizedRatedPowerConsumption(self)

# Register HeaderedPumpsConstantSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_swigregister(HeaderedPumpsConstantSpeed)

def HeaderedPumpsConstantSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_iddObjectType()

def HeaderedPumpsConstantSpeed_flowSequencingControlSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_flowSequencingControlSchemeValues()

def HeaderedPumpsConstantSpeed_pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_pumpControlTypeValues()

def HeaderedPumpsConstantSpeed_designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsConstantSpeed_designPowerSizingMethodValues()


def toHeaderedPumpsConstantSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeaderedPumpsConstantSpeed >":
    return _openstudiomodelstraightcomponent.toHeaderedPumpsConstantSpeed(idfObject)

def getHeaderedPumpsConstantSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeaderedPumpsConstantSpeed >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsConstantSpeed(t_model, t_handle)

def getHeaderedPumpsConstantSpeeds(t_model: "Model") -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed,std::allocator< openstudio::model::HeaderedPumpsConstantSpeed > >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsConstantSpeeds(t_model)

def getHeaderedPumpsConstantSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeaderedPumpsConstantSpeed >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsConstantSpeedByName(t_model, t_name)

def getHeaderedPumpsConstantSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeaderedPumpsConstantSpeed,std::allocator< openstudio::model::HeaderedPumpsConstantSpeed > >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsConstantSpeedsByName(t_model, t_name, t_exactMatch)

def _to_HeaderedPumpsConstantSpeed(self) -> OptionalHeaderedPumpsConstantSpeed:
    return toHeaderedPumpsConstantSpeed(self)
openstudioutilitiesidf.IdfObject.to_HeaderedPumpsConstantSpeed = _to_HeaderedPumpsConstantSpeed

def _getHeaderedPumpsConstantSpeed(self, t_handle: "UUID") -> OptionalHeaderedPumpsConstantSpeed:
    return getHeaderedPumpsConstantSpeed(self, t_handle)
Model.getHeaderedPumpsConstantSpeed = _getHeaderedPumpsConstantSpeed

def _getHeaderedPumpsConstantSpeed(self, t_handle_str: str) -> OptionalHeaderedPumpsConstantSpeed:
    return getHeaderedPumpsConstantSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeaderedPumpsConstantSpeed = _getHeaderedPumpsConstantSpeed

def _getHeaderedPumpsConstantSpeeds(self) -> HeaderedPumpsConstantSpeedVector:
    return getHeaderedPumpsConstantSpeeds(self)
Model.getHeaderedPumpsConstantSpeeds = _getHeaderedPumpsConstantSpeeds

def _getHeaderedPumpsConstantSpeedByName(self, t_name: str) -> OptionalHeaderedPumpsConstantSpeed:
    return getHeaderedPumpsConstantSpeedByName(self, t_name)
Model.getHeaderedPumpsConstantSpeedByName = _getHeaderedPumpsConstantSpeedByName

def _getHeaderedPumpsConstantSpeedsByName(self, t_name: str, t_exactMatch: bool) -> HeaderedPumpsConstantSpeedVector:
    return getHeaderedPumpsConstantSpeedsByName(self, t_name, t_exactMatch)
Model.getHeaderedPumpsConstantSpeedsByName = _getHeaderedPumpsConstantSpeedsByName

class HeaderedPumpsVariableSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_HeaderedPumpsVariableSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HeaderedPumpsVariableSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_iddObjectType()

    @staticmethod
    def flowSequencingControlSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_flowSequencingControlSchemeValues()

    @staticmethod
    def pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_pumpControlTypeValues()

    @staticmethod
    def designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_designPowerSizingMethodValues()

    def totalRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_totalRatedFlowRate(self)

    def isTotalRatedFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_isTotalRatedFlowRateAutosized(self)

    def numberofPumpsinBank(self) -> "int":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_numberofPumpsinBank(self)

    def flowSequencingControlScheme(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_flowSequencingControlScheme(self)

    def ratedPumpHead(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_ratedPumpHead(self)

    def ratedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_ratedPowerConsumption(self)

    def isRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_isRatedPowerConsumptionAutosized(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_motorEfficiency(self)

    def fractionofMotorInefficienciestoFluidStream(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_fractionofMotorInefficienciestoFluidStream(self)

    def coefficient1ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_coefficient1ofthePartLoadPerformanceCurve(self)

    def coefficient2ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_coefficient2ofthePartLoadPerformanceCurve(self)

    def coefficient3ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_coefficient3ofthePartLoadPerformanceCurve(self)

    def coefficient4ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_coefficient4ofthePartLoadPerformanceCurve(self)

    def minimumFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_minimumFlowRateFraction(self)

    def pumpControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_pumpControlType(self)

    def pumpFlowRateSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_pumpFlowRateSchedule(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_thermalZone(self)

    def skinLossRadiativeFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_skinLossRadiativeFraction(self)

    def designPowerSizingMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_designPowerSizingMethod(self)

    def designElectricPowerPerUnitFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_designElectricPowerPerUnitFlowRate(self)

    def designShaftPowerPerUnitFlowRatePerUnitHead(self) -> "double":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_designShaftPowerPerUnitFlowRatePerUnitHead(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_endUseSubcategory(self)

    def setTotalRatedFlowRate(self, totalRatedFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setTotalRatedFlowRate(self, totalRatedFlowRate)

    def autosizeTotalRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_autosizeTotalRatedFlowRate(self)

    def setNumberofPumpsinBank(self, numberofPumpsinBank: "int") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setNumberofPumpsinBank(self, numberofPumpsinBank)

    def setFlowSequencingControlScheme(self, flowSequencingControlScheme: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setFlowSequencingControlScheme(self, flowSequencingControlScheme)

    def setRatedPumpHead(self, ratedPumpHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setRatedPumpHead(self, ratedPumpHead)

    def setRatedPowerConsumption(self, ratedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setRatedPowerConsumption(self, ratedPowerConsumption)

    def autosizeRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_autosizeRatedPowerConsumption(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setMotorEfficiency(self, motorEfficiency)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def setCoefficient1ofthePartLoadPerformanceCurve(self, coefficient1ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setCoefficient1ofthePartLoadPerformanceCurve(self, coefficient1ofthePartLoadPerformanceCurve)

    def setCoefficient2ofthePartLoadPerformanceCurve(self, coefficient2ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setCoefficient2ofthePartLoadPerformanceCurve(self, coefficient2ofthePartLoadPerformanceCurve)

    def setCoefficient3ofthePartLoadPerformanceCurve(self, coefficient3ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setCoefficient3ofthePartLoadPerformanceCurve(self, coefficient3ofthePartLoadPerformanceCurve)

    def setCoefficient4ofthePartLoadPerformanceCurve(self, coefficient4ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setCoefficient4ofthePartLoadPerformanceCurve(self, coefficient4ofthePartLoadPerformanceCurve)

    def setMinimumFlowRateFraction(self, minimumFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setMinimumFlowRateFraction(self, minimumFlowRateFraction)

    def setPumpControlType(self, pumpControlType: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setPumpControlType(self, pumpControlType)

    def setPumpFlowRateSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_resetPumpFlowRateSchedule(self)

    def setThermalZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_resetThermalZone(self)

    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)

    def setDesignPowerSizingMethod(self, designPowerSizingMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setDesignPowerSizingMethod(self, designPowerSizingMethod)

    def setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate)

    def setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_setEndUseSubcategory(self, endUseSubcategory)

    def autosizedTotalRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_autosizedTotalRatedFlowRate(self)

    def autosizedRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_autosizedRatedPowerConsumption(self)

# Register HeaderedPumpsVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_swigregister(HeaderedPumpsVariableSpeed)

def HeaderedPumpsVariableSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_iddObjectType()

def HeaderedPumpsVariableSpeed_flowSequencingControlSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_flowSequencingControlSchemeValues()

def HeaderedPumpsVariableSpeed_pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_pumpControlTypeValues()

def HeaderedPumpsVariableSpeed_designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.HeaderedPumpsVariableSpeed_designPowerSizingMethodValues()


def toHeaderedPumpsVariableSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeaderedPumpsVariableSpeed >":
    return _openstudiomodelstraightcomponent.toHeaderedPumpsVariableSpeed(idfObject)

def getHeaderedPumpsVariableSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HeaderedPumpsVariableSpeed >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsVariableSpeed(t_model, t_handle)

def getHeaderedPumpsVariableSpeeds(t_model: "Model") -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed,std::allocator< openstudio::model::HeaderedPumpsVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsVariableSpeeds(t_model)

def getHeaderedPumpsVariableSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HeaderedPumpsVariableSpeed >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsVariableSpeedByName(t_model, t_name)

def getHeaderedPumpsVariableSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HeaderedPumpsVariableSpeed,std::allocator< openstudio::model::HeaderedPumpsVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getHeaderedPumpsVariableSpeedsByName(t_model, t_name, t_exactMatch)

def _to_HeaderedPumpsVariableSpeed(self) -> OptionalHeaderedPumpsVariableSpeed:
    return toHeaderedPumpsVariableSpeed(self)
openstudioutilitiesidf.IdfObject.to_HeaderedPumpsVariableSpeed = _to_HeaderedPumpsVariableSpeed

def _getHeaderedPumpsVariableSpeed(self, t_handle: "UUID") -> OptionalHeaderedPumpsVariableSpeed:
    return getHeaderedPumpsVariableSpeed(self, t_handle)
Model.getHeaderedPumpsVariableSpeed = _getHeaderedPumpsVariableSpeed

def _getHeaderedPumpsVariableSpeed(self, t_handle_str: str) -> OptionalHeaderedPumpsVariableSpeed:
    return getHeaderedPumpsVariableSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHeaderedPumpsVariableSpeed = _getHeaderedPumpsVariableSpeed

def _getHeaderedPumpsVariableSpeeds(self) -> HeaderedPumpsVariableSpeedVector:
    return getHeaderedPumpsVariableSpeeds(self)
Model.getHeaderedPumpsVariableSpeeds = _getHeaderedPumpsVariableSpeeds

def _getHeaderedPumpsVariableSpeedByName(self, t_name: str) -> OptionalHeaderedPumpsVariableSpeed:
    return getHeaderedPumpsVariableSpeedByName(self, t_name)
Model.getHeaderedPumpsVariableSpeedByName = _getHeaderedPumpsVariableSpeedByName

def _getHeaderedPumpsVariableSpeedsByName(self, t_name: str, t_exactMatch: bool) -> HeaderedPumpsVariableSpeedVector:
    return getHeaderedPumpsVariableSpeedsByName(self, t_name, t_exactMatch)
Model.getHeaderedPumpsVariableSpeedsByName = _getHeaderedPumpsVariableSpeedsByName

class HumidifierSteamElectric(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.HumidifierSteamElectric_swiginit(self, _openstudiomodelstraightcomponent.new_HumidifierSteamElectric(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_HumidifierSteamElectric

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_iddObjectType()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_availabilitySchedule(self)

    def ratedCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_ratedCapacity(self)

    def isRatedCapacityAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_isRatedCapacityAutosized(self)

    def ratedPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_ratedPower(self)

    def isRatedPowerAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_isRatedPowerAutosized(self)

    def ratedFanPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_ratedFanPower(self)

    def standbyPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_standbyPower(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_resetAvailabilitySchedule(self)

    def setRatedCapacity(self, ratedCapacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_setRatedCapacity(self, ratedCapacity)

    def autosizeRatedCapacity(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_autosizeRatedCapacity(self)

    def setRatedPower(self, ratedPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_setRatedPower(self, ratedPower)

    def resetRatedPower(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_resetRatedPower(self)

    def autosizeRatedPower(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_autosizeRatedPower(self)

    def setRatedFanPower(self, ratedFanPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_resetRatedFanPower(self)

    def setStandbyPower(self, standbyPower: "double") -> "bool":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_setStandbyPower(self, standbyPower)

    def resetStandbyPower(self) -> "void":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_resetStandbyPower(self)

    def autosizedRatedCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_autosizedRatedCapacity(self)

    def autosizedRatedPower(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.HumidifierSteamElectric_autosizedRatedPower(self)

# Register HumidifierSteamElectric in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.HumidifierSteamElectric_swigregister(HumidifierSteamElectric)

def HumidifierSteamElectric_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.HumidifierSteamElectric_iddObjectType()


def toHumidifierSteamElectric(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HumidifierSteamElectric >":
    return _openstudiomodelstraightcomponent.toHumidifierSteamElectric(idfObject)

def getHumidifierSteamElectric(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::HumidifierSteamElectric >":
    return _openstudiomodelstraightcomponent.getHumidifierSteamElectric(t_model, t_handle)

def getHumidifierSteamElectrics(t_model: "Model") -> "std::vector< openstudio::model::HumidifierSteamElectric,std::allocator< openstudio::model::HumidifierSteamElectric > >":
    return _openstudiomodelstraightcomponent.getHumidifierSteamElectrics(t_model)

def getHumidifierSteamElectricByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::HumidifierSteamElectric >":
    return _openstudiomodelstraightcomponent.getHumidifierSteamElectricByName(t_model, t_name)

def getHumidifierSteamElectricsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::HumidifierSteamElectric,std::allocator< openstudio::model::HumidifierSteamElectric > >":
    return _openstudiomodelstraightcomponent.getHumidifierSteamElectricsByName(t_model, t_name, t_exactMatch)

def _to_HumidifierSteamElectric(self) -> OptionalHumidifierSteamElectric:
    return toHumidifierSteamElectric(self)
openstudioutilitiesidf.IdfObject.to_HumidifierSteamElectric = _to_HumidifierSteamElectric

def _getHumidifierSteamElectric(self, t_handle: "UUID") -> OptionalHumidifierSteamElectric:
    return getHumidifierSteamElectric(self, t_handle)
Model.getHumidifierSteamElectric = _getHumidifierSteamElectric

def _getHumidifierSteamElectric(self, t_handle_str: str) -> OptionalHumidifierSteamElectric:
    return getHumidifierSteamElectric(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getHumidifierSteamElectric = _getHumidifierSteamElectric

def _getHumidifierSteamElectrics(self) -> HumidifierSteamElectricVector:
    return getHumidifierSteamElectrics(self)
Model.getHumidifierSteamElectrics = _getHumidifierSteamElectrics

def _getHumidifierSteamElectricByName(self, t_name: str) -> OptionalHumidifierSteamElectric:
    return getHumidifierSteamElectricByName(self, t_name)
Model.getHumidifierSteamElectricByName = _getHumidifierSteamElectricByName

def _getHumidifierSteamElectricsByName(self, t_name: str, t_exactMatch: bool) -> HumidifierSteamElectricVector:
    return getHumidifierSteamElectricsByName(self, t_name, t_exactMatch)
Model.getHumidifierSteamElectricsByName = _getHumidifierSteamElectricsByName

class LoadProfilePlant(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelstraightcomponent.LoadProfilePlant_swiginit(self, _openstudiomodelstraightcomponent.new_LoadProfilePlant(*args))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_LoadProfilePlant

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_iddObjectType()

    def loadSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_loadSchedule(self)

    def peakFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_peakFlowRate(self)

    def flowRateFractionSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_flowRateFractionSchedule(self)

    def setLoadSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_setLoadSchedule(self, schedule)

    def setPeakFlowRate(self, peakFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_setPeakFlowRate(self, peakFlowRate)

    def setFlowRateFractionSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.LoadProfilePlant_setFlowRateFractionSchedule(self, schedule)

# Register LoadProfilePlant in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.LoadProfilePlant_swigregister(LoadProfilePlant)

def LoadProfilePlant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.LoadProfilePlant_iddObjectType()


def toLoadProfilePlant(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LoadProfilePlant >":
    return _openstudiomodelstraightcomponent.toLoadProfilePlant(idfObject)

def getLoadProfilePlant(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LoadProfilePlant >":
    return _openstudiomodelstraightcomponent.getLoadProfilePlant(t_model, t_handle)

def getLoadProfilePlants(t_model: "Model") -> "std::vector< openstudio::model::LoadProfilePlant,std::allocator< openstudio::model::LoadProfilePlant > >":
    return _openstudiomodelstraightcomponent.getLoadProfilePlants(t_model)

def getLoadProfilePlantByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LoadProfilePlant >":
    return _openstudiomodelstraightcomponent.getLoadProfilePlantByName(t_model, t_name)

def getLoadProfilePlantsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LoadProfilePlant,std::allocator< openstudio::model::LoadProfilePlant > >":
    return _openstudiomodelstraightcomponent.getLoadProfilePlantsByName(t_model, t_name, t_exactMatch)

def _to_LoadProfilePlant(self) -> OptionalLoadProfilePlant:
    return toLoadProfilePlant(self)
openstudioutilitiesidf.IdfObject.to_LoadProfilePlant = _to_LoadProfilePlant

def _getLoadProfilePlant(self, t_handle: "UUID") -> OptionalLoadProfilePlant:
    return getLoadProfilePlant(self, t_handle)
Model.getLoadProfilePlant = _getLoadProfilePlant

def _getLoadProfilePlant(self, t_handle_str: str) -> OptionalLoadProfilePlant:
    return getLoadProfilePlant(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLoadProfilePlant = _getLoadProfilePlant

def _getLoadProfilePlants(self) -> LoadProfilePlantVector:
    return getLoadProfilePlants(self)
Model.getLoadProfilePlants = _getLoadProfilePlants

def _getLoadProfilePlantByName(self, t_name: str) -> OptionalLoadProfilePlant:
    return getLoadProfilePlantByName(self, t_name)
Model.getLoadProfilePlantByName = _getLoadProfilePlantByName

def _getLoadProfilePlantsByName(self, t_name: str, t_exactMatch: bool) -> LoadProfilePlantVector:
    return getLoadProfilePlantsByName(self, t_name, t_exactMatch)
Model.getLoadProfilePlantsByName = _getLoadProfilePlantsByName

class PipeAdiabatic(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PipeAdiabatic_swiginit(self, _openstudiomodelstraightcomponent.new_PipeAdiabatic(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeAdiabatic

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.PipeAdiabatic_inletPort(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.PipeAdiabatic_outletPort(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PipeAdiabatic_iddObjectType()

# Register PipeAdiabatic in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeAdiabatic_swigregister(PipeAdiabatic)

def PipeAdiabatic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PipeAdiabatic_iddObjectType()


def toPipeAdiabatic(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PipeAdiabatic >":
    return _openstudiomodelstraightcomponent.toPipeAdiabatic(idfObject)

def getPipeAdiabatic(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PipeAdiabatic >":
    return _openstudiomodelstraightcomponent.getPipeAdiabatic(t_model, t_handle)

def getPipeAdiabatics(t_model: "Model") -> "std::vector< openstudio::model::PipeAdiabatic,std::allocator< openstudio::model::PipeAdiabatic > >":
    return _openstudiomodelstraightcomponent.getPipeAdiabatics(t_model)

def getPipeAdiabaticByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PipeAdiabatic >":
    return _openstudiomodelstraightcomponent.getPipeAdiabaticByName(t_model, t_name)

def getPipeAdiabaticsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PipeAdiabatic,std::allocator< openstudio::model::PipeAdiabatic > >":
    return _openstudiomodelstraightcomponent.getPipeAdiabaticsByName(t_model, t_name, t_exactMatch)

def _to_PipeAdiabatic(self) -> OptionalPipeAdiabatic:
    return toPipeAdiabatic(self)
openstudioutilitiesidf.IdfObject.to_PipeAdiabatic = _to_PipeAdiabatic

def _getPipeAdiabatic(self, t_handle: "UUID") -> OptionalPipeAdiabatic:
    return getPipeAdiabatic(self, t_handle)
Model.getPipeAdiabatic = _getPipeAdiabatic

def _getPipeAdiabatic(self, t_handle_str: str) -> OptionalPipeAdiabatic:
    return getPipeAdiabatic(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPipeAdiabatic = _getPipeAdiabatic

def _getPipeAdiabatics(self) -> PipeAdiabaticVector:
    return getPipeAdiabatics(self)
Model.getPipeAdiabatics = _getPipeAdiabatics

def _getPipeAdiabaticByName(self, t_name: str) -> OptionalPipeAdiabatic:
    return getPipeAdiabaticByName(self, t_name)
Model.getPipeAdiabaticByName = _getPipeAdiabaticByName

def _getPipeAdiabaticsByName(self, t_name: str, t_exactMatch: bool) -> PipeAdiabaticVector:
    return getPipeAdiabaticsByName(self, t_name, t_exactMatch)
Model.getPipeAdiabaticsByName = _getPipeAdiabaticsByName

class PipeIndoor(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PipeIndoor_swiginit(self, _openstudiomodelstraightcomponent.new_PipeIndoor(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeIndoor

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PipeIndoor_iddObjectType()

    @staticmethod
    def environmentTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PipeIndoor_environmentTypeValues()

    def construction(self) -> "boost::optional< openstudio::model::Construction >":
        return _openstudiomodelstraightcomponent.PipeIndoor_construction(self)

    def environmentType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PipeIndoor_environmentType(self)

    def ambientTemperatureZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.PipeIndoor_ambientTemperatureZone(self)

    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PipeIndoor_ambientTemperatureSchedule(self)

    def ambientAirVelocitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PipeIndoor_ambientAirVelocitySchedule(self)

    def pipeInsideDiameter(self) -> "double":
        return _openstudiomodelstraightcomponent.PipeIndoor_pipeInsideDiameter(self)

    def pipeLength(self) -> "double":
        return _openstudiomodelstraightcomponent.PipeIndoor_pipeLength(self)

    def setConstruction(self, construction: "Construction") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setConstruction(self, construction)

    def resetConstruction(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoor_resetConstruction(self)

    def setEnvironmentType(self, environmentType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setEnvironmentType(self, environmentType)

    def setAmbientTemperatureZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setAmbientTemperatureZone(self, thermalZone)

    def resetAmbientTemperatureZone(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoor_resetAmbientTemperatureZone(self)

    def setAmbientTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setAmbientTemperatureSchedule(self, schedule)

    def resetAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoor_resetAmbientTemperatureSchedule(self)

    def setAmbientAirVelocitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setAmbientAirVelocitySchedule(self, schedule)

    def resetAmbientAirVelocitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeIndoor_resetAmbientAirVelocitySchedule(self)

    def setPipeInsideDiameter(self, pipeInsideDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setPipeInsideDiameter(self, pipeInsideDiameter)

    def setPipeLength(self, pipeLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PipeIndoor_setPipeLength(self, pipeLength)

# Register PipeIndoor in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeIndoor_swigregister(PipeIndoor)

def PipeIndoor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PipeIndoor_iddObjectType()

def PipeIndoor_environmentTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PipeIndoor_environmentTypeValues()


def toPipeIndoor(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PipeIndoor >":
    return _openstudiomodelstraightcomponent.toPipeIndoor(idfObject)

def getPipeIndoor(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PipeIndoor >":
    return _openstudiomodelstraightcomponent.getPipeIndoor(t_model, t_handle)

def getPipeIndoors(t_model: "Model") -> "std::vector< openstudio::model::PipeIndoor,std::allocator< openstudio::model::PipeIndoor > >":
    return _openstudiomodelstraightcomponent.getPipeIndoors(t_model)

def getPipeIndoorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PipeIndoor >":
    return _openstudiomodelstraightcomponent.getPipeIndoorByName(t_model, t_name)

def getPipeIndoorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PipeIndoor,std::allocator< openstudio::model::PipeIndoor > >":
    return _openstudiomodelstraightcomponent.getPipeIndoorsByName(t_model, t_name, t_exactMatch)

def _to_PipeIndoor(self) -> OptionalPipeIndoor:
    return toPipeIndoor(self)
openstudioutilitiesidf.IdfObject.to_PipeIndoor = _to_PipeIndoor

def _getPipeIndoor(self, t_handle: "UUID") -> OptionalPipeIndoor:
    return getPipeIndoor(self, t_handle)
Model.getPipeIndoor = _getPipeIndoor

def _getPipeIndoor(self, t_handle_str: str) -> OptionalPipeIndoor:
    return getPipeIndoor(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPipeIndoor = _getPipeIndoor

def _getPipeIndoors(self) -> PipeIndoorVector:
    return getPipeIndoors(self)
Model.getPipeIndoors = _getPipeIndoors

def _getPipeIndoorByName(self, t_name: str) -> OptionalPipeIndoor:
    return getPipeIndoorByName(self, t_name)
Model.getPipeIndoorByName = _getPipeIndoorByName

def _getPipeIndoorsByName(self, t_name: str, t_exactMatch: bool) -> PipeIndoorVector:
    return getPipeIndoorsByName(self, t_name, t_exactMatch)
Model.getPipeIndoorsByName = _getPipeIndoorsByName

class PipeOutdoor(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PipeOutdoor_swiginit(self, _openstudiomodelstraightcomponent.new_PipeOutdoor(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PipeOutdoor

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PipeOutdoor_iddObjectType()

    def construction(self) -> "boost::optional< openstudio::model::Construction >":
        return _openstudiomodelstraightcomponent.PipeOutdoor_construction(self)

    def ambientTemperatureOutdoorAirNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.PipeOutdoor_ambientTemperatureOutdoorAirNode(self)

    def pipeInsideDiameter(self) -> "double":
        return _openstudiomodelstraightcomponent.PipeOutdoor_pipeInsideDiameter(self)

    def pipeLength(self) -> "double":
        return _openstudiomodelstraightcomponent.PipeOutdoor_pipeLength(self)

    def setConstruction(self, construction: "Construction") -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoor_setConstruction(self, construction)

    def resetConstruction(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoor_resetConstruction(self)

    def setAmbientTemperatureOutdoorAirNode(self, node: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoor_setAmbientTemperatureOutdoorAirNode(self, node)

    def resetAmbientTemperatureOutdoorAirNode(self) -> "void":
        return _openstudiomodelstraightcomponent.PipeOutdoor_resetAmbientTemperatureOutdoorAirNode(self)

    def setPipeInsideDiameter(self, pipeInsideDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoor_setPipeInsideDiameter(self, pipeInsideDiameter)

    def setPipeLength(self, pipeLength: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PipeOutdoor_setPipeLength(self, pipeLength)

# Register PipeOutdoor in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PipeOutdoor_swigregister(PipeOutdoor)

def PipeOutdoor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PipeOutdoor_iddObjectType()


def toPipeOutdoor(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PipeOutdoor >":
    return _openstudiomodelstraightcomponent.toPipeOutdoor(idfObject)

def getPipeOutdoor(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PipeOutdoor >":
    return _openstudiomodelstraightcomponent.getPipeOutdoor(t_model, t_handle)

def getPipeOutdoors(t_model: "Model") -> "std::vector< openstudio::model::PipeOutdoor,std::allocator< openstudio::model::PipeOutdoor > >":
    return _openstudiomodelstraightcomponent.getPipeOutdoors(t_model)

def getPipeOutdoorByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PipeOutdoor >":
    return _openstudiomodelstraightcomponent.getPipeOutdoorByName(t_model, t_name)

def getPipeOutdoorsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PipeOutdoor,std::allocator< openstudio::model::PipeOutdoor > >":
    return _openstudiomodelstraightcomponent.getPipeOutdoorsByName(t_model, t_name, t_exactMatch)

def _to_PipeOutdoor(self) -> OptionalPipeOutdoor:
    return toPipeOutdoor(self)
openstudioutilitiesidf.IdfObject.to_PipeOutdoor = _to_PipeOutdoor

def _getPipeOutdoor(self, t_handle: "UUID") -> OptionalPipeOutdoor:
    return getPipeOutdoor(self, t_handle)
Model.getPipeOutdoor = _getPipeOutdoor

def _getPipeOutdoor(self, t_handle_str: str) -> OptionalPipeOutdoor:
    return getPipeOutdoor(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPipeOutdoor = _getPipeOutdoor

def _getPipeOutdoors(self) -> PipeOutdoorVector:
    return getPipeOutdoors(self)
Model.getPipeOutdoors = _getPipeOutdoors

def _getPipeOutdoorByName(self, t_name: str) -> OptionalPipeOutdoor:
    return getPipeOutdoorByName(self, t_name)
Model.getPipeOutdoorByName = _getPipeOutdoorByName

def _getPipeOutdoorsByName(self, t_name: str, t_exactMatch: bool) -> PipeOutdoorVector:
    return getPipeOutdoorsByName(self, t_name, t_exactMatch)
Model.getPipeOutdoorsByName = _getPipeOutdoorsByName

class PlantComponentTemperatureSource(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_swiginit(self, _openstudiomodelstraightcomponent.new_PlantComponentTemperatureSource(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PlantComponentTemperatureSource

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_iddObjectType()

    @staticmethod
    def temperatureSpecificationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_temperatureSpecificationTypeValues()

    def designVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_designVolumeFlowRate(self)

    def isDesignVolumeFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_isDesignVolumeFlowRateAutosized(self)

    def temperatureSpecificationType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_temperatureSpecificationType(self)

    def sourceTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_sourceTemperature(self)

    def sourceTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_sourceTemperatureSchedule(self)

    def setDesignVolumeFlowRate(self, designVolumeFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_setDesignVolumeFlowRate(self, designVolumeFlowRate)

    def autosizeDesignVolumeFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_autosizeDesignVolumeFlowRate(self)

    def setTemperatureSpecificationType(self, temperatureSpecificationType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_setTemperatureSpecificationType(self, temperatureSpecificationType)

    def setSourceTemperature(self, sourceTemperature: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_setSourceTemperature(self, sourceTemperature)

    def resetSourceTemperature(self) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_resetSourceTemperature(self)

    def setSourceTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_setSourceTemperatureSchedule(self, schedule)

    def resetSourceTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_resetSourceTemperatureSchedule(self)

    def autosizedDesignVolumeFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_autosizedDesignVolumeFlowRate(self)

# Register PlantComponentTemperatureSource in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PlantComponentTemperatureSource_swigregister(PlantComponentTemperatureSource)

def PlantComponentTemperatureSource_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_iddObjectType()

def PlantComponentTemperatureSource_temperatureSpecificationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PlantComponentTemperatureSource_temperatureSpecificationTypeValues()


def toPlantComponentTemperatureSource(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PlantComponentTemperatureSource >":
    return _openstudiomodelstraightcomponent.toPlantComponentTemperatureSource(idfObject)

def getPlantComponentTemperatureSource(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PlantComponentTemperatureSource >":
    return _openstudiomodelstraightcomponent.getPlantComponentTemperatureSource(t_model, t_handle)

def getPlantComponentTemperatureSources(t_model: "Model") -> "std::vector< openstudio::model::PlantComponentTemperatureSource,std::allocator< openstudio::model::PlantComponentTemperatureSource > >":
    return _openstudiomodelstraightcomponent.getPlantComponentTemperatureSources(t_model)

def getPlantComponentTemperatureSourceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PlantComponentTemperatureSource >":
    return _openstudiomodelstraightcomponent.getPlantComponentTemperatureSourceByName(t_model, t_name)

def getPlantComponentTemperatureSourcesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PlantComponentTemperatureSource,std::allocator< openstudio::model::PlantComponentTemperatureSource > >":
    return _openstudiomodelstraightcomponent.getPlantComponentTemperatureSourcesByName(t_model, t_name, t_exactMatch)

def _to_PlantComponentTemperatureSource(self) -> OptionalPlantComponentTemperatureSource:
    return toPlantComponentTemperatureSource(self)
openstudioutilitiesidf.IdfObject.to_PlantComponentTemperatureSource = _to_PlantComponentTemperatureSource

def _getPlantComponentTemperatureSource(self, t_handle: "UUID") -> OptionalPlantComponentTemperatureSource:
    return getPlantComponentTemperatureSource(self, t_handle)
Model.getPlantComponentTemperatureSource = _getPlantComponentTemperatureSource

def _getPlantComponentTemperatureSource(self, t_handle_str: str) -> OptionalPlantComponentTemperatureSource:
    return getPlantComponentTemperatureSource(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPlantComponentTemperatureSource = _getPlantComponentTemperatureSource

def _getPlantComponentTemperatureSources(self) -> PlantComponentTemperatureSourceVector:
    return getPlantComponentTemperatureSources(self)
Model.getPlantComponentTemperatureSources = _getPlantComponentTemperatureSources

def _getPlantComponentTemperatureSourceByName(self, t_name: str) -> OptionalPlantComponentTemperatureSource:
    return getPlantComponentTemperatureSourceByName(self, t_name)
Model.getPlantComponentTemperatureSourceByName = _getPlantComponentTemperatureSourceByName

def _getPlantComponentTemperatureSourcesByName(self, t_name: str, t_exactMatch: bool) -> PlantComponentTemperatureSourceVector:
    return getPlantComponentTemperatureSourcesByName(self, t_name, t_exactMatch)
Model.getPlantComponentTemperatureSourcesByName = _getPlantComponentTemperatureSourcesByName

class PumpConstantSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PumpConstantSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_PumpConstantSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PumpConstantSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_iddObjectType()

    @staticmethod
    def pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_pumpControlTypeValues()

    @staticmethod
    def designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_designPowerSizingMethodValues()

    def ratedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_ratedFlowRate(self)

    def isRatedFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isRatedFlowRateAutosized(self)

    def setRatedFlowRate(self, ratedFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setRatedFlowRate(self, ratedFlowRate)

    def resetRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetRatedFlowRate(self)

    def autosizeRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_autosizeRatedFlowRate(self)

    def ratedPumpHead(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_ratedPumpHead(self)

    def isRatedPumpHeadDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isRatedPumpHeadDefaulted(self)

    def setRatedPumpHead(self, ratedPumpHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setRatedPumpHead(self, ratedPumpHead)

    def resetRatedPumpHead(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetRatedPumpHead(self)

    def ratedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_ratedPowerConsumption(self)

    def isRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isRatedPowerConsumptionAutosized(self)

    def setRatedPowerConsumption(self, ratedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setRatedPowerConsumption(self, ratedPowerConsumption)

    def resetRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetRatedPowerConsumption(self)

    def autosizeRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_autosizeRatedPowerConsumption(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isMotorEfficiencyDefaulted(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetMotorEfficiency(self)

    def fractionofMotorInefficienciestoFluidStream(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_fractionofMotorInefficienciestoFluidStream(self)

    def isFractionofMotorInefficienciestoFluidStreamDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isFractionofMotorInefficienciestoFluidStreamDefaulted(self)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def resetFractionofMotorInefficienciestoFluidStream(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetFractionofMotorInefficienciestoFluidStream(self)

    def pumpControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_pumpControlType(self)

    def isPumpControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_isPumpControlTypeDefaulted(self)

    def setPumpControlType(self, pumpControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setPumpControlType(self, pumpControlType)

    def resetPumpControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetPumpControlType(self)

    def pumpFlowRateSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_pumpFlowRateSchedule(self)

    def setPumpFlowRateSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetPumpFlowRateSchedule(self)

    def pumpCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_pumpCurve(self)

    def setPumpCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setPumpCurve(self, curve)

    def resetPumpCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetPumpCurve(self)

    def impellerDiameter(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_impellerDiameter(self)

    def setImpellerDiameter(self, impellerDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setImpellerDiameter(self, impellerDiameter)

    def resetImpellerDiameter(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetImpellerDiameter(self)

    def rotationalSpeed(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_rotationalSpeed(self)

    def setRotationalSpeed(self, rotationalSpeed: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setRotationalSpeed(self, rotationalSpeed)

    def resetRotationalSpeed(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetRotationalSpeed(self)

    def zone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_zone(self)

    def skinLossRadiativeFraction(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_skinLossRadiativeFraction(self)

    def setZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setZone(self, thermalZone)

    def resetZone(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetZone(self)

    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)

    def resetSkinLossRadiativeFraction(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_resetSkinLossRadiativeFraction(self)

    def autosizedRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_autosizedRatedFlowRate(self)

    def autosizedRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_autosizedRatedPowerConsumption(self)

    def designPowerSizingMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_designPowerSizingMethod(self)

    def setDesignPowerSizingMethod(self, designPowerSizingMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setDesignPowerSizingMethod(self, designPowerSizingMethod)

    def designElectricPowerPerUnitFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_designElectricPowerPerUnitFlowRate(self)

    def setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate)

    def designShaftPowerPerUnitFlowRatePerUnitHead(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_designShaftPowerPerUnitFlowRatePerUnitHead(self)

    def setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_endUseSubcategory(self)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.PumpConstantSpeed_setEndUseSubcategory(self, endUseSubcategory)

# Register PumpConstantSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PumpConstantSpeed_swigregister(PumpConstantSpeed)

def PumpConstantSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PumpConstantSpeed_iddObjectType()

def PumpConstantSpeed_pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpConstantSpeed_pumpControlTypeValues()

def PumpConstantSpeed_designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpConstantSpeed_designPowerSizingMethodValues()


def toPumpConstantSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PumpConstantSpeed >":
    return _openstudiomodelstraightcomponent.toPumpConstantSpeed(idfObject)

def getPumpConstantSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PumpConstantSpeed >":
    return _openstudiomodelstraightcomponent.getPumpConstantSpeed(t_model, t_handle)

def getPumpConstantSpeeds(t_model: "Model") -> "std::vector< openstudio::model::PumpConstantSpeed,std::allocator< openstudio::model::PumpConstantSpeed > >":
    return _openstudiomodelstraightcomponent.getPumpConstantSpeeds(t_model)

def getPumpConstantSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PumpConstantSpeed >":
    return _openstudiomodelstraightcomponent.getPumpConstantSpeedByName(t_model, t_name)

def getPumpConstantSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PumpConstantSpeed,std::allocator< openstudio::model::PumpConstantSpeed > >":
    return _openstudiomodelstraightcomponent.getPumpConstantSpeedsByName(t_model, t_name, t_exactMatch)

def _to_PumpConstantSpeed(self) -> OptionalPumpConstantSpeed:
    return toPumpConstantSpeed(self)
openstudioutilitiesidf.IdfObject.to_PumpConstantSpeed = _to_PumpConstantSpeed

def _getPumpConstantSpeed(self, t_handle: "UUID") -> OptionalPumpConstantSpeed:
    return getPumpConstantSpeed(self, t_handle)
Model.getPumpConstantSpeed = _getPumpConstantSpeed

def _getPumpConstantSpeed(self, t_handle_str: str) -> OptionalPumpConstantSpeed:
    return getPumpConstantSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPumpConstantSpeed = _getPumpConstantSpeed

def _getPumpConstantSpeeds(self) -> PumpConstantSpeedVector:
    return getPumpConstantSpeeds(self)
Model.getPumpConstantSpeeds = _getPumpConstantSpeeds

def _getPumpConstantSpeedByName(self, t_name: str) -> OptionalPumpConstantSpeed:
    return getPumpConstantSpeedByName(self, t_name)
Model.getPumpConstantSpeedByName = _getPumpConstantSpeedByName

def _getPumpConstantSpeedsByName(self, t_name: str, t_exactMatch: bool) -> PumpConstantSpeedVector:
    return getPumpConstantSpeedsByName(self, t_name, t_exactMatch)
Model.getPumpConstantSpeedsByName = _getPumpConstantSpeedsByName

class PumpVariableSpeed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.PumpVariableSpeed_swiginit(self, _openstudiomodelstraightcomponent.new_PumpVariableSpeed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_PumpVariableSpeed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_iddObjectType()

    @staticmethod
    def pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpControlTypeValues()

    @staticmethod
    def designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_designPowerSizingMethodValues()

    @staticmethod
    def validPumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_validPumpControlTypeValues()

    @staticmethod
    def vfdControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_vfdControlTypeValues()

    def ratedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_ratedFlowRate(self)

    def isRatedFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isRatedFlowRateDefaulted(self)

    def isRatedFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isRatedFlowRateAutosized(self)

    def ratedPumpHead(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_ratedPumpHead(self)

    def isRatedPumpHeadDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isRatedPumpHeadDefaulted(self)

    def ratedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_ratedPowerConsumption(self)

    def isRatedPowerConsumptionDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isRatedPowerConsumptionDefaulted(self)

    def isRatedPowerConsumptionAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isRatedPowerConsumptionAutosized(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isMotorEfficiencyDefaulted(self)

    def fractionofMotorInefficienciestoFluidStream(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_fractionofMotorInefficienciestoFluidStream(self)

    def isFractionofMotorInefficienciestoFluidStreamDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isFractionofMotorInefficienciestoFluidStreamDefaulted(self)

    def coefficient1ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_coefficient1ofthePartLoadPerformanceCurve(self)

    def isCoefficient1ofthePartLoadPerformanceCurveDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isCoefficient1ofthePartLoadPerformanceCurveDefaulted(self)

    def coefficient2ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_coefficient2ofthePartLoadPerformanceCurve(self)

    def isCoefficient2ofthePartLoadPerformanceCurveDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isCoefficient2ofthePartLoadPerformanceCurveDefaulted(self)

    def coefficient3ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_coefficient3ofthePartLoadPerformanceCurve(self)

    def isCoefficient3ofthePartLoadPerformanceCurveDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isCoefficient3ofthePartLoadPerformanceCurveDefaulted(self)

    def coefficient4ofthePartLoadPerformanceCurve(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_coefficient4ofthePartLoadPerformanceCurve(self)

    def isCoefficient4ofthePartLoadPerformanceCurveDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isCoefficient4ofthePartLoadPerformanceCurveDefaulted(self)

    def minimumFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_minimumFlowRate(self)

    def isMinimumFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isMinimumFlowRateDefaulted(self)

    def pumpControlType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpControlType(self)

    def isPumpControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_isPumpControlTypeDefaulted(self)

    def pumpFlowRateSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpFlowRateSchedule(self)

    def pumpCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpCurve(self)

    def impellerDiameter(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_impellerDiameter(self)

    def vFDControlType(self) -> "boost::optional< std::string >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_vFDControlType(self)

    def pumpRPMSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpRPMSchedule(self)

    def minimumPressureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_minimumPressureSchedule(self)

    def maximumPressureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_maximumPressureSchedule(self)

    def minimumRPMSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_minimumRPMSchedule(self)

    def maximumRPMSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_maximumRPMSchedule(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_endUseSubcategory(self)

    def setRatedFlowRate(self, ratedFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setRatedFlowRate(self, ratedFlowRate)

    def resetRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetRatedFlowRate(self)

    def autosizeRatedFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_autosizeRatedFlowRate(self)

    def setRatedPumpHead(self, ratedPumpHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setRatedPumpHead(self, ratedPumpHead)

    def resetRatedPumpHead(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetRatedPumpHead(self)

    def setRatedPowerConsumption(self, ratedPowerConsumption: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setRatedPowerConsumption(self, ratedPowerConsumption)

    def resetRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetRatedPowerConsumption(self)

    def autosizeRatedPowerConsumption(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_autosizeRatedPowerConsumption(self)

    def setMotorEfficiency(self, motorEfficiency: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMotorEfficiency(self)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def resetFractionofMotorInefficienciestoFluidStream(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetFractionofMotorInefficienciestoFluidStream(self)

    def setCoefficient1ofthePartLoadPerformanceCurve(self, coefficient1ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setCoefficient1ofthePartLoadPerformanceCurve(self, coefficient1ofthePartLoadPerformanceCurve)

    def resetCoefficient1ofthePartLoadPerformanceCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetCoefficient1ofthePartLoadPerformanceCurve(self)

    def setCoefficient2ofthePartLoadPerformanceCurve(self, coefficient2ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setCoefficient2ofthePartLoadPerformanceCurve(self, coefficient2ofthePartLoadPerformanceCurve)

    def resetCoefficient2ofthePartLoadPerformanceCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetCoefficient2ofthePartLoadPerformanceCurve(self)

    def setCoefficient3ofthePartLoadPerformanceCurve(self, coefficient3ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setCoefficient3ofthePartLoadPerformanceCurve(self, coefficient3ofthePartLoadPerformanceCurve)

    def resetCoefficient3ofthePartLoadPerformanceCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetCoefficient3ofthePartLoadPerformanceCurve(self)

    def setCoefficient4ofthePartLoadPerformanceCurve(self, coefficient4ofthePartLoadPerformanceCurve: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setCoefficient4ofthePartLoadPerformanceCurve(self, coefficient4ofthePartLoadPerformanceCurve)

    def resetCoefficient4ofthePartLoadPerformanceCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetCoefficient4ofthePartLoadPerformanceCurve(self)

    def setMinimumFlowRate(self, minimumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMinimumFlowRate(self, minimumFlowRate)

    def resetMinimumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMinimumFlowRate(self)

    def setPumpControlType(self, pumpControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setPumpControlType(self, pumpControlType)

    def resetPumpControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetPumpControlType(self)

    def setPumpFlowRateSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetPumpFlowRateSchedule(self)

    def setPumpCurve(self, curve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setPumpCurve(self, curve)

    def resetPumpCurve(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetPumpCurve(self)

    def setImpellerDiameter(self, impellerDiameter: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setImpellerDiameter(self, impellerDiameter)

    def resetImpellerDiameter(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetImpellerDiameter(self)

    def setVFDControlType(self, vFDControlType: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setVFDControlType(self, vFDControlType)

    def resetVFDControlType(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetVFDControlType(self)

    def setPumpRPMSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setPumpRPMSchedule(self, schedule)

    def resetPumpRPMSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetPumpRPMSchedule(self)

    def setMinimumPressureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMinimumPressureSchedule(self, schedule)

    def resetMinimumPressureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMinimumPressureSchedule(self)

    def setMaximumPressureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMaximumPressureSchedule(self, schedule)

    def resetMaximumPressureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMaximumPressureSchedule(self)

    def setMinimumRPMSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMinimumRPMSchedule(self, schedule)

    def resetMinimumRPMSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMinimumRPMSchedule(self)

    def setMaximumRPMSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setMaximumRPMSchedule(self, schedule)

    def resetMaximumRPMSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetMaximumRPMSchedule(self)

    def autosizedRatedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_autosizedRatedFlowRate(self)

    def autosizedRatedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_autosizedRatedPowerConsumption(self)

    def designPowerSizingMethod(self) -> "std::string":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_designPowerSizingMethod(self)

    def setDesignPowerSizingMethod(self, designPowerSizingMethod: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setDesignPowerSizingMethod(self, designPowerSizingMethod)

    def designElectricPowerPerUnitFlowRate(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_designElectricPowerPerUnitFlowRate(self)

    def setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setDesignElectricPowerPerUnitFlowRate(self, designElectricPowerPerUnitFlowRate)

    def designShaftPowerPerUnitFlowRatePerUnitHead(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_designShaftPowerPerUnitFlowRatePerUnitHead(self)

    def setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setDesignShaftPowerPerUnitFlowRatePerUnitHead(self, designShaftPowerPerUnitFlowRatePerUnitHead)

    def zone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_zone(self)

    def setZone(self, thermalZone: "ThermalZone") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setZone(self, thermalZone)

    def resetZone(self) -> "void":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_resetZone(self)

    def skinLossRadiativeFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_skinLossRadiativeFraction(self)

    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)

    def designMinimumFlowRateFraction(self) -> "double":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_designMinimumFlowRateFraction(self)

    def setDesignMinimumFlowRateFraction(self, designMinimumFlowRateFraction: "double") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setDesignMinimumFlowRateFraction(self, designMinimumFlowRateFraction)

    def setEndUseSubcategory(self, endUseSubcategory: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.PumpVariableSpeed_setEndUseSubcategory(self, endUseSubcategory)

# Register PumpVariableSpeed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.PumpVariableSpeed_swigregister(PumpVariableSpeed)

def PumpVariableSpeed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.PumpVariableSpeed_iddObjectType()

def PumpVariableSpeed_pumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpVariableSpeed_pumpControlTypeValues()

def PumpVariableSpeed_designPowerSizingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpVariableSpeed_designPowerSizingMethodValues()

def PumpVariableSpeed_validPumpControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpVariableSpeed_validPumpControlTypeValues()

def PumpVariableSpeed_vfdControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.PumpVariableSpeed_vfdControlTypeValues()


def toPumpVariableSpeed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PumpVariableSpeed >":
    return _openstudiomodelstraightcomponent.toPumpVariableSpeed(idfObject)

def getPumpVariableSpeed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::PumpVariableSpeed >":
    return _openstudiomodelstraightcomponent.getPumpVariableSpeed(t_model, t_handle)

def getPumpVariableSpeeds(t_model: "Model") -> "std::vector< openstudio::model::PumpVariableSpeed,std::allocator< openstudio::model::PumpVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getPumpVariableSpeeds(t_model)

def getPumpVariableSpeedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::PumpVariableSpeed >":
    return _openstudiomodelstraightcomponent.getPumpVariableSpeedByName(t_model, t_name)

def getPumpVariableSpeedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::PumpVariableSpeed,std::allocator< openstudio::model::PumpVariableSpeed > >":
    return _openstudiomodelstraightcomponent.getPumpVariableSpeedsByName(t_model, t_name, t_exactMatch)

def _to_PumpVariableSpeed(self) -> OptionalPumpVariableSpeed:
    return toPumpVariableSpeed(self)
openstudioutilitiesidf.IdfObject.to_PumpVariableSpeed = _to_PumpVariableSpeed

def _getPumpVariableSpeed(self, t_handle: "UUID") -> OptionalPumpVariableSpeed:
    return getPumpVariableSpeed(self, t_handle)
Model.getPumpVariableSpeed = _getPumpVariableSpeed

def _getPumpVariableSpeed(self, t_handle_str: str) -> OptionalPumpVariableSpeed:
    return getPumpVariableSpeed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getPumpVariableSpeed = _getPumpVariableSpeed

def _getPumpVariableSpeeds(self) -> PumpVariableSpeedVector:
    return getPumpVariableSpeeds(self)
Model.getPumpVariableSpeeds = _getPumpVariableSpeeds

def _getPumpVariableSpeedByName(self, t_name: str) -> OptionalPumpVariableSpeed:
    return getPumpVariableSpeedByName(self, t_name)
Model.getPumpVariableSpeedByName = _getPumpVariableSpeedByName

def _getPumpVariableSpeedsByName(self, t_name: str, t_exactMatch: bool) -> PumpVariableSpeedVector:
    return getPumpVariableSpeedsByName(self, t_name, t_exactMatch)
Model.getPumpVariableSpeedsByName = _getPumpVariableSpeedsByName

class SolarCollectorFlatPlatePhotovoltaicThermal(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorFlatPlatePhotovoltaicThermal(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorFlatPlatePhotovoltaicThermal

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_iddObjectType()

    def solarCollectorPerformance(self) -> "openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_solarCollectorPerformance(self)

    def surface(self) -> "boost::optional< openstudio::model::PlanarSurface >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_surface(self)

    def generatorPhotovoltaic(self) -> "boost::optional< openstudio::model::GeneratorPhotovoltaic >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_generatorPhotovoltaic(self)

    def designFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_designFlowRate(self)

    def isDesignFlowRateAutosized(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_isDesignFlowRateAutosized(self)

    def setSolarCollectorPerformance(self, parameters: "SolarCollectorPerformancePhotovoltaicThermalSimple") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_setSolarCollectorPerformance(self, parameters)

    def resetSolarCollectorPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_resetSolarCollectorPerformance(self)

    def setSurface(self, surface: "PlanarSurface") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_setSurface(self, surface)

    def resetSurface(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_resetSurface(self)

    def setGeneratorPhotovoltaic(self, generatorPhotovoltaic: "openstudio::model::GeneratorPhotovoltaic const &") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_setGeneratorPhotovoltaic(self, generatorPhotovoltaic)

    def resetGeneratorPhotovoltaic(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_resetGeneratorPhotovoltaic(self)

    def setDesignFlowRate(self, designFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_setDesignFlowRate(self, designFlowRate)

    def resetDesignFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_resetDesignFlowRate(self)

    def autosizeDesignFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_autosizeDesignFlowRate(self)

    def autosizedDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_autosizedDesignFlowRate(self)

# Register SolarCollectorFlatPlatePhotovoltaicThermal in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_swigregister(SolarCollectorFlatPlatePhotovoltaicThermal)

def SolarCollectorFlatPlatePhotovoltaicThermal_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.SolarCollectorFlatPlatePhotovoltaicThermal_iddObjectType()


def toSolarCollectorFlatPlatePhotovoltaicThermal(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >":
    return _openstudiomodelstraightcomponent.toSolarCollectorFlatPlatePhotovoltaicThermal(idfObject)

def getSolarCollectorFlatPlatePhotovoltaicThermal(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlatePhotovoltaicThermal(t_model, t_handle)

def getSolarCollectorFlatPlatePhotovoltaicThermals(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal,std::allocator< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlatePhotovoltaicThermals(t_model)

def getSolarCollectorFlatPlatePhotovoltaicThermalByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlatePhotovoltaicThermalByName(t_model, t_name)

def getSolarCollectorFlatPlatePhotovoltaicThermalsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal,std::allocator< openstudio::model::SolarCollectorFlatPlatePhotovoltaicThermal > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlatePhotovoltaicThermalsByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorFlatPlatePhotovoltaicThermal(self) -> OptionalSolarCollectorFlatPlatePhotovoltaicThermal:
    return toSolarCollectorFlatPlatePhotovoltaicThermal(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorFlatPlatePhotovoltaicThermal = _to_SolarCollectorFlatPlatePhotovoltaicThermal

def _getSolarCollectorFlatPlatePhotovoltaicThermal(self, t_handle: "UUID") -> OptionalSolarCollectorFlatPlatePhotovoltaicThermal:
    return getSolarCollectorFlatPlatePhotovoltaicThermal(self, t_handle)
Model.getSolarCollectorFlatPlatePhotovoltaicThermal = _getSolarCollectorFlatPlatePhotovoltaicThermal

def _getSolarCollectorFlatPlatePhotovoltaicThermal(self, t_handle_str: str) -> OptionalSolarCollectorFlatPlatePhotovoltaicThermal:
    return getSolarCollectorFlatPlatePhotovoltaicThermal(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorFlatPlatePhotovoltaicThermal = _getSolarCollectorFlatPlatePhotovoltaicThermal

def _getSolarCollectorFlatPlatePhotovoltaicThermals(self) -> SolarCollectorFlatPlatePhotovoltaicThermalVector:
    return getSolarCollectorFlatPlatePhotovoltaicThermals(self)
Model.getSolarCollectorFlatPlatePhotovoltaicThermals = _getSolarCollectorFlatPlatePhotovoltaicThermals

def _getSolarCollectorFlatPlatePhotovoltaicThermalByName(self, t_name: str) -> OptionalSolarCollectorFlatPlatePhotovoltaicThermal:
    return getSolarCollectorFlatPlatePhotovoltaicThermalByName(self, t_name)
Model.getSolarCollectorFlatPlatePhotovoltaicThermalByName = _getSolarCollectorFlatPlatePhotovoltaicThermalByName

def _getSolarCollectorFlatPlatePhotovoltaicThermalsByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorFlatPlatePhotovoltaicThermalVector:
    return getSolarCollectorFlatPlatePhotovoltaicThermalsByName(self, t_name, t_exactMatch)
Model.getSolarCollectorFlatPlatePhotovoltaicThermalsByName = _getSolarCollectorFlatPlatePhotovoltaicThermalsByName

class SolarCollectorFlatPlateWater(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorFlatPlateWater(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorFlatPlateWater

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_iddObjectType()

    def solarCollectorPerformance(self) -> "openstudio::model::SolarCollectorPerformanceFlatPlate":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_solarCollectorPerformance(self)

    def surface(self) -> "boost::optional< openstudio::model::PlanarSurface >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_surface(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_maximumFlowRate(self)

    def setSolarCollectorPerformance(self, parameters: "SolarCollectorPerformanceFlatPlate") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_setSolarCollectorPerformance(self, parameters)

    def resetSolarCollectorPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_resetSolarCollectorPerformance(self)

    def setSurface(self, surface: "PlanarSurface") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_setSurface(self, surface)

    def resetSurface(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_resetSurface(self)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_resetMaximumFlowRate(self)

# Register SolarCollectorFlatPlateWater in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_swigregister(SolarCollectorFlatPlateWater)

def SolarCollectorFlatPlateWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.SolarCollectorFlatPlateWater_iddObjectType()


def toSolarCollectorFlatPlateWater(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorFlatPlateWater >":
    return _openstudiomodelstraightcomponent.toSolarCollectorFlatPlateWater(idfObject)

def getSolarCollectorFlatPlateWater(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorFlatPlateWater >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlateWater(t_model, t_handle)

def getSolarCollectorFlatPlateWaters(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater,std::allocator< openstudio::model::SolarCollectorFlatPlateWater > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlateWaters(t_model)

def getSolarCollectorFlatPlateWaterByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorFlatPlateWater >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlateWaterByName(t_model, t_name)

def getSolarCollectorFlatPlateWatersByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorFlatPlateWater,std::allocator< openstudio::model::SolarCollectorFlatPlateWater > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorFlatPlateWatersByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorFlatPlateWater(self) -> OptionalSolarCollectorFlatPlateWater:
    return toSolarCollectorFlatPlateWater(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorFlatPlateWater = _to_SolarCollectorFlatPlateWater

def _getSolarCollectorFlatPlateWater(self, t_handle: "UUID") -> OptionalSolarCollectorFlatPlateWater:
    return getSolarCollectorFlatPlateWater(self, t_handle)
Model.getSolarCollectorFlatPlateWater = _getSolarCollectorFlatPlateWater

def _getSolarCollectorFlatPlateWater(self, t_handle_str: str) -> OptionalSolarCollectorFlatPlateWater:
    return getSolarCollectorFlatPlateWater(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorFlatPlateWater = _getSolarCollectorFlatPlateWater

def _getSolarCollectorFlatPlateWaters(self) -> SolarCollectorFlatPlateWaterVector:
    return getSolarCollectorFlatPlateWaters(self)
Model.getSolarCollectorFlatPlateWaters = _getSolarCollectorFlatPlateWaters

def _getSolarCollectorFlatPlateWaterByName(self, t_name: str) -> OptionalSolarCollectorFlatPlateWater:
    return getSolarCollectorFlatPlateWaterByName(self, t_name)
Model.getSolarCollectorFlatPlateWaterByName = _getSolarCollectorFlatPlateWaterByName

def _getSolarCollectorFlatPlateWatersByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorFlatPlateWaterVector:
    return getSolarCollectorFlatPlateWatersByName(self, t_name, t_exactMatch)
Model.getSolarCollectorFlatPlateWatersByName = _getSolarCollectorFlatPlateWatersByName

class SolarCollectorIntegralCollectorStorage(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_swiginit(self, _openstudiomodelstraightcomponent.new_SolarCollectorIntegralCollectorStorage(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_SolarCollectorIntegralCollectorStorage

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_iddObjectType()

    @staticmethod
    def bottomSurfaceBoundaryConditionsTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_bottomSurfaceBoundaryConditionsTypeValues()

    def solarCollectorPerformance(self) -> "openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_solarCollectorPerformance(self)

    def surface(self) -> "boost::optional< openstudio::model::PlanarSurface >":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_surface(self)

    def bottomSurfaceBoundaryConditionsType(self) -> "std::string":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_bottomSurfaceBoundaryConditionsType(self)

    def isBottomSurfaceBoundaryConditionsTypeDefaulted(self) -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_isBottomSurfaceBoundaryConditionsTypeDefaulted(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_maximumFlowRate(self)

    def setSolarCollectorPerformance(self, solarCollectorPerformance: "SolarCollectorPerformanceIntegralCollectorStorage") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_setSolarCollectorPerformance(self, solarCollectorPerformance)

    def resetSolarCollectorPerformance(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_resetSolarCollectorPerformance(self)

    def setSurface(self, surface: "PlanarSurface") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_setSurface(self, surface)

    def resetSurface(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_resetSurface(self)

    def setMaximumFlowRate(self, maximumFlowRate: "double") -> "bool":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_resetMaximumFlowRate(self)

# Register SolarCollectorIntegralCollectorStorage in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_swigregister(SolarCollectorIntegralCollectorStorage)

def SolarCollectorIntegralCollectorStorage_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_iddObjectType()

def SolarCollectorIntegralCollectorStorage_bottomSurfaceBoundaryConditionsTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.SolarCollectorIntegralCollectorStorage_bottomSurfaceBoundaryConditionsTypeValues()


def toSolarCollectorIntegralCollectorStorage(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SolarCollectorIntegralCollectorStorage >":
    return _openstudiomodelstraightcomponent.toSolarCollectorIntegralCollectorStorage(idfObject)

def getSolarCollectorIntegralCollectorStorage(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SolarCollectorIntegralCollectorStorage >":
    return _openstudiomodelstraightcomponent.getSolarCollectorIntegralCollectorStorage(t_model, t_handle)

def getSolarCollectorIntegralCollectorStorages(t_model: "Model") -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorIntegralCollectorStorage > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorIntegralCollectorStorages(t_model)

def getSolarCollectorIntegralCollectorStorageByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SolarCollectorIntegralCollectorStorage >":
    return _openstudiomodelstraightcomponent.getSolarCollectorIntegralCollectorStorageByName(t_model, t_name)

def getSolarCollectorIntegralCollectorStoragesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SolarCollectorIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorIntegralCollectorStorage > >":
    return _openstudiomodelstraightcomponent.getSolarCollectorIntegralCollectorStoragesByName(t_model, t_name, t_exactMatch)

def _to_SolarCollectorIntegralCollectorStorage(self) -> OptionalSolarCollectorIntegralCollectorStorage:
    return toSolarCollectorIntegralCollectorStorage(self)
openstudioutilitiesidf.IdfObject.to_SolarCollectorIntegralCollectorStorage = _to_SolarCollectorIntegralCollectorStorage

def _getSolarCollectorIntegralCollectorStorage(self, t_handle: "UUID") -> OptionalSolarCollectorIntegralCollectorStorage:
    return getSolarCollectorIntegralCollectorStorage(self, t_handle)
Model.getSolarCollectorIntegralCollectorStorage = _getSolarCollectorIntegralCollectorStorage

def _getSolarCollectorIntegralCollectorStorage(self, t_handle_str: str) -> OptionalSolarCollectorIntegralCollectorStorage:
    return getSolarCollectorIntegralCollectorStorage(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSolarCollectorIntegralCollectorStorage = _getSolarCollectorIntegralCollectorStorage

def _getSolarCollectorIntegralCollectorStorages(self) -> SolarCollectorIntegralCollectorStorageVector:
    return getSolarCollectorIntegralCollectorStorages(self)
Model.getSolarCollectorIntegralCollectorStorages = _getSolarCollectorIntegralCollectorStorages

def _getSolarCollectorIntegralCollectorStorageByName(self, t_name: str) -> OptionalSolarCollectorIntegralCollectorStorage:
    return getSolarCollectorIntegralCollectorStorageByName(self, t_name)
Model.getSolarCollectorIntegralCollectorStorageByName = _getSolarCollectorIntegralCollectorStorageByName

def _getSolarCollectorIntegralCollectorStoragesByName(self, t_name: str, t_exactMatch: bool) -> SolarCollectorIntegralCollectorStorageVector:
    return getSolarCollectorIntegralCollectorStoragesByName(self, t_name, t_exactMatch)
Model.getSolarCollectorIntegralCollectorStoragesByName = _getSolarCollectorIntegralCollectorStoragesByName

class TemperingValve(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.TemperingValve_swiginit(self, _openstudiomodelstraightcomponent.new_TemperingValve(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_TemperingValve

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.TemperingValve_iddObjectType()

    def stream2SourceNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.TemperingValve_stream2SourceNode(self)

    def temperatureSetpointNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.TemperingValve_temperatureSetpointNode(self)

    def pumpOutletNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelstraightcomponent.TemperingValve_pumpOutletNode(self)

    def setStream2SourceNode(self, stream2SourceNode: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValve_setStream2SourceNode(self, stream2SourceNode)

    def resetStream2SourceNode(self) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValve_resetStream2SourceNode(self)

    def setTemperatureSetpointNode(self, temperatureSetpointNode: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValve_setTemperatureSetpointNode(self, temperatureSetpointNode)

    def resetTemperatureSetpointNode(self) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValve_resetTemperatureSetpointNode(self)

    def setPumpOutletNode(self, pumpOutletNode: "Node") -> "bool":
        return _openstudiomodelstraightcomponent.TemperingValve_setPumpOutletNode(self, pumpOutletNode)

    def resetPumpOutletNode(self) -> "void":
        return _openstudiomodelstraightcomponent.TemperingValve_resetPumpOutletNode(self)

# Register TemperingValve in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.TemperingValve_swigregister(TemperingValve)

def TemperingValve_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.TemperingValve_iddObjectType()


def toTemperingValve(idfObject: "IdfObject") -> "boost::optional< openstudio::model::TemperingValve >":
    return _openstudiomodelstraightcomponent.toTemperingValve(idfObject)

def getTemperingValve(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::TemperingValve >":
    return _openstudiomodelstraightcomponent.getTemperingValve(t_model, t_handle)

def getTemperingValves(t_model: "Model") -> "std::vector< openstudio::model::TemperingValve,std::allocator< openstudio::model::TemperingValve > >":
    return _openstudiomodelstraightcomponent.getTemperingValves(t_model)

def getTemperingValveByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::TemperingValve >":
    return _openstudiomodelstraightcomponent.getTemperingValveByName(t_model, t_name)

def getTemperingValvesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::TemperingValve,std::allocator< openstudio::model::TemperingValve > >":
    return _openstudiomodelstraightcomponent.getTemperingValvesByName(t_model, t_name, t_exactMatch)

def _to_TemperingValve(self) -> OptionalTemperingValve:
    return toTemperingValve(self)
openstudioutilitiesidf.IdfObject.to_TemperingValve = _to_TemperingValve

def _getTemperingValve(self, t_handle: "UUID") -> OptionalTemperingValve:
    return getTemperingValve(self, t_handle)
Model.getTemperingValve = _getTemperingValve

def _getTemperingValve(self, t_handle_str: str) -> OptionalTemperingValve:
    return getTemperingValve(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getTemperingValve = _getTemperingValve

def _getTemperingValves(self) -> TemperingValveVector:
    return getTemperingValves(self)
Model.getTemperingValves = _getTemperingValves

def _getTemperingValveByName(self, t_name: str) -> OptionalTemperingValve:
    return getTemperingValveByName(self, t_name)
Model.getTemperingValveByName = _getTemperingValveByName

def _getTemperingValvesByName(self, t_name: str, t_exactMatch: bool) -> TemperingValveVector:
    return getTemperingValvesByName(self, t_name, t_exactMatch)
Model.getTemperingValvesByName = _getTemperingValvesByName

class ThermalStorageIceDetailed(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_swiginit(self, _openstudiomodelstraightcomponent.new_ThermalStorageIceDetailed(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_ThermalStorageIceDetailed

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_iddObjectType()

    @staticmethod
    def thawProcessIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_thawProcessIndicatorValues()

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_availabilitySchedule(self)

    def capacity(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_capacity(self)

    def dischargingCurveVariableSpecifications(self) -> "std::string":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_dischargingCurveVariableSpecifications(self)

    def dischargingCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_dischargingCurve(self)

    def chargingCurveVariableSpecifications(self) -> "std::string":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_chargingCurveVariableSpecifications(self)

    def chargingCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_chargingCurve(self)

    def timestepoftheCurveData(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_timestepoftheCurveData(self)

    def parasiticElectricLoadDuringDischarging(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_parasiticElectricLoadDuringDischarging(self)

    def parasiticElectricLoadDuringCharging(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_parasiticElectricLoadDuringCharging(self)

    def tankLossCoefficient(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_tankLossCoefficient(self)

    def freezingTemperatureofStorageMedium(self) -> "double":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_freezingTemperatureofStorageMedium(self)

    def thawProcessIndicator(self) -> "std::string":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_thawProcessIndicator(self)

    def setAvailabilitySchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_resetAvailabilitySchedule(self)

    def setCapacity(self, capacity: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setCapacity(self, capacity)

    def setDischargingCurveVariableSpecifications(self, dischargingCurveVariableSpecifications: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setDischargingCurveVariableSpecifications(self, dischargingCurveVariableSpecifications)

    def setDischargingCurve(self, dischargingCurve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setDischargingCurve(self, dischargingCurve)

    def setChargingCurveVariableSpecifications(self, chargingCurveVariableSpecifications: "std::string const &") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setChargingCurveVariableSpecifications(self, chargingCurveVariableSpecifications)

    def setChargingCurve(self, chargingCurve: "Curve") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setChargingCurve(self, chargingCurve)

    def setTimestepoftheCurveData(self, timestepoftheCurveData: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setTimestepoftheCurveData(self, timestepoftheCurveData)

    def setParasiticElectricLoadDuringDischarging(self, parasiticElectricLoadDuringDischarging: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setParasiticElectricLoadDuringDischarging(self, parasiticElectricLoadDuringDischarging)

    def setParasiticElectricLoadDuringCharging(self, parasiticElectricLoadDuringCharging: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setParasiticElectricLoadDuringCharging(self, parasiticElectricLoadDuringCharging)

    def setTankLossCoefficient(self, tankLossCoefficient: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setTankLossCoefficient(self, tankLossCoefficient)

    def setFreezingTemperatureofStorageMedium(self, freezingTemperatureofStorageMedium: "double") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setFreezingTemperatureofStorageMedium(self, freezingTemperatureofStorageMedium)

    def setThawProcessIndicator(self, thawProcessIndicator: "std::string") -> "bool":
        return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_setThawProcessIndicator(self, thawProcessIndicator)

# Register ThermalStorageIceDetailed in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.ThermalStorageIceDetailed_swigregister(ThermalStorageIceDetailed)

def ThermalStorageIceDetailed_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_iddObjectType()

def ThermalStorageIceDetailed_thawProcessIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelstraightcomponent.ThermalStorageIceDetailed_thawProcessIndicatorValues()


def toThermalStorageIceDetailed(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ThermalStorageIceDetailed >":
    return _openstudiomodelstraightcomponent.toThermalStorageIceDetailed(idfObject)

def getThermalStorageIceDetailed(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::ThermalStorageIceDetailed >":
    return _openstudiomodelstraightcomponent.getThermalStorageIceDetailed(t_model, t_handle)

def getThermalStorageIceDetaileds(t_model: "Model") -> "std::vector< openstudio::model::ThermalStorageIceDetailed,std::allocator< openstudio::model::ThermalStorageIceDetailed > >":
    return _openstudiomodelstraightcomponent.getThermalStorageIceDetaileds(t_model)

def getThermalStorageIceDetailedByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::ThermalStorageIceDetailed >":
    return _openstudiomodelstraightcomponent.getThermalStorageIceDetailedByName(t_model, t_name)

def getThermalStorageIceDetailedsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::ThermalStorageIceDetailed,std::allocator< openstudio::model::ThermalStorageIceDetailed > >":
    return _openstudiomodelstraightcomponent.getThermalStorageIceDetailedsByName(t_model, t_name, t_exactMatch)

def _to_ThermalStorageIceDetailed(self) -> OptionalThermalStorageIceDetailed:
    return toThermalStorageIceDetailed(self)
openstudioutilitiesidf.IdfObject.to_ThermalStorageIceDetailed = _to_ThermalStorageIceDetailed

def _getThermalStorageIceDetailed(self, t_handle: "UUID") -> OptionalThermalStorageIceDetailed:
    return getThermalStorageIceDetailed(self, t_handle)
Model.getThermalStorageIceDetailed = _getThermalStorageIceDetailed

def _getThermalStorageIceDetailed(self, t_handle_str: str) -> OptionalThermalStorageIceDetailed:
    return getThermalStorageIceDetailed(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getThermalStorageIceDetailed = _getThermalStorageIceDetailed

def _getThermalStorageIceDetaileds(self) -> ThermalStorageIceDetailedVector:
    return getThermalStorageIceDetaileds(self)
Model.getThermalStorageIceDetaileds = _getThermalStorageIceDetaileds

def _getThermalStorageIceDetailedByName(self, t_name: str) -> OptionalThermalStorageIceDetailed:
    return getThermalStorageIceDetailedByName(self, t_name)
Model.getThermalStorageIceDetailedByName = _getThermalStorageIceDetailedByName

def _getThermalStorageIceDetailedsByName(self, t_name: str, t_exactMatch: bool) -> ThermalStorageIceDetailedVector:
    return getThermalStorageIceDetailedsByName(self, t_name, t_exactMatch)
Model.getThermalStorageIceDetailedsByName = _getThermalStorageIceDetailedsByName

class WaterUseConnections(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelstraightcomponent.WaterUseConnections_swiginit(self, _openstudiomodelstraightcomponent.new_WaterUseConnections(model))
    __swig_destroy__ = _openstudiomodelstraightcomponent.delete_WaterUseConnections

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelstraightcomponent.WaterUseConnections_iddObjectType()

    def hotWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.WaterUseConnections_hotWaterSupplyTemperatureSchedule(self)

    def setHotWaterSupplyTemperatureSchedule(self, hotWaterSupplyTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnections_setHotWaterSupplyTemperatureSchedule(self, hotWaterSupplyTemperatureSchedule)

    def resetHotWaterSupplyTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnections_resetHotWaterSupplyTemperatureSchedule(self)

    def coldWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelstraightcomponent.WaterUseConnections_coldWaterSupplyTemperatureSchedule(self)

    def setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule: "Schedule") -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnections_setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule)

    def resetColdWaterSupplyTemperatureSchedule(self) -> "void":
        return _openstudiomodelstraightcomponent.WaterUseConnections_resetColdWaterSupplyTemperatureSchedule(self)

    def waterUseEquipment(self) -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > >":
        return _openstudiomodelstraightcomponent.WaterUseConnections_waterUseEquipment(self)

    def addWaterUseEquipment(self, waterUseEquipment: "WaterUseEquipment") -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnections_addWaterUseEquipment(self, waterUseEquipment)

    def removeWaterUseEquipment(self, waterUseEquipment: "WaterUseEquipment") -> "bool":
        return _openstudiomodelstraightcomponent.WaterUseConnections_removeWaterUseEquipment(self, waterUseEquipment)

    def inletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.WaterUseConnections_inletPort(self)

    def outletPort(self) -> "unsigned int":
        return _openstudiomodelstraightcomponent.WaterUseConnections_outletPort(self)

# Register WaterUseConnections in _openstudiomodelstraightcomponent:
_openstudiomodelstraightcomponent.WaterUseConnections_swigregister(WaterUseConnections)

def WaterUseConnections_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelstraightcomponent.WaterUseConnections_iddObjectType()


def toWaterUseConnections(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WaterUseConnections >":
    return _openstudiomodelstraightcomponent.toWaterUseConnections(idfObject)

def getWaterUseConnections(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WaterUseConnections >":
    return _openstudiomodelstraightcomponent.getWaterUseConnections(t_model, t_handle)

def getWaterUseConnectionss(t_model: "Model") -> "std::vector< openstudio::model::WaterUseConnections,std::allocator< openstudio::model::WaterUseConnections > >":
    return _openstudiomodelstraightcomponent.getWaterUseConnectionss(t_model)

def getWaterUseConnectionsByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WaterUseConnections >":
    return _openstudiomodelstraightcomponent.getWaterUseConnectionsByName(t_model, t_name)

def getWaterUseConnectionssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WaterUseConnections,std::allocator< openstudio::model::WaterUseConnections > >":
    return _openstudiomodelstraightcomponent.getWaterUseConnectionssByName(t_model, t_name, t_exactMatch)

def _to_WaterUseConnections(self) -> OptionalWaterUseConnections:
    return toWaterUseConnections(self)
openstudioutilitiesidf.IdfObject.to_WaterUseConnections = _to_WaterUseConnections

def _getWaterUseConnections(self, t_handle: "UUID") -> OptionalWaterUseConnections:
    return getWaterUseConnections(self, t_handle)
Model.getWaterUseConnections = _getWaterUseConnections

def _getWaterUseConnections(self, t_handle_str: str) -> OptionalWaterUseConnections:
    return getWaterUseConnections(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWaterUseConnections = _getWaterUseConnections

def _getWaterUseConnectionss(self) -> WaterUseConnectionsVector:
    return getWaterUseConnectionss(self)
Model.getWaterUseConnectionss = _getWaterUseConnectionss

def _getWaterUseConnectionsByName(self, t_name: str) -> OptionalWaterUseConnections:
    return getWaterUseConnectionsByName(self, t_name)
Model.getWaterUseConnectionsByName = _getWaterUseConnectionsByName

def _getWaterUseConnectionssByName(self, t_name: str, t_exactMatch: bool) -> WaterUseConnectionsVector:
    return getWaterUseConnectionssByName(self, t_name, t_exactMatch)
Model.getWaterUseConnectionssByName = _getWaterUseConnectionssByName



