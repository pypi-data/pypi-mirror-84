# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelsimulation
else:
    import _openstudiomodelsimulation

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudiomodelsimulation.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelsimulation.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudiomodelsimulation.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelsimulation.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelsimulation:
_openstudiomodelsimulation.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudiomodelsimulation.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore

Model = openstudiomodelcore.Model

class RunPeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.RunPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RunPeriod >::size_type":
        return _openstudiomodelsimulation.RunPeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::RunPeriod >::difference_type", j: "std::vector< openstudio::model::RunPeriod >::difference_type") -> "std::vector< openstudio::model::RunPeriod,std::allocator< openstudio::model::RunPeriod > > *":
        return _openstudiomodelsimulation.RunPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::RunPeriod >::difference_type", j: "std::vector< openstudio::model::RunPeriod >::difference_type") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RunPeriod >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::RunPeriod >::value_type":
        return _openstudiomodelsimulation.RunPeriodVector_pop(self)

    def append(self, x: "RunPeriod") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RunPeriod >::size_type":
        return _openstudiomodelsimulation.RunPeriodVector_size(self)

    def swap(self, v: "RunPeriodVector") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::RunPeriod >::iterator":
        return _openstudiomodelsimulation.RunPeriodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RunPeriod >::iterator":
        return _openstudiomodelsimulation.RunPeriodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RunPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RunPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::RunPeriod >::allocator_type":
        return _openstudiomodelsimulation.RunPeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RunPeriod >::iterator":
        return _openstudiomodelsimulation.RunPeriodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.RunPeriodVector_swiginit(self, _openstudiomodelsimulation.new_RunPeriodVector(*args))

    def push_back(self, x: "RunPeriod") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RunPeriod >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RunPeriod >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::RunPeriod >::size_type", x: "RunPeriod") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::RunPeriod >::size_type", x: "RunPeriod") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::RunPeriod >::size_type") -> "void":
        return _openstudiomodelsimulation.RunPeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RunPeriod >::size_type":
        return _openstudiomodelsimulation.RunPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodVector

# Register RunPeriodVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.RunPeriodVector_swigregister(RunPeriodVector)

class OptionalRunPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalRunPeriod_swiginit(self, _openstudiomodelsimulation.new_OptionalRunPeriod(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriod":
        return _openstudiomodelsimulation.OptionalRunPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriod_isNull(self)

    def get(self) -> "openstudio::model::RunPeriod":
        return _openstudiomodelsimulation.OptionalRunPeriod_get(self)

    def set(self, t: "RunPeriod") -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriod

# Register OptionalRunPeriod in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalRunPeriod_swigregister(OptionalRunPeriod)

class OptionalSimulationControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSimulationControl_swiginit(self, _openstudiomodelsimulation.new_OptionalSimulationControl(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSimulationControl_reset(self)

    def __ref__(self) -> "openstudio::model::SimulationControl":
        return _openstudiomodelsimulation.OptionalSimulationControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSimulationControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSimulationControl_isNull(self)

    def get(self) -> "openstudio::model::SimulationControl":
        return _openstudiomodelsimulation.OptionalSimulationControl_get(self)

    def set(self, t: "SimulationControl") -> "void":
        return _openstudiomodelsimulation.OptionalSimulationControl_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSimulationControl

# Register OptionalSimulationControl in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSimulationControl_swigregister(OptionalSimulationControl)

class OptionalLightingSimulationControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalLightingSimulationControl_swiginit(self, _openstudiomodelsimulation.new_OptionalLightingSimulationControl(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_reset(self)

    def __ref__(self) -> "openstudio::model::LightingSimulationControl":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_isNull(self)

    def get(self) -> "openstudio::model::LightingSimulationControl":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_get(self)

    def set(self, t: "LightingSimulationControl") -> "void":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalLightingSimulationControl

# Register OptionalLightingSimulationControl in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalLightingSimulationControl_swigregister(OptionalLightingSimulationControl)

class OptionalSizingParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSizingParameters_swiginit(self, _openstudiomodelsimulation.new_OptionalSizingParameters(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSizingParameters_reset(self)

    def __ref__(self) -> "openstudio::model::SizingParameters":
        return _openstudiomodelsimulation.OptionalSizingParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingParameters_isNull(self)

    def get(self) -> "openstudio::model::SizingParameters":
        return _openstudiomodelsimulation.OptionalSizingParameters_get(self)

    def set(self, t: "SizingParameters") -> "void":
        return _openstudiomodelsimulation.OptionalSizingParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSizingParameters

# Register OptionalSizingParameters in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSizingParameters_swigregister(OptionalSizingParameters)

class SizingPeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SizingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SizingPeriod >::difference_type", j: "std::vector< openstudio::model::SizingPeriod >::difference_type") -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > > *":
        return _openstudiomodelsimulation.SizingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SizingPeriod >::difference_type", j: "std::vector< openstudio::model::SizingPeriod >::difference_type") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type":
        return _openstudiomodelsimulation.SizingPeriodVector_pop(self)

    def append(self, x: "SizingPeriod") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector_size(self)

    def swap(self, v: "SizingPeriodVector") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SizingPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SizingPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SizingPeriod >::allocator_type":
        return _openstudiomodelsimulation.SizingPeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SizingPeriodVector_swiginit(self, _openstudiomodelsimulation.new_SizingPeriodVector(*args))

    def push_back(self, x: "SizingPeriod") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SizingPeriod >::size_type", x: "SizingPeriod") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SizingPeriod >::size_type", x: "SizingPeriod") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SizingPeriod >::size_type") -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingPeriodVector

# Register SizingPeriodVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SizingPeriodVector_swigregister(SizingPeriodVector)

class OptionalSizingPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSizingPeriod_swiginit(self, _openstudiomodelsimulation.new_OptionalSizingPeriod(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSizingPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::SizingPeriod":
        return _openstudiomodelsimulation.OptionalSizingPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingPeriod_isNull(self)

    def get(self) -> "openstudio::model::SizingPeriod":
        return _openstudiomodelsimulation.OptionalSizingPeriod_get(self)

    def set(self, t: "SizingPeriod") -> "void":
        return _openstudiomodelsimulation.OptionalSizingPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSizingPeriod

# Register OptionalSizingPeriod in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSizingPeriod_swigregister(OptionalSizingPeriod)

class OptionalWeatherFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalWeatherFile_swiginit(self, _openstudiomodelsimulation.new_OptionalWeatherFile(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFile_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFile":
        return _openstudiomodelsimulation.OptionalWeatherFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFile_isNull(self)

    def get(self) -> "openstudio::model::WeatherFile":
        return _openstudiomodelsimulation.OptionalWeatherFile_get(self)

    def set(self, t: "WeatherFile") -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFile_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFile

# Register OptionalWeatherFile in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalWeatherFile_swigregister(OptionalWeatherFile)

class WeatherFileConditionTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WeatherFileConditionType >::difference_type", j: "std::vector< openstudio::model::WeatherFileConditionType >::difference_type") -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > > *":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WeatherFileConditionType >::difference_type", j: "std::vector< openstudio::model::WeatherFileConditionType >::difference_type") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_pop(self)

    def append(self, x: "WeatherFileConditionType") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_size(self)

    def swap(self, v: "WeatherFileConditionTypeVector") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::allocator_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.WeatherFileConditionTypeVector_swiginit(self, _openstudiomodelsimulation.new_WeatherFileConditionTypeVector(*args))

    def push_back(self, x: "WeatherFileConditionType") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WeatherFileConditionType >::size_type", x: "WeatherFileConditionType") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WeatherFileConditionType >::size_type", x: "WeatherFileConditionType") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WeatherFileConditionType >::size_type") -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileConditionTypeVector

# Register WeatherFileConditionTypeVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.WeatherFileConditionTypeVector_swigregister(WeatherFileConditionTypeVector)

class OptionalWeatherFileConditionType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalWeatherFileConditionType_swiginit(self, _openstudiomodelsimulation.new_OptionalWeatherFileConditionType(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFileConditionType":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_isNull(self)

    def get(self) -> "openstudio::model::WeatherFileConditionType":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_get(self)

    def set(self, t: "WeatherFileConditionType") -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFileConditionType

# Register OptionalWeatherFileConditionType in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalWeatherFileConditionType_swigregister(OptionalWeatherFileConditionType)

class WeatherFileDaysVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.WeatherFileDaysVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::WeatherFileDays >::difference_type", j: "std::vector< openstudio::model::WeatherFileDays >::difference_type") -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > > *":
        return _openstudiomodelsimulation.WeatherFileDaysVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::WeatherFileDays >::difference_type", j: "std::vector< openstudio::model::WeatherFileDays >::difference_type") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_pop(self)

    def append(self, x: "WeatherFileDays") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_size(self)

    def swap(self, v: "WeatherFileDaysVector") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WeatherFileDays >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WeatherFileDays >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::WeatherFileDays >::allocator_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.WeatherFileDaysVector_swiginit(self, _openstudiomodelsimulation.new_WeatherFileDaysVector(*args))

    def push_back(self, x: "WeatherFileDays") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::WeatherFileDays >::size_type", x: "WeatherFileDays") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::WeatherFileDays >::size_type", x: "WeatherFileDays") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::WeatherFileDays >::size_type") -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileDaysVector

# Register WeatherFileDaysVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.WeatherFileDaysVector_swigregister(WeatherFileDaysVector)

class OptionalWeatherFileDays(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalWeatherFileDays_swiginit(self, _openstudiomodelsimulation.new_OptionalWeatherFileDays(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFileDays":
        return _openstudiomodelsimulation.OptionalWeatherFileDays___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_isNull(self)

    def get(self) -> "openstudio::model::WeatherFileDays":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_get(self)

    def set(self, t: "WeatherFileDays") -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFileDays

# Register OptionalWeatherFileDays in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalWeatherFileDays_swigregister(OptionalWeatherFileDays)

class OptionalClimateZones(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalClimateZones_swiginit(self, _openstudiomodelsimulation.new_OptionalClimateZones(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalClimateZones_reset(self)

    def __ref__(self) -> "openstudio::model::ClimateZones":
        return _openstudiomodelsimulation.OptionalClimateZones___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZones_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZones_isNull(self)

    def get(self) -> "openstudio::model::ClimateZones":
        return _openstudiomodelsimulation.OptionalClimateZones_get(self)

    def set(self, t: "ClimateZones") -> "void":
        return _openstudiomodelsimulation.OptionalClimateZones_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalClimateZones

# Register OptionalClimateZones in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalClimateZones_swigregister(OptionalClimateZones)

class ClimateZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.ClimateZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::ClimateZone >::difference_type", j: "std::vector< openstudio::model::ClimateZone >::difference_type") -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > > *":
        return _openstudiomodelsimulation.ClimateZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::ClimateZone >::difference_type", j: "std::vector< openstudio::model::ClimateZone >::difference_type") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::ClimateZone >::value_type":
        return _openstudiomodelsimulation.ClimateZoneVector_pop(self)

    def append(self, x: "ClimateZone") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector_size(self)

    def swap(self, v: "ClimateZoneVector") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ClimateZone >::reverse_iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ClimateZone >::reverse_iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::ClimateZone >::allocator_type":
        return _openstudiomodelsimulation.ClimateZoneVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.ClimateZoneVector_swiginit(self, _openstudiomodelsimulation.new_ClimateZoneVector(*args))

    def push_back(self, x: "ClimateZone") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::ClimateZone >::size_type", x: "ClimateZone") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::ClimateZone >::size_type", x: "ClimateZone") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::ClimateZone >::size_type") -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZoneVector

# Register ClimateZoneVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.ClimateZoneVector_swigregister(ClimateZoneVector)

class OptionalClimateZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalClimateZone_swiginit(self, _openstudiomodelsimulation.new_OptionalClimateZone(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalClimateZone_reset(self)

    def __ref__(self) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.OptionalClimateZone___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZone_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZone_isNull(self)

    def get(self) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.OptionalClimateZone_get(self)

    def set(self, t: "ClimateZone") -> "void":
        return _openstudiomodelsimulation.OptionalClimateZone_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalClimateZone

# Register OptionalClimateZone in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalClimateZone_swigregister(OptionalClimateZone)

class DesignDayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.DesignDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::DesignDay >::difference_type", j: "std::vector< openstudio::model::DesignDay >::difference_type") -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > > *":
        return _openstudiomodelsimulation.DesignDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::DesignDay >::difference_type", j: "std::vector< openstudio::model::DesignDay >::difference_type") -> "void":
        return _openstudiomodelsimulation.DesignDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::DesignDay >::value_type":
        return _openstudiomodelsimulation.DesignDayVector_pop(self)

    def append(self, x: "DesignDay") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector_size(self)

    def swap(self, v: "DesignDayVector") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.DesignDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.DesignDayVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::DesignDay >::allocator_type":
        return _openstudiomodelsimulation.DesignDayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.DesignDayVector_swiginit(self, _openstudiomodelsimulation.new_DesignDayVector(*args))

    def push_back(self, x: "DesignDay") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::DesignDay >::size_type", x: "DesignDay") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::DesignDay >::size_type", x: "DesignDay") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::DesignDay >::size_type") -> "void":
        return _openstudiomodelsimulation.DesignDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_DesignDayVector

# Register DesignDayVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.DesignDayVector_swigregister(DesignDayVector)

class OptionalDesignDay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalDesignDay_swiginit(self, _openstudiomodelsimulation.new_OptionalDesignDay(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalDesignDay_reset(self)

    def __ref__(self) -> "openstudio::model::DesignDay":
        return _openstudiomodelsimulation.OptionalDesignDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalDesignDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalDesignDay_isNull(self)

    def get(self) -> "openstudio::model::DesignDay":
        return _openstudiomodelsimulation.OptionalDesignDay_get(self)

    def set(self, t: "DesignDay") -> "void":
        return _openstudiomodelsimulation.OptionalDesignDay_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalDesignDay

# Register OptionalDesignDay in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalDesignDay_swigregister(OptionalDesignDay)

class LightingDesignDayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.LightingDesignDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::LightingDesignDay >::difference_type", j: "std::vector< openstudio::model::LightingDesignDay >::difference_type") -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > > *":
        return _openstudiomodelsimulation.LightingDesignDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::LightingDesignDay >::difference_type", j: "std::vector< openstudio::model::LightingDesignDay >::difference_type") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_pop(self)

    def append(self, x: "LightingDesignDay") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_size(self)

    def swap(self, v: "LightingDesignDayVector") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LightingDesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LightingDesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::LightingDesignDay >::allocator_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.LightingDesignDayVector_swiginit(self, _openstudiomodelsimulation.new_LightingDesignDayVector(*args))

    def push_back(self, x: "LightingDesignDay") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::LightingDesignDay >::size_type", x: "LightingDesignDay") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::LightingDesignDay >::size_type", x: "LightingDesignDay") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::LightingDesignDay >::size_type") -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingDesignDayVector

# Register LightingDesignDayVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.LightingDesignDayVector_swigregister(LightingDesignDayVector)

class OptionalLightingDesignDay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalLightingDesignDay_swiginit(self, _openstudiomodelsimulation.new_OptionalLightingDesignDay(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_reset(self)

    def __ref__(self) -> "openstudio::model::LightingDesignDay":
        return _openstudiomodelsimulation.OptionalLightingDesignDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_isNull(self)

    def get(self) -> "openstudio::model::LightingDesignDay":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_get(self)

    def set(self, t: "LightingDesignDay") -> "void":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalLightingDesignDay

# Register OptionalLightingDesignDay in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalLightingDesignDay_swigregister(OptionalLightingDesignDay)

class OptionalConvergenceLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalConvergenceLimits_swiginit(self, _openstudiomodelsimulation.new_OptionalConvergenceLimits(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_reset(self)

    def __ref__(self) -> "openstudio::model::ConvergenceLimits":
        return _openstudiomodelsimulation.OptionalConvergenceLimits___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_isNull(self)

    def get(self) -> "openstudio::model::ConvergenceLimits":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_get(self)

    def set(self, t: "ConvergenceLimits") -> "void":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalConvergenceLimits

# Register OptionalConvergenceLimits in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalConvergenceLimits_swigregister(OptionalConvergenceLimits)

class OptionalRunPeriodControlDaylightSavingTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_swiginit(self, _openstudiomodelsimulation.new_OptionalRunPeriodControlDaylightSavingTime(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriodControlDaylightSavingTime":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_isNull(self)

    def get(self) -> "openstudio::model::RunPeriodControlDaylightSavingTime":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_get(self)

    def set(self, t: "RunPeriodControlDaylightSavingTime") -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriodControlDaylightSavingTime

# Register OptionalRunPeriodControlDaylightSavingTime in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_swigregister(OptionalRunPeriodControlDaylightSavingTime)

class OptionalHeatBalanceAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_swiginit(self, _openstudiomodelsimulation.new_OptionalHeatBalanceAlgorithm(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::HeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::HeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_get(self)

    def set(self, t: "HeatBalanceAlgorithm") -> "void":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalHeatBalanceAlgorithm

# Register OptionalHeatBalanceAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_swigregister(OptionalHeatBalanceAlgorithm)

class OptionalInsideSurfaceConvectionAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_swiginit(self, _openstudiomodelsimulation.new_OptionalInsideSurfaceConvectionAlgorithm(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_get(self)

    def set(self, t: "InsideSurfaceConvectionAlgorithm") -> "void":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalInsideSurfaceConvectionAlgorithm

# Register OptionalInsideSurfaceConvectionAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_swigregister(OptionalInsideSurfaceConvectionAlgorithm)

class OptionalOutputControlFiles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputControlFiles_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputControlFiles(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlFiles_reset(self)

    def __ref__(self) -> "openstudio::model::OutputControlFiles":
        return _openstudiomodelsimulation.OptionalOutputControlFiles___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlFiles_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlFiles_isNull(self)

    def get(self) -> "openstudio::model::OutputControlFiles":
        return _openstudiomodelsimulation.OptionalOutputControlFiles_get(self)

    def set(self, t: "OutputControlFiles") -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlFiles_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputControlFiles

# Register OptionalOutputControlFiles in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputControlFiles_swigregister(OptionalOutputControlFiles)

class OptionalOutputControlReportingTolerances(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputControlReportingTolerances(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_reset(self)

    def __ref__(self) -> "openstudio::model::OutputControlReportingTolerances":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_isNull(self)

    def get(self) -> "openstudio::model::OutputControlReportingTolerances":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_get(self)

    def set(self, t: "OutputControlReportingTolerances") -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputControlReportingTolerances

# Register OptionalOutputControlReportingTolerances in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputControlReportingTolerances_swigregister(OptionalOutputControlReportingTolerances)

class OptionalOutputDebuggingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputDebuggingData_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputDebuggingData(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData_reset(self)

    def __ref__(self) -> "openstudio::model::OutputDebuggingData":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData_isNull(self)

    def get(self) -> "openstudio::model::OutputDebuggingData":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData_get(self)

    def set(self, t: "OutputDebuggingData") -> "void":
        return _openstudiomodelsimulation.OptionalOutputDebuggingData_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputDebuggingData

# Register OptionalOutputDebuggingData in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputDebuggingData_swigregister(OptionalOutputDebuggingData)

class OptionalOutputDiagnostics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputDiagnostics_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputDiagnostics(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics_reset(self)

    def __ref__(self) -> "openstudio::model::OutputDiagnostics":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics_isNull(self)

    def get(self) -> "openstudio::model::OutputDiagnostics":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics_get(self)

    def set(self, t: "OutputDiagnostics") -> "void":
        return _openstudiomodelsimulation.OptionalOutputDiagnostics_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputDiagnostics

# Register OptionalOutputDiagnostics in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputDiagnostics_swigregister(OptionalOutputDiagnostics)

class OptionalOutputJSON(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputJSON_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputJSON(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputJSON_reset(self)

    def __ref__(self) -> "openstudio::model::OutputJSON":
        return _openstudiomodelsimulation.OptionalOutputJSON___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputJSON_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputJSON_isNull(self)

    def get(self) -> "openstudio::model::OutputJSON":
        return _openstudiomodelsimulation.OptionalOutputJSON_get(self)

    def set(self, t: "OutputJSON") -> "void":
        return _openstudiomodelsimulation.OptionalOutputJSON_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputJSON

# Register OptionalOutputJSON in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputJSON_swigregister(OptionalOutputJSON)

class OptionalOutsideSurfaceConvectionAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_swiginit(self, _openstudiomodelsimulation.new_OptionalOutsideSurfaceConvectionAlgorithm(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_get(self)

    def set(self, t: "OutsideSurfaceConvectionAlgorithm") -> "void":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutsideSurfaceConvectionAlgorithm

# Register OptionalOutsideSurfaceConvectionAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_swigregister(OptionalOutsideSurfaceConvectionAlgorithm)

class SurfacePropertyConvectionCoefficientsMultipleSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type", j: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type") -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > > *":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type", j: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_pop(self)

    def append(self, x: "SurfacePropertyConvectionCoefficientsMultipleSurface") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_size(self)

    def swap(self, v: "SurfacePropertyConvectionCoefficientsMultipleSurfaceVector") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::allocator_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swiginit(self, _openstudiomodelsimulation.new_SurfacePropertyConvectionCoefficientsMultipleSurfaceVector(*args))

    def push_back(self, x: "SurfacePropertyConvectionCoefficientsMultipleSurface") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type", x: "SurfacePropertyConvectionCoefficientsMultipleSurface") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type", x: "SurfacePropertyConvectionCoefficientsMultipleSurface") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type") -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SurfacePropertyConvectionCoefficientsMultipleSurfaceVector

# Register SurfacePropertyConvectionCoefficientsMultipleSurfaceVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swigregister(SurfacePropertyConvectionCoefficientsMultipleSurfaceVector)

class OptionalSurfacePropertyConvectionCoefficientsMultipleSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_swiginit(self, _openstudiomodelsimulation.new_OptionalSurfacePropertyConvectionCoefficientsMultipleSurface(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_reset(self)

    def __ref__(self) -> "openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_isNull(self)

    def get(self) -> "openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_get(self)

    def set(self, t: "SurfacePropertyConvectionCoefficientsMultipleSurface") -> "void":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSurfacePropertyConvectionCoefficientsMultipleSurface

# Register OptionalSurfacePropertyConvectionCoefficientsMultipleSurface in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_swigregister(OptionalSurfacePropertyConvectionCoefficientsMultipleSurface)

class OptionalShadowCalculation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalShadowCalculation_swiginit(self, _openstudiomodelsimulation.new_OptionalShadowCalculation(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalShadowCalculation_reset(self)

    def __ref__(self) -> "openstudio::model::ShadowCalculation":
        return _openstudiomodelsimulation.OptionalShadowCalculation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalShadowCalculation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalShadowCalculation_isNull(self)

    def get(self) -> "openstudio::model::ShadowCalculation":
        return _openstudiomodelsimulation.OptionalShadowCalculation_get(self)

    def set(self, t: "ShadowCalculation") -> "void":
        return _openstudiomodelsimulation.OptionalShadowCalculation_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalShadowCalculation

# Register OptionalShadowCalculation in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalShadowCalculation_swigregister(OptionalShadowCalculation)

class RunPeriodControlSpecialDaysVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type", j: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type") -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > > *":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type", j: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_pop(self)

    def append(self, x: "RunPeriodControlSpecialDays") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_size(self)

    def swap(self, v: "RunPeriodControlSpecialDaysVector") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::allocator_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_swiginit(self, _openstudiomodelsimulation.new_RunPeriodControlSpecialDaysVector(*args))

    def push_back(self, x: "RunPeriodControlSpecialDays") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type", x: "RunPeriodControlSpecialDays") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type", x: "RunPeriodControlSpecialDays") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type") -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlSpecialDaysVector

# Register RunPeriodControlSpecialDaysVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_swigregister(RunPeriodControlSpecialDaysVector)

class OptionalRunPeriodControlSpecialDays(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_swiginit(self, _openstudiomodelsimulation.new_OptionalRunPeriodControlSpecialDays(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriodControlSpecialDays":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_isNull(self)

    def get(self) -> "openstudio::model::RunPeriodControlSpecialDays":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_get(self)

    def set(self, t: "RunPeriodControlSpecialDays") -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriodControlSpecialDays

# Register OptionalRunPeriodControlSpecialDays in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_swigregister(OptionalRunPeriodControlSpecialDays)

class OptionalTimestep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalTimestep_swiginit(self, _openstudiomodelsimulation.new_OptionalTimestep(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalTimestep_reset(self)

    def __ref__(self) -> "openstudio::model::Timestep":
        return _openstudiomodelsimulation.OptionalTimestep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalTimestep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalTimestep_isNull(self)

    def get(self) -> "openstudio::model::Timestep":
        return _openstudiomodelsimulation.OptionalTimestep_get(self)

    def set(self, t: "Timestep") -> "void":
        return _openstudiomodelsimulation.OptionalTimestep_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalTimestep

# Register OptionalTimestep in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalTimestep_swigregister(OptionalTimestep)

class OptionalZoneAirContaminantBalance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_swiginit(self, _openstudiomodelsimulation.new_OptionalZoneAirContaminantBalance(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirContaminantBalance":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirContaminantBalance":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_get(self)

    def set(self, t: "ZoneAirContaminantBalance") -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirContaminantBalance

# Register OptionalZoneAirContaminantBalance in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalZoneAirContaminantBalance_swigregister(OptionalZoneAirContaminantBalance)

class OptionalZoneAirHeatBalanceAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_swiginit(self, _openstudiomodelsimulation.new_OptionalZoneAirHeatBalanceAlgorithm(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_get(self)

    def set(self, t: "ZoneAirHeatBalanceAlgorithm") -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirHeatBalanceAlgorithm

# Register OptionalZoneAirHeatBalanceAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_swigregister(OptionalZoneAirHeatBalanceAlgorithm)

class OptionalZoneAirMassFlowConservation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_swiginit(self, _openstudiomodelsimulation.new_OptionalZoneAirMassFlowConservation(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirMassFlowConservation":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirMassFlowConservation":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_get(self)

    def set(self, t: "ZoneAirMassFlowConservation") -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirMassFlowConservation

# Register OptionalZoneAirMassFlowConservation in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_swigregister(OptionalZoneAirMassFlowConservation)

class OptionalZoneCapacitanceMultiplierResearchSpecial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_swiginit(self, _openstudiomodelsimulation.new_OptionalZoneCapacitanceMultiplierResearchSpecial(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_isNull(self)

    def get(self) -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_get(self)

    def set(self, t: "ZoneCapacitanceMultiplierResearchSpecial") -> "void":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneCapacitanceMultiplierResearchSpecial

# Register OptionalZoneCapacitanceMultiplierResearchSpecial in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_swigregister(OptionalZoneCapacitanceMultiplierResearchSpecial)

class SkyTemperatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SkyTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SkyTemperature >::difference_type", j: "std::vector< openstudio::model::SkyTemperature >::difference_type") -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > > *":
        return _openstudiomodelsimulation.SkyTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SkyTemperature >::difference_type", j: "std::vector< openstudio::model::SkyTemperature >::difference_type") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_pop(self)

    def append(self, x: "SkyTemperature") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_size(self)

    def swap(self, v: "SkyTemperatureVector") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SkyTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SkyTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SkyTemperature >::allocator_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SkyTemperatureVector_swiginit(self, _openstudiomodelsimulation.new_SkyTemperatureVector(*args))

    def push_back(self, x: "SkyTemperature") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SkyTemperature >::size_type", x: "SkyTemperature") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SkyTemperature >::size_type", x: "SkyTemperature") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SkyTemperature >::size_type") -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SkyTemperatureVector

# Register SkyTemperatureVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SkyTemperatureVector_swigregister(SkyTemperatureVector)

class OptionalSkyTemperature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSkyTemperature_swiginit(self, _openstudiomodelsimulation.new_OptionalSkyTemperature(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSkyTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SkyTemperature":
        return _openstudiomodelsimulation.OptionalSkyTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSkyTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSkyTemperature_isNull(self)

    def get(self) -> "openstudio::model::SkyTemperature":
        return _openstudiomodelsimulation.OptionalSkyTemperature_get(self)

    def set(self, t: "SkyTemperature") -> "void":
        return _openstudiomodelsimulation.OptionalSkyTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSkyTemperature

# Register OptionalSkyTemperature in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSkyTemperature_swigregister(OptionalSkyTemperature)

class SiteGroundReflectanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteGroundReflectance >::difference_type", j: "std::vector< openstudio::model::SiteGroundReflectance >::difference_type") -> "std::vector< openstudio::model::SiteGroundReflectance,std::allocator< openstudio::model::SiteGroundReflectance > > *":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteGroundReflectance >::difference_type", j: "std::vector< openstudio::model::SiteGroundReflectance >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_pop(self)

    def append(self, x: "SiteGroundReflectance") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_size(self)

    def swap(self, v: "SiteGroundReflectanceVector") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteGroundReflectanceVector_swiginit(self, _openstudiomodelsimulation.new_SiteGroundReflectanceVector(*args))

    def push_back(self, x: "SiteGroundReflectance") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteGroundReflectance >::size_type", x: "SiteGroundReflectance") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteGroundReflectance >::size_type", x: "SiteGroundReflectance") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteGroundReflectance >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundReflectanceVector

# Register SiteGroundReflectanceVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundReflectanceVector_swigregister(SiteGroundReflectanceVector)

class OptionalSiteGroundReflectance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteGroundReflectance_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteGroundReflectance(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundReflectance":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundReflectance":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_get(self)

    def set(self, t: "SiteGroundReflectance") -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundReflectance

# Register OptionalSiteGroundReflectance in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteGroundReflectance_swigregister(OptionalSiteGroundReflectance)

class SiteGroundTemperatureBuildingSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type") -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface,std::allocator< openstudio::model::SiteGroundTemperatureBuildingSurface > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_pop(self)

    def append(self, x: "SiteGroundTemperatureBuildingSurface") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_size(self)

    def swap(self, v: "SiteGroundTemperatureBuildingSurfaceVector") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureBuildingSurfaceVector(*args))

    def push_back(self, x: "SiteGroundTemperatureBuildingSurface") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type", x: "SiteGroundTemperatureBuildingSurface") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type", x: "SiteGroundTemperatureBuildingSurface") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureBuildingSurfaceVector

# Register SiteGroundTemperatureBuildingSurfaceVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_swigregister(SiteGroundTemperatureBuildingSurfaceVector)

class OptionalSiteGroundTemperatureBuildingSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureBuildingSurface(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_get(self)

    def set(self, t: "SiteGroundTemperatureBuildingSurface") -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureBuildingSurface

# Register OptionalSiteGroundTemperatureBuildingSurface in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_swigregister(OptionalSiteGroundTemperatureBuildingSurface)

class SiteGroundTemperatureDeepVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type") -> "std::vector< openstudio::model::SiteGroundTemperatureDeep,std::allocator< openstudio::model::SiteGroundTemperatureDeep > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_pop(self)

    def append(self, x: "SiteGroundTemperatureDeep") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_size(self)

    def swap(self, v: "SiteGroundTemperatureDeepVector") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureDeepVector(*args))

    def push_back(self, x: "SiteGroundTemperatureDeep") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type", x: "SiteGroundTemperatureDeep") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type", x: "SiteGroundTemperatureDeep") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureDeepVector

# Register SiteGroundTemperatureDeepVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureDeepVector_swigregister(SiteGroundTemperatureDeepVector)

class OptionalSiteGroundTemperatureDeep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureDeep(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureDeep":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureDeep":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_get(self)

    def set(self, t: "SiteGroundTemperatureDeep") -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureDeep

# Register OptionalSiteGroundTemperatureDeep in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_swigregister(OptionalSiteGroundTemperatureDeep)

class SiteGroundTemperatureShallowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type") -> "std::vector< openstudio::model::SiteGroundTemperatureShallow,std::allocator< openstudio::model::SiteGroundTemperatureShallow > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_pop(self)

    def append(self, x: "SiteGroundTemperatureShallow") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_size(self)

    def swap(self, v: "SiteGroundTemperatureShallowVector") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureShallowVector(*args))

    def push_back(self, x: "SiteGroundTemperatureShallow") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type", x: "SiteGroundTemperatureShallow") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type", x: "SiteGroundTemperatureShallow") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureShallowVector

# Register SiteGroundTemperatureShallowVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureShallowVector_swigregister(SiteGroundTemperatureShallowVector)

class OptionalSiteGroundTemperatureShallow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureShallow(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureShallow":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureShallow":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_get(self)

    def set(self, t: "SiteGroundTemperatureShallow") -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureShallow

# Register OptionalSiteGroundTemperatureShallow in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_swigregister(OptionalSiteGroundTemperatureShallow)

class SiteGroundTemperatureFCfactorMethodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type") -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod,std::allocator< openstudio::model::SiteGroundTemperatureFCfactorMethod > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type", j: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_pop(self)

    def append(self, x: "SiteGroundTemperatureFCfactorMethod") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_size(self)

    def swap(self, v: "SiteGroundTemperatureFCfactorMethodVector") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureFCfactorMethodVector(*args))

    def push_back(self, x: "SiteGroundTemperatureFCfactorMethod") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type", x: "SiteGroundTemperatureFCfactorMethod") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type", x: "SiteGroundTemperatureFCfactorMethod") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureFCfactorMethodVector

# Register SiteGroundTemperatureFCfactorMethodVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_swigregister(SiteGroundTemperatureFCfactorMethodVector)

class OptionalSiteGroundTemperatureFCfactorMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureFCfactorMethod(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_get(self)

    def set(self, t: "SiteGroundTemperatureFCfactorMethod") -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureFCfactorMethod

# Register OptionalSiteGroundTemperatureFCfactorMethod in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_swigregister(OptionalSiteGroundTemperatureFCfactorMethod)

class SiteWaterMainsTemperatureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type", j: "std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type") -> "std::vector< openstudio::model::SiteWaterMainsTemperature,std::allocator< openstudio::model::SiteWaterMainsTemperature > > *":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type", j: "std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_pop(self)

    def append(self, x: "SiteWaterMainsTemperature") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_size(self)

    def swap(self, v: "SiteWaterMainsTemperatureVector") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_rend(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::allocator_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_swiginit(self, _openstudiomodelsimulation.new_SiteWaterMainsTemperatureVector(*args))

    def push_back(self, x: "SiteWaterMainsTemperature") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_back(self)

    def assign(self, n: "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type", x: "SiteWaterMainsTemperature") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type", x: "SiteWaterMainsTemperature") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type") -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteWaterMainsTemperatureVector

# Register SiteWaterMainsTemperatureVector in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteWaterMainsTemperatureVector_swigregister(SiteWaterMainsTemperatureVector)

class OptionalSiteWaterMainsTemperature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_swiginit(self, _openstudiomodelsimulation.new_OptionalSiteWaterMainsTemperature(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SiteWaterMainsTemperature":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_isNull(self)

    def get(self) -> "openstudio::model::SiteWaterMainsTemperature":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_get(self)

    def set(self, t: "SiteWaterMainsTemperature") -> "void":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteWaterMainsTemperature

# Register OptionalSiteWaterMainsTemperature in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_swigregister(OptionalSiteWaterMainsTemperature)

class OptionalYearDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalYearDescription_swiginit(self, _openstudiomodelsimulation.new_OptionalYearDescription(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalYearDescription_reset(self)

    def __ref__(self) -> "openstudio::model::YearDescription":
        return _openstudiomodelsimulation.OptionalYearDescription___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalYearDescription_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalYearDescription_isNull(self)

    def get(self) -> "openstudio::model::YearDescription":
        return _openstudiomodelsimulation.OptionalYearDescription_get(self)

    def set(self, t: "YearDescription") -> "void":
        return _openstudiomodelsimulation.OptionalYearDescription_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalYearDescription

# Register OptionalYearDescription in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalYearDescription_swigregister(OptionalYearDescription)

class OptionalFoundationKivaSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalFoundationKivaSettings_swiginit(self, _openstudiomodelsimulation.new_OptionalFoundationKivaSettings(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_reset(self)

    def __ref__(self) -> "openstudio::model::FoundationKivaSettings":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_isNull(self)

    def get(self) -> "openstudio::model::FoundationKivaSettings":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_get(self)

    def set(self, t: "FoundationKivaSettings") -> "void":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalFoundationKivaSettings

# Register OptionalFoundationKivaSettings in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalFoundationKivaSettings_swigregister(OptionalFoundationKivaSettings)

class OptionalOutputTableSummaryReports(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalOutputTableSummaryReports_swiginit(self, _openstudiomodelsimulation.new_OptionalOutputTableSummaryReports(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports_reset(self)

    def __ref__(self) -> "openstudio::model::OutputTableSummaryReports":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports_isNull(self)

    def get(self) -> "openstudio::model::OutputTableSummaryReports":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports_get(self)

    def set(self, t: "OutputTableSummaryReports") -> "void":
        return _openstudiomodelsimulation.OptionalOutputTableSummaryReports_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputTableSummaryReports

# Register OptionalOutputTableSummaryReports in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalOutputTableSummaryReports_swigregister(OptionalOutputTableSummaryReports)

class OptionalPerformancePrecisionTradeoffs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_swiginit(self, _openstudiomodelsimulation.new_OptionalPerformancePrecisionTradeoffs(*args))

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_reset(self)

    def __ref__(self) -> "openstudio::model::PerformancePrecisionTradeoffs":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_isNull(self)

    def get(self) -> "openstudio::model::PerformancePrecisionTradeoffs":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_get(self)

    def set(self, t: "PerformancePrecisionTradeoffs") -> "void":
        return _openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalPerformancePrecisionTradeoffs

# Register OptionalPerformancePrecisionTradeoffs in _openstudiomodelsimulation:
_openstudiomodelsimulation.OptionalPerformancePrecisionTradeoffs_swigregister(OptionalPerformancePrecisionTradeoffs)

class RunPeriod(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriod

    def getBeginMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getBeginMonth(self)

    def getBeginDayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getBeginDayOfMonth(self)

    def getEndMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getEndMonth(self)

    def getEndDayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getEndDayOfMonth(self)

    def getUseWeatherFileHolidays(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileHolidays(self)

    def getUseWeatherFileDaylightSavings(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileDaylightSavings(self)

    def getApplyWeekendHolidayRule(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getApplyWeekendHolidayRule(self)

    def getUseWeatherFileRainInd(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileRainInd(self)

    def getUseWeatherFileSnowInd(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileSnowInd(self)

    def getNumTimePeriodRepeats(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getNumTimePeriodRepeats(self)

    def setBeginMonth(self, month: "int") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setBeginMonth(self, month)

    def setBeginDayOfMonth(self, day: "int") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setBeginDayOfMonth(self, day)

    def setEndMonth(self, month: "int") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setEndMonth(self, month)

    def setEndDayOfMonth(self, day: "int") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setEndDayOfMonth(self, day)

    def setUseWeatherFileHolidays(self, use: "bool") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileHolidays(self, use)

    def setUseWeatherFileDaylightSavings(self, use: "bool") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileDaylightSavings(self, use)

    def setApplyWeekendHolidayRule(self, apply: "bool") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setApplyWeekendHolidayRule(self, apply)

    def setUseWeatherFileRainInd(self, rainInd: "bool") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileRainInd(self, rainInd)

    def setUseWeatherFileSnowInd(self, snowInd: "bool") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileSnowInd(self, snowInd)

    def setNumTimePeriodRepeats(self, numRepeats: "int") -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setNumTimePeriodRepeats(self, numRepeats)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriod_ensureNoLeapDays(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.RunPeriod_iddObjectType()

    def isAnnual(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isAnnual(self)

    def isPartialYear(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isPartialYear(self)

    def isRepeated(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isRepeated(self)

# Register RunPeriod in _openstudiomodelsimulation:
_openstudiomodelsimulation.RunPeriod_swigregister(RunPeriod)

def RunPeriod_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriod_iddObjectType()


def toRunPeriod(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RunPeriod >":
    return _openstudiomodelsimulation.toRunPeriod(idfObject)

def getRunPeriod(t_model: "Model") -> "openstudio::model::RunPeriod":
    return _openstudiomodelsimulation.getRunPeriod(t_model)

def getOptionalRunPeriod(t_model: "Model") -> "boost::optional< openstudio::model::RunPeriod >":
    return _openstudiomodelsimulation.getOptionalRunPeriod(t_model)

def _to_RunPeriod(self) -> OptionalRunPeriod:
    return toRunPeriod(self)
openstudioutilitiesidf.IdfObject.to_RunPeriod = _to_RunPeriod

def _getRunPeriod(self) -> RunPeriod:
    return getRunPeriod(self)
Model.getRunPeriod = _getRunPeriod

def _getOptionalRunPeriod(self) -> OptionalRunPeriod:
    return getOptionalRunPeriod(self)
Model.getOptionalRunPeriod = _getOptionalRunPeriod

class SimulationControl(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SimulationControl

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SimulationControl_iddObjectType()

    @staticmethod
    def validSolarDistributionValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_validSolarDistributionValues()

    def doZoneSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doZoneSizingCalculation(self)

    def isDoZoneSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoZoneSizingCalculationDefaulted(self)

    def doSystemSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doSystemSizingCalculation(self)

    def isDoSystemSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoSystemSizingCalculationDefaulted(self)

    def doPlantSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doPlantSizingCalculation(self)

    def isDoPlantSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoPlantSizingCalculationDefaulted(self)

    def runSimulationforSizingPeriods(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_runSimulationforSizingPeriods(self)

    def isRunSimulationforSizingPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isRunSimulationforSizingPeriodsDefaulted(self)

    def runSimulationforWeatherFileRunPeriods(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_runSimulationforWeatherFileRunPeriods(self)

    def isRunSimulationforWeatherFileRunPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isRunSimulationforWeatherFileRunPeriodsDefaulted(self)

    def loadsConvergenceToleranceValue(self) -> "double":
        return _openstudiomodelsimulation.SimulationControl_loadsConvergenceToleranceValue(self)

    def isLoadsConvergenceToleranceValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isLoadsConvergenceToleranceValueDefaulted(self)

    def temperatureConvergenceToleranceValue(self) -> "double":
        return _openstudiomodelsimulation.SimulationControl_temperatureConvergenceToleranceValue(self)

    def isTemperatureConvergenceToleranceValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isTemperatureConvergenceToleranceValueDefaulted(self)

    def solarDistribution(self) -> "std::string":
        return _openstudiomodelsimulation.SimulationControl_solarDistribution(self)

    def isSolarDistributionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isSolarDistributionDefaulted(self)

    def maximumNumberofWarmupDays(self) -> "int":
        return _openstudiomodelsimulation.SimulationControl_maximumNumberofWarmupDays(self)

    def isMaximumNumberofWarmupDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isMaximumNumberofWarmupDaysDefaulted(self)

    def minimumNumberofWarmupDays(self) -> "int":
        return _openstudiomodelsimulation.SimulationControl_minimumNumberofWarmupDays(self)

    def isMinimumNumberofWarmupDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isMinimumNumberofWarmupDaysDefaulted(self)

    def doHVACSizingSimulationforSizingPeriods(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doHVACSizingSimulationforSizingPeriods(self)

    def isDoHVACSizingSimulationforSizingPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoHVACSizingSimulationforSizingPeriodsDefaulted(self)

    def maximumNumberofHVACSizingSimulationPasses(self) -> "int":
        return _openstudiomodelsimulation.SimulationControl_maximumNumberofHVACSizingSimulationPasses(self)

    def isMaximumNumberofHVACSizingSimulationPassesDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isMaximumNumberofHVACSizingSimulationPassesDefaulted(self)

    def setDoZoneSizingCalculation(self, doZoneSizingCalculation: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoZoneSizingCalculation(self, doZoneSizingCalculation)

    def setDoZoneSizingCalculationNoFail(self, doZoneSizingCalculation: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoZoneSizingCalculationNoFail(self, doZoneSizingCalculation)

    def resetDoZoneSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoZoneSizingCalculation(self)

    def setDoSystemSizingCalculation(self, doSystemSizingCalculation: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoSystemSizingCalculation(self, doSystemSizingCalculation)

    def setDoSystemSizingCalculationNoFail(self, doSystemSizingCalculation: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoSystemSizingCalculationNoFail(self, doSystemSizingCalculation)

    def resetDoSystemSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoSystemSizingCalculation(self)

    def setDoPlantSizingCalculation(self, doPlantSizingCalculation: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoPlantSizingCalculation(self, doPlantSizingCalculation)

    def setDoPlantSizingCalculationNoFail(self, doPlantSizingCalculation: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoPlantSizingCalculationNoFail(self, doPlantSizingCalculation)

    def resetDoPlantSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoPlantSizingCalculation(self)

    def setRunSimulationforSizingPeriods(self, runSimulationforSizingPeriods: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforSizingPeriods(self, runSimulationforSizingPeriods)

    def setRunSimulationforSizingPeriodsNoFail(self, runSimulationforSizingPeriods: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforSizingPeriodsNoFail(self, runSimulationforSizingPeriods)

    def resetRunSimulationforSizingPeriods(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetRunSimulationforSizingPeriods(self)

    def setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods)

    def setRunSimulationforWeatherFileRunPeriodsNoFail(self, runSimulationforWeatherFileRunPeriods: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforWeatherFileRunPeriodsNoFail(self, runSimulationforWeatherFileRunPeriods)

    def resetRunSimulationforWeatherFileRunPeriods(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetRunSimulationforWeatherFileRunPeriods(self)

    def setLoadsConvergenceToleranceValue(self, loadsConvergenceToleranceValue: "double") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setLoadsConvergenceToleranceValue(self, loadsConvergenceToleranceValue)

    def resetLoadsConvergenceToleranceValue(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetLoadsConvergenceToleranceValue(self)

    def setTemperatureConvergenceToleranceValue(self, temperatureConvergenceToleranceValue: "double") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setTemperatureConvergenceToleranceValue(self, temperatureConvergenceToleranceValue)

    def resetTemperatureConvergenceToleranceValue(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetTemperatureConvergenceToleranceValue(self)

    def setSolarDistribution(self, solarDistribution: "std::string") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setSolarDistribution(self, solarDistribution)

    def resetSolarDistribution(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetSolarDistribution(self)

    def setMaximumNumberofWarmupDays(self, maximumNumberofWarmupDays: "int") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setMaximumNumberofWarmupDays(self, maximumNumberofWarmupDays)

    def resetMaximumNumberofWarmupDays(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetMaximumNumberofWarmupDays(self)

    def setMinimumNumberofWarmupDays(self, minimumNumberofWarmupDays: "int") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setMinimumNumberofWarmupDays(self, minimumNumberofWarmupDays)

    def resetMinimumNumberofWarmupDays(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetMinimumNumberofWarmupDays(self)

    def setDoHVACSizingSimulationforSizingPeriods(self, doHVACSizingSimulationforSizingPeriods: "bool") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoHVACSizingSimulationforSizingPeriods(self, doHVACSizingSimulationforSizingPeriods)

    def setDoHVACSizingSimulationforSizingPeriodsNoFail(self, doHVACSizingSimulationforSizingPeriods: "bool") -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoHVACSizingSimulationforSizingPeriodsNoFail(self, doHVACSizingSimulationforSizingPeriods)

    def resetDoHVACSizingSimulationforSizingPeriods(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoHVACSizingSimulationforSizingPeriods(self)

    def setMaximumNumberofHVACSizingSimulationPasses(self, maximumNumberofHVACSizingSimulationPasses: "int") -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setMaximumNumberofHVACSizingSimulationPasses(self, maximumNumberofHVACSizingSimulationPasses)

    def resetMaximumNumberofHVACSizingSimulationPasses(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetMaximumNumberofHVACSizingSimulationPasses(self)

    def convergenceLimits(self) -> "boost::optional< openstudio::model::ConvergenceLimits >":
        return _openstudiomodelsimulation.SimulationControl_convergenceLimits(self)

    def heatBalanceAlgorithm(self) -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_heatBalanceAlgorithm(self)

    def insideSurfaceConvectionAlgorithm(self) -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_insideSurfaceConvectionAlgorithm(self)

    def outsideSurfaceConvectionAlgorithm(self) -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_outsideSurfaceConvectionAlgorithm(self)

    def runPeriods(self) -> "std::vector< openstudio::model::RunPeriod,std::allocator< openstudio::model::RunPeriod > >":
        return _openstudiomodelsimulation.SimulationControl_runPeriods(self)

    def shadowCalculation(self) -> "boost::optional< openstudio::model::ShadowCalculation >":
        return _openstudiomodelsimulation.SimulationControl_shadowCalculation(self)

    def sizingParameters(self) -> "boost::optional< openstudio::model::SizingParameters >":
        return _openstudiomodelsimulation.SimulationControl_sizingParameters(self)

    def timestep(self) -> "boost::optional< openstudio::model::Timestep >":
        return _openstudiomodelsimulation.SimulationControl_timestep(self)

    def zoneAirContaminantBalance(self) -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirContaminantBalance(self)

    def zoneAirHeatBalanceAlgorithm(self) -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirHeatBalanceAlgorithm(self)

    def zoneAirMassFlowConservation(self) -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirMassFlowConservation(self)

    def zoneCapacitanceMultiplierResearchSpecial(self) -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
        return _openstudiomodelsimulation.SimulationControl_zoneCapacitanceMultiplierResearchSpecial(self)

    def sizingEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_sizingEnvironmentPeriods(self)

    def annualSimulationEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_annualSimulationEnvironmentPeriods(self)

    def partialYearEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_partialYearEnvironmentPeriods(self)

    def repeatedIntervalEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_repeatedIntervalEnvironmentPeriods(self)

# Register SimulationControl in _openstudiomodelsimulation:
_openstudiomodelsimulation.SimulationControl_swigregister(SimulationControl)

def SimulationControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SimulationControl_iddObjectType()

def SimulationControl_validSolarDistributionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SimulationControl_validSolarDistributionValues()


def toSimulationControl(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SimulationControl >":
    return _openstudiomodelsimulation.toSimulationControl(idfObject)

def getSimulationControl(t_model: "Model") -> "openstudio::model::SimulationControl":
    return _openstudiomodelsimulation.getSimulationControl(t_model)

def getOptionalSimulationControl(t_model: "Model") -> "boost::optional< openstudio::model::SimulationControl >":
    return _openstudiomodelsimulation.getOptionalSimulationControl(t_model)

def _to_SimulationControl(self) -> OptionalSimulationControl:
    return toSimulationControl(self)
openstudioutilitiesidf.IdfObject.to_SimulationControl = _to_SimulationControl

def _getSimulationControl(self) -> SimulationControl:
    return getSimulationControl(self)
Model.getSimulationControl = _getSimulationControl

def _getOptionalSimulationControl(self) -> OptionalSimulationControl:
    return getOptionalSimulationControl(self)
Model.getOptionalSimulationControl = _getOptionalSimulationControl

class LightingSimulationControl(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingSimulationControl

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.LightingSimulationControl_iddObjectType()

    def runSimulationforDesignDays(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_runSimulationforDesignDays(self)

    def isRunSimulationforDesignDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_isRunSimulationforDesignDaysDefaulted(self)

    def runSimulationforWeatherFileRunPeriods(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_runSimulationforWeatherFileRunPeriods(self)

    def isRunSimulationforWeatherFileRunPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_isRunSimulationforWeatherFileRunPeriodsDefaulted(self)

    def setRunSimulationforDesignDays(self, runSimulationforDesignDays: "bool") -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_setRunSimulationforDesignDays(self, runSimulationforDesignDays)

    def resetRunSimulationforDesignDays(self) -> "void":
        return _openstudiomodelsimulation.LightingSimulationControl_resetRunSimulationforDesignDays(self)

    def setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods: "bool") -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods)

    def resetRunSimulationforWeatherFileRunPeriods(self) -> "void":
        return _openstudiomodelsimulation.LightingSimulationControl_resetRunSimulationforWeatherFileRunPeriods(self)

# Register LightingSimulationControl in _openstudiomodelsimulation:
_openstudiomodelsimulation.LightingSimulationControl_swigregister(LightingSimulationControl)

def LightingSimulationControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.LightingSimulationControl_iddObjectType()


def toLightingSimulationControl(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LightingSimulationControl >":
    return _openstudiomodelsimulation.toLightingSimulationControl(idfObject)

def getLightingSimulationControl(t_model: "Model") -> "openstudio::model::LightingSimulationControl":
    return _openstudiomodelsimulation.getLightingSimulationControl(t_model)

def getOptionalLightingSimulationControl(t_model: "Model") -> "boost::optional< openstudio::model::LightingSimulationControl >":
    return _openstudiomodelsimulation.getOptionalLightingSimulationControl(t_model)

def _to_LightingSimulationControl(self) -> OptionalLightingSimulationControl:
    return toLightingSimulationControl(self)
openstudioutilitiesidf.IdfObject.to_LightingSimulationControl = _to_LightingSimulationControl

def _getLightingSimulationControl(self) -> LightingSimulationControl:
    return getLightingSimulationControl(self)
Model.getLightingSimulationControl = _getLightingSimulationControl

def _getOptionalLightingSimulationControl(self) -> OptionalLightingSimulationControl:
    return getOptionalLightingSimulationControl(self)
Model.getOptionalLightingSimulationControl = _getOptionalLightingSimulationControl

class SizingParameters(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingParameters

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SizingParameters_iddObjectType()

    def heatingSizingFactor(self) -> "double":
        return _openstudiomodelsimulation.SizingParameters_heatingSizingFactor(self)

    def isHeatingSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_isHeatingSizingFactorDefaulted(self)

    def coolingSizingFactor(self) -> "double":
        return _openstudiomodelsimulation.SizingParameters_coolingSizingFactor(self)

    def isCoolingSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_isCoolingSizingFactorDefaulted(self)

    def timestepsinAveragingWindow(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.SizingParameters_timestepsinAveragingWindow(self)

    def setHeatingSizingFactor(self, heatingSizingFactor: "double") -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setHeatingSizingFactor(self, heatingSizingFactor)

    def resetHeatingSizingFactor(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetHeatingSizingFactor(self)

    def setCoolingSizingFactor(self, coolingSizingFactor: "double") -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setCoolingSizingFactor(self, coolingSizingFactor)

    def resetCoolingSizingFactor(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetCoolingSizingFactor(self)

    def setTimestepsinAveragingWindow(self, timestepsinAveragingWindow: "int") -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setTimestepsinAveragingWindow(self, timestepsinAveragingWindow)

    def resetTimestepsinAveragingWindow(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetTimestepsinAveragingWindow(self)

# Register SizingParameters in _openstudiomodelsimulation:
_openstudiomodelsimulation.SizingParameters_swigregister(SizingParameters)

def SizingParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SizingParameters_iddObjectType()


def toSizingParameters(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SizingParameters >":
    return _openstudiomodelsimulation.toSizingParameters(idfObject)

def getSizingParameters(t_model: "Model") -> "openstudio::model::SizingParameters":
    return _openstudiomodelsimulation.getSizingParameters(t_model)

def getOptionalSizingParameters(t_model: "Model") -> "boost::optional< openstudio::model::SizingParameters >":
    return _openstudiomodelsimulation.getOptionalSizingParameters(t_model)

def _to_SizingParameters(self) -> OptionalSizingParameters:
    return toSizingParameters(self)
openstudioutilitiesidf.IdfObject.to_SizingParameters = _to_SizingParameters

def _getSizingParameters(self) -> SizingParameters:
    return getSizingParameters(self)
Model.getSizingParameters = _getSizingParameters

def _getOptionalSizingParameters(self) -> OptionalSizingParameters:
    return getOptionalSizingParameters(self)
Model.getOptionalSizingParameters = _getOptionalSizingParameters

class SizingPeriod(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingPeriod

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriod_ensureNoLeapDays(self)

# Register SizingPeriod in _openstudiomodelsimulation:
_openstudiomodelsimulation.SizingPeriod_swigregister(SizingPeriod)


def toSizingPeriod(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.toSizingPeriod(idfObject)

def getSizingPeriod(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.getSizingPeriod(t_model, t_handle)

def getSizingPeriods(t_model: "Model") -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > >":
    return _openstudiomodelsimulation.getSizingPeriods(t_model)

def getSizingPeriodByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.getSizingPeriodByName(t_model, t_name)

def getSizingPeriodsByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > >":
    return _openstudiomodelsimulation.getSizingPeriodsByName(t_model, t_name, t_exactMatch)

def _to_SizingPeriod(self) -> OptionalSizingPeriod:
    return toSizingPeriod(self)
openstudioutilitiesidf.IdfObject.to_SizingPeriod = _to_SizingPeriod

def _getSizingPeriod(self, t_handle: "UUID") -> OptionalSizingPeriod:
    return getSizingPeriod(self, t_handle)
Model.getSizingPeriod = _getSizingPeriod

def _getSizingPeriod(self, t_handle_str: str) -> OptionalSizingPeriod:
    return getSizingPeriod(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSizingPeriod = _getSizingPeriod

def _getSizingPeriods(self) -> SizingPeriodVector:
    return getSizingPeriods(self)
Model.getSizingPeriods = _getSizingPeriods

def _getSizingPeriodByName(self, t_name: str) -> OptionalSizingPeriod:
    return getSizingPeriodByName(self, t_name)
Model.getSizingPeriodByName = _getSizingPeriodByName

def _getSizingPeriodsByName(self, t_name: str, t_exactMatch: bool) -> SizingPeriodVector:
    return getSizingPeriodsByName(self, t_name, t_exactMatch)
Model.getSizingPeriodsByName = _getSizingPeriodsByName

class WeatherFile(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFile

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.WeatherFile_iddObjectType()

    @staticmethod
    def setWeatherFile(model: "Model", epwFile: "EpwFile") -> "boost::optional< openstudio::model::WeatherFile >":
        return _openstudiomodelsimulation.WeatherFile_setWeatherFile(model, epwFile)

    def city(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_city(self)

    def stateProvinceRegion(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_stateProvinceRegion(self)

    def country(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_country(self)

    def dataSource(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_dataSource(self)

    def wMONumber(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_wMONumber(self)

    def latitude(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_latitude(self)

    def longitude(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_longitude(self)

    def timeZone(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_timeZone(self)

    def elevation(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_elevation(self)

    def isElevationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFile_isElevationDefaulted(self)

    def url(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_url(self)

    def path(self) -> "boost::optional< openstudio::path >":
        return _openstudiomodelsimulation.WeatherFile_path(self)

    def checksum(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_checksum(self)

    def setCity(self, city: "std::string") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setCity(self, city)

    def setStateProvinceRegion(self, stateProvinceRegion: "std::string") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setStateProvinceRegion(self, stateProvinceRegion)

    def setCountry(self, country: "std::string") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setCountry(self, country)

    def setDataSource(self, dataSource: "std::string") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setDataSource(self, dataSource)

    def setWMONumber(self, wMONumber: "std::string") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setWMONumber(self, wMONumber)

    def setLatitude(self, latitude: "double") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setLatitude(self, latitude)

    def setLongitude(self, longitude: "double") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setLongitude(self, longitude)

    def setTimeZone(self, timeZone: "double") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setTimeZone(self, timeZone)

    def setElevation(self, elevation: "double") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setElevation(self, elevation)

    def resetElevation(self) -> "void":
        return _openstudiomodelsimulation.WeatherFile_resetElevation(self)

    def site(self) -> "boost::optional< openstudio::model::Site >":
        return _openstudiomodelsimulation.WeatherFile_site(self)

    def file(self, *args) -> "boost::optional< openstudio::EpwFile >":
        return _openstudiomodelsimulation.WeatherFile_file(self, *args)

    def makeUrlRelative(self, *args) -> "bool":
        return _openstudiomodelsimulation.WeatherFile_makeUrlRelative(self, *args)

    def makeUrlAbsolute(self, searchDirectory: "path") -> "bool":
        return _openstudiomodelsimulation.WeatherFile_makeUrlAbsolute(self, searchDirectory)

    def environmentName(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_environmentName(self)

# Register WeatherFile in _openstudiomodelsimulation:
_openstudiomodelsimulation.WeatherFile_swigregister(WeatherFile)

def WeatherFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFile_iddObjectType()

def WeatherFile_setWeatherFile(model: "Model", epwFile: "EpwFile") -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.WeatherFile_setWeatherFile(model, epwFile)


def toWeatherFile(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.toWeatherFile(idfObject)

def getWeatherFile(t_model: "Model") -> "openstudio::model::WeatherFile":
    return _openstudiomodelsimulation.getWeatherFile(t_model)

def getOptionalWeatherFile(t_model: "Model") -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.getOptionalWeatherFile(t_model)

def _to_WeatherFile(self) -> OptionalWeatherFile:
    return toWeatherFile(self)
openstudioutilitiesidf.IdfObject.to_WeatherFile = _to_WeatherFile

def _getWeatherFile(self) -> WeatherFile:
    return getWeatherFile(self)
Model.getWeatherFile = _getWeatherFile

def _getOptionalWeatherFile(self) -> OptionalWeatherFile:
    return getOptionalWeatherFile(self)
Model.getOptionalWeatherFile = _getOptionalWeatherFile

class WeatherFileConditionType(SizingPeriod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.WeatherFileConditionType_swiginit(self, _openstudiomodelsimulation.new_WeatherFileConditionType(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileConditionType

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.WeatherFileConditionType_iddObjectType()

# Register WeatherFileConditionType in _openstudiomodelsimulation:
_openstudiomodelsimulation.WeatherFileConditionType_swigregister(WeatherFileConditionType)

def WeatherFileConditionType_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFileConditionType_iddObjectType()


def toWeatherFileConditionType(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.toWeatherFileConditionType(idfObject)

def getWeatherFileConditionType(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.getWeatherFileConditionType(t_model, t_handle)

def getWeatherFileConditionTypes(t_model: "Model") -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypes(t_model)

def getWeatherFileConditionTypeByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypeByName(t_model, t_name)

def getWeatherFileConditionTypesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypesByName(t_model, t_name, t_exactMatch)

def _to_WeatherFileConditionType(self) -> OptionalWeatherFileConditionType:
    return toWeatherFileConditionType(self)
openstudioutilitiesidf.IdfObject.to_WeatherFileConditionType = _to_WeatherFileConditionType

def _getWeatherFileConditionType(self, t_handle: "UUID") -> OptionalWeatherFileConditionType:
    return getWeatherFileConditionType(self, t_handle)
Model.getWeatherFileConditionType = _getWeatherFileConditionType

def _getWeatherFileConditionType(self, t_handle_str: str) -> OptionalWeatherFileConditionType:
    return getWeatherFileConditionType(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWeatherFileConditionType = _getWeatherFileConditionType

def _getWeatherFileConditionTypes(self) -> WeatherFileConditionTypeVector:
    return getWeatherFileConditionTypes(self)
Model.getWeatherFileConditionTypes = _getWeatherFileConditionTypes

def _getWeatherFileConditionTypeByName(self, t_name: str) -> OptionalWeatherFileConditionType:
    return getWeatherFileConditionTypeByName(self, t_name)
Model.getWeatherFileConditionTypeByName = _getWeatherFileConditionTypeByName

def _getWeatherFileConditionTypesByName(self, t_name: str, t_exactMatch: bool) -> WeatherFileConditionTypeVector:
    return getWeatherFileConditionTypesByName(self, t_name, t_exactMatch)
Model.getWeatherFileConditionTypesByName = _getWeatherFileConditionTypesByName

class WeatherFileDays(SizingPeriod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.WeatherFileDays_swiginit(self, _openstudiomodelsimulation.new_WeatherFileDays(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileDays

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.WeatherFileDays_iddObjectType()

# Register WeatherFileDays in _openstudiomodelsimulation:
_openstudiomodelsimulation.WeatherFileDays_swigregister(WeatherFileDays)

def WeatherFileDays_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFileDays_iddObjectType()


def toWeatherFileDays(idfObject: "IdfObject") -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.toWeatherFileDays(idfObject)

def getWeatherFileDays(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.getWeatherFileDays(t_model, t_handle)

def getWeatherFileDayss(t_model: "Model") -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > >":
    return _openstudiomodelsimulation.getWeatherFileDayss(t_model)

def getWeatherFileDaysByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.getWeatherFileDaysByName(t_model, t_name)

def getWeatherFileDayssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > >":
    return _openstudiomodelsimulation.getWeatherFileDayssByName(t_model, t_name, t_exactMatch)

def _to_WeatherFileDays(self) -> OptionalWeatherFileDays:
    return toWeatherFileDays(self)
openstudioutilitiesidf.IdfObject.to_WeatherFileDays = _to_WeatherFileDays

def _getWeatherFileDays(self, t_handle: "UUID") -> OptionalWeatherFileDays:
    return getWeatherFileDays(self, t_handle)
Model.getWeatherFileDays = _getWeatherFileDays

def _getWeatherFileDays(self, t_handle_str: str) -> OptionalWeatherFileDays:
    return getWeatherFileDays(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getWeatherFileDays = _getWeatherFileDays

def _getWeatherFileDayss(self) -> WeatherFileDaysVector:
    return getWeatherFileDayss(self)
Model.getWeatherFileDayss = _getWeatherFileDayss

def _getWeatherFileDaysByName(self, t_name: str) -> OptionalWeatherFileDays:
    return getWeatherFileDaysByName(self, t_name)
Model.getWeatherFileDaysByName = _getWeatherFileDaysByName

def _getWeatherFileDayssByName(self, t_name: str, t_exactMatch: bool) -> WeatherFileDaysVector:
    return getWeatherFileDayssByName(self, t_name, t_exactMatch)
Model.getWeatherFileDayssByName = _getWeatherFileDayssByName

class ClimateZone(openstudiomodelcore.ModelExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def institution(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_institution(self)

    def documentName(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_documentName(self)

    def year(self) -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZone_year(self)

    def value(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_value(self)

    def setValue(self, value: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setValue(self, value)

    def setType(self, institution: "std::string const &", documentName: "std::string const &", year: "unsigned int") -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setType(self, institution, documentName, year)

    def setTypeAndValue(self, institution: "std::string const &", documentName: "std::string const &", year: "unsigned int", value: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setTypeAndValue(self, institution, documentName, year, value)
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZone

# Register ClimateZone in _openstudiomodelsimulation:
_openstudiomodelsimulation.ClimateZone_swigregister(ClimateZone)

class ClimateZones(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZones

    @staticmethod
    def ashraeInstitutionName() -> "std::string":
        return _openstudiomodelsimulation.ClimateZones_ashraeInstitutionName()

    @staticmethod
    def ashraeDocumentName() -> "std::string":
        return _openstudiomodelsimulation.ClimateZones_ashraeDocumentName()

    @staticmethod
    def ashraeDefaultYear() -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZones_ashraeDefaultYear()

    @staticmethod
    def cecInstitutionName() -> "std::string":
        return _openstudiomodelsimulation.ClimateZones_cecInstitutionName()

    @staticmethod
    def cecDocumentName() -> "std::string":
        return _openstudiomodelsimulation.ClimateZones_cecDocumentName()

    @staticmethod
    def cecDefaultYear() -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZones_cecDefaultYear()

    @staticmethod
    def getDefaultDocumentName(institution: "std::string const &") -> "std::string":
        return _openstudiomodelsimulation.ClimateZones_getDefaultDocumentName(institution)

    @staticmethod
    def getDefaultYear(institution: "std::string const &") -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZones_getDefaultYear(institution)

    @staticmethod
    def validClimateZoneValues(institution: "std::string const &", year: "unsigned int") -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ClimateZones_validClimateZoneValues(institution, year)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ClimateZones_iddObjectType()

    def site(self) -> "boost::optional< openstudio::model::Site >":
        return _openstudiomodelsimulation.ClimateZones_site(self)

    def climateZones(self) -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > >":
        return _openstudiomodelsimulation.ClimateZones_climateZones(self)

    def getClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_getClimateZone(self, *args)

    def getClimateZones(self, institution: "std::string const &") -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > >":
        return _openstudiomodelsimulation.ClimateZones_getClimateZones(self, institution)

    def clear(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZones_clear(self)

    def setClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_setClimateZone(self, *args)

    def appendClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_appendClimateZone(self, *args)

    def numClimateZones(self) -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZones_numClimateZones(self)

# Register ClimateZones in _openstudiomodelsimulation:
_openstudiomodelsimulation.ClimateZones_swigregister(ClimateZones)

def ClimateZones_ashraeInstitutionName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_ashraeInstitutionName()

def ClimateZones_ashraeDocumentName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_ashraeDocumentName()

def ClimateZones_ashraeDefaultYear() -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_ashraeDefaultYear()

def ClimateZones_cecInstitutionName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_cecInstitutionName()

def ClimateZones_cecDocumentName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_cecDocumentName()

def ClimateZones_cecDefaultYear() -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_cecDefaultYear()

def ClimateZones_getDefaultDocumentName(institution: "std::string const &") -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_getDefaultDocumentName(institution)

def ClimateZones_getDefaultYear(institution: "std::string const &") -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_getDefaultYear(institution)

def ClimateZones_validClimateZoneValues(institution: "std::string const &", year: "unsigned int") -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ClimateZones_validClimateZoneValues(institution, year)

def ClimateZones_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ClimateZones_iddObjectType()


def toClimateZones(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ClimateZones >":
    return _openstudiomodelsimulation.toClimateZones(idfObject)

def getClimateZones(t_model: "Model") -> "openstudio::model::ClimateZones":
    return _openstudiomodelsimulation.getClimateZones(t_model)

def getOptionalClimateZones(t_model: "Model") -> "boost::optional< openstudio::model::ClimateZones >":
    return _openstudiomodelsimulation.getOptionalClimateZones(t_model)

def _to_ClimateZones(self) -> OptionalClimateZones:
    return toClimateZones(self)
openstudioutilitiesidf.IdfObject.to_ClimateZones = _to_ClimateZones

def _getClimateZones(self) -> ClimateZones:
    return getClimateZones(self)
Model.getClimateZones = _getClimateZones

def _getOptionalClimateZones(self) -> OptionalClimateZones:
    return getOptionalClimateZones(self)
Model.getOptionalClimateZones = _getOptionalClimateZones


def toClimateZone(extensibleGroup: "IdfExtensibleGroup") -> "boost::optional< openstudio::model::ClimateZone >":
    return _openstudiomodelsimulation.toClimateZone(extensibleGroup)

def _to_ClimateZone(self) -> OptionalClimateZone:
    return toClimateZone(self)
openstudioutilitiesidf.IdfExtensibleGroup.to_ClimateZone = _to_ClimateZone

class DesignDay(SizingPeriod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.DesignDay_swiginit(self, _openstudiomodelsimulation.new_DesignDay(model))

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.DesignDay_iddObjectType()

    @staticmethod
    def validDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.DesignDay_validDayTypeValues()

    @staticmethod
    def validHumidityIndicatingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues()

    @staticmethod
    def validDryBulbTemperatureRangeModifierTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues()

    @staticmethod
    def validSolarModelIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues()

    def maximumDryBulbTemperature(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_maximumDryBulbTemperature(self)

    def isMaximumDryBulbTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isMaximumDryBulbTemperatureDefaulted(self)

    def dailyDryBulbTemperatureRange(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_dailyDryBulbTemperatureRange(self)

    def isDailyDryBulbTemperatureRangeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDailyDryBulbTemperatureRangeDefaulted(self)

    def humidityIndicatingConditionsAtMaximumDryBulb(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingConditionsAtMaximumDryBulb(self)

    def isHumidityIndicatingConditionsAtMaximumDryBulbDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isHumidityIndicatingConditionsAtMaximumDryBulbDefaulted(self)

    def barometricPressure(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_barometricPressure(self)

    def isBarometricPressureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isBarometricPressureDefaulted(self)

    def windSpeed(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_windSpeed(self)

    def isWindSpeedDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isWindSpeedDefaulted(self)

    def windDirection(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_windDirection(self)

    def isWindDirectionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isWindDirectionDefaulted(self)

    def skyClearness(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_skyClearness(self)

    def isSkyClearnessDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSkyClearnessDefaulted(self)

    def rainIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_rainIndicator(self)

    def isRainIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isRainIndicatorDefaulted(self)

    def snowIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_snowIndicator(self)

    def isSnowIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSnowIndicatorDefaulted(self)

    def dayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.DesignDay_dayOfMonth(self)

    def isDayOfMonthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDayOfMonthDefaulted(self)

    def month(self) -> "int":
        return _openstudiomodelsimulation.DesignDay_month(self)

    def isMonthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isMonthDefaulted(self)

    def dayType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_dayType(self)

    def isDayTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDayTypeDefaulted(self)

    def daylightSavingTimeIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_daylightSavingTimeIndicator(self)

    def isDaylightSavingTimeIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDaylightSavingTimeIndicatorDefaulted(self)

    def humidityIndicatingType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingType(self)

    def isHumidityIndicatingTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isHumidityIndicatingTypeDefaulted(self)

    def humidityIndicatingDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingDaySchedule(self)

    def dryBulbTemperatureRangeModifierType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_dryBulbTemperatureRangeModifierType(self)

    def isDryBulbTemperatureRangeModifierTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDryBulbTemperatureRangeModifierTypeDefaulted(self)

    def dryBulbTemperatureRangeModifierSchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_dryBulbTemperatureRangeModifierSchedule(self)

    def solarModelIndicator(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_solarModelIndicator(self)

    def isSolarModelIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSolarModelIndicatorDefaulted(self)

    def beamSolarDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_beamSolarDaySchedule(self)

    def diffuseSolarDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_diffuseSolarDaySchedule(self)

    def ashraeTaub(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_ashraeTaub(self)

    def isAshraeTaubDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isAshraeTaubDefaulted(self)

    def ashraeTaud(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_ashraeTaud(self)

    def isAshraeTaudDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isAshraeTaudDefaulted(self)

    def dailyWetBulbTemperatureRange(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.DesignDay_dailyWetBulbTemperatureRange(self)

    def setMaximumDryBulbTemperature(self, maximumDryBulbTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setMaximumDryBulbTemperature(self, maximumDryBulbTemperature)

    def resetMaximumDryBulbTemperature(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetMaximumDryBulbTemperature(self)

    def setDailyDryBulbTemperatureRange(self, dailyDryBulbTemperatureRange: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDailyDryBulbTemperatureRange(self, dailyDryBulbTemperatureRange)

    def resetDailyDryBulbTemperatureRange(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDailyDryBulbTemperatureRange(self)

    def setHumidityIndicatingConditionsAtMaximumDryBulb(self, humidityIndicatingConditionsAtMaximumDryBulb: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingConditionsAtMaximumDryBulb(self, humidityIndicatingConditionsAtMaximumDryBulb)

    def resetHumidityIndicatingConditionsAtMaximumDryBulb(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingConditionsAtMaximumDryBulb(self)

    def setBarometricPressure(self, barometricPressure: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setBarometricPressure(self, barometricPressure)

    def resetBarometricPressure(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetBarometricPressure(self)

    def setWindSpeed(self, windSpeed: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setWindSpeed(self, windSpeed)

    def resetWindSpeed(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetWindSpeed(self)

    def setWindDirection(self, windDirection: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setWindDirection(self, windDirection)

    def resetWindDirection(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetWindDirection(self)

    def setSkyClearness(self, skyClearness: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSkyClearness(self, skyClearness)

    def resetSkyClearness(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSkyClearness(self)

    def setRainIndicator(self, rainIndicator: "bool") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setRainIndicator(self, rainIndicator)

    def resetRainIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetRainIndicator(self)

    def setSnowIndicator(self, snowIndicator: "bool") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSnowIndicator(self, snowIndicator)

    def resetSnowIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSnowIndicator(self)

    def setDayOfMonth(self, dayOfMonth: "int") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDayOfMonth(self, dayOfMonth)

    def resetDayOfMonth(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDayOfMonth(self)

    def setMonth(self, month: "int") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setMonth(self, month)

    def resetMonth(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetMonth(self)

    def setDayType(self, dayType: "std::string") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDayType(self, dayType)

    def resetDayType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDayType(self)

    def setDaylightSavingTimeIndicator(self, daylightSavingTimeIndicator: "bool") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDaylightSavingTimeIndicator(self, daylightSavingTimeIndicator)

    def resetDaylightSavingTimeIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDaylightSavingTimeIndicator(self)

    def setHumidityIndicatingType(self, humidityIndicatingType: "std::string") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingType(self, humidityIndicatingType)

    def resetHumidityIndicatingType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingType(self)

    def setHumidityIndicatingDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingDaySchedule(self, schedule)

    def resetHumidityIndicatingDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingDaySchedule(self)

    def setDryBulbTemperatureRangeModifierType(self, dryBulbTemperatureRangeModifierType: "std::string") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDryBulbTemperatureRangeModifierType(self, dryBulbTemperatureRangeModifierType)

    def resetDryBulbTemperatureRangeModifierType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDryBulbTemperatureRangeModifierType(self)

    def setDryBulbTemperatureRangeModifierSchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDryBulbTemperatureRangeModifierSchedule(self, schedule)

    def resetDryBulbTemperatureRangeModifierSchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDryBulbTemperatureRangeModifierSchedule(self)

    def setSolarModelIndicator(self, solarModelIndicator: "std::string") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSolarModelIndicator(self, solarModelIndicator)

    def resetSolarModelIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSolarModelIndicator(self)

    def setBeamSolarDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setBeamSolarDaySchedule(self, schedule)

    def resetBeamSolarDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetBeamSolarDaySchedule(self)

    def setDiffuseSolarDaySchedule(self, schedule: "ScheduleDay") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDiffuseSolarDaySchedule(self, schedule)

    def resetDiffuseSolarDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDiffuseSolarDaySchedule(self)

    def setAshraeTaub(self, aSHRAETaub: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setAshraeTaub(self, aSHRAETaub)

    def resetAshraeTaub(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetAshraeTaub(self)

    def setAshraeTaud(self, aSHRAETaud: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setAshraeTaud(self, aSHRAETaud)

    def resetAshraeTaud(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetAshraeTaud(self)

    def setDailyWetBulbTemperatureRange(self, dailyWetBulbTemperatureRange: "double") -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDailyWetBulbTemperatureRange(self, dailyWetBulbTemperatureRange)

    def resetDailyWetBulbTemperatureRange(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDailyWetBulbTemperatureRange(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_DesignDay

# Register DesignDay in _openstudiomodelsimulation:
_openstudiomodelsimulation.DesignDay_swigregister(DesignDay)

def DesignDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.DesignDay_iddObjectType()

def DesignDay_validDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validDayTypeValues()

def DesignDay_validHumidityIndicatingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues()

def DesignDay_validDryBulbTemperatureRangeModifierTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues()

def DesignDay_validSolarModelIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues()


def toDesignDay(idfObject: "IdfObject") -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.toDesignDay(idfObject)

def getDesignDay(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.getDesignDay(t_model, t_handle)

def getDesignDays(t_model: "Model") -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > >":
    return _openstudiomodelsimulation.getDesignDays(t_model)

def getDesignDayByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.getDesignDayByName(t_model, t_name)

def getDesignDaysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > >":
    return _openstudiomodelsimulation.getDesignDaysByName(t_model, t_name, t_exactMatch)

def _to_DesignDay(self) -> OptionalDesignDay:
    return toDesignDay(self)
openstudioutilitiesidf.IdfObject.to_DesignDay = _to_DesignDay

def _getDesignDay(self, t_handle: "UUID") -> OptionalDesignDay:
    return getDesignDay(self, t_handle)
Model.getDesignDay = _getDesignDay

def _getDesignDay(self, t_handle_str: str) -> OptionalDesignDay:
    return getDesignDay(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getDesignDay = _getDesignDay

def _getDesignDays(self) -> DesignDayVector:
    return getDesignDays(self)
Model.getDesignDays = _getDesignDays

def _getDesignDayByName(self, t_name: str) -> OptionalDesignDay:
    return getDesignDayByName(self, t_name)
Model.getDesignDayByName = _getDesignDayByName

def _getDesignDaysByName(self, t_name: str, t_exactMatch: bool) -> DesignDayVector:
    return getDesignDaysByName(self, t_name, t_exactMatch)
Model.getDesignDaysByName = _getDesignDaysByName

class LightingDesignDay(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cieSkyModel: "std::string const &", date: "Date", model: "Model"):
        _openstudiomodelsimulation.LightingDesignDay_swiginit(self, _openstudiomodelsimulation.new_LightingDesignDay(cieSkyModel, date, model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingDesignDay

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.LightingDesignDay_iddObjectType()

    @staticmethod
    def validCIESkyModelValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues()

    def cieSkyModel(self) -> "std::string":
        return _openstudiomodelsimulation.LightingDesignDay_cieSkyModel(self)

    def snowIndicator(self) -> "int":
        return _openstudiomodelsimulation.LightingDesignDay_snowIndicator(self)

    def isSnowIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_isSnowIndicatorDefaulted(self)

    def setCIESkyModel(self, cIESkyModel: "std::string") -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setCIESkyModel(self, cIESkyModel)

    def setSnowIndicator(self, snowIndicator: "int") -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setSnowIndicator(self, snowIndicator)

    def resetSnowIndicator(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_resetSnowIndicator(self)

    def date(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.LightingDesignDay_date(self)

    def setDate(self, date: "Date") -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setDate(self, date)

    def simulationTimes(self) -> "std::vector< openstudio::Time,std::allocator< openstudio::Time > >":
        return _openstudiomodelsimulation.LightingDesignDay_simulationTimes(self)

    def simulationDateTimes(self) -> "std::vector< openstudio::DateTime,std::allocator< openstudio::DateTime > >":
        return _openstudiomodelsimulation.LightingDesignDay_simulationDateTimes(self)

    def addSimulationTime(self, time: "Time") -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_addSimulationTime(self, time)

    def clearSimulationTimes(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_clearSimulationTimes(self)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_ensureNoLeapDays(self)

# Register LightingDesignDay in _openstudiomodelsimulation:
_openstudiomodelsimulation.LightingDesignDay_swigregister(LightingDesignDay)

def LightingDesignDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.LightingDesignDay_iddObjectType()

def LightingDesignDay_validCIESkyModelValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues()


def toLightingDesignDay(idfObject: "IdfObject") -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.toLightingDesignDay(idfObject)

def getLightingDesignDay(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.getLightingDesignDay(t_model, t_handle)

def getLightingDesignDays(t_model: "Model") -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > >":
    return _openstudiomodelsimulation.getLightingDesignDays(t_model)

def getLightingDesignDayByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.getLightingDesignDayByName(t_model, t_name)

def getLightingDesignDaysByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > >":
    return _openstudiomodelsimulation.getLightingDesignDaysByName(t_model, t_name, t_exactMatch)

def _to_LightingDesignDay(self) -> OptionalLightingDesignDay:
    return toLightingDesignDay(self)
openstudioutilitiesidf.IdfObject.to_LightingDesignDay = _to_LightingDesignDay

def _getLightingDesignDay(self, t_handle: "UUID") -> OptionalLightingDesignDay:
    return getLightingDesignDay(self, t_handle)
Model.getLightingDesignDay = _getLightingDesignDay

def _getLightingDesignDay(self, t_handle_str: str) -> OptionalLightingDesignDay:
    return getLightingDesignDay(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getLightingDesignDay = _getLightingDesignDay

def _getLightingDesignDays(self) -> LightingDesignDayVector:
    return getLightingDesignDays(self)
Model.getLightingDesignDays = _getLightingDesignDays

def _getLightingDesignDayByName(self, t_name: str) -> OptionalLightingDesignDay:
    return getLightingDesignDayByName(self, t_name)
Model.getLightingDesignDayByName = _getLightingDesignDayByName

def _getLightingDesignDaysByName(self, t_name: str, t_exactMatch: bool) -> LightingDesignDayVector:
    return getLightingDesignDaysByName(self, t_name, t_exactMatch)
Model.getLightingDesignDaysByName = _getLightingDesignDaysByName

class ConvergenceLimits(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ConvergenceLimits

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ConvergenceLimits_iddObjectType()

    def minimumSystemTimestep(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.ConvergenceLimits_minimumSystemTimestep(self)

    def maximumHVACIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_maximumHVACIterations(self)

    def isMaximumHVACIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMaximumHVACIterationsDefaulted(self)

    def minimumPlantIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_minimumPlantIterations(self)

    def isMinimumPlantIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMinimumPlantIterationsDefaulted(self)

    def maximumPlantIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_maximumPlantIterations(self)

    def isMaximumPlantIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMaximumPlantIterationsDefaulted(self)

    def setMinimumSystemTimestep(self, minimumSystemTimestep: "int") -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMinimumSystemTimestep(self, minimumSystemTimestep)

    def resetMinimumSystemTimestep(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMinimumSystemTimestep(self)

    def setMaximumHVACIterations(self, maximumHVACIterations: "int") -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMaximumHVACIterations(self, maximumHVACIterations)

    def resetMaximumHVACIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMaximumHVACIterations(self)

    def setMinimumPlantIterations(self, minimumPlantIterations: "int") -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMinimumPlantIterations(self, minimumPlantIterations)

    def resetMinimumPlantIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMinimumPlantIterations(self)

    def setMaximumPlantIterations(self, maximumPlantIterations: "int") -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMaximumPlantIterations(self, maximumPlantIterations)

    def resetMaximumPlantIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMaximumPlantIterations(self)

# Register ConvergenceLimits in _openstudiomodelsimulation:
_openstudiomodelsimulation.ConvergenceLimits_swigregister(ConvergenceLimits)

def ConvergenceLimits_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ConvergenceLimits_iddObjectType()


def toConvergenceLimits(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ConvergenceLimits >":
    return _openstudiomodelsimulation.toConvergenceLimits(idfObject)

def getConvergenceLimits(t_model: "Model") -> "openstudio::model::ConvergenceLimits":
    return _openstudiomodelsimulation.getConvergenceLimits(t_model)

def getOptionalConvergenceLimits(t_model: "Model") -> "boost::optional< openstudio::model::ConvergenceLimits >":
    return _openstudiomodelsimulation.getOptionalConvergenceLimits(t_model)

def _to_ConvergenceLimits(self) -> OptionalConvergenceLimits:
    return toConvergenceLimits(self)
openstudioutilitiesidf.IdfObject.to_ConvergenceLimits = _to_ConvergenceLimits

def _getConvergenceLimits(self) -> ConvergenceLimits:
    return getConvergenceLimits(self)
Model.getConvergenceLimits = _getConvergenceLimits

def _getOptionalConvergenceLimits(self) -> OptionalConvergenceLimits:
    return getOptionalConvergenceLimits(self)
Model.getOptionalConvergenceLimits = _getOptionalConvergenceLimits

class RunPeriodControlDaylightSavingTime(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlDaylightSavingTime

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType()

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_startDate(self)

    def startNthDayOfWeekInMonth(self) -> "boost::optional< openstudio::NthDayOfWeekInMonth >":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_startNthDayOfWeekInMonth(self)

    def endDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_endDate(self)

    def endNthDayOfWeekInMonth(self) -> "boost::optional< openstudio::NthDayOfWeekInMonth >":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_endNthDayOfWeekInMonth(self)

    def setStartDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_setStartDate(self, *args)

    def setEndDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_setEndDate(self, *args)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_ensureNoLeapDays(self)

# Register RunPeriodControlDaylightSavingTime in _openstudiomodelsimulation:
_openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_swigregister(RunPeriodControlDaylightSavingTime)

def RunPeriodControlDaylightSavingTime_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType()


def toRunPeriodControlDaylightSavingTime(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RunPeriodControlDaylightSavingTime >":
    return _openstudiomodelsimulation.toRunPeriodControlDaylightSavingTime(idfObject)

def getRunPeriodControlDaylightSavingTime(t_model: "Model") -> "openstudio::model::RunPeriodControlDaylightSavingTime":
    return _openstudiomodelsimulation.getRunPeriodControlDaylightSavingTime(t_model)

def getOptionalRunPeriodControlDaylightSavingTime(t_model: "Model") -> "boost::optional< openstudio::model::RunPeriodControlDaylightSavingTime >":
    return _openstudiomodelsimulation.getOptionalRunPeriodControlDaylightSavingTime(t_model)

def _to_RunPeriodControlDaylightSavingTime(self) -> OptionalRunPeriodControlDaylightSavingTime:
    return toRunPeriodControlDaylightSavingTime(self)
openstudioutilitiesidf.IdfObject.to_RunPeriodControlDaylightSavingTime = _to_RunPeriodControlDaylightSavingTime

def _getRunPeriodControlDaylightSavingTime(self) -> RunPeriodControlDaylightSavingTime:
    return getRunPeriodControlDaylightSavingTime(self)
Model.getRunPeriodControlDaylightSavingTime = _getRunPeriodControlDaylightSavingTime

def _getOptionalRunPeriodControlDaylightSavingTime(self) -> OptionalRunPeriodControlDaylightSavingTime:
    return getOptionalRunPeriodControlDaylightSavingTime(self)
Model.getOptionalRunPeriodControlDaylightSavingTime = _getOptionalRunPeriodControlDaylightSavingTime

class HeatBalanceAlgorithm(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_HeatBalanceAlgorithm

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType()

    @staticmethod
    def algorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues()

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isAlgorithmDefaulted(self)

    def surfaceTemperatureUpperLimit(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_surfaceTemperatureUpperLimit(self)

    def isSurfaceTemperatureUpperLimitDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isSurfaceTemperatureUpperLimitDefaulted(self)

    def minimumSurfaceConvectionHeatTransferCoefficientValue(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_minimumSurfaceConvectionHeatTransferCoefficientValue(self)

    def isMinimumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isMinimumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self)

    def maximumSurfaceConvectionHeatTransferCoefficientValue(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_maximumSurfaceConvectionHeatTransferCoefficientValue(self)

    def isMaximumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isMaximumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self)

    def setAlgorithm(self, algorithm: "std::string") -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetAlgorithm(self)

    def setSurfaceTemperatureUpperLimit(self, surfaceTemperatureUpperLimit: "double") -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setSurfaceTemperatureUpperLimit(self, surfaceTemperatureUpperLimit)

    def resetSurfaceTemperatureUpperLimit(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetSurfaceTemperatureUpperLimit(self)

    def setMinimumSurfaceConvectionHeatTransferCoefficientValue(self, minimumSurfaceConvectionHeatTransferCoefficientValue: "double") -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setMinimumSurfaceConvectionHeatTransferCoefficientValue(self, minimumSurfaceConvectionHeatTransferCoefficientValue)

    def resetMinimumSurfaceConvectionHeatTransferCoefficientValue(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetMinimumSurfaceConvectionHeatTransferCoefficientValue(self)

    def setMaximumSurfaceConvectionHeatTransferCoefficientValue(self, maximumSurfaceConvectionHeatTransferCoefficientValue: "double") -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setMaximumSurfaceConvectionHeatTransferCoefficientValue(self, maximumSurfaceConvectionHeatTransferCoefficientValue)

    def resetMaximumSurfaceConvectionHeatTransferCoefficientValue(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetMaximumSurfaceConvectionHeatTransferCoefficientValue(self)

# Register HeatBalanceAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.HeatBalanceAlgorithm_swigregister(HeatBalanceAlgorithm)

def HeatBalanceAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType()

def HeatBalanceAlgorithm_algorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues()


def toHeatBalanceAlgorithm(idfObject: "IdfObject") -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.toHeatBalanceAlgorithm(idfObject)

def getHeatBalanceAlgorithm(t_model: "Model") -> "openstudio::model::HeatBalanceAlgorithm":
    return _openstudiomodelsimulation.getHeatBalanceAlgorithm(t_model)

def getOptionalHeatBalanceAlgorithm(t_model: "Model") -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.getOptionalHeatBalanceAlgorithm(t_model)

def _to_HeatBalanceAlgorithm(self) -> OptionalHeatBalanceAlgorithm:
    return toHeatBalanceAlgorithm(self)
openstudioutilitiesidf.IdfObject.to_HeatBalanceAlgorithm = _to_HeatBalanceAlgorithm

def _getHeatBalanceAlgorithm(self) -> HeatBalanceAlgorithm:
    return getHeatBalanceAlgorithm(self)
Model.getHeatBalanceAlgorithm = _getHeatBalanceAlgorithm

def _getOptionalHeatBalanceAlgorithm(self) -> OptionalHeatBalanceAlgorithm:
    return getOptionalHeatBalanceAlgorithm(self)
Model.getOptionalHeatBalanceAlgorithm = _getOptionalHeatBalanceAlgorithm

class InsideSurfaceConvectionAlgorithm(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_InsideSurfaceConvectionAlgorithm

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType()

    @staticmethod
    def validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues()

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: "std::string") -> "bool":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_resetAlgorithm(self)

# Register InsideSurfaceConvectionAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_swigregister(InsideSurfaceConvectionAlgorithm)

def InsideSurfaceConvectionAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType()

def InsideSurfaceConvectionAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues()


def toInsideSurfaceConvectionAlgorithm(idfObject: "IdfObject") -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.toInsideSurfaceConvectionAlgorithm(idfObject)

def getInsideSurfaceConvectionAlgorithm(t_model: "Model") -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
    return _openstudiomodelsimulation.getInsideSurfaceConvectionAlgorithm(t_model)

def getOptionalInsideSurfaceConvectionAlgorithm(t_model: "Model") -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.getOptionalInsideSurfaceConvectionAlgorithm(t_model)

def _to_InsideSurfaceConvectionAlgorithm(self) -> OptionalInsideSurfaceConvectionAlgorithm:
    return toInsideSurfaceConvectionAlgorithm(self)
openstudioutilitiesidf.IdfObject.to_InsideSurfaceConvectionAlgorithm = _to_InsideSurfaceConvectionAlgorithm

def _getInsideSurfaceConvectionAlgorithm(self) -> InsideSurfaceConvectionAlgorithm:
    return getInsideSurfaceConvectionAlgorithm(self)
Model.getInsideSurfaceConvectionAlgorithm = _getInsideSurfaceConvectionAlgorithm

def _getOptionalInsideSurfaceConvectionAlgorithm(self) -> OptionalInsideSurfaceConvectionAlgorithm:
    return getOptionalInsideSurfaceConvectionAlgorithm(self)
Model.getOptionalInsideSurfaceConvectionAlgorithm = _getOptionalInsideSurfaceConvectionAlgorithm

class OutputControlFiles(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputControlFiles

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputControlFiles_iddObjectType()

    def outputCSV(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputCSV(self)

    def outputMTR(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputMTR(self)

    def outputESO(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputESO(self)

    def outputEIO(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputEIO(self)

    def outputTabular(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputTabular(self)

    def outputSQLite(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputSQLite(self)

    def outputJSON(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputJSON(self)

    def outputAUDIT(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputAUDIT(self)

    def outputZoneSizing(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputZoneSizing(self)

    def outputSystemSizing(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputSystemSizing(self)

    def outputDXF(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDXF(self)

    def outputBND(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputBND(self)

    def outputRDD(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputRDD(self)

    def outputMDD(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputMDD(self)

    def outputMTD(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputMTD(self)

    def outputSHD(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputSHD(self)

    def outputDFS(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDFS(self)

    def outputGLHE(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputGLHE(self)

    def outputDelightIn(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDelightIn(self)

    def outputDelightELdmp(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDelightELdmp(self)

    def outputDelightDFdmp(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDelightDFdmp(self)

    def outputEDD(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputEDD(self)

    def outputDBG(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputDBG(self)

    def outputPerfLog(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputPerfLog(self)

    def outputSLN(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputSLN(self)

    def outputSCI(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputSCI(self)

    def outputWRL(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputWRL(self)

    def outputScreen(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputScreen(self)

    def outputExtShd(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputExtShd(self)

    def outputTarcog(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_outputTarcog(self)

    def setOutputCSV(self, outputCSV: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputCSV(self, outputCSV)

    def setOutputMTR(self, outputMTR: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputMTR(self, outputMTR)

    def setOutputESO(self, outputESO: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputESO(self, outputESO)

    def setOutputEIO(self, outputEIO: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputEIO(self, outputEIO)

    def setOutputTabular(self, outputTabular: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputTabular(self, outputTabular)

    def setOutputSQLite(self, outputSQLite: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputSQLite(self, outputSQLite)

    def setOutputJSON(self, outputJSON: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputJSON(self, outputJSON)

    def setOutputAUDIT(self, outputAUDIT: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputAUDIT(self, outputAUDIT)

    def setOutputZoneSizing(self, outputZoneSizing: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputZoneSizing(self, outputZoneSizing)

    def setOutputSystemSizing(self, outputSystemSizing: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputSystemSizing(self, outputSystemSizing)

    def setOutputDXF(self, outputDXF: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDXF(self, outputDXF)

    def setOutputBND(self, outputBND: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputBND(self, outputBND)

    def setOutputRDD(self, outputRDD: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputRDD(self, outputRDD)

    def setOutputMDD(self, outputMDD: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputMDD(self, outputMDD)

    def setOutputMTD(self, outputMTD: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputMTD(self, outputMTD)

    def setOutputSHD(self, outputSHD: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputSHD(self, outputSHD)

    def setOutputDFS(self, outputDFS: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDFS(self, outputDFS)

    def setOutputGLHE(self, outputGLHE: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputGLHE(self, outputGLHE)

    def setOutputDelightIn(self, outputDelightIn: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDelightIn(self, outputDelightIn)

    def setOutputDelightELdmp(self, outputDelightELdmp: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDelightELdmp(self, outputDelightELdmp)

    def setOutputDelightDFdmp(self, outputDelightDFdmp: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDelightDFdmp(self, outputDelightDFdmp)

    def setOutputEDD(self, outputEDD: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputEDD(self, outputEDD)

    def setOutputDBG(self, outputDBG: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputDBG(self, outputDBG)

    def setOutputPerfLog(self, outputPerfLog: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputPerfLog(self, outputPerfLog)

    def setOutputSLN(self, outputSLN: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputSLN(self, outputSLN)

    def setOutputSCI(self, outputSCI: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputSCI(self, outputSCI)

    def setOutputWRL(self, outputWRL: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputWRL(self, outputWRL)

    def setOutputScreen(self, outputScreen: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputScreen(self, outputScreen)

    def setOutputExtShd(self, outputExtShd: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputExtShd(self, outputExtShd)

    def setOutputTarcog(self, outputTarcog: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputControlFiles_setOutputTarcog(self, outputTarcog)

# Register OutputControlFiles in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputControlFiles_swigregister(OutputControlFiles)

def OutputControlFiles_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputControlFiles_iddObjectType()


def toOutputControlFiles(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputControlFiles >":
    return _openstudiomodelsimulation.toOutputControlFiles(idfObject)

def getOutputControlFiles(t_model: "Model") -> "openstudio::model::OutputControlFiles":
    return _openstudiomodelsimulation.getOutputControlFiles(t_model)

def getOptionalOutputControlFiles(t_model: "Model") -> "boost::optional< openstudio::model::OutputControlFiles >":
    return _openstudiomodelsimulation.getOptionalOutputControlFiles(t_model)

def _to_OutputControlFiles(self) -> OptionalOutputControlFiles:
    return toOutputControlFiles(self)
openstudioutilitiesidf.IdfObject.to_OutputControlFiles = _to_OutputControlFiles

def _getOutputControlFiles(self) -> OutputControlFiles:
    return getOutputControlFiles(self)
Model.getOutputControlFiles = _getOutputControlFiles

def _getOptionalOutputControlFiles(self) -> OptionalOutputControlFiles:
    return getOptionalOutputControlFiles(self)
Model.getOptionalOutputControlFiles = _getOptionalOutputControlFiles

class OutputControlReportingTolerances(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputControlReportingTolerances

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType()

    def toleranceforTimeHeatingSetpointNotMet(self) -> "double":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_toleranceforTimeHeatingSetpointNotMet(self)

    def isToleranceforTimeHeatingSetpointNotMetDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_isToleranceforTimeHeatingSetpointNotMetDefaulted(self)

    def toleranceforTimeCoolingSetpointNotMet(self) -> "double":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_toleranceforTimeCoolingSetpointNotMet(self)

    def isToleranceforTimeCoolingSetpointNotMetDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_isToleranceforTimeCoolingSetpointNotMetDefaulted(self)

    def setToleranceforTimeHeatingSetpointNotMet(self, toleranceforTimeHeatingSetpointNotMet: "double") -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_setToleranceforTimeHeatingSetpointNotMet(self, toleranceforTimeHeatingSetpointNotMet)

    def resetToleranceforTimeHeatingSetpointNotMet(self) -> "void":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_resetToleranceforTimeHeatingSetpointNotMet(self)

    def setToleranceforTimeCoolingSetpointNotMet(self, toleranceforTimeCoolingSetpointNotMet: "double") -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_setToleranceforTimeCoolingSetpointNotMet(self, toleranceforTimeCoolingSetpointNotMet)

    def resetToleranceforTimeCoolingSetpointNotMet(self) -> "void":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_resetToleranceforTimeCoolingSetpointNotMet(self)

# Register OutputControlReportingTolerances in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputControlReportingTolerances_swigregister(OutputControlReportingTolerances)

def OutputControlReportingTolerances_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType()


def toOutputControlReportingTolerances(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputControlReportingTolerances >":
    return _openstudiomodelsimulation.toOutputControlReportingTolerances(idfObject)

def getOutputControlReportingTolerances(t_model: "Model") -> "openstudio::model::OutputControlReportingTolerances":
    return _openstudiomodelsimulation.getOutputControlReportingTolerances(t_model)

def getOptionalOutputControlReportingTolerances(t_model: "Model") -> "boost::optional< openstudio::model::OutputControlReportingTolerances >":
    return _openstudiomodelsimulation.getOptionalOutputControlReportingTolerances(t_model)

def _to_OutputControlReportingTolerances(self) -> OptionalOutputControlReportingTolerances:
    return toOutputControlReportingTolerances(self)
openstudioutilitiesidf.IdfObject.to_OutputControlReportingTolerances = _to_OutputControlReportingTolerances

def _getOutputControlReportingTolerances(self) -> OutputControlReportingTolerances:
    return getOutputControlReportingTolerances(self)
Model.getOutputControlReportingTolerances = _getOutputControlReportingTolerances

def _getOptionalOutputControlReportingTolerances(self) -> OptionalOutputControlReportingTolerances:
    return getOptionalOutputControlReportingTolerances(self)
Model.getOptionalOutputControlReportingTolerances = _getOptionalOutputControlReportingTolerances

class OutputDebuggingData(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputDebuggingData

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputDebuggingData_iddObjectType()

    def reportDebuggingData(self) -> "bool":
        return _openstudiomodelsimulation.OutputDebuggingData_reportDebuggingData(self)

    def reportDuringWarmup(self) -> "bool":
        return _openstudiomodelsimulation.OutputDebuggingData_reportDuringWarmup(self)

    def setReportDebuggingData(self, reportDebuggingData: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputDebuggingData_setReportDebuggingData(self, reportDebuggingData)

    def setReportDuringWarmup(self, reportDuringWarmup: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputDebuggingData_setReportDuringWarmup(self, reportDuringWarmup)

# Register OutputDebuggingData in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputDebuggingData_swigregister(OutputDebuggingData)

def OutputDebuggingData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputDebuggingData_iddObjectType()


def toOutputDebuggingData(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputDebuggingData >":
    return _openstudiomodelsimulation.toOutputDebuggingData(idfObject)

def getOutputDebuggingData(t_model: "Model") -> "openstudio::model::OutputDebuggingData":
    return _openstudiomodelsimulation.getOutputDebuggingData(t_model)

def getOptionalOutputDebuggingData(t_model: "Model") -> "boost::optional< openstudio::model::OutputDebuggingData >":
    return _openstudiomodelsimulation.getOptionalOutputDebuggingData(t_model)

def _to_OutputDebuggingData(self) -> OptionalOutputDebuggingData:
    return toOutputDebuggingData(self)
openstudioutilitiesidf.IdfObject.to_OutputDebuggingData = _to_OutputDebuggingData

def _getOutputDebuggingData(self) -> OutputDebuggingData:
    return getOutputDebuggingData(self)
Model.getOutputDebuggingData = _getOutputDebuggingData

def _getOptionalOutputDebuggingData(self) -> OptionalOutputDebuggingData:
    return getOptionalOutputDebuggingData(self)
Model.getOptionalOutputDebuggingData = _getOptionalOutputDebuggingData

class OutputDiagnostics(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputDiagnostics

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputDiagnostics_iddObjectType()

    @staticmethod
    def keyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputDiagnostics_keyValues()

    @staticmethod
    def validKeyValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputDiagnostics_validKeyValues()

    def keys(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputDiagnostics_keys(self)

    def addKey(self, key: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.OutputDiagnostics_addKey(self, key)

    def setKeys(self, keys: "StringVector") -> "bool":
        return _openstudiomodelsimulation.OutputDiagnostics_setKeys(self, keys)

    def enableDisplayExtraWarnings(self) -> "bool":
        return _openstudiomodelsimulation.OutputDiagnostics_enableDisplayExtraWarnings(self)

    def clearKeys(self) -> "void":
        return _openstudiomodelsimulation.OutputDiagnostics_clearKeys(self)

# Register OutputDiagnostics in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputDiagnostics_swigregister(OutputDiagnostics)

def OutputDiagnostics_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputDiagnostics_iddObjectType()

def OutputDiagnostics_keyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutputDiagnostics_keyValues()

def OutputDiagnostics_validKeyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutputDiagnostics_validKeyValues()


def toOutputDiagnostics(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputDiagnostics >":
    return _openstudiomodelsimulation.toOutputDiagnostics(idfObject)

def getOutputDiagnostics(t_model: "Model") -> "openstudio::model::OutputDiagnostics":
    return _openstudiomodelsimulation.getOutputDiagnostics(t_model)

def getOptionalOutputDiagnostics(t_model: "Model") -> "boost::optional< openstudio::model::OutputDiagnostics >":
    return _openstudiomodelsimulation.getOptionalOutputDiagnostics(t_model)

def _to_OutputDiagnostics(self) -> OptionalOutputDiagnostics:
    return toOutputDiagnostics(self)
openstudioutilitiesidf.IdfObject.to_OutputDiagnostics = _to_OutputDiagnostics

def _getOutputDiagnostics(self) -> OutputDiagnostics:
    return getOutputDiagnostics(self)
Model.getOutputDiagnostics = _getOutputDiagnostics

def _getOptionalOutputDiagnostics(self) -> OptionalOutputDiagnostics:
    return getOptionalOutputDiagnostics(self)
Model.getOptionalOutputDiagnostics = _getOptionalOutputDiagnostics

class OutputJSON(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputJSON

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputJSON_iddObjectType()

    @staticmethod
    def optionTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputJSON_optionTypeValues()

    def optionType(self) -> "std::string":
        return _openstudiomodelsimulation.OutputJSON_optionType(self)

    def outputJSON(self) -> "bool":
        return _openstudiomodelsimulation.OutputJSON_outputJSON(self)

    def outputCBOR(self) -> "bool":
        return _openstudiomodelsimulation.OutputJSON_outputCBOR(self)

    def outputMessagePack(self) -> "bool":
        return _openstudiomodelsimulation.OutputJSON_outputMessagePack(self)

    def setOptionType(self, optionType: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.OutputJSON_setOptionType(self, optionType)

    def setOutputJSON(self, outputJSON: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputJSON_setOutputJSON(self, outputJSON)

    def setOutputCBOR(self, outputCBOR: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputJSON_setOutputCBOR(self, outputCBOR)

    def setOutputMessagePack(self, outputMessagePack: "bool") -> "bool":
        return _openstudiomodelsimulation.OutputJSON_setOutputMessagePack(self, outputMessagePack)

# Register OutputJSON in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputJSON_swigregister(OutputJSON)

def OutputJSON_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputJSON_iddObjectType()

def OutputJSON_optionTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutputJSON_optionTypeValues()


def toOutputJSON(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputJSON >":
    return _openstudiomodelsimulation.toOutputJSON(idfObject)

def getOutputJSON(t_model: "Model") -> "openstudio::model::OutputJSON":
    return _openstudiomodelsimulation.getOutputJSON(t_model)

def getOptionalOutputJSON(t_model: "Model") -> "boost::optional< openstudio::model::OutputJSON >":
    return _openstudiomodelsimulation.getOptionalOutputJSON(t_model)

def _to_OutputJSON(self) -> OptionalOutputJSON:
    return toOutputJSON(self)
openstudioutilitiesidf.IdfObject.to_OutputJSON = _to_OutputJSON

def _getOutputJSON(self) -> OutputJSON:
    return getOutputJSON(self)
Model.getOutputJSON = _getOutputJSON

def _getOptionalOutputJSON(self) -> OptionalOutputJSON:
    return getOptionalOutputJSON(self)
Model.getOptionalOutputJSON = _getOptionalOutputJSON

class OutsideSurfaceConvectionAlgorithm(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutsideSurfaceConvectionAlgorithm

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType()

    @staticmethod
    def validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues()

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: "std::string") -> "bool":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_resetAlgorithm(self)

# Register OutsideSurfaceConvectionAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_swigregister(OutsideSurfaceConvectionAlgorithm)

def OutsideSurfaceConvectionAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType()

def OutsideSurfaceConvectionAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues()


def toOutsideSurfaceConvectionAlgorithm(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.toOutsideSurfaceConvectionAlgorithm(idfObject)

def getOutsideSurfaceConvectionAlgorithm(t_model: "Model") -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
    return _openstudiomodelsimulation.getOutsideSurfaceConvectionAlgorithm(t_model)

def getOptionalOutsideSurfaceConvectionAlgorithm(t_model: "Model") -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.getOptionalOutsideSurfaceConvectionAlgorithm(t_model)

def _to_OutsideSurfaceConvectionAlgorithm(self) -> OptionalOutsideSurfaceConvectionAlgorithm:
    return toOutsideSurfaceConvectionAlgorithm(self)
openstudioutilitiesidf.IdfObject.to_OutsideSurfaceConvectionAlgorithm = _to_OutsideSurfaceConvectionAlgorithm

def _getOutsideSurfaceConvectionAlgorithm(self) -> OutsideSurfaceConvectionAlgorithm:
    return getOutsideSurfaceConvectionAlgorithm(self)
Model.getOutsideSurfaceConvectionAlgorithm = _getOutsideSurfaceConvectionAlgorithm

def _getOptionalOutsideSurfaceConvectionAlgorithm(self) -> OptionalOutsideSurfaceConvectionAlgorithm:
    return getOptionalOutsideSurfaceConvectionAlgorithm(self)
Model.getOptionalOutsideSurfaceConvectionAlgorithm = _getOptionalOutsideSurfaceConvectionAlgorithm

class SurfacePropertyConvectionCoefficientsMultipleSurface(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_swiginit(self, _openstudiomodelsimulation.new_SurfacePropertyConvectionCoefficientsMultipleSurface(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SurfacePropertyConvectionCoefficientsMultipleSurface

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType()

    @staticmethod
    def surfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues()

    @staticmethod
    def convectionCoefficient1LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues()

    @staticmethod
    def convectionCoefficient1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues()

    @staticmethod
    def convectionCoefficient2LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues()

    @staticmethod
    def convectionCoefficient2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues()

    def surfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceType(self)

    def convectionCoefficient1Location(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Location(self)

    def convectionCoefficient1Type(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Type(self)

    def convectionCoefficient1(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1(self)

    def convectionCoefficient1Schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Schedule(self)

    def convectionCoefficient2Location(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Location(self)

    def convectionCoefficient2Type(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Type(self)

    def convectionCoefficient2(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2(self)

    def convectionCoefficient2Schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Schedule(self)

    def setSurfaceType(self, surfaceType: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setSurfaceType(self, surfaceType)

    def resetSurfaceType(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetSurfaceType(self)

    def setConvectionCoefficient1Location(self, convectionCoefficient1Location: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Location(self, convectionCoefficient1Location)

    def resetConvectionCoefficient1Location(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Location(self)

    def setConvectionCoefficient1Type(self, convectionCoefficient1Type: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Type(self, convectionCoefficient1Type)

    def resetConvectionCoefficient1Type(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Type(self)

    def setConvectionCoefficient1(self, convectionCoefficient1: "double") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1(self, convectionCoefficient1)

    def resetConvectionCoefficient1(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1(self)

    def setConvectionCoefficient1Schedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Schedule(self, schedule)

    def resetConvectionCoefficient1Schedule(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Schedule(self)

    def setConvectionCoefficient2Location(self, convectionCoefficient2Location: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Location(self, convectionCoefficient2Location)

    def resetConvectionCoefficient2Location(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Location(self)

    def setConvectionCoefficient2Type(self, convectionCoefficient2Type: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Type(self, convectionCoefficient2Type)

    def resetConvectionCoefficient2Type(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Type(self)

    def setConvectionCoefficient2(self, convectionCoefficient2: "double") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2(self, convectionCoefficient2)

    def resetConvectionCoefficient2(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2(self)

    def setConvectionCoefficient2Schedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Schedule(self, schedule)

    def resetConvectionCoefficient2Schedule(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Schedule(self)

# Register SurfacePropertyConvectionCoefficientsMultipleSurface in _openstudiomodelsimulation:
_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_swigregister(SurfacePropertyConvectionCoefficientsMultipleSurface)

def SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType()

def SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues()

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues()

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues()

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues()

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues()


def toSurfacePropertyConvectionCoefficientsMultipleSurface(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.toSurfacePropertyConvectionCoefficientsMultipleSurface(idfObject)

def getSurfacePropertyConvectionCoefficientsMultipleSurface(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurface(t_model, t_handle)

def getSurfacePropertyConvectionCoefficientsMultipleSurfaces(t_model: "Model") -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaces(t_model)

def getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(t_model, t_name)

def getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyConvectionCoefficientsMultipleSurface(self) -> OptionalSurfacePropertyConvectionCoefficientsMultipleSurface:
    return toSurfacePropertyConvectionCoefficientsMultipleSurface(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyConvectionCoefficientsMultipleSurface = _to_SurfacePropertyConvectionCoefficientsMultipleSurface

def _getSurfacePropertyConvectionCoefficientsMultipleSurface(self, t_handle: "UUID") -> OptionalSurfacePropertyConvectionCoefficientsMultipleSurface:
    return getSurfacePropertyConvectionCoefficientsMultipleSurface(self, t_handle)
Model.getSurfacePropertyConvectionCoefficientsMultipleSurface = _getSurfacePropertyConvectionCoefficientsMultipleSurface

def _getSurfacePropertyConvectionCoefficientsMultipleSurface(self, t_handle_str: str) -> OptionalSurfacePropertyConvectionCoefficientsMultipleSurface:
    return getSurfacePropertyConvectionCoefficientsMultipleSurface(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSurfacePropertyConvectionCoefficientsMultipleSurface = _getSurfacePropertyConvectionCoefficientsMultipleSurface

def _getSurfacePropertyConvectionCoefficientsMultipleSurfaces(self) -> SurfacePropertyConvectionCoefficientsMultipleSurfaceVector:
    return getSurfacePropertyConvectionCoefficientsMultipleSurfaces(self)
Model.getSurfacePropertyConvectionCoefficientsMultipleSurfaces = _getSurfacePropertyConvectionCoefficientsMultipleSurfaces

def _getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(self, t_name: str) -> OptionalSurfacePropertyConvectionCoefficientsMultipleSurface:
    return getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(self, t_name)
Model.getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName = _getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName

def _getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyConvectionCoefficientsMultipleSurfaceVector:
    return getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName = _getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName

class ShadowCalculation(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ShadowCalculation

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ShadowCalculation_iddObjectType()

    @staticmethod
    def shadingCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationMethodValues()

    @staticmethod
    def validShadingCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_validShadingCalculationMethodValues()

    @staticmethod
    def shadingCalculationUpdateFrequencyMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationUpdateFrequencyMethodValues()

    @staticmethod
    def validShadingCalculationUpdateFrequencyMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_validShadingCalculationUpdateFrequencyMethodValues()

    @staticmethod
    def polygonClippingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_polygonClippingAlgorithmValues()

    @staticmethod
    def validPolygonClippingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues()

    @staticmethod
    def skyDiffuseModelingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_skyDiffuseModelingAlgorithmValues()

    @staticmethod
    def validSkyDiffuseModelingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues()

    def shadingCalculationMethod(self) -> "std::string":
        return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationMethod(self)

    def shadingCalculationUpdateFrequencyMethod(self) -> "std::string":
        return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationUpdateFrequencyMethod(self)

    def isShadingCalculationUpdateFrequencyMethodDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_isShadingCalculationUpdateFrequencyMethodDefaulted(self)

    def shadingCalculationUpdateFrequency(self) -> "int":
        return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationUpdateFrequency(self)

    def isShadingCalculationUpdateFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_isShadingCalculationUpdateFrequencyDefaulted(self)

    def maximumFiguresInShadowOverlapCalculations(self) -> "int":
        return _openstudiomodelsimulation.ShadowCalculation_maximumFiguresInShadowOverlapCalculations(self)

    def isMaximumFiguresInShadowOverlapCalculationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_isMaximumFiguresInShadowOverlapCalculationsDefaulted(self)

    def polygonClippingAlgorithm(self) -> "std::string":
        return _openstudiomodelsimulation.ShadowCalculation_polygonClippingAlgorithm(self)

    def pixelCountingResolution(self) -> "int":
        return _openstudiomodelsimulation.ShadowCalculation_pixelCountingResolution(self)

    def skyDiffuseModelingAlgorithm(self) -> "std::string":
        return _openstudiomodelsimulation.ShadowCalculation_skyDiffuseModelingAlgorithm(self)

    def outputExternalShadingCalculationResults(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_outputExternalShadingCalculationResults(self)

    def disableSelfShadingWithinShadingZoneGroups(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_disableSelfShadingWithinShadingZoneGroups(self)

    def disableSelfShadingFromShadingZoneGroupstoOtherZones(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_disableSelfShadingFromShadingZoneGroupstoOtherZones(self)

    def numberofShadingZoneGroups(self) -> "unsigned int":
        return _openstudiomodelsimulation.ShadowCalculation_numberofShadingZoneGroups(self)

    def getShadingZoneGroup(self, groupIndex: "unsigned int") -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":
        return _openstudiomodelsimulation.ShadowCalculation_getShadingZoneGroup(self, groupIndex)

    def setShadingCalculationMethod(self, shadingCalculationMethod: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setShadingCalculationMethod(self, shadingCalculationMethod)

    def setShadingCalculationUpdateFrequencyMethod(self, shadingCalculationUpdateFrequencyMethod: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setShadingCalculationUpdateFrequencyMethod(self, shadingCalculationUpdateFrequencyMethod)

    def resetShadingCalculationUpdateFrequencyMethod(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetShadingCalculationUpdateFrequencyMethod(self)

    def setShadingCalculationUpdateFrequency(self, shadingCalculationUpdateFrequency: "int") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setShadingCalculationUpdateFrequency(self, shadingCalculationUpdateFrequency)

    def resetShadingCalculationUpdateFrequency(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetShadingCalculationUpdateFrequency(self)

    def setMaximumFiguresInShadowOverlapCalculations(self, maximumFiguresInShadowOverlapCalculations: "int") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setMaximumFiguresInShadowOverlapCalculations(self, maximumFiguresInShadowOverlapCalculations)

    def resetMaximumFiguresInShadowOverlapCalculations(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetMaximumFiguresInShadowOverlapCalculations(self)

    def setPolygonClippingAlgorithm(self, polygonClippingAlgorithm: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setPolygonClippingAlgorithm(self, polygonClippingAlgorithm)

    def resetPolygonClippingAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetPolygonClippingAlgorithm(self)

    def setPixelCountingResolution(self, pixelCountingResolution: "int") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setPixelCountingResolution(self, pixelCountingResolution)

    def setSkyDiffuseModelingAlgorithm(self, skyDiffuseModelingAlgorithm: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setSkyDiffuseModelingAlgorithm(self, skyDiffuseModelingAlgorithm)

    def resetSkyDiffuseModelingAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetSkyDiffuseModelingAlgorithm(self)

    def setOutputExternalShadingCalculationResults(self, outputExternalShadingCalculationResults: "bool") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setOutputExternalShadingCalculationResults(self, outputExternalShadingCalculationResults)

    def setDisableSelfShadingWithinShadingZoneGroups(self, disableSelfShadingWithinShadingZoneGroups: "bool") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setDisableSelfShadingWithinShadingZoneGroups(self, disableSelfShadingWithinShadingZoneGroups)

    def setDisableSelfShadingFromShadingZoneGroupstoOtherZones(self, disableSelfShadingFromShadingZoneGroupstoOtherZones: "bool") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setDisableSelfShadingFromShadingZoneGroupstoOtherZones(self, disableSelfShadingFromShadingZoneGroupstoOtherZones)

    def addShadingZoneGroup(self, thermalZones: "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > > const &") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_addShadingZoneGroup(self, thermalZones)

    def removeShadingZoneGroup(self, groupIndex: "unsigned int") -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_removeShadingZoneGroup(self, groupIndex)

    def removeAllShadingZoneGroups(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_removeAllShadingZoneGroups(self)

# Register ShadowCalculation in _openstudiomodelsimulation:
_openstudiomodelsimulation.ShadowCalculation_swigregister(ShadowCalculation)

def ShadowCalculation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ShadowCalculation_iddObjectType()

def ShadowCalculation_shadingCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationMethodValues()

def ShadowCalculation_validShadingCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validShadingCalculationMethodValues()

def ShadowCalculation_shadingCalculationUpdateFrequencyMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_shadingCalculationUpdateFrequencyMethodValues()

def ShadowCalculation_validShadingCalculationUpdateFrequencyMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validShadingCalculationUpdateFrequencyMethodValues()

def ShadowCalculation_polygonClippingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_polygonClippingAlgorithmValues()

def ShadowCalculation_validPolygonClippingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues()

def ShadowCalculation_skyDiffuseModelingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_skyDiffuseModelingAlgorithmValues()

def ShadowCalculation_validSkyDiffuseModelingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues()


def toShadowCalculation(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ShadowCalculation >":
    return _openstudiomodelsimulation.toShadowCalculation(idfObject)

def getShadowCalculation(t_model: "Model") -> "openstudio::model::ShadowCalculation":
    return _openstudiomodelsimulation.getShadowCalculation(t_model)

def getOptionalShadowCalculation(t_model: "Model") -> "boost::optional< openstudio::model::ShadowCalculation >":
    return _openstudiomodelsimulation.getOptionalShadowCalculation(t_model)

def _to_ShadowCalculation(self) -> OptionalShadowCalculation:
    return toShadowCalculation(self)
openstudioutilitiesidf.IdfObject.to_ShadowCalculation = _to_ShadowCalculation

def _getShadowCalculation(self) -> ShadowCalculation:
    return getShadowCalculation(self)
Model.getShadowCalculation = _getShadowCalculation

def _getOptionalShadowCalculation(self) -> OptionalShadowCalculation:
    return getOptionalShadowCalculation(self)
Model.getOptionalShadowCalculation = _getOptionalShadowCalculation

class RunPeriodControlSpecialDays(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelsimulation.RunPeriodControlSpecialDays_swiginit(self, _openstudiomodelsimulation.new_RunPeriodControlSpecialDays(*args))
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlSpecialDays

    @staticmethod
    def specialDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_specialDayTypeValues()

    @staticmethod
    def validSpecialDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_validSpecialDayTypeValues()

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_startDate(self)

    def duration(self) -> "unsigned int":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_duration(self)

    def specialDayType(self) -> "std::string":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_specialDayType(self)

    def setStartDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setStartDate(self, *args)

    def setDuration(self, duration: "unsigned int") -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setDuration(self, duration)

    def setSpecialDayType(self, specialDayType: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setSpecialDayType(self, specialDayType)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_ensureNoLeapDays(self)

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType()

# Register RunPeriodControlSpecialDays in _openstudiomodelsimulation:
_openstudiomodelsimulation.RunPeriodControlSpecialDays_swigregister(RunPeriodControlSpecialDays)

def RunPeriodControlSpecialDays_specialDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.RunPeriodControlSpecialDays_specialDayTypeValues()

def RunPeriodControlSpecialDays_validSpecialDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.RunPeriodControlSpecialDays_validSpecialDayTypeValues()

def RunPeriodControlSpecialDays_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType()


def toRunPeriodControlSpecialDays(idfObject: "IdfObject") -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.toRunPeriodControlSpecialDays(idfObject)

def getRunPeriodControlSpecialDays(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDays(t_model, t_handle)

def getRunPeriodControlSpecialDayss(t_model: "Model") -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDayss(t_model)

def getRunPeriodControlSpecialDaysByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDaysByName(t_model, t_name)

def getRunPeriodControlSpecialDayssByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDayssByName(t_model, t_name, t_exactMatch)

def _to_RunPeriodControlSpecialDays(self) -> OptionalRunPeriodControlSpecialDays:
    return toRunPeriodControlSpecialDays(self)
openstudioutilitiesidf.IdfObject.to_RunPeriodControlSpecialDays = _to_RunPeriodControlSpecialDays

def _getRunPeriodControlSpecialDays(self, t_handle: "UUID") -> OptionalRunPeriodControlSpecialDays:
    return getRunPeriodControlSpecialDays(self, t_handle)
Model.getRunPeriodControlSpecialDays = _getRunPeriodControlSpecialDays

def _getRunPeriodControlSpecialDays(self, t_handle_str: str) -> OptionalRunPeriodControlSpecialDays:
    return getRunPeriodControlSpecialDays(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getRunPeriodControlSpecialDays = _getRunPeriodControlSpecialDays

def _getRunPeriodControlSpecialDayss(self) -> RunPeriodControlSpecialDaysVector:
    return getRunPeriodControlSpecialDayss(self)
Model.getRunPeriodControlSpecialDayss = _getRunPeriodControlSpecialDayss

def _getRunPeriodControlSpecialDaysByName(self, t_name: str) -> OptionalRunPeriodControlSpecialDays:
    return getRunPeriodControlSpecialDaysByName(self, t_name)
Model.getRunPeriodControlSpecialDaysByName = _getRunPeriodControlSpecialDaysByName

def _getRunPeriodControlSpecialDayssByName(self, t_name: str, t_exactMatch: bool) -> RunPeriodControlSpecialDaysVector:
    return getRunPeriodControlSpecialDayssByName(self, t_name, t_exactMatch)
Model.getRunPeriodControlSpecialDayssByName = _getRunPeriodControlSpecialDayssByName

class Timestep(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.Timestep_iddObjectType()
    __swig_destroy__ = _openstudiomodelsimulation.delete_Timestep

    def numberOfTimestepsPerHour(self) -> "int":
        return _openstudiomodelsimulation.Timestep_numberOfTimestepsPerHour(self)

    def isNumberOfTimestepsPerHourDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.Timestep_isNumberOfTimestepsPerHourDefaulted(self)

    def setNumberOfTimestepsPerHour(self, numberOfTimestepsPerHour: "int") -> "bool":
        return _openstudiomodelsimulation.Timestep_setNumberOfTimestepsPerHour(self, numberOfTimestepsPerHour)

    def resetNumberOfTimestepsPerHour(self) -> "void":
        return _openstudiomodelsimulation.Timestep_resetNumberOfTimestepsPerHour(self)

# Register Timestep in _openstudiomodelsimulation:
_openstudiomodelsimulation.Timestep_swigregister(Timestep)

def Timestep_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.Timestep_iddObjectType()


def toTimestep(idfObject: "IdfObject") -> "boost::optional< openstudio::model::Timestep >":
    return _openstudiomodelsimulation.toTimestep(idfObject)

def getTimestep(t_model: "Model") -> "openstudio::model::Timestep":
    return _openstudiomodelsimulation.getTimestep(t_model)

def getOptionalTimestep(t_model: "Model") -> "boost::optional< openstudio::model::Timestep >":
    return _openstudiomodelsimulation.getOptionalTimestep(t_model)

def _to_Timestep(self) -> OptionalTimestep:
    return toTimestep(self)
openstudioutilitiesidf.IdfObject.to_Timestep = _to_Timestep

def _getTimestep(self) -> Timestep:
    return getTimestep(self)
Model.getTimestep = _getTimestep

def _getOptionalTimestep(self) -> OptionalTimestep:
    return getOptionalTimestep(self)
Model.getOptionalTimestep = _getOptionalTimestep

class ZoneAirContaminantBalance(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirContaminantBalance

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType()

    def carbonDioxideConcentration(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_carbonDioxideConcentration(self)

    def isCarbonDioxideConcentrationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_isCarbonDioxideConcentrationDefaulted(self)

    def outdoorCarbonDioxideSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_outdoorCarbonDioxideSchedule(self)

    def setCarbonDioxideConcentration(self, carbonDioxideConcentration: "bool") -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setCarbonDioxideConcentration(self, carbonDioxideConcentration)

    def setCarbonDioxideConcentrationNoFail(self, carbonDioxideConcentration: "bool") -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setCarbonDioxideConcentrationNoFail(self, carbonDioxideConcentration)

    def resetCarbonDioxideConcentration(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_resetCarbonDioxideConcentration(self)

    def setOutdoorCarbonDioxideSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setOutdoorCarbonDioxideSchedule(self, schedule)

    def resetOutdoorCarbonDioxideSchedule(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_resetOutdoorCarbonDioxideSchedule(self)

# Register ZoneAirContaminantBalance in _openstudiomodelsimulation:
_openstudiomodelsimulation.ZoneAirContaminantBalance_swigregister(ZoneAirContaminantBalance)

def ZoneAirContaminantBalance_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType()


def toZoneAirContaminantBalance(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
    return _openstudiomodelsimulation.toZoneAirContaminantBalance(idfObject)

def getZoneAirContaminantBalance(t_model: "Model") -> "openstudio::model::ZoneAirContaminantBalance":
    return _openstudiomodelsimulation.getZoneAirContaminantBalance(t_model)

def getOptionalZoneAirContaminantBalance(t_model: "Model") -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
    return _openstudiomodelsimulation.getOptionalZoneAirContaminantBalance(t_model)

def _to_ZoneAirContaminantBalance(self) -> OptionalZoneAirContaminantBalance:
    return toZoneAirContaminantBalance(self)
openstudioutilitiesidf.IdfObject.to_ZoneAirContaminantBalance = _to_ZoneAirContaminantBalance

def _getZoneAirContaminantBalance(self) -> ZoneAirContaminantBalance:
    return getZoneAirContaminantBalance(self)
Model.getZoneAirContaminantBalance = _getZoneAirContaminantBalance

def _getOptionalZoneAirContaminantBalance(self) -> OptionalZoneAirContaminantBalance:
    return getOptionalZoneAirContaminantBalance(self)
Model.getOptionalZoneAirContaminantBalance = _getOptionalZoneAirContaminantBalance

class ZoneAirHeatBalanceAlgorithm(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirHeatBalanceAlgorithm

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType()

    @staticmethod
    def validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues()

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: "std::string") -> "bool":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_resetAlgorithm(self)

# Register ZoneAirHeatBalanceAlgorithm in _openstudiomodelsimulation:
_openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_swigregister(ZoneAirHeatBalanceAlgorithm)

def ZoneAirHeatBalanceAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType()

def ZoneAirHeatBalanceAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues()


def toZoneAirHeatBalanceAlgorithm(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.toZoneAirHeatBalanceAlgorithm(idfObject)

def getZoneAirHeatBalanceAlgorithm(t_model: "Model") -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
    return _openstudiomodelsimulation.getZoneAirHeatBalanceAlgorithm(t_model)

def getOptionalZoneAirHeatBalanceAlgorithm(t_model: "Model") -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.getOptionalZoneAirHeatBalanceAlgorithm(t_model)

def _to_ZoneAirHeatBalanceAlgorithm(self) -> OptionalZoneAirHeatBalanceAlgorithm:
    return toZoneAirHeatBalanceAlgorithm(self)
openstudioutilitiesidf.IdfObject.to_ZoneAirHeatBalanceAlgorithm = _to_ZoneAirHeatBalanceAlgorithm

def _getZoneAirHeatBalanceAlgorithm(self) -> ZoneAirHeatBalanceAlgorithm:
    return getZoneAirHeatBalanceAlgorithm(self)
Model.getZoneAirHeatBalanceAlgorithm = _getZoneAirHeatBalanceAlgorithm

def _getOptionalZoneAirHeatBalanceAlgorithm(self) -> OptionalZoneAirHeatBalanceAlgorithm:
    return getOptionalZoneAirHeatBalanceAlgorithm(self)
Model.getOptionalZoneAirHeatBalanceAlgorithm = _getOptionalZoneAirHeatBalanceAlgorithm

class ZoneAirMassFlowConservation(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirMassFlowConservation

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType()

    @staticmethod
    def sourceZoneInfiltrationTreatmentValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues()

    @staticmethod
    def infiltrationBalancingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues()

    @staticmethod
    def infiltrationBalancingZonesValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues()

    def adjustZoneMixingForZoneAirMassFlowBalance(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_adjustZoneMixingForZoneAirMassFlowBalance(self)

    def isAdjustZoneMixingForZoneAirMassFlowBalanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isAdjustZoneMixingForZoneAirMassFlowBalanceDefaulted(self)

    def sourceZoneInfiltrationTreatment(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatment(self)

    def isSourceZoneInfiltrationTreatmentDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isSourceZoneInfiltrationTreatmentDefaulted(self)

    def infiltrationBalancingMethod(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethod(self)

    def isInfiltrationBalancingMethodDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isInfiltrationBalancingMethodDefaulted(self)

    def infiltrationBalancingZones(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZones(self)

    def isInfiltrationBalancingZonesDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isInfiltrationBalancingZonesDefaulted(self)

    def setAdjustZoneMixingForZoneAirMassFlowBalance(self, adjustZoneMixingForZoneAirMassFlowBalance: "bool") -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setAdjustZoneMixingForZoneAirMassFlowBalance(self, adjustZoneMixingForZoneAirMassFlowBalance)

    def resetAdjustZoneMixingForZoneAirMassFlowBalance(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetAdjustZoneMixingForZoneAirMassFlowBalance(self)

    def setSourceZoneInfiltrationTreatment(self, sourceZoneInfiltrationTreatment: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setSourceZoneInfiltrationTreatment(self, sourceZoneInfiltrationTreatment)

    def resetSourceZoneInfiltrationTreatment(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetSourceZoneInfiltrationTreatment(self)

    def setInfiltrationBalancingMethod(self, infiltrationBalancingMethod: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setInfiltrationBalancingMethod(self, infiltrationBalancingMethod)

    def resetInfiltrationBalancingMethod(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetInfiltrationBalancingMethod(self)

    def setInfiltrationBalancingZones(self, infiltrationBalancingZones: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setInfiltrationBalancingZones(self, infiltrationBalancingZones)

    def resetInfiltrationBalancingZones(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetInfiltrationBalancingZones(self)

# Register ZoneAirMassFlowConservation in _openstudiomodelsimulation:
_openstudiomodelsimulation.ZoneAirMassFlowConservation_swigregister(ZoneAirMassFlowConservation)

def ZoneAirMassFlowConservation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType()

def ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues()

def ZoneAirMassFlowConservation_infiltrationBalancingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues()

def ZoneAirMassFlowConservation_infiltrationBalancingZonesValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues()


def toZoneAirMassFlowConservation(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
    return _openstudiomodelsimulation.toZoneAirMassFlowConservation(idfObject)

def getZoneAirMassFlowConservation(t_model: "Model") -> "openstudio::model::ZoneAirMassFlowConservation":
    return _openstudiomodelsimulation.getZoneAirMassFlowConservation(t_model)

def getOptionalZoneAirMassFlowConservation(t_model: "Model") -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
    return _openstudiomodelsimulation.getOptionalZoneAirMassFlowConservation(t_model)

def _to_ZoneAirMassFlowConservation(self) -> OptionalZoneAirMassFlowConservation:
    return toZoneAirMassFlowConservation(self)
openstudioutilitiesidf.IdfObject.to_ZoneAirMassFlowConservation = _to_ZoneAirMassFlowConservation

def _getZoneAirMassFlowConservation(self) -> ZoneAirMassFlowConservation:
    return getZoneAirMassFlowConservation(self)
Model.getZoneAirMassFlowConservation = _getZoneAirMassFlowConservation

def _getOptionalZoneAirMassFlowConservation(self) -> OptionalZoneAirMassFlowConservation:
    return getOptionalZoneAirMassFlowConservation(self)
Model.getOptionalZoneAirMassFlowConservation = _getOptionalZoneAirMassFlowConservation

class ZoneCapacitanceMultiplierResearchSpecial(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneCapacitanceMultiplierResearchSpecial

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType()

    def temperatureCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_temperatureCapacityMultiplier(self)

    def isTemperatureCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isTemperatureCapacityMultiplierDefaulted(self)

    def humidityCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_humidityCapacityMultiplier(self)

    def isHumidityCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isHumidityCapacityMultiplierDefaulted(self)

    def carbonDioxideCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_carbonDioxideCapacityMultiplier(self)

    def isCarbonDioxideCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isCarbonDioxideCapacityMultiplierDefaulted(self)

    def setTemperatureCapacityMultiplier(self, temperatureCapacityMultiplier: "double") -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setTemperatureCapacityMultiplier(self, temperatureCapacityMultiplier)

    def resetTemperatureCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetTemperatureCapacityMultiplier(self)

    def setHumidityCapacityMultiplier(self, humidityCapacityMultiplier: "double") -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setHumidityCapacityMultiplier(self, humidityCapacityMultiplier)

    def resetHumidityCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetHumidityCapacityMultiplier(self)

    def setCarbonDioxideCapacityMultiplier(self, carbonDioxideCapacityMultiplier: "double") -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setCarbonDioxideCapacityMultiplier(self, carbonDioxideCapacityMultiplier)

    def resetCarbonDioxideCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetCarbonDioxideCapacityMultiplier(self)

# Register ZoneCapacitanceMultiplierResearchSpecial in _openstudiomodelsimulation:
_openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_swigregister(ZoneCapacitanceMultiplierResearchSpecial)

def ZoneCapacitanceMultiplierResearchSpecial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType()


def toZoneCapacitanceMultiplierResearchSpecial(idfObject: "IdfObject") -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
    return _openstudiomodelsimulation.toZoneCapacitanceMultiplierResearchSpecial(idfObject)

def getZoneCapacitanceMultiplierResearchSpecial(t_model: "Model") -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
    return _openstudiomodelsimulation.getZoneCapacitanceMultiplierResearchSpecial(t_model)

def getOptionalZoneCapacitanceMultiplierResearchSpecial(t_model: "Model") -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
    return _openstudiomodelsimulation.getOptionalZoneCapacitanceMultiplierResearchSpecial(t_model)

def _to_ZoneCapacitanceMultiplierResearchSpecial(self) -> OptionalZoneCapacitanceMultiplierResearchSpecial:
    return toZoneCapacitanceMultiplierResearchSpecial(self)
openstudioutilitiesidf.IdfObject.to_ZoneCapacitanceMultiplierResearchSpecial = _to_ZoneCapacitanceMultiplierResearchSpecial

def _getZoneCapacitanceMultiplierResearchSpecial(self) -> ZoneCapacitanceMultiplierResearchSpecial:
    return getZoneCapacitanceMultiplierResearchSpecial(self)
Model.getZoneCapacitanceMultiplierResearchSpecial = _getZoneCapacitanceMultiplierResearchSpecial

def _getOptionalZoneCapacitanceMultiplierResearchSpecial(self) -> OptionalZoneCapacitanceMultiplierResearchSpecial:
    return getOptionalZoneCapacitanceMultiplierResearchSpecial(self)
Model.getOptionalZoneCapacitanceMultiplierResearchSpecial = _getOptionalZoneCapacitanceMultiplierResearchSpecial

class SkyTemperature(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SkyTemperature_swiginit(self, _openstudiomodelsimulation.new_SkyTemperature(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SkyTemperature

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SkyTemperature_iddObjectType()

# Register SkyTemperature in _openstudiomodelsimulation:
_openstudiomodelsimulation.SkyTemperature_swigregister(SkyTemperature)

def SkyTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SkyTemperature_iddObjectType()


def toSkyTemperature(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.toSkyTemperature(idfObject)

def getSkyTemperature(t_model: "Model", t_handle: "UUID") -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.getSkyTemperature(t_model, t_handle)

def getSkyTemperatures(t_model: "Model") -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > >":
    return _openstudiomodelsimulation.getSkyTemperatures(t_model)

def getSkyTemperatureByName(t_model: "Model", t_name: "std::string const &") -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.getSkyTemperatureByName(t_model, t_name)

def getSkyTemperaturesByName(t_model: "Model", t_name: "std::string const &", t_exactMatch: "bool") -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > >":
    return _openstudiomodelsimulation.getSkyTemperaturesByName(t_model, t_name, t_exactMatch)

def _to_SkyTemperature(self) -> OptionalSkyTemperature:
    return toSkyTemperature(self)
openstudioutilitiesidf.IdfObject.to_SkyTemperature = _to_SkyTemperature

def _getSkyTemperature(self, t_handle: "UUID") -> OptionalSkyTemperature:
    return getSkyTemperature(self, t_handle)
Model.getSkyTemperature = _getSkyTemperature

def _getSkyTemperature(self, t_handle_str: str) -> OptionalSkyTemperature:
    return getSkyTemperature(self, openstudioutilitiescore.toUUID(t_handle_str))
Model.getSkyTemperature = _getSkyTemperature

def _getSkyTemperatures(self) -> SkyTemperatureVector:
    return getSkyTemperatures(self)
Model.getSkyTemperatures = _getSkyTemperatures

def _getSkyTemperatureByName(self, t_name: str) -> OptionalSkyTemperature:
    return getSkyTemperatureByName(self, t_name)
Model.getSkyTemperatureByName = _getSkyTemperatureByName

def _getSkyTemperaturesByName(self, t_name: str, t_exactMatch: bool) -> SkyTemperatureVector:
    return getSkyTemperaturesByName(self, t_name, t_exactMatch)
Model.getSkyTemperaturesByName = _getSkyTemperaturesByName

class SiteGroundReflectance(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundReflectance

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteGroundReflectance_iddObjectType()

    def januaryGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_januaryGroundReflectance(self)

    def isJanuaryGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJanuaryGroundReflectanceDefaulted(self)

    def februaryGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_februaryGroundReflectance(self)

    def isFebruaryGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isFebruaryGroundReflectanceDefaulted(self)

    def marchGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_marchGroundReflectance(self)

    def isMarchGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isMarchGroundReflectanceDefaulted(self)

    def aprilGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_aprilGroundReflectance(self)

    def isAprilGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isAprilGroundReflectanceDefaulted(self)

    def mayGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_mayGroundReflectance(self)

    def isMayGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isMayGroundReflectanceDefaulted(self)

    def juneGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_juneGroundReflectance(self)

    def isJuneGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJuneGroundReflectanceDefaulted(self)

    def julyGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_julyGroundReflectance(self)

    def isJulyGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJulyGroundReflectanceDefaulted(self)

    def augustGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_augustGroundReflectance(self)

    def isAugustGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isAugustGroundReflectanceDefaulted(self)

    def septemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_septemberGroundReflectance(self)

    def isSeptemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isSeptemberGroundReflectanceDefaulted(self)

    def octoberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_octoberGroundReflectance(self)

    def isOctoberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isOctoberGroundReflectanceDefaulted(self)

    def novemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_novemberGroundReflectance(self)

    def isNovemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isNovemberGroundReflectanceDefaulted(self)

    def decemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_decemberGroundReflectance(self)

    def isDecemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isDecemberGroundReflectanceDefaulted(self)

    def setJanuaryGroundReflectance(self, januaryGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJanuaryGroundReflectance(self, januaryGroundReflectance)

    def resetJanuaryGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJanuaryGroundReflectance(self)

    def setFebruaryGroundReflectance(self, februaryGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setFebruaryGroundReflectance(self, februaryGroundReflectance)

    def resetFebruaryGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetFebruaryGroundReflectance(self)

    def setMarchGroundReflectance(self, marchGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setMarchGroundReflectance(self, marchGroundReflectance)

    def resetMarchGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetMarchGroundReflectance(self)

    def setAprilGroundReflectance(self, aprilGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setAprilGroundReflectance(self, aprilGroundReflectance)

    def resetAprilGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetAprilGroundReflectance(self)

    def setMayGroundReflectance(self, mayGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setMayGroundReflectance(self, mayGroundReflectance)

    def resetMayGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetMayGroundReflectance(self)

    def setJuneGroundReflectance(self, juneGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJuneGroundReflectance(self, juneGroundReflectance)

    def resetJuneGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJuneGroundReflectance(self)

    def setJulyGroundReflectance(self, julyGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJulyGroundReflectance(self, julyGroundReflectance)

    def resetJulyGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJulyGroundReflectance(self)

    def setAugustGroundReflectance(self, augustGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setAugustGroundReflectance(self, augustGroundReflectance)

    def resetAugustGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetAugustGroundReflectance(self)

    def setSeptemberGroundReflectance(self, septemberGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setSeptemberGroundReflectance(self, septemberGroundReflectance)

    def resetSeptemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetSeptemberGroundReflectance(self)

    def setOctoberGroundReflectance(self, octoberGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setOctoberGroundReflectance(self, octoberGroundReflectance)

    def resetOctoberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetOctoberGroundReflectance(self)

    def setNovemberGroundReflectance(self, novemberGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setNovemberGroundReflectance(self, novemberGroundReflectance)

    def resetNovemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetNovemberGroundReflectance(self)

    def setDecemberGroundReflectance(self, decemberGroundReflectance: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setDecemberGroundReflectance(self, decemberGroundReflectance)

    def resetDecemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetDecemberGroundReflectance(self)

# Register SiteGroundReflectance in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundReflectance_swigregister(SiteGroundReflectance)

def SiteGroundReflectance_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundReflectance_iddObjectType()


def toSiteGroundReflectance(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteGroundReflectance >":
    return _openstudiomodelsimulation.toSiteGroundReflectance(idfObject)

def getSiteGroundReflectance(t_model: "Model") -> "openstudio::model::SiteGroundReflectance":
    return _openstudiomodelsimulation.getSiteGroundReflectance(t_model)

def getOptionalSiteGroundReflectance(t_model: "Model") -> "boost::optional< openstudio::model::SiteGroundReflectance >":
    return _openstudiomodelsimulation.getOptionalSiteGroundReflectance(t_model)

def _to_SiteGroundReflectance(self) -> OptionalSiteGroundReflectance:
    return toSiteGroundReflectance(self)
openstudioutilitiesidf.IdfObject.to_SiteGroundReflectance = _to_SiteGroundReflectance

def _getSiteGroundReflectance(self) -> SiteGroundReflectance:
    return getSiteGroundReflectance(self)
Model.getSiteGroundReflectance = _getSiteGroundReflectance

def _getOptionalSiteGroundReflectance(self) -> OptionalSiteGroundReflectance:
    return getOptionalSiteGroundReflectance(self)
Model.getOptionalSiteGroundReflectance = _getOptionalSiteGroundReflectance

class SiteGroundTemperatureBuildingSurface(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureBuildingSurface(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureBuildingSurface

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType()

    def januaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_januaryGroundTemperature(self)

    def isJanuaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJanuaryGroundTemperatureDefaulted(self)

    def februaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_februaryGroundTemperature(self)

    def isFebruaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isFebruaryGroundTemperatureDefaulted(self)

    def marchGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_marchGroundTemperature(self)

    def isMarchGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMarchGroundTemperatureDefaulted(self)

    def aprilGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_aprilGroundTemperature(self)

    def isAprilGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isAprilGroundTemperatureDefaulted(self)

    def mayGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_mayGroundTemperature(self)

    def isMayGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMayGroundTemperatureDefaulted(self)

    def juneGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_juneGroundTemperature(self)

    def isJuneGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJuneGroundTemperatureDefaulted(self)

    def julyGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_julyGroundTemperature(self)

    def isJulyGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJulyGroundTemperatureDefaulted(self)

    def augustGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_augustGroundTemperature(self)

    def isAugustGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isAugustGroundTemperatureDefaulted(self)

    def septemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_septemberGroundTemperature(self)

    def isSeptemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isSeptemberGroundTemperatureDefaulted(self)

    def octoberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_octoberGroundTemperature(self)

    def isOctoberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isOctoberGroundTemperatureDefaulted(self)

    def novemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_novemberGroundTemperature(self)

    def isNovemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isNovemberGroundTemperatureDefaulted(self)

    def decemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_decemberGroundTemperature(self)

    def isDecemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isDecemberGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_getAllMonthlyTemperatures(self)

    def setJanuaryGroundTemperature(self, januaryGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJanuaryGroundTemperature(self, januaryGroundTemperature)

    def resetJanuaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJanuaryGroundTemperature(self)

    def setFebruaryGroundTemperature(self, februaryGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setFebruaryGroundTemperature(self, februaryGroundTemperature)

    def resetFebruaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetFebruaryGroundTemperature(self)

    def setMarchGroundTemperature(self, marchGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setMarchGroundTemperature(self, marchGroundTemperature)

    def resetMarchGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetMarchGroundTemperature(self)

    def setAprilGroundTemperature(self, aprilGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAprilGroundTemperature(self, aprilGroundTemperature)

    def resetAprilGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAprilGroundTemperature(self)

    def setMayGroundTemperature(self, mayGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setMayGroundTemperature(self, mayGroundTemperature)

    def resetMayGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetMayGroundTemperature(self)

    def setJuneGroundTemperature(self, juneGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJuneGroundTemperature(self, juneGroundTemperature)

    def resetJuneGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJuneGroundTemperature(self)

    def setJulyGroundTemperature(self, julyGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJulyGroundTemperature(self, julyGroundTemperature)

    def resetJulyGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJulyGroundTemperature(self)

    def setAugustGroundTemperature(self, augustGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAugustGroundTemperature(self, augustGroundTemperature)

    def resetAugustGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAugustGroundTemperature(self)

    def setSeptemberGroundTemperature(self, septemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setSeptemberGroundTemperature(self, septemberGroundTemperature)

    def resetSeptemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetSeptemberGroundTemperature(self)

    def setOctoberGroundTemperature(self, octoberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setOctoberGroundTemperature(self, octoberGroundTemperature)

    def resetOctoberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetOctoberGroundTemperature(self)

    def setNovemberGroundTemperature(self, novemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setNovemberGroundTemperature(self, novemberGroundTemperature)

    def resetNovemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetNovemberGroundTemperature(self)

    def setDecemberGroundTemperature(self, decemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setDecemberGroundTemperature(self, decemberGroundTemperature)

    def resetDecemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetDecemberGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: "DoubleVector") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAllMonthlyTemperatures(self, monthly_temperatures)

# Register SiteGroundTemperatureBuildingSurface in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_swigregister(SiteGroundTemperatureBuildingSurface)

def SiteGroundTemperatureBuildingSurface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType()


def toSiteGroundTemperatureBuildingSurface(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteGroundTemperatureBuildingSurface >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureBuildingSurface(idfObject)

def getSiteGroundTemperatureBuildingSurface(t_model: "Model") -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
    return _openstudiomodelsimulation.getSiteGroundTemperatureBuildingSurface(t_model)

def getOptionalSiteGroundTemperatureBuildingSurface(t_model: "Model") -> "boost::optional< openstudio::model::SiteGroundTemperatureBuildingSurface >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureBuildingSurface(t_model)

def _to_SiteGroundTemperatureBuildingSurface(self) -> OptionalSiteGroundTemperatureBuildingSurface:
    return toSiteGroundTemperatureBuildingSurface(self)
openstudioutilitiesidf.IdfObject.to_SiteGroundTemperatureBuildingSurface = _to_SiteGroundTemperatureBuildingSurface

def _getSiteGroundTemperatureBuildingSurface(self) -> SiteGroundTemperatureBuildingSurface:
    return getSiteGroundTemperatureBuildingSurface(self)
Model.getSiteGroundTemperatureBuildingSurface = _getSiteGroundTemperatureBuildingSurface

def _getOptionalSiteGroundTemperatureBuildingSurface(self) -> OptionalSiteGroundTemperatureBuildingSurface:
    return getOptionalSiteGroundTemperatureBuildingSurface(self)
Model.getOptionalSiteGroundTemperatureBuildingSurface = _getOptionalSiteGroundTemperatureBuildingSurface

class SiteGroundTemperatureDeep(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SiteGroundTemperatureDeep_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureDeep(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureDeep

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType()

    def januaryDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_januaryDeepGroundTemperature(self)

    def isJanuaryDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJanuaryDeepGroundTemperatureDefaulted(self)

    def februaryDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_februaryDeepGroundTemperature(self)

    def isFebruaryDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isFebruaryDeepGroundTemperatureDefaulted(self)

    def marchDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_marchDeepGroundTemperature(self)

    def isMarchDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMarchDeepGroundTemperatureDefaulted(self)

    def aprilDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_aprilDeepGroundTemperature(self)

    def isAprilDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isAprilDeepGroundTemperatureDefaulted(self)

    def mayDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_mayDeepGroundTemperature(self)

    def isMayDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMayDeepGroundTemperatureDefaulted(self)

    def juneDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_juneDeepGroundTemperature(self)

    def isJuneDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJuneDeepGroundTemperatureDefaulted(self)

    def julyDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_julyDeepGroundTemperature(self)

    def isJulyDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJulyDeepGroundTemperatureDefaulted(self)

    def augustDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_augustDeepGroundTemperature(self)

    def isAugustDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isAugustDeepGroundTemperatureDefaulted(self)

    def septemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_septemberDeepGroundTemperature(self)

    def isSeptemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isSeptemberDeepGroundTemperatureDefaulted(self)

    def octoberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_octoberDeepGroundTemperature(self)

    def isOctoberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isOctoberDeepGroundTemperatureDefaulted(self)

    def novemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_novemberDeepGroundTemperature(self)

    def isNovemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isNovemberDeepGroundTemperatureDefaulted(self)

    def decemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_decemberDeepGroundTemperature(self)

    def isDecemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isDecemberDeepGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_getAllMonthlyTemperatures(self)

    def setJanuaryDeepGroundTemperature(self, januaryDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJanuaryDeepGroundTemperature(self, januaryDeepGroundTemperature)

    def resetJanuaryDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJanuaryDeepGroundTemperature(self)

    def setFebruaryDeepGroundTemperature(self, februaryDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setFebruaryDeepGroundTemperature(self, februaryDeepGroundTemperature)

    def resetFebruaryDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetFebruaryDeepGroundTemperature(self)

    def setMarchDeepGroundTemperature(self, marchDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setMarchDeepGroundTemperature(self, marchDeepGroundTemperature)

    def resetMarchDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetMarchDeepGroundTemperature(self)

    def setAprilDeepGroundTemperature(self, aprilDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAprilDeepGroundTemperature(self, aprilDeepGroundTemperature)

    def resetAprilDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAprilDeepGroundTemperature(self)

    def setMayDeepGroundTemperature(self, mayDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setMayDeepGroundTemperature(self, mayDeepGroundTemperature)

    def resetMayDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetMayDeepGroundTemperature(self)

    def setJuneDeepGroundTemperature(self, juneDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJuneDeepGroundTemperature(self, juneDeepGroundTemperature)

    def resetJuneDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJuneDeepGroundTemperature(self)

    def setJulyDeepGroundTemperature(self, julyDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJulyDeepGroundTemperature(self, julyDeepGroundTemperature)

    def resetJulyDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJulyDeepGroundTemperature(self)

    def setAugustDeepGroundTemperature(self, augustDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAugustDeepGroundTemperature(self, augustDeepGroundTemperature)

    def resetAugustDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAugustDeepGroundTemperature(self)

    def setSeptemberDeepGroundTemperature(self, septemberDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setSeptemberDeepGroundTemperature(self, septemberDeepGroundTemperature)

    def resetSeptemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetSeptemberDeepGroundTemperature(self)

    def setOctoberDeepGroundTemperature(self, octoberDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setOctoberDeepGroundTemperature(self, octoberDeepGroundTemperature)

    def resetOctoberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetOctoberDeepGroundTemperature(self)

    def setNovemberDeepGroundTemperature(self, novemberDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setNovemberDeepGroundTemperature(self, novemberDeepGroundTemperature)

    def resetNovemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetNovemberDeepGroundTemperature(self)

    def setDecemberDeepGroundTemperature(self, decemberDeepGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setDecemberDeepGroundTemperature(self, decemberDeepGroundTemperature)

    def resetDecemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetDecemberDeepGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: "DoubleVector") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAllMonthlyTemperatures(self, monthly_temperatures)

# Register SiteGroundTemperatureDeep in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureDeep_swigregister(SiteGroundTemperatureDeep)

def SiteGroundTemperatureDeep_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType()


def toSiteGroundTemperatureDeep(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteGroundTemperatureDeep >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureDeep(idfObject)

def getSiteGroundTemperatureDeep(t_model: "Model") -> "openstudio::model::SiteGroundTemperatureDeep":
    return _openstudiomodelsimulation.getSiteGroundTemperatureDeep(t_model)

def getOptionalSiteGroundTemperatureDeep(t_model: "Model") -> "boost::optional< openstudio::model::SiteGroundTemperatureDeep >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureDeep(t_model)

def _to_SiteGroundTemperatureDeep(self) -> OptionalSiteGroundTemperatureDeep:
    return toSiteGroundTemperatureDeep(self)
openstudioutilitiesidf.IdfObject.to_SiteGroundTemperatureDeep = _to_SiteGroundTemperatureDeep

def _getSiteGroundTemperatureDeep(self) -> SiteGroundTemperatureDeep:
    return getSiteGroundTemperatureDeep(self)
Model.getSiteGroundTemperatureDeep = _getSiteGroundTemperatureDeep

def _getOptionalSiteGroundTemperatureDeep(self) -> OptionalSiteGroundTemperatureDeep:
    return getOptionalSiteGroundTemperatureDeep(self)
Model.getOptionalSiteGroundTemperatureDeep = _getOptionalSiteGroundTemperatureDeep

class SiteGroundTemperatureShallow(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SiteGroundTemperatureShallow_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureShallow(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureShallow

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType()

    def januarySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_januarySurfaceGroundTemperature(self)

    def isJanuarySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJanuarySurfaceGroundTemperatureDefaulted(self)

    def februarySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_februarySurfaceGroundTemperature(self)

    def isFebruarySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isFebruarySurfaceGroundTemperatureDefaulted(self)

    def marchSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_marchSurfaceGroundTemperature(self)

    def isMarchSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMarchSurfaceGroundTemperatureDefaulted(self)

    def aprilSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_aprilSurfaceGroundTemperature(self)

    def isAprilSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isAprilSurfaceGroundTemperatureDefaulted(self)

    def maySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_maySurfaceGroundTemperature(self)

    def isMaySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMaySurfaceGroundTemperatureDefaulted(self)

    def juneSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_juneSurfaceGroundTemperature(self)

    def isJuneSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJuneSurfaceGroundTemperatureDefaulted(self)

    def julySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_julySurfaceGroundTemperature(self)

    def isJulySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJulySurfaceGroundTemperatureDefaulted(self)

    def augustSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_augustSurfaceGroundTemperature(self)

    def isAugustSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isAugustSurfaceGroundTemperatureDefaulted(self)

    def septemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_septemberSurfaceGroundTemperature(self)

    def isSeptemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isSeptemberSurfaceGroundTemperatureDefaulted(self)

    def octoberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_octoberSurfaceGroundTemperature(self)

    def isOctoberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isOctoberSurfaceGroundTemperatureDefaulted(self)

    def novemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_novemberSurfaceGroundTemperature(self)

    def isNovemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isNovemberSurfaceGroundTemperatureDefaulted(self)

    def decemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_decemberSurfaceGroundTemperature(self)

    def isDecemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isDecemberSurfaceGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_getAllMonthlyTemperatures(self)

    def setJanuarySurfaceGroundTemperature(self, januarySurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJanuarySurfaceGroundTemperature(self, januarySurfaceGroundTemperature)

    def resetJanuarySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJanuarySurfaceGroundTemperature(self)

    def setFebruarySurfaceGroundTemperature(self, februarySurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setFebruarySurfaceGroundTemperature(self, februarySurfaceGroundTemperature)

    def resetFebruarySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetFebruarySurfaceGroundTemperature(self)

    def setMarchSurfaceGroundTemperature(self, marchSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setMarchSurfaceGroundTemperature(self, marchSurfaceGroundTemperature)

    def resetMarchSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetMarchSurfaceGroundTemperature(self)

    def setAprilSurfaceGroundTemperature(self, aprilSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAprilSurfaceGroundTemperature(self, aprilSurfaceGroundTemperature)

    def resetAprilSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAprilSurfaceGroundTemperature(self)

    def setMaySurfaceGroundTemperature(self, maySurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setMaySurfaceGroundTemperature(self, maySurfaceGroundTemperature)

    def resetMaySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetMaySurfaceGroundTemperature(self)

    def setJuneSurfaceGroundTemperature(self, juneSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJuneSurfaceGroundTemperature(self, juneSurfaceGroundTemperature)

    def resetJuneSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJuneSurfaceGroundTemperature(self)

    def setJulySurfaceGroundTemperature(self, julySurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJulySurfaceGroundTemperature(self, julySurfaceGroundTemperature)

    def resetJulySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJulySurfaceGroundTemperature(self)

    def setAugustSurfaceGroundTemperature(self, augustSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAugustSurfaceGroundTemperature(self, augustSurfaceGroundTemperature)

    def resetAugustSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAugustSurfaceGroundTemperature(self)

    def setSeptemberSurfaceGroundTemperature(self, septemberSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setSeptemberSurfaceGroundTemperature(self, septemberSurfaceGroundTemperature)

    def resetSeptemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetSeptemberSurfaceGroundTemperature(self)

    def setOctoberSurfaceGroundTemperature(self, octoberSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setOctoberSurfaceGroundTemperature(self, octoberSurfaceGroundTemperature)

    def resetOctoberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetOctoberSurfaceGroundTemperature(self)

    def setNovemberSurfaceGroundTemperature(self, novemberSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setNovemberSurfaceGroundTemperature(self, novemberSurfaceGroundTemperature)

    def resetNovemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetNovemberSurfaceGroundTemperature(self)

    def setDecemberSurfaceGroundTemperature(self, decemberSurfaceGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setDecemberSurfaceGroundTemperature(self, decemberSurfaceGroundTemperature)

    def resetDecemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetDecemberSurfaceGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: "DoubleVector") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAllMonthlyTemperatures(self, monthly_temperatures)

# Register SiteGroundTemperatureShallow in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureShallow_swigregister(SiteGroundTemperatureShallow)

def SiteGroundTemperatureShallow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType()


def toSiteGroundTemperatureShallow(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteGroundTemperatureShallow >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureShallow(idfObject)

def getSiteGroundTemperatureShallow(t_model: "Model") -> "openstudio::model::SiteGroundTemperatureShallow":
    return _openstudiomodelsimulation.getSiteGroundTemperatureShallow(t_model)

def getOptionalSiteGroundTemperatureShallow(t_model: "Model") -> "boost::optional< openstudio::model::SiteGroundTemperatureShallow >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureShallow(t_model)

def _to_SiteGroundTemperatureShallow(self) -> OptionalSiteGroundTemperatureShallow:
    return toSiteGroundTemperatureShallow(self)
openstudioutilitiesidf.IdfObject.to_SiteGroundTemperatureShallow = _to_SiteGroundTemperatureShallow

def _getSiteGroundTemperatureShallow(self) -> SiteGroundTemperatureShallow:
    return getSiteGroundTemperatureShallow(self)
Model.getSiteGroundTemperatureShallow = _getSiteGroundTemperatureShallow

def _getOptionalSiteGroundTemperatureShallow(self) -> OptionalSiteGroundTemperatureShallow:
    return getOptionalSiteGroundTemperatureShallow(self)
Model.getOptionalSiteGroundTemperatureShallow = _getOptionalSiteGroundTemperatureShallow

class SiteGroundTemperatureFCfactorMethod(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Model"):
        _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_swiginit(self, _openstudiomodelsimulation.new_SiteGroundTemperatureFCfactorMethod(model))
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureFCfactorMethod

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType()

    def januaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_januaryGroundTemperature(self)

    def isJanuaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJanuaryGroundTemperatureDefaulted(self)

    def februaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_februaryGroundTemperature(self)

    def isFebruaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isFebruaryGroundTemperatureDefaulted(self)

    def marchGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_marchGroundTemperature(self)

    def isMarchGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMarchGroundTemperatureDefaulted(self)

    def aprilGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_aprilGroundTemperature(self)

    def isAprilGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isAprilGroundTemperatureDefaulted(self)

    def mayGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_mayGroundTemperature(self)

    def isMayGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMayGroundTemperatureDefaulted(self)

    def juneGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_juneGroundTemperature(self)

    def isJuneGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJuneGroundTemperatureDefaulted(self)

    def julyGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_julyGroundTemperature(self)

    def isJulyGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJulyGroundTemperatureDefaulted(self)

    def augustGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_augustGroundTemperature(self)

    def isAugustGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isAugustGroundTemperatureDefaulted(self)

    def septemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_septemberGroundTemperature(self)

    def isSeptemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isSeptemberGroundTemperatureDefaulted(self)

    def octoberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_octoberGroundTemperature(self)

    def isOctoberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isOctoberGroundTemperatureDefaulted(self)

    def novemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_novemberGroundTemperature(self)

    def isNovemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isNovemberGroundTemperatureDefaulted(self)

    def decemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_decemberGroundTemperature(self)

    def isDecemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isDecemberGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_getAllMonthlyTemperatures(self)

    def setJanuaryGroundTemperature(self, januaryGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJanuaryGroundTemperature(self, januaryGroundTemperature)

    def resetJanuaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJanuaryGroundTemperature(self)

    def setFebruaryGroundTemperature(self, februaryGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setFebruaryGroundTemperature(self, februaryGroundTemperature)

    def resetFebruaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetFebruaryGroundTemperature(self)

    def setMarchGroundTemperature(self, marchGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setMarchGroundTemperature(self, marchGroundTemperature)

    def resetMarchGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetMarchGroundTemperature(self)

    def setAprilGroundTemperature(self, aprilGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAprilGroundTemperature(self, aprilGroundTemperature)

    def resetAprilGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAprilGroundTemperature(self)

    def setMayGroundTemperature(self, mayGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setMayGroundTemperature(self, mayGroundTemperature)

    def resetMayGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetMayGroundTemperature(self)

    def setJuneGroundTemperature(self, juneGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJuneGroundTemperature(self, juneGroundTemperature)

    def resetJuneGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJuneGroundTemperature(self)

    def setJulyGroundTemperature(self, julyGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJulyGroundTemperature(self, julyGroundTemperature)

    def resetJulyGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJulyGroundTemperature(self)

    def setAugustGroundTemperature(self, augustGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAugustGroundTemperature(self, augustGroundTemperature)

    def resetAugustGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAugustGroundTemperature(self)

    def setSeptemberGroundTemperature(self, septemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setSeptemberGroundTemperature(self, septemberGroundTemperature)

    def resetSeptemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetSeptemberGroundTemperature(self)

    def setOctoberGroundTemperature(self, octoberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setOctoberGroundTemperature(self, octoberGroundTemperature)

    def resetOctoberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetOctoberGroundTemperature(self)

    def setNovemberGroundTemperature(self, novemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setNovemberGroundTemperature(self, novemberGroundTemperature)

    def resetNovemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetNovemberGroundTemperature(self)

    def setDecemberGroundTemperature(self, decemberGroundTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setDecemberGroundTemperature(self, decemberGroundTemperature)

    def resetDecemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetDecemberGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: "DoubleVector") -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAllMonthlyTemperatures(self, monthly_temperatures)

# Register SiteGroundTemperatureFCfactorMethod in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_swigregister(SiteGroundTemperatureFCfactorMethod)

def SiteGroundTemperatureFCfactorMethod_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType()


def toSiteGroundTemperatureFCfactorMethod(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteGroundTemperatureFCfactorMethod >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureFCfactorMethod(idfObject)

def getSiteGroundTemperatureFCfactorMethod(t_model: "Model") -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
    return _openstudiomodelsimulation.getSiteGroundTemperatureFCfactorMethod(t_model)

def getOptionalSiteGroundTemperatureFCfactorMethod(t_model: "Model") -> "boost::optional< openstudio::model::SiteGroundTemperatureFCfactorMethod >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureFCfactorMethod(t_model)

def _to_SiteGroundTemperatureFCfactorMethod(self) -> OptionalSiteGroundTemperatureFCfactorMethod:
    return toSiteGroundTemperatureFCfactorMethod(self)
openstudioutilitiesidf.IdfObject.to_SiteGroundTemperatureFCfactorMethod = _to_SiteGroundTemperatureFCfactorMethod

def _getSiteGroundTemperatureFCfactorMethod(self) -> SiteGroundTemperatureFCfactorMethod:
    return getSiteGroundTemperatureFCfactorMethod(self)
Model.getSiteGroundTemperatureFCfactorMethod = _getSiteGroundTemperatureFCfactorMethod

def _getOptionalSiteGroundTemperatureFCfactorMethod(self) -> OptionalSiteGroundTemperatureFCfactorMethod:
    return getOptionalSiteGroundTemperatureFCfactorMethod(self)
Model.getOptionalSiteGroundTemperatureFCfactorMethod = _getOptionalSiteGroundTemperatureFCfactorMethod

class SiteWaterMainsTemperature(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteWaterMainsTemperature

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType()

    @staticmethod
    def calculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues()

    @staticmethod
    def validCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues()

    def calculationMethod(self) -> "std::string":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethod(self)

    def temperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_temperatureSchedule(self)

    def annualAverageOutdoorAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_annualAverageOutdoorAirTemperature(self)

    def maximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_maximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self)

    def setCalculationMethod(self, calculationMethod: "std::string") -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setCalculationMethod(self, calculationMethod)

    def setTemperatureSchedule(self, schedule: "Schedule") -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setTemperatureSchedule(self, schedule)

    def resetTemperatureSchedule(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetTemperatureSchedule(self)

    def setAnnualAverageOutdoorAirTemperature(self, annualAverageOutdoorAirTemperature: "double") -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setAnnualAverageOutdoorAirTemperature(self, annualAverageOutdoorAirTemperature)

    def resetAnnualAverageOutdoorAirTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetAnnualAverageOutdoorAirTemperature(self)

    def setMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, maximumDifferenceInMonthlyAverageOutdoorAirTemperatures: "double") -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, maximumDifferenceInMonthlyAverageOutdoorAirTemperatures)

    def resetMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self)

# Register SiteWaterMainsTemperature in _openstudiomodelsimulation:
_openstudiomodelsimulation.SiteWaterMainsTemperature_swigregister(SiteWaterMainsTemperature)

def SiteWaterMainsTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType()

def SiteWaterMainsTemperature_calculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues()

def SiteWaterMainsTemperature_validCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues()


def toSiteWaterMainsTemperature(idfObject: "IdfObject") -> "boost::optional< openstudio::model::SiteWaterMainsTemperature >":
    return _openstudiomodelsimulation.toSiteWaterMainsTemperature(idfObject)

def getSiteWaterMainsTemperature(t_model: "Model") -> "openstudio::model::SiteWaterMainsTemperature":
    return _openstudiomodelsimulation.getSiteWaterMainsTemperature(t_model)

def getOptionalSiteWaterMainsTemperature(t_model: "Model") -> "boost::optional< openstudio::model::SiteWaterMainsTemperature >":
    return _openstudiomodelsimulation.getOptionalSiteWaterMainsTemperature(t_model)

def _to_SiteWaterMainsTemperature(self) -> OptionalSiteWaterMainsTemperature:
    return toSiteWaterMainsTemperature(self)
openstudioutilitiesidf.IdfObject.to_SiteWaterMainsTemperature = _to_SiteWaterMainsTemperature

def _getSiteWaterMainsTemperature(self) -> SiteWaterMainsTemperature:
    return getSiteWaterMainsTemperature(self)
Model.getSiteWaterMainsTemperature = _getSiteWaterMainsTemperature

def _getOptionalSiteWaterMainsTemperature(self) -> OptionalSiteWaterMainsTemperature:
    return getOptionalSiteWaterMainsTemperature(self)
Model.getOptionalSiteWaterMainsTemperature = _getOptionalSiteWaterMainsTemperature

class YearDescription(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_YearDescription

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.YearDescription_iddObjectType()

    @staticmethod
    def validDayofWeekforStartDayValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues()

    def calendarYear(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.YearDescription_calendarYear(self)

    def dayofWeekforStartDay(self) -> "std::string":
        return _openstudiomodelsimulation.YearDescription_dayofWeekforStartDay(self)

    def isDayofWeekforStartDayDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isDayofWeekforStartDayDefaulted(self)

    def isLeapYear(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isLeapYear(self)

    def isIsLeapYearDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isIsLeapYearDefaulted(self)

    def setCalendarYear(self, calendarYear: "int") -> "bool":
        return _openstudiomodelsimulation.YearDescription_setCalendarYear(self, calendarYear)

    def resetCalendarYear(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetCalendarYear(self)

    def setDayofWeekforStartDay(self, dayofWeekforStartDay: "std::string") -> "bool":
        return _openstudiomodelsimulation.YearDescription_setDayofWeekforStartDay(self, dayofWeekforStartDay)

    def resetDayofWeekforStartDay(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetDayofWeekforStartDay(self)

    def setIsLeapYear(self, isLeapYear: "bool") -> "bool":
        return _openstudiomodelsimulation.YearDescription_setIsLeapYear(self, isLeapYear)

    def resetIsLeapYear(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetIsLeapYear(self)

    def assumedYear(self) -> "int":
        return _openstudiomodelsimulation.YearDescription_assumedYear(self)

    def makeDate(self, *args) -> "openstudio::Date":
        return _openstudiomodelsimulation.YearDescription_makeDate(self, *args)

# Register YearDescription in _openstudiomodelsimulation:
_openstudiomodelsimulation.YearDescription_swigregister(YearDescription)

def YearDescription_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.YearDescription_iddObjectType()

def YearDescription_validDayofWeekforStartDayValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues()


def toYearDescription(idfObject: "IdfObject") -> "boost::optional< openstudio::model::YearDescription >":
    return _openstudiomodelsimulation.toYearDescription(idfObject)

def getYearDescription(t_model: "Model") -> "openstudio::model::YearDescription":
    return _openstudiomodelsimulation.getYearDescription(t_model)

def getOptionalYearDescription(t_model: "Model") -> "boost::optional< openstudio::model::YearDescription >":
    return _openstudiomodelsimulation.getOptionalYearDescription(t_model)

def _to_YearDescription(self) -> OptionalYearDescription:
    return toYearDescription(self)
openstudioutilitiesidf.IdfObject.to_YearDescription = _to_YearDescription

def _getYearDescription(self) -> YearDescription:
    return getYearDescription(self)
Model.getYearDescription = _getYearDescription

def _getOptionalYearDescription(self) -> OptionalYearDescription:
    return getOptionalYearDescription(self)
Model.getOptionalYearDescription = _getOptionalYearDescription

class FoundationKivaSettings(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_FoundationKivaSettings

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.FoundationKivaSettings_iddObjectType()

    def soilConductivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilConductivity(self)

    def isSoilConductivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilConductivityDefaulted(self)

    def soilDensity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilDensity(self)

    def isSoilDensityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilDensityDefaulted(self)

    def soilSpecificHeat(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilSpecificHeat(self)

    def isSoilSpecificHeatDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilSpecificHeatDefaulted(self)

    def groundSolarAbsorptivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundSolarAbsorptivity(self)

    def isGroundSolarAbsorptivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundSolarAbsorptivityDefaulted(self)

    def groundThermalAbsorptivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundThermalAbsorptivity(self)

    def isGroundThermalAbsorptivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundThermalAbsorptivityDefaulted(self)

    def groundSurfaceRoughness(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundSurfaceRoughness(self)

    def isGroundSurfaceRoughnessDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundSurfaceRoughnessDefaulted(self)

    def farFieldWidth(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_farFieldWidth(self)

    def isFarFieldWidthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isFarFieldWidthDefaulted(self)

    def deepGroundBoundaryCondition(self) -> "std::string":
        return _openstudiomodelsimulation.FoundationKivaSettings_deepGroundBoundaryCondition(self)

    def isDeepGroundBoundaryConditionAutoselected(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isDeepGroundBoundaryConditionAutoselected(self)

    def deepGroundDepth(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.FoundationKivaSettings_deepGroundDepth(self)

    def isDeepGroundDepthAutocalculated(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isDeepGroundDepthAutocalculated(self)

    def minimumCellDimension(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_minimumCellDimension(self)

    def isMinimumCellDimensionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isMinimumCellDimensionDefaulted(self)

    def maximumCellGrowthCoefficient(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_maximumCellGrowthCoefficient(self)

    def isMaximumCellGrowthCoefficientDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isMaximumCellGrowthCoefficientDefaulted(self)

    def simulationTimestep(self) -> "std::string":
        return _openstudiomodelsimulation.FoundationKivaSettings_simulationTimestep(self)

    def isSimulationTimestepDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSimulationTimestepDefaulted(self)

    def setSoilConductivity(self, soilConductivity: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilConductivity(self, soilConductivity)

    def resetSoilConductivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilConductivity(self)

    def setSoilDensity(self, soilDensity: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilDensity(self, soilDensity)

    def resetSoilDensity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilDensity(self)

    def setSoilSpecificHeat(self, soilSpecificHeat: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilSpecificHeat(self, soilSpecificHeat)

    def resetSoilSpecificHeat(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilSpecificHeat(self)

    def setGroundSolarAbsorptivity(self, groundSolarAbsorptivity: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundSolarAbsorptivity(self, groundSolarAbsorptivity)

    def resetGroundSolarAbsorptivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundSolarAbsorptivity(self)

    def setGroundThermalAbsorptivity(self, groundThermalAbsorptivity: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundThermalAbsorptivity(self, groundThermalAbsorptivity)

    def resetGroundThermalAbsorptivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundThermalAbsorptivity(self)

    def setGroundSurfaceRoughness(self, groundSurfaceRoughness: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundSurfaceRoughness(self, groundSurfaceRoughness)

    def resetGroundSurfaceRoughness(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundSurfaceRoughness(self)

    def setFarFieldWidth(self, farFieldWidth: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setFarFieldWidth(self, farFieldWidth)

    def resetFarFieldWidth(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetFarFieldWidth(self)

    def setDeepGroundBoundaryCondition(self, deepGroundBoundaryCondition: "std::string") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setDeepGroundBoundaryCondition(self, deepGroundBoundaryCondition)

    def resetDeepGroundBoundaryCondition(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetDeepGroundBoundaryCondition(self)

    def setDeepGroundDepth(self, deepGroundDepth: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setDeepGroundDepth(self, deepGroundDepth)

    def autocalculateDeepGroundDepth(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_autocalculateDeepGroundDepth(self)

    def setMinimumCellDimension(self, minimumCellDimension: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setMinimumCellDimension(self, minimumCellDimension)

    def resetMinimumCellDimension(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetMinimumCellDimension(self)

    def setMaximumCellGrowthCoefficient(self, maximumCellGrowthCoefficient: "double") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setMaximumCellGrowthCoefficient(self, maximumCellGrowthCoefficient)

    def resetMaximumCellGrowthCoefficient(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetMaximumCellGrowthCoefficient(self)

    def setSimulationTimestep(self, simulationTimestep: "std::string") -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSimulationTimestep(self, simulationTimestep)

    def resetSimulationTimestep(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSimulationTimestep(self)

# Register FoundationKivaSettings in _openstudiomodelsimulation:
_openstudiomodelsimulation.FoundationKivaSettings_swigregister(FoundationKivaSettings)

def FoundationKivaSettings_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.FoundationKivaSettings_iddObjectType()


def toFoundationKivaSettings(idfObject: "IdfObject") -> "boost::optional< openstudio::model::FoundationKivaSettings >":
    return _openstudiomodelsimulation.toFoundationKivaSettings(idfObject)

def getFoundationKivaSettings(t_model: "Model") -> "openstudio::model::FoundationKivaSettings":
    return _openstudiomodelsimulation.getFoundationKivaSettings(t_model)

def getOptionalFoundationKivaSettings(t_model: "Model") -> "boost::optional< openstudio::model::FoundationKivaSettings >":
    return _openstudiomodelsimulation.getOptionalFoundationKivaSettings(t_model)

def _to_FoundationKivaSettings(self) -> OptionalFoundationKivaSettings:
    return toFoundationKivaSettings(self)
openstudioutilitiesidf.IdfObject.to_FoundationKivaSettings = _to_FoundationKivaSettings

def _getFoundationKivaSettings(self) -> FoundationKivaSettings:
    return getFoundationKivaSettings(self)
Model.getFoundationKivaSettings = _getFoundationKivaSettings

def _getOptionalFoundationKivaSettings(self) -> OptionalFoundationKivaSettings:
    return getOptionalFoundationKivaSettings(self)
Model.getOptionalFoundationKivaSettings = _getOptionalFoundationKivaSettings

class OutputTableSummaryReports(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputTableSummaryReports

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.OutputTableSummaryReports_iddObjectType()

    @staticmethod
    def summaryReportValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputTableSummaryReports_summaryReportValues()

    @staticmethod
    def validSummaryReportValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputTableSummaryReports_validSummaryReportValues()

    def summaryReports(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.OutputTableSummaryReports_summaryReports(self)

    def numberofSummaryReports(self) -> "unsigned int":
        return _openstudiomodelsimulation.OutputTableSummaryReports_numberofSummaryReports(self)

    def summaryReportIndex(self, summaryReport: "std::string const &") -> "boost::optional< unsigned int >":
        return _openstudiomodelsimulation.OutputTableSummaryReports_summaryReportIndex(self, summaryReport)

    def getSummaryReport(self, groupIndex: "unsigned int") -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.OutputTableSummaryReports_getSummaryReport(self, groupIndex)

    def addSummaryReport(self, summaryReport: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.OutputTableSummaryReports_addSummaryReport(self, summaryReport)

    def addSummaryReports(self, summaryReports: "StringVector") -> "bool":
        return _openstudiomodelsimulation.OutputTableSummaryReports_addSummaryReports(self, summaryReports)

    def removeSummaryReport(self, groupIndex: "int") -> "bool":
        return _openstudiomodelsimulation.OutputTableSummaryReports_removeSummaryReport(self, groupIndex)

    def removeAllSummaryReports(self) -> "void":
        return _openstudiomodelsimulation.OutputTableSummaryReports_removeAllSummaryReports(self)

    def enableAllSummaryReport(self) -> "bool":
        return _openstudiomodelsimulation.OutputTableSummaryReports_enableAllSummaryReport(self)

# Register OutputTableSummaryReports in _openstudiomodelsimulation:
_openstudiomodelsimulation.OutputTableSummaryReports_swigregister(OutputTableSummaryReports)

def OutputTableSummaryReports_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputTableSummaryReports_iddObjectType()

def OutputTableSummaryReports_summaryReportValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutputTableSummaryReports_summaryReportValues()

def OutputTableSummaryReports_validSummaryReportValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutputTableSummaryReports_validSummaryReportValues()


def toOutputTableSummaryReports(idfObject: "IdfObject") -> "boost::optional< openstudio::model::OutputTableSummaryReports >":
    return _openstudiomodelsimulation.toOutputTableSummaryReports(idfObject)

def getOutputTableSummaryReports(t_model: "Model") -> "openstudio::model::OutputTableSummaryReports":
    return _openstudiomodelsimulation.getOutputTableSummaryReports(t_model)

def getOptionalOutputTableSummaryReports(t_model: "Model") -> "boost::optional< openstudio::model::OutputTableSummaryReports >":
    return _openstudiomodelsimulation.getOptionalOutputTableSummaryReports(t_model)

def _to_OutputTableSummaryReports(self) -> OptionalOutputTableSummaryReports:
    return toOutputTableSummaryReports(self)
openstudioutilitiesidf.IdfObject.to_OutputTableSummaryReports = _to_OutputTableSummaryReports

def _getOutputTableSummaryReports(self) -> OutputTableSummaryReports:
    return getOutputTableSummaryReports(self)
Model.getOutputTableSummaryReports = _getOutputTableSummaryReports

def _getOptionalOutputTableSummaryReports(self) -> OptionalOutputTableSummaryReports:
    return getOptionalOutputTableSummaryReports(self)
Model.getOptionalOutputTableSummaryReports = _getOptionalOutputTableSummaryReports

class PerformancePrecisionTradeoffs(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_PerformancePrecisionTradeoffs

    @staticmethod
    def iddObjectType() -> "openstudio::IddObjectType":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_iddObjectType()

    @staticmethod
    def zoneRadiantExchangeAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_zoneRadiantExchangeAlgorithmValues()

    @staticmethod
    def validZoneRadiantExchangeAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_validZoneRadiantExchangeAlgorithmValues()

    @staticmethod
    def overrideModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_overrideModeValues()

    @staticmethod
    def validOverrideModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_validOverrideModeValues()

    def useCoilDirectSolutions(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_useCoilDirectSolutions(self)

    def isUseCoilDirectSolutionsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_isUseCoilDirectSolutionsDefaulted(self)

    def zoneRadiantExchangeAlgorithm(self) -> "std::string":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_zoneRadiantExchangeAlgorithm(self)

    def isZoneRadiantExchangeAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_isZoneRadiantExchangeAlgorithmDefaulted(self)

    def overrideMode(self) -> "std::string":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_overrideMode(self)

    def isOverrideModeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_isOverrideModeDefaulted(self)

    def maxZoneTempDiff(self) -> "double":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_maxZoneTempDiff(self)

    def isMaxZoneTempDiffDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_isMaxZoneTempDiffDefaulted(self)

    def maxAllowedDelTemp(self) -> "double":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_maxAllowedDelTemp(self)

    def isMaxAllowedDelTempDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_isMaxAllowedDelTempDefaulted(self)

    def setUseCoilDirectSolutions(self, useCoilDirectSolutions: "bool") -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_setUseCoilDirectSolutions(self, useCoilDirectSolutions)

    def resetUseCoilDirectSolutions(self) -> "void":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_resetUseCoilDirectSolutions(self)

    def setZoneRadiantExchangeAlgorithm(self, zoneRadiantExchangeAlgorithm: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_setZoneRadiantExchangeAlgorithm(self, zoneRadiantExchangeAlgorithm)

    def resetZoneRadiantExchangeAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_resetZoneRadiantExchangeAlgorithm(self)

    def setOverrideMode(self, overrideMode: "std::string const &") -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_setOverrideMode(self, overrideMode)

    def resetOverrideMode(self) -> "void":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_resetOverrideMode(self)

    def setMaxZoneTempDiff(self, maxZoneTempDiff: "double") -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_setMaxZoneTempDiff(self, maxZoneTempDiff)

    def resetMaxZoneTempDiff(self) -> "void":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_resetMaxZoneTempDiff(self)

    def setMaxAllowedDelTemp(self, maxAllowedDelTemp: "double") -> "bool":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_setMaxAllowedDelTemp(self, maxAllowedDelTemp)

    def resetMaxAllowedDelTemp(self) -> "void":
        return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_resetMaxAllowedDelTemp(self)

# Register PerformancePrecisionTradeoffs in _openstudiomodelsimulation:
_openstudiomodelsimulation.PerformancePrecisionTradeoffs_swigregister(PerformancePrecisionTradeoffs)

def PerformancePrecisionTradeoffs_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_iddObjectType()

def PerformancePrecisionTradeoffs_zoneRadiantExchangeAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_zoneRadiantExchangeAlgorithmValues()

def PerformancePrecisionTradeoffs_validZoneRadiantExchangeAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_validZoneRadiantExchangeAlgorithmValues()

def PerformancePrecisionTradeoffs_overrideModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_overrideModeValues()

def PerformancePrecisionTradeoffs_validOverrideModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.PerformancePrecisionTradeoffs_validOverrideModeValues()


def toPerformancePrecisionTradeoffs(idfObject: "IdfObject") -> "boost::optional< openstudio::model::PerformancePrecisionTradeoffs >":
    return _openstudiomodelsimulation.toPerformancePrecisionTradeoffs(idfObject)

def getPerformancePrecisionTradeoffs(t_model: "Model") -> "openstudio::model::PerformancePrecisionTradeoffs":
    return _openstudiomodelsimulation.getPerformancePrecisionTradeoffs(t_model)

def getOptionalPerformancePrecisionTradeoffs(t_model: "Model") -> "boost::optional< openstudio::model::PerformancePrecisionTradeoffs >":
    return _openstudiomodelsimulation.getOptionalPerformancePrecisionTradeoffs(t_model)

def _to_PerformancePrecisionTradeoffs(self) -> OptionalPerformancePrecisionTradeoffs:
    return toPerformancePrecisionTradeoffs(self)
openstudioutilitiesidf.IdfObject.to_PerformancePrecisionTradeoffs = _to_PerformancePrecisionTradeoffs

def _getPerformancePrecisionTradeoffs(self) -> PerformancePrecisionTradeoffs:
    return getPerformancePrecisionTradeoffs(self)
Model.getPerformancePrecisionTradeoffs = _getPerformancePrecisionTradeoffs

def _getOptionalPerformancePrecisionTradeoffs(self) -> OptionalPerformancePrecisionTradeoffs:
    return getOptionalPerformancePrecisionTradeoffs(self)
Model.getOptionalPerformancePrecisionTradeoffs = _getOptionalPerformancePrecisionTradeoffs



