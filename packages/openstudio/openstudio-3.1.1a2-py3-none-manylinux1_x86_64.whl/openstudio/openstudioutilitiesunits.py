# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesunits
else:
    import _openstudioutilitiesunits

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesunits.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _openstudioutilitiesunits.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _openstudioutilitiesunits.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiesunits.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioutilitiesunits.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioutilitiesunits.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioutilitiesunits.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiesunits.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _openstudioutilitiesunits.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudioutilitiesunits.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _openstudioutilitiesunits.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioutilitiesunits.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesunits:
_openstudioutilitiesunits.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _openstudioutilitiesunits.SHARED_PTR_DISOWN
from .import openstudioutilitiescore

def printScales() -> "std::string":
    return _openstudioutilitiesunits.printScales()
class UnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.UnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.UnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.UnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Unit >::size_type":
        return _openstudioutilitiesunits.UnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::Unit >::difference_type", j: "std::vector< openstudio::Unit >::difference_type") -> "std::vector< openstudio::Unit,std::allocator< openstudio::Unit > > *":
        return _openstudioutilitiesunits.UnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.UnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::Unit >::difference_type", j: "std::vector< openstudio::Unit >::difference_type") -> "void":
        return _openstudioutilitiesunits.UnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.UnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Unit >::value_type const &":
        return _openstudioutilitiesunits.UnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.UnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::Unit >::value_type":
        return _openstudioutilitiesunits.UnitVector_pop(self)

    def append(self, x: "ZUnit") -> "void":
        return _openstudioutilitiesunits.UnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.UnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::Unit >::size_type":
        return _openstudioutilitiesunits.UnitVector_size(self)

    def swap(self, v: "UnitVector") -> "void":
        return _openstudioutilitiesunits.UnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::Unit >::iterator":
        return _openstudioutilitiesunits.UnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::Unit >::iterator":
        return _openstudioutilitiesunits.UnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Unit >::reverse_iterator":
        return _openstudioutilitiesunits.UnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Unit >::reverse_iterator":
        return _openstudioutilitiesunits.UnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.UnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::Unit >::allocator_type":
        return _openstudioutilitiesunits.UnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.UnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Unit >::iterator":
        return _openstudioutilitiesunits.UnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.UnitVector_swiginit(self, _openstudioutilitiesunits.new_UnitVector(*args))

    def push_back(self, x: "ZUnit") -> "void":
        return _openstudioutilitiesunits.UnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Unit >::value_type const &":
        return _openstudioutilitiesunits.UnitVector_front(self)

    def back(self) -> "std::vector< openstudio::Unit >::value_type const &":
        return _openstudioutilitiesunits.UnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::Unit >::size_type", x: "ZUnit") -> "void":
        return _openstudioutilitiesunits.UnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.UnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.UnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::Unit >::size_type") -> "void":
        return _openstudioutilitiesunits.UnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Unit >::size_type":
        return _openstudioutilitiesunits.UnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitVector

# Register UnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.UnitVector_swigregister(UnitVector)

class OptionalUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalUnit_reset(self)

    def __ref__(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.OptionalUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalUnit_isNull(self)

    def get(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.OptionalUnit_get(self)

    def set(self, t: "ZUnit") -> "void":
        return _openstudioutilitiesunits.OptionalUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalUnit

# Register OptionalUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalUnit_swigregister(OptionalUnit)

class TemperatureUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.TemperatureUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.TemperatureUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.TemperatureUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":
        return _openstudioutilitiesunits.TemperatureUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::TemperatureUnit >::difference_type", j: "std::vector< openstudio::TemperatureUnit >::difference_type") -> "std::vector< openstudio::TemperatureUnit,std::allocator< openstudio::TemperatureUnit > > *":
        return _openstudioutilitiesunits.TemperatureUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::TemperatureUnit >::difference_type", j: "std::vector< openstudio::TemperatureUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":
        return _openstudioutilitiesunits.TemperatureUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::TemperatureUnit >::value_type":
        return _openstudioutilitiesunits.TemperatureUnitVector_pop(self)

    def append(self, x: "TemperatureUnit") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.TemperatureUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":
        return _openstudioutilitiesunits.TemperatureUnitVector_size(self)

    def swap(self, v: "TemperatureUnitVector") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::TemperatureUnit >::iterator":
        return _openstudioutilitiesunits.TemperatureUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::TemperatureUnit >::iterator":
        return _openstudioutilitiesunits.TemperatureUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::TemperatureUnit >::reverse_iterator":
        return _openstudioutilitiesunits.TemperatureUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::TemperatureUnit >::reverse_iterator":
        return _openstudioutilitiesunits.TemperatureUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::TemperatureUnit >::allocator_type":
        return _openstudioutilitiesunits.TemperatureUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::TemperatureUnit >::iterator":
        return _openstudioutilitiesunits.TemperatureUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.TemperatureUnitVector_swiginit(self, _openstudioutilitiesunits.new_TemperatureUnitVector(*args))

    def push_back(self, x: "TemperatureUnit") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":
        return _openstudioutilitiesunits.TemperatureUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":
        return _openstudioutilitiesunits.TemperatureUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::TemperatureUnit >::size_type", x: "TemperatureUnit") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_assign(self, n, x)

    def resize(self, new_size: "std::vector< openstudio::TemperatureUnit >::size_type", x: "TemperatureUnit") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::TemperatureUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.TemperatureUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":
        return _openstudioutilitiesunits.TemperatureUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnitVector

# Register TemperatureUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureUnitVector_swigregister(TemperatureUnitVector)

class OptionalTemperatureUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalTemperatureUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalTemperatureUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalTemperatureUnit_reset(self)

    def __ref__(self) -> "openstudio::TemperatureUnit":
        return _openstudioutilitiesunits.OptionalTemperatureUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalTemperatureUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalTemperatureUnit_isNull(self)

    def get(self) -> "openstudio::TemperatureUnit":
        return _openstudioutilitiesunits.OptionalTemperatureUnit_get(self)

    def set(self, t: "TemperatureUnit") -> "void":
        return _openstudioutilitiesunits.OptionalTemperatureUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalTemperatureUnit

# Register OptionalTemperatureUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalTemperatureUnit_swigregister(OptionalTemperatureUnit)

class CelsiusUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.CelsiusUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.CelsiusUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.CelsiusUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":
        return _openstudioutilitiesunits.CelsiusUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::CelsiusUnit >::difference_type", j: "std::vector< openstudio::CelsiusUnit >::difference_type") -> "std::vector< openstudio::CelsiusUnit,std::allocator< openstudio::CelsiusUnit > > *":
        return _openstudioutilitiesunits.CelsiusUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::CelsiusUnit >::difference_type", j: "std::vector< openstudio::CelsiusUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":
        return _openstudioutilitiesunits.CelsiusUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::CelsiusUnit >::value_type":
        return _openstudioutilitiesunits.CelsiusUnitVector_pop(self)

    def append(self, x: "CelsiusUnit") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.CelsiusUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":
        return _openstudioutilitiesunits.CelsiusUnitVector_size(self)

    def swap(self, v: "CelsiusUnitVector") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::CelsiusUnit >::iterator":
        return _openstudioutilitiesunits.CelsiusUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::CelsiusUnit >::iterator":
        return _openstudioutilitiesunits.CelsiusUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::CelsiusUnit >::reverse_iterator":
        return _openstudioutilitiesunits.CelsiusUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::CelsiusUnit >::reverse_iterator":
        return _openstudioutilitiesunits.CelsiusUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::CelsiusUnit >::allocator_type":
        return _openstudioutilitiesunits.CelsiusUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::CelsiusUnit >::iterator":
        return _openstudioutilitiesunits.CelsiusUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.CelsiusUnitVector_swiginit(self, _openstudioutilitiesunits.new_CelsiusUnitVector(*args))

    def push_back(self, x: "CelsiusUnit") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":
        return _openstudioutilitiesunits.CelsiusUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":
        return _openstudioutilitiesunits.CelsiusUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::CelsiusUnit >::size_type", x: "CelsiusUnit") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::CelsiusUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.CelsiusUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":
        return _openstudioutilitiesunits.CelsiusUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnitVector

# Register CelsiusUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.CelsiusUnitVector_swigregister(CelsiusUnitVector)

class OptionalCelsiusUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalCelsiusUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalCelsiusUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalCelsiusUnit_reset(self)

    def __ref__(self) -> "openstudio::CelsiusUnit":
        return _openstudioutilitiesunits.OptionalCelsiusUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalCelsiusUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalCelsiusUnit_isNull(self)

    def get(self) -> "openstudio::CelsiusUnit":
        return _openstudioutilitiesunits.OptionalCelsiusUnit_get(self)

    def set(self, t: "CelsiusUnit") -> "void":
        return _openstudioutilitiesunits.OptionalCelsiusUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCelsiusUnit

# Register OptionalCelsiusUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalCelsiusUnit_swigregister(OptionalCelsiusUnit)

class FahrenheitUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.FahrenheitUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.FahrenheitUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.FahrenheitUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":
        return _openstudioutilitiesunits.FahrenheitUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::FahrenheitUnit >::difference_type", j: "std::vector< openstudio::FahrenheitUnit >::difference_type") -> "std::vector< openstudio::FahrenheitUnit,std::allocator< openstudio::FahrenheitUnit > > *":
        return _openstudioutilitiesunits.FahrenheitUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::FahrenheitUnit >::difference_type", j: "std::vector< openstudio::FahrenheitUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":
        return _openstudioutilitiesunits.FahrenheitUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type":
        return _openstudioutilitiesunits.FahrenheitUnitVector_pop(self)

    def append(self, x: "FahrenheitUnit") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.FahrenheitUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":
        return _openstudioutilitiesunits.FahrenheitUnitVector_size(self)

    def swap(self, v: "FahrenheitUnitVector") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::FahrenheitUnit >::iterator":
        return _openstudioutilitiesunits.FahrenheitUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::FahrenheitUnit >::iterator":
        return _openstudioutilitiesunits.FahrenheitUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::FahrenheitUnit >::reverse_iterator":
        return _openstudioutilitiesunits.FahrenheitUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::FahrenheitUnit >::reverse_iterator":
        return _openstudioutilitiesunits.FahrenheitUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::FahrenheitUnit >::allocator_type":
        return _openstudioutilitiesunits.FahrenheitUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::FahrenheitUnit >::iterator":
        return _openstudioutilitiesunits.FahrenheitUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.FahrenheitUnitVector_swiginit(self, _openstudioutilitiesunits.new_FahrenheitUnitVector(*args))

    def push_back(self, x: "FahrenheitUnit") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":
        return _openstudioutilitiesunits.FahrenheitUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":
        return _openstudioutilitiesunits.FahrenheitUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::FahrenheitUnit >::size_type", x: "FahrenheitUnit") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::FahrenheitUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.FahrenheitUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":
        return _openstudioutilitiesunits.FahrenheitUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnitVector

# Register FahrenheitUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.FahrenheitUnitVector_swigregister(FahrenheitUnitVector)

class OptionalFahrenheitUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalFahrenheitUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalFahrenheitUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_reset(self)

    def __ref__(self) -> "openstudio::FahrenheitUnit":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_isNull(self)

    def get(self) -> "openstudio::FahrenheitUnit":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_get(self)

    def set(self, t: "FahrenheitUnit") -> "void":
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalFahrenheitUnit

# Register OptionalFahrenheitUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalFahrenheitUnit_swigregister(OptionalFahrenheitUnit)

class SIUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.SIUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.SIUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.SIUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::SIUnit >::size_type":
        return _openstudioutilitiesunits.SIUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::SIUnit >::difference_type", j: "std::vector< openstudio::SIUnit >::difference_type") -> "std::vector< openstudio::SIUnit,std::allocator< openstudio::SIUnit > > *":
        return _openstudioutilitiesunits.SIUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.SIUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::SIUnit >::difference_type", j: "std::vector< openstudio::SIUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.SIUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.SIUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::SIUnit >::value_type const &":
        return _openstudioutilitiesunits.SIUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.SIUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::SIUnit >::value_type":
        return _openstudioutilitiesunits.SIUnitVector_pop(self)

    def append(self, x: "SIUnit") -> "void":
        return _openstudioutilitiesunits.SIUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.SIUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::SIUnit >::size_type":
        return _openstudioutilitiesunits.SIUnitVector_size(self)

    def swap(self, v: "SIUnitVector") -> "void":
        return _openstudioutilitiesunits.SIUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::SIUnit >::iterator":
        return _openstudioutilitiesunits.SIUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::SIUnit >::iterator":
        return _openstudioutilitiesunits.SIUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::SIUnit >::reverse_iterator":
        return _openstudioutilitiesunits.SIUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::SIUnit >::reverse_iterator":
        return _openstudioutilitiesunits.SIUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.SIUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::SIUnit >::allocator_type":
        return _openstudioutilitiesunits.SIUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.SIUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::SIUnit >::iterator":
        return _openstudioutilitiesunits.SIUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.SIUnitVector_swiginit(self, _openstudioutilitiesunits.new_SIUnitVector(*args))

    def push_back(self, x: "SIUnit") -> "void":
        return _openstudioutilitiesunits.SIUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::SIUnit >::value_type const &":
        return _openstudioutilitiesunits.SIUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::SIUnit >::value_type const &":
        return _openstudioutilitiesunits.SIUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::SIUnit >::size_type", x: "SIUnit") -> "void":
        return _openstudioutilitiesunits.SIUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.SIUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.SIUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::SIUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.SIUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::SIUnit >::size_type":
        return _openstudioutilitiesunits.SIUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnitVector

# Register SIUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIUnitVector_swigregister(SIUnitVector)

class OptionalSIUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalSIUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalSIUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalSIUnit_reset(self)

    def __ref__(self) -> "openstudio::SIUnit":
        return _openstudioutilitiesunits.OptionalSIUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalSIUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalSIUnit_isNull(self)

    def get(self) -> "openstudio::SIUnit":
        return _openstudioutilitiesunits.OptionalSIUnit_get(self)

    def set(self, t: "SIUnit") -> "void":
        return _openstudioutilitiesunits.OptionalSIUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalSIUnit

# Register OptionalSIUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalSIUnit_swigregister(OptionalSIUnit)

class IPUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.IPUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.IPUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.IPUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IPUnit >::size_type":
        return _openstudioutilitiesunits.IPUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::IPUnit >::difference_type", j: "std::vector< openstudio::IPUnit >::difference_type") -> "std::vector< openstudio::IPUnit,std::allocator< openstudio::IPUnit > > *":
        return _openstudioutilitiesunits.IPUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.IPUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::IPUnit >::difference_type", j: "std::vector< openstudio::IPUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.IPUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.IPUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IPUnit >::value_type const &":
        return _openstudioutilitiesunits.IPUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.IPUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::IPUnit >::value_type":
        return _openstudioutilitiesunits.IPUnitVector_pop(self)

    def append(self, x: "IPUnit") -> "void":
        return _openstudioutilitiesunits.IPUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.IPUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::IPUnit >::size_type":
        return _openstudioutilitiesunits.IPUnitVector_size(self)

    def swap(self, v: "IPUnitVector") -> "void":
        return _openstudioutilitiesunits.IPUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::IPUnit >::iterator":
        return _openstudioutilitiesunits.IPUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::IPUnit >::iterator":
        return _openstudioutilitiesunits.IPUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IPUnit >::reverse_iterator":
        return _openstudioutilitiesunits.IPUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IPUnit >::reverse_iterator":
        return _openstudioutilitiesunits.IPUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.IPUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::IPUnit >::allocator_type":
        return _openstudioutilitiesunits.IPUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.IPUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IPUnit >::iterator":
        return _openstudioutilitiesunits.IPUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.IPUnitVector_swiginit(self, _openstudioutilitiesunits.new_IPUnitVector(*args))

    def push_back(self, x: "IPUnit") -> "void":
        return _openstudioutilitiesunits.IPUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IPUnit >::value_type const &":
        return _openstudioutilitiesunits.IPUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::IPUnit >::value_type const &":
        return _openstudioutilitiesunits.IPUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::IPUnit >::size_type", x: "IPUnit") -> "void":
        return _openstudioutilitiesunits.IPUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.IPUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.IPUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::IPUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.IPUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IPUnit >::size_type":
        return _openstudioutilitiesunits.IPUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnitVector

# Register IPUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPUnitVector_swigregister(IPUnitVector)

class OptionalIPUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalIPUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalIPUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalIPUnit_reset(self)

    def __ref__(self) -> "openstudio::IPUnit":
        return _openstudioutilitiesunits.OptionalIPUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalIPUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalIPUnit_isNull(self)

    def get(self) -> "openstudio::IPUnit":
        return _openstudioutilitiesunits.OptionalIPUnit_get(self)

    def set(self, t: "IPUnit") -> "void":
        return _openstudioutilitiesunits.OptionalIPUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalIPUnit

# Register OptionalIPUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalIPUnit_swigregister(OptionalIPUnit)

class BTUUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.BTUUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.BTUUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.BTUUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::BTUUnit >::size_type":
        return _openstudioutilitiesunits.BTUUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::BTUUnit >::difference_type", j: "std::vector< openstudio::BTUUnit >::difference_type") -> "std::vector< openstudio::BTUUnit,std::allocator< openstudio::BTUUnit > > *":
        return _openstudioutilitiesunits.BTUUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::BTUUnit >::difference_type", j: "std::vector< openstudio::BTUUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::BTUUnit >::value_type const &":
        return _openstudioutilitiesunits.BTUUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::BTUUnit >::value_type":
        return _openstudioutilitiesunits.BTUUnitVector_pop(self)

    def append(self, x: "BTUUnit") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.BTUUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::BTUUnit >::size_type":
        return _openstudioutilitiesunits.BTUUnitVector_size(self)

    def swap(self, v: "BTUUnitVector") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::BTUUnit >::iterator":
        return _openstudioutilitiesunits.BTUUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::BTUUnit >::iterator":
        return _openstudioutilitiesunits.BTUUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::BTUUnit >::reverse_iterator":
        return _openstudioutilitiesunits.BTUUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::BTUUnit >::reverse_iterator":
        return _openstudioutilitiesunits.BTUUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::BTUUnit >::allocator_type":
        return _openstudioutilitiesunits.BTUUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::BTUUnit >::iterator":
        return _openstudioutilitiesunits.BTUUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.BTUUnitVector_swiginit(self, _openstudioutilitiesunits.new_BTUUnitVector(*args))

    def push_back(self, x: "BTUUnit") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::BTUUnit >::value_type const &":
        return _openstudioutilitiesunits.BTUUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::BTUUnit >::value_type const &":
        return _openstudioutilitiesunits.BTUUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::BTUUnit >::size_type", x: "BTUUnit") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::BTUUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.BTUUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::BTUUnit >::size_type":
        return _openstudioutilitiesunits.BTUUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnitVector

# Register BTUUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUUnitVector_swigregister(BTUUnitVector)

class OptionalBTUUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalBTUUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalBTUUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalBTUUnit_reset(self)

    def __ref__(self) -> "openstudio::BTUUnit":
        return _openstudioutilitiesunits.OptionalBTUUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalBTUUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalBTUUnit_isNull(self)

    def get(self) -> "openstudio::BTUUnit":
        return _openstudioutilitiesunits.OptionalBTUUnit_get(self)

    def set(self, t: "BTUUnit") -> "void":
        return _openstudioutilitiesunits.OptionalBTUUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalBTUUnit

# Register OptionalBTUUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalBTUUnit_swigregister(OptionalBTUUnit)

class CFMUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.CFMUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.CFMUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.CFMUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::CFMUnit >::size_type":
        return _openstudioutilitiesunits.CFMUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::CFMUnit >::difference_type", j: "std::vector< openstudio::CFMUnit >::difference_type") -> "std::vector< openstudio::CFMUnit,std::allocator< openstudio::CFMUnit > > *":
        return _openstudioutilitiesunits.CFMUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::CFMUnit >::difference_type", j: "std::vector< openstudio::CFMUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::CFMUnit >::value_type const &":
        return _openstudioutilitiesunits.CFMUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::CFMUnit >::value_type":
        return _openstudioutilitiesunits.CFMUnitVector_pop(self)

    def append(self, x: "CFMUnit") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.CFMUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::CFMUnit >::size_type":
        return _openstudioutilitiesunits.CFMUnitVector_size(self)

    def swap(self, v: "CFMUnitVector") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::CFMUnit >::iterator":
        return _openstudioutilitiesunits.CFMUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::CFMUnit >::iterator":
        return _openstudioutilitiesunits.CFMUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::CFMUnit >::reverse_iterator":
        return _openstudioutilitiesunits.CFMUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::CFMUnit >::reverse_iterator":
        return _openstudioutilitiesunits.CFMUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::CFMUnit >::allocator_type":
        return _openstudioutilitiesunits.CFMUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::CFMUnit >::iterator":
        return _openstudioutilitiesunits.CFMUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.CFMUnitVector_swiginit(self, _openstudioutilitiesunits.new_CFMUnitVector(*args))

    def push_back(self, x: "CFMUnit") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::CFMUnit >::value_type const &":
        return _openstudioutilitiesunits.CFMUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::CFMUnit >::value_type const &":
        return _openstudioutilitiesunits.CFMUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::CFMUnit >::size_type", x: "CFMUnit") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::CFMUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.CFMUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::CFMUnit >::size_type":
        return _openstudioutilitiesunits.CFMUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnitVector

# Register CFMUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMUnitVector_swigregister(CFMUnitVector)

class OptionalCFMUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalCFMUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalCFMUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalCFMUnit_reset(self)

    def __ref__(self) -> "openstudio::CFMUnit":
        return _openstudioutilitiesunits.OptionalCFMUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalCFMUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalCFMUnit_isNull(self)

    def get(self) -> "openstudio::CFMUnit":
        return _openstudioutilitiesunits.OptionalCFMUnit_get(self)

    def set(self, t: "CFMUnit") -> "void":
        return _openstudioutilitiesunits.OptionalCFMUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCFMUnit

# Register OptionalCFMUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalCFMUnit_swigregister(OptionalCFMUnit)

class GPDUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.GPDUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.GPDUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.GPDUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::GPDUnit >::size_type":
        return _openstudioutilitiesunits.GPDUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::GPDUnit >::difference_type", j: "std::vector< openstudio::GPDUnit >::difference_type") -> "std::vector< openstudio::GPDUnit,std::allocator< openstudio::GPDUnit > > *":
        return _openstudioutilitiesunits.GPDUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::GPDUnit >::difference_type", j: "std::vector< openstudio::GPDUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::GPDUnit >::value_type const &":
        return _openstudioutilitiesunits.GPDUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::GPDUnit >::value_type":
        return _openstudioutilitiesunits.GPDUnitVector_pop(self)

    def append(self, x: "GPDUnit") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.GPDUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::GPDUnit >::size_type":
        return _openstudioutilitiesunits.GPDUnitVector_size(self)

    def swap(self, v: "GPDUnitVector") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::GPDUnit >::iterator":
        return _openstudioutilitiesunits.GPDUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::GPDUnit >::iterator":
        return _openstudioutilitiesunits.GPDUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::GPDUnit >::reverse_iterator":
        return _openstudioutilitiesunits.GPDUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::GPDUnit >::reverse_iterator":
        return _openstudioutilitiesunits.GPDUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::GPDUnit >::allocator_type":
        return _openstudioutilitiesunits.GPDUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::GPDUnit >::iterator":
        return _openstudioutilitiesunits.GPDUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.GPDUnitVector_swiginit(self, _openstudioutilitiesunits.new_GPDUnitVector(*args))

    def push_back(self, x: "GPDUnit") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::GPDUnit >::value_type const &":
        return _openstudioutilitiesunits.GPDUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::GPDUnit >::value_type const &":
        return _openstudioutilitiesunits.GPDUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::GPDUnit >::size_type", x: "GPDUnit") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::GPDUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.GPDUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::GPDUnit >::size_type":
        return _openstudioutilitiesunits.GPDUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnitVector

# Register GPDUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDUnitVector_swigregister(GPDUnitVector)

class OptionalGPDUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalGPDUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalGPDUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalGPDUnit_reset(self)

    def __ref__(self) -> "openstudio::GPDUnit":
        return _openstudioutilitiesunits.OptionalGPDUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalGPDUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalGPDUnit_isNull(self)

    def get(self) -> "openstudio::GPDUnit":
        return _openstudioutilitiesunits.OptionalGPDUnit_get(self)

    def set(self, t: "GPDUnit") -> "void":
        return _openstudioutilitiesunits.OptionalGPDUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalGPDUnit

# Register OptionalGPDUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalGPDUnit_swigregister(OptionalGPDUnit)

class MPHUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.MPHUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.MPHUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.MPHUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::MPHUnit >::size_type":
        return _openstudioutilitiesunits.MPHUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::MPHUnit >::difference_type", j: "std::vector< openstudio::MPHUnit >::difference_type") -> "std::vector< openstudio::MPHUnit,std::allocator< openstudio::MPHUnit > > *":
        return _openstudioutilitiesunits.MPHUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::MPHUnit >::difference_type", j: "std::vector< openstudio::MPHUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::MPHUnit >::value_type const &":
        return _openstudioutilitiesunits.MPHUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::MPHUnit >::value_type":
        return _openstudioutilitiesunits.MPHUnitVector_pop(self)

    def append(self, x: "MPHUnit") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.MPHUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::MPHUnit >::size_type":
        return _openstudioutilitiesunits.MPHUnitVector_size(self)

    def swap(self, v: "MPHUnitVector") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::MPHUnit >::iterator":
        return _openstudioutilitiesunits.MPHUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::MPHUnit >::iterator":
        return _openstudioutilitiesunits.MPHUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::MPHUnit >::reverse_iterator":
        return _openstudioutilitiesunits.MPHUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::MPHUnit >::reverse_iterator":
        return _openstudioutilitiesunits.MPHUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::MPHUnit >::allocator_type":
        return _openstudioutilitiesunits.MPHUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::MPHUnit >::iterator":
        return _openstudioutilitiesunits.MPHUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.MPHUnitVector_swiginit(self, _openstudioutilitiesunits.new_MPHUnitVector(*args))

    def push_back(self, x: "MPHUnit") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::MPHUnit >::value_type const &":
        return _openstudioutilitiesunits.MPHUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::MPHUnit >::value_type const &":
        return _openstudioutilitiesunits.MPHUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::MPHUnit >::size_type", x: "MPHUnit") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::MPHUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.MPHUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::MPHUnit >::size_type":
        return _openstudioutilitiesunits.MPHUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnitVector

# Register MPHUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHUnitVector_swigregister(MPHUnitVector)

class OptionalMPHUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalMPHUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalMPHUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalMPHUnit_reset(self)

    def __ref__(self) -> "openstudio::MPHUnit":
        return _openstudioutilitiesunits.OptionalMPHUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalMPHUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalMPHUnit_isNull(self)

    def get(self) -> "openstudio::MPHUnit":
        return _openstudioutilitiesunits.OptionalMPHUnit_get(self)

    def set(self, t: "MPHUnit") -> "void":
        return _openstudioutilitiesunits.OptionalMPHUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMPHUnit

# Register OptionalMPHUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalMPHUnit_swigregister(OptionalMPHUnit)

class WhUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.WhUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.WhUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.WhUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::WhUnit >::size_type":
        return _openstudioutilitiesunits.WhUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::WhUnit >::difference_type", j: "std::vector< openstudio::WhUnit >::difference_type") -> "std::vector< openstudio::WhUnit,std::allocator< openstudio::WhUnit > > *":
        return _openstudioutilitiesunits.WhUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.WhUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::WhUnit >::difference_type", j: "std::vector< openstudio::WhUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.WhUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.WhUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::WhUnit >::value_type const &":
        return _openstudioutilitiesunits.WhUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.WhUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::WhUnit >::value_type":
        return _openstudioutilitiesunits.WhUnitVector_pop(self)

    def append(self, x: "WhUnit") -> "void":
        return _openstudioutilitiesunits.WhUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.WhUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::WhUnit >::size_type":
        return _openstudioutilitiesunits.WhUnitVector_size(self)

    def swap(self, v: "WhUnitVector") -> "void":
        return _openstudioutilitiesunits.WhUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::WhUnit >::iterator":
        return _openstudioutilitiesunits.WhUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::WhUnit >::iterator":
        return _openstudioutilitiesunits.WhUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::WhUnit >::reverse_iterator":
        return _openstudioutilitiesunits.WhUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::WhUnit >::reverse_iterator":
        return _openstudioutilitiesunits.WhUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.WhUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::WhUnit >::allocator_type":
        return _openstudioutilitiesunits.WhUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.WhUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::WhUnit >::iterator":
        return _openstudioutilitiesunits.WhUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.WhUnitVector_swiginit(self, _openstudioutilitiesunits.new_WhUnitVector(*args))

    def push_back(self, x: "WhUnit") -> "void":
        return _openstudioutilitiesunits.WhUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::WhUnit >::value_type const &":
        return _openstudioutilitiesunits.WhUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::WhUnit >::value_type const &":
        return _openstudioutilitiesunits.WhUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::WhUnit >::size_type", x: "WhUnit") -> "void":
        return _openstudioutilitiesunits.WhUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.WhUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.WhUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::WhUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.WhUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::WhUnit >::size_type":
        return _openstudioutilitiesunits.WhUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnitVector

# Register WhUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhUnitVector_swigregister(WhUnitVector)

class OptionalWhUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalWhUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalWhUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalWhUnit_reset(self)

    def __ref__(self) -> "openstudio::WhUnit":
        return _openstudioutilitiesunits.OptionalWhUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalWhUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalWhUnit_isNull(self)

    def get(self) -> "openstudio::WhUnit":
        return _openstudioutilitiesunits.OptionalWhUnit_get(self)

    def set(self, t: "WhUnit") -> "void":
        return _openstudioutilitiesunits.OptionalWhUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalWhUnit

# Register OptionalWhUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalWhUnit_swigregister(OptionalWhUnit)

class ThermUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.ThermUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.ThermUnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.ThermUnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::ThermUnit >::size_type":
        return _openstudioutilitiesunits.ThermUnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::ThermUnit >::difference_type", j: "std::vector< openstudio::ThermUnit >::difference_type") -> "std::vector< openstudio::ThermUnit,std::allocator< openstudio::ThermUnit > > *":
        return _openstudioutilitiesunits.ThermUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::ThermUnit >::difference_type", j: "std::vector< openstudio::ThermUnit >::difference_type") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::ThermUnit >::value_type const &":
        return _openstudioutilitiesunits.ThermUnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::ThermUnit >::value_type":
        return _openstudioutilitiesunits.ThermUnitVector_pop(self)

    def append(self, x: "ThermUnit") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.ThermUnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::ThermUnit >::size_type":
        return _openstudioutilitiesunits.ThermUnitVector_size(self)

    def swap(self, v: "ThermUnitVector") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::ThermUnit >::iterator":
        return _openstudioutilitiesunits.ThermUnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::ThermUnit >::iterator":
        return _openstudioutilitiesunits.ThermUnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::ThermUnit >::reverse_iterator":
        return _openstudioutilitiesunits.ThermUnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::ThermUnit >::reverse_iterator":
        return _openstudioutilitiesunits.ThermUnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::ThermUnit >::allocator_type":
        return _openstudioutilitiesunits.ThermUnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::ThermUnit >::iterator":
        return _openstudioutilitiesunits.ThermUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.ThermUnitVector_swiginit(self, _openstudioutilitiesunits.new_ThermUnitVector(*args))

    def push_back(self, x: "ThermUnit") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::ThermUnit >::value_type const &":
        return _openstudioutilitiesunits.ThermUnitVector_front(self)

    def back(self) -> "std::vector< openstudio::ThermUnit >::value_type const &":
        return _openstudioutilitiesunits.ThermUnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::ThermUnit >::size_type", x: "ThermUnit") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::ThermUnit >::size_type") -> "void":
        return _openstudioutilitiesunits.ThermUnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::ThermUnit >::size_type":
        return _openstudioutilitiesunits.ThermUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnitVector

# Register ThermUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermUnitVector_swigregister(ThermUnitVector)

class OptionalThermUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalThermUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalThermUnit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalThermUnit_reset(self)

    def __ref__(self) -> "openstudio::ThermUnit":
        return _openstudioutilitiesunits.OptionalThermUnit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalThermUnit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalThermUnit_isNull(self)

    def get(self) -> "openstudio::ThermUnit":
        return _openstudioutilitiesunits.OptionalThermUnit_get(self)

    def set(self, t: "ThermUnit") -> "void":
        return _openstudioutilitiesunits.OptionalThermUnit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalThermUnit

# Register OptionalThermUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalThermUnit_swigregister(OptionalThermUnit)

class Misc1UnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.Misc1UnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.Misc1UnitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.Misc1UnitVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Misc1Unit >::size_type":
        return _openstudioutilitiesunits.Misc1UnitVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::Misc1Unit >::difference_type", j: "std::vector< openstudio::Misc1Unit >::difference_type") -> "std::vector< openstudio::Misc1Unit,std::allocator< openstudio::Misc1Unit > > *":
        return _openstudioutilitiesunits.Misc1UnitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::Misc1Unit >::difference_type", j: "std::vector< openstudio::Misc1Unit >::difference_type") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Misc1Unit >::value_type const &":
        return _openstudioutilitiesunits.Misc1UnitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::Misc1Unit >::value_type":
        return _openstudioutilitiesunits.Misc1UnitVector_pop(self)

    def append(self, x: "Misc1Unit") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.Misc1UnitVector_empty(self)

    def size(self) -> "std::vector< openstudio::Misc1Unit >::size_type":
        return _openstudioutilitiesunits.Misc1UnitVector_size(self)

    def swap(self, v: "Misc1UnitVector") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::Misc1Unit >::iterator":
        return _openstudioutilitiesunits.Misc1UnitVector_begin(self)

    def end(self) -> "std::vector< openstudio::Misc1Unit >::iterator":
        return _openstudioutilitiesunits.Misc1UnitVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Misc1Unit >::reverse_iterator":
        return _openstudioutilitiesunits.Misc1UnitVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Misc1Unit >::reverse_iterator":
        return _openstudioutilitiesunits.Misc1UnitVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::Misc1Unit >::allocator_type":
        return _openstudioutilitiesunits.Misc1UnitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Misc1Unit >::iterator":
        return _openstudioutilitiesunits.Misc1UnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.Misc1UnitVector_swiginit(self, _openstudioutilitiesunits.new_Misc1UnitVector(*args))

    def push_back(self, x: "Misc1Unit") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Misc1Unit >::value_type const &":
        return _openstudioutilitiesunits.Misc1UnitVector_front(self)

    def back(self) -> "std::vector< openstudio::Misc1Unit >::value_type const &":
        return _openstudioutilitiesunits.Misc1UnitVector_back(self)

    def assign(self, n: "std::vector< openstudio::Misc1Unit >::size_type", x: "Misc1Unit") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::Misc1Unit >::size_type") -> "void":
        return _openstudioutilitiesunits.Misc1UnitVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Misc1Unit >::size_type":
        return _openstudioutilitiesunits.Misc1UnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1UnitVector

# Register Misc1UnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1UnitVector_swigregister(Misc1UnitVector)

class OptionalMisc1Unit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalMisc1Unit_swiginit(self, _openstudioutilitiesunits.new_OptionalMisc1Unit(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalMisc1Unit_reset(self)

    def __ref__(self) -> "openstudio::Misc1Unit":
        return _openstudioutilitiesunits.OptionalMisc1Unit___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalMisc1Unit_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalMisc1Unit_isNull(self)

    def get(self) -> "openstudio::Misc1Unit":
        return _openstudioutilitiesunits.OptionalMisc1Unit_get(self)

    def set(self, t: "Misc1Unit") -> "void":
        return _openstudioutilitiesunits.OptionalMisc1Unit_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMisc1Unit

# Register OptionalMisc1Unit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalMisc1Unit_swigregister(OptionalMisc1Unit)

class UnitSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.UnitSystem_swiginit(self, _openstudioutilitiesunits.new_UnitSystem(*args))

    def valueName(self) -> "std::string":
        return _openstudioutilitiesunits.UnitSystem_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesunits.UnitSystem_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesunits.UnitSystem_valueDescription(self)

    def __eq__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___eq__(self, other)

    def __ne__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___ne__(self, other)

    def __gt__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___gt__(self, other)

    def __ge__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___ge__(self, other)

    def __lt__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___lt__(self, other)

    def __le__(self, other: "UnitSystem") -> "bool":
        return _openstudioutilitiesunits.UnitSystem___le__(self, other)

    @staticmethod
    def enumName() -> "std::string":
        return _openstudioutilitiesunits.UnitSystem_enumName()

    @staticmethod
    def getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _openstudioutilitiesunits.UnitSystem_getValues()

    def __str__(self) -> "std::string":
        return _openstudioutilitiesunits.UnitSystem___str__(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitSystem

# Register UnitSystem in _openstudioutilitiesunits:
_openstudioutilitiesunits.UnitSystem_swigregister(UnitSystem)

def UnitSystem_enumName() -> "std::string":
    return _openstudioutilitiesunits.UnitSystem_enumName()

def UnitSystem_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesunits.UnitSystem_getValues()

class ZUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.ZUnit_swiginit(self, _openstudioutilitiesunits.new_ZUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ZUnit

    def clone(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.ZUnit_clone(self)

    def cloneToMixed(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.ZUnit_cloneToMixed(self)

    def baseUnits(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesunits.ZUnit_baseUnits(self)

    def isBaseUnit(self, baseUnit: "std::string const &") -> "bool":
        return _openstudioutilitiesunits.ZUnit_isBaseUnit(self, baseUnit)

    def baseUnitExponent(self, baseUnit: "std::string const &") -> "int":
        return _openstudioutilitiesunits.ZUnit_baseUnitExponent(self, baseUnit)

    def setBaseUnitExponent(self, baseUnit: "std::string const &", exponent: "int") -> "void":
        return _openstudioutilitiesunits.ZUnit_setBaseUnitExponent(self, baseUnit, exponent)

    def scale(self) -> "openstudio::Scale":
        return _openstudioutilitiesunits.ZUnit_scale(self)

    def setScale(self, *args) -> "bool":
        return _openstudioutilitiesunits.ZUnit_setScale(self, *args)

    def standardString(self, withScale: "bool"=True) -> "std::string":
        return _openstudioutilitiesunits.ZUnit_standardString(self, withScale)

    def prettyString(self, withScale: "bool"=True) -> "std::string":
        return _openstudioutilitiesunits.ZUnit_prettyString(self, withScale)

    def setPrettyString(self, str: "std::string const &") -> "void":
        return _openstudioutilitiesunits.ZUnit_setPrettyString(self, str)

    def toString(self, withScale: "bool"=True) -> "std::string":
        return _openstudioutilitiesunits.ZUnit_toString(self, withScale)

    def system(self) -> "openstudio::UnitSystem":
        return _openstudioutilitiesunits.ZUnit_system(self)

    def __eq__(self, rUnit: "ZUnit") -> "bool":
        return _openstudioutilitiesunits.ZUnit___eq__(self, rUnit)

    def __imul__(self, rUnit: "ZUnit") -> "openstudio::Unit &":
        return _openstudioutilitiesunits.ZUnit___imul__(self, rUnit)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.ZUnit___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def pow(self, expNum: "int", expDenom: "int"=1, okToCallFactory: "bool"=True) -> "openstudio::Unit &":
        return _openstudioutilitiesunits.ZUnit_pow(self, expNum, expDenom, okToCallFactory)

    def to_Unit(self) -> "boost::optional< openstudio::Unit >":
        return _openstudioutilitiesunits.ZUnit_to_Unit(self)

    def to_TemperatureUnit(self) -> "boost::optional< openstudio::TemperatureUnit >":
        return _openstudioutilitiesunits.ZUnit_to_TemperatureUnit(self)

    def to_CelsiusUnit(self) -> "boost::optional< openstudio::CelsiusUnit >":
        return _openstudioutilitiesunits.ZUnit_to_CelsiusUnit(self)

    def to_FahrenheitUnit(self) -> "boost::optional< openstudio::FahrenheitUnit >":
        return _openstudioutilitiesunits.ZUnit_to_FahrenheitUnit(self)

    def to_SIUnit(self) -> "boost::optional< openstudio::SIUnit >":
        return _openstudioutilitiesunits.ZUnit_to_SIUnit(self)

    def to_IPUnit(self) -> "boost::optional< openstudio::IPUnit >":
        return _openstudioutilitiesunits.ZUnit_to_IPUnit(self)

    def to_BTUUnit(self) -> "boost::optional< openstudio::BTUUnit >":
        return _openstudioutilitiesunits.ZUnit_to_BTUUnit(self)

    def to_CFMUnit(self) -> "boost::optional< openstudio::CFMUnit >":
        return _openstudioutilitiesunits.ZUnit_to_CFMUnit(self)

    def to_GPDUnit(self) -> "boost::optional< openstudio::GPDUnit >":
        return _openstudioutilitiesunits.ZUnit_to_GPDUnit(self)

    def to_MPHUnit(self) -> "boost::optional< openstudio::MPHUnit >":
        return _openstudioutilitiesunits.ZUnit_to_MPHUnit(self)

    def to_WhUnit(self) -> "boost::optional< openstudio::WhUnit >":
        return _openstudioutilitiesunits.ZUnit_to_WhUnit(self)

    def to_ThermUnit(self) -> "boost::optional< openstudio::ThermUnit >":
        return _openstudioutilitiesunits.ZUnit_to_ThermUnit(self)

    def to_Misc1Unit(self) -> "boost::optional< openstudio::Misc1Unit >":
        return _openstudioutilitiesunits.ZUnit_to_Misc1Unit(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesunits.ZUnit___str__(self)

    def __mul__(self, rUnit: "ZUnit") -> "openstudio::Unit":
        return _openstudioutilitiesunits.ZUnit___mul__(self, rUnit)

    def __truediv__(self, *args):
        return _openstudioutilitiesunits.ZUnit___truediv__(self, *args)
    __div__ = __truediv__



# Register ZUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.ZUnit_swigregister(ZUnit)


def parseUnitString(unitString: "std::string const &") -> "openstudio::Unit":
    return _openstudioutilitiesunits.parseUnitString(unitString)
class TemperatureUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnit

    def isAbsolute(self) -> "bool":
        return _openstudioutilitiesunits.TemperatureUnit_isAbsolute(self)

    def setAsAbsolute(self) -> "void":
        return _openstudioutilitiesunits.TemperatureUnit_setAsAbsolute(self)

    def setAsRelative(self) -> "void":
        return _openstudioutilitiesunits.TemperatureUnit_setAsRelative(self)

# Register TemperatureUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureUnit_swigregister(TemperatureUnit)

class CelsiusUnit(TemperatureUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.CelsiusUnit_swiginit(self, _openstudioutilitiesunits.new_CelsiusUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnit

# Register CelsiusUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.CelsiusUnit_swigregister(CelsiusUnit)


def createCelsiusTemperature() -> "openstudio::CelsiusUnit":
    return _openstudioutilitiesunits.createCelsiusTemperature()
class FahrenheitUnit(TemperatureUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.FahrenheitUnit_swiginit(self, _openstudioutilitiesunits.new_FahrenheitUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnit

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnit___itruediv__(self, *args)
    __idiv__ = __itruediv__



# Register FahrenheitUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.FahrenheitUnit_swigregister(FahrenheitUnit)


def createFahrenheitTemperature() -> "openstudio::FahrenheitUnit":
    return _openstudioutilitiesunits.createFahrenheitTemperature()
class SIExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, kg: "int"=0, m: "int"=0, s: "int"=0, K: "int"=0, A: "int"=0, cd: "int"=0, mol: "int"=0, rad: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.SIExpnt_swiginit(self, _openstudioutilitiesunits.new_SIExpnt(kg, m, s, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIExpnt

# Register SIExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIExpnt_swigregister(SIExpnt)

class SIUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.SIUnit_swiginit(self, _openstudioutilitiesunits.new_SIUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnit

# Register SIUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIUnit_swigregister(SIUnit)


def createSIMass() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIMass()

def createSILength() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSILength()

def createSITime() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSITime()

def createSITemperature() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSITemperature()

def createSIElectricCurrent() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIElectricCurrent()

def createSILuminousIntensity() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSILuminousIntensity()

def createSIAmountOfSubstance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIAmountOfSubstance()

def createSIAngle() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIAngle()

def createSISolidAngle() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSISolidAngle()

def createSIPeople() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIPeople()

def createSICycle() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSICycle()

def createSICurrency() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSICurrency()

def createSIForce() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIForce()

def createSIEnergy() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIEnergy()

def createSIPower() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIPower()

def createSIElectricCharge() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIElectricCharge()

def createSIElectricalPotential() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIElectricalPotential()

def createSIElectricCapacitance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIElectricCapacitance()

def createSIElectricResistance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIElectricResistance()

def createSIMagneticFlux() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIMagneticFlux()

def createSIMagneticFieldStrength() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIMagneticFieldStrength()

def createSIInductance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIInductance()

def createSILuminousFlux() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSILuminousFlux()

def createSIIlluminance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIIlluminance()

def createSIFrequency() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIFrequency()

def createSIEnergyUseIntensity() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIEnergyUseIntensity()

def createSIPowerDensity() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIPowerDensity()

def createSIPowerPerPerson() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIPowerPerPerson()

def createSIPressure() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIPressure()

def createSIThermalConductance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIThermalConductance()

def createSIThermalResistance() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIThermalResistance()

def createSIHeatCapacity() -> "openstudio::SIUnit":
    return _openstudioutilitiesunits.createSIHeatCapacity()
class IPExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lbm: "int"=0, ft: "int"=0, s: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, lbf: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.IPExpnt_swiginit(self, _openstudioutilitiesunits.new_IPExpnt(lbm, ft, s, R, A, cd, lbmol, lbf, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPExpnt

# Register IPExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPExpnt_swigregister(IPExpnt)

class IPUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.IPUnit_swiginit(self, _openstudioutilitiesunits.new_IPUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnit

    @staticmethod
    def gc() -> "double":
        return _openstudioutilitiesunits.IPUnit_gc()

    def lbmToLbf(self) -> "void":
        return _openstudioutilitiesunits.IPUnit_lbmToLbf(self)

    def lbfToLbm(self) -> "void":
        return _openstudioutilitiesunits.IPUnit_lbfToLbm(self)

# Register IPUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPUnit_swigregister(IPUnit)

def IPUnit_gc() -> "double":
    return _openstudioutilitiesunits.IPUnit_gc()


def createIPMass() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPMass()

def createIPLength() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPLength()

def createIPTime() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPTime()

def createIPTemperature() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPTemperature()

def createIPElectricCurrent() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPElectricCurrent()

def createIPLuminousIntensity() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPLuminousIntensity()

def createIPAmountOfSubstance() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPAmountOfSubstance()

def createIPAngle() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPAngle()

def createIPSolidAngle() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPSolidAngle()

def createIPPeople() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPPeople()

def createIPCycle() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPCycle()

def createIPCurrency() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPCurrency()

def createIPForce() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPForce()

def createIPEnergy() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPEnergy()

def createIPPower() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPPower()

def createIPElectricCharge() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPElectricCharge()

def createIPLuminousFlux() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPLuminousFlux()

def createIPIlluminance() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPIlluminance()

def createIPFrequency() -> "openstudio::IPUnit":
    return _openstudioutilitiesunits.createIPFrequency()
class BTUExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, btu: "int"=0, ft: "int"=0, h: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.BTUExpnt_swiginit(self, _openstudioutilitiesunits.new_BTUExpnt(btu, ft, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUExpnt

# Register BTUExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUExpnt_swigregister(BTUExpnt)

class BTUUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.BTUUnit_swiginit(self, _openstudioutilitiesunits.new_BTUUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnit

# Register BTUUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUUnit_swigregister(BTUUnit)


def createBTUEnergy() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUEnergy()

def createBTULength() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTULength()

def createBTUTime() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUTime()

def createBTUTemperature() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUTemperature()

def createBTUElectricCurrent() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUElectricCurrent()

def createBTULuminousIntensity() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTULuminousIntensity()

def createBTUAmountOfSubstance() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUAmountOfSubstance()

def createBTUAngle() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUAngle()

def createBTUSolidAngle() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUSolidAngle()

def createBTUPeople() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUPeople()

def createBTUCycle() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUCycle()

def createBTUCurrency() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUCurrency()

def createBTUPower() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUPower()

def createBTULuminousFlux() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTULuminousFlux()

def createBTUIlluminance() -> "openstudio::BTUUnit":
    return _openstudioutilitiesunits.createBTUIlluminance()
class CFMExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ft: "int"=0, min: "int"=0, ton: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.CFMExpnt_swiginit(self, _openstudioutilitiesunits.new_CFMExpnt(ft, min, ton, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMExpnt

# Register CFMExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMExpnt_swigregister(CFMExpnt)

class CFMUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.CFMUnit_swiginit(self, _openstudioutilitiesunits.new_CFMUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnit

# Register CFMUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMUnit_swigregister(CFMUnit)


def createCFMLength() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMLength()

def createCFMTime() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMTime()

def createCFMPower() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMPower()

def createCFMTemperature() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMTemperature()

def createCFMElectricCurrent() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMElectricCurrent()

def createCFMLuminousIntensity() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMLuminousIntensity()

def createCFMAmountOfSubstance() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMAmountOfSubstance()

def createCFMAngle() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMAngle()

def createCFMSolidAngle() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMSolidAngle()

def createCFMPeople() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMPeople()

def createCFMCycle() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMCycle()

def createCFMCurrency() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMCurrency()

def createCFMVolumetricFlowrate() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMVolumetricFlowrate()

def createCFMLuminousFlux() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMLuminousFlux()

def createCFMIlluminance() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMIlluminance()

def createCFMFrequency() -> "openstudio::CFMUnit":
    return _openstudioutilitiesunits.createCFMFrequency()
class GPDExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inH2O: "int"=0, gal: "int"=0, day: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.GPDExpnt_swiginit(self, _openstudioutilitiesunits.new_GPDExpnt(inH2O, gal, day, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDExpnt

# Register GPDExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDExpnt_swigregister(GPDExpnt)

class GPDUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.GPDUnit_swiginit(self, _openstudioutilitiesunits.new_GPDUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnit

# Register GPDUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDUnit_swigregister(GPDUnit)


def createGPDPressure() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDPressure()

def createGPDLength() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDLength()

def createGPDTime() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDTime()

def createGPDTemperature() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDTemperature()

def createGPDElectricCurrent() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDElectricCurrent()

def createGPDLuminousIntensity() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDLuminousIntensity()

def createGPDAmountOfSubstance() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDAmountOfSubstance()

def createGPDAngle() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDAngle()

def createGPDSolidAngle() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDSolidAngle()

def createGPDPeople() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDPeople()

def createGPDCycle() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDCycle()

def createGPDCurrency() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDCurrency()

def createGPDVolume() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDVolume()

def createGPDVolumetricFlowrate() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDVolumetricFlowrate()

def createGPDLuminousFlux() -> "openstudio::GPDUnit":
    return _openstudioutilitiesunits.createGPDLuminousFlux()
class MPHExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inHg: "int"=0, mi: "int"=0, h: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.MPHExpnt_swiginit(self, _openstudioutilitiesunits.new_MPHExpnt(inHg, mi, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHExpnt

# Register MPHExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHExpnt_swigregister(MPHExpnt)

class MPHUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.MPHUnit_swiginit(self, _openstudioutilitiesunits.new_MPHUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnit

# Register MPHUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHUnit_swigregister(MPHUnit)


def createMPHPressure() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHPressure()

def createMPHLength() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHLength()

def createMPHTime() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHTime()

def createMPHTemperature() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHTemperature()

def createMPHElectricCurrent() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHElectricCurrent()

def createMPHLuminousIntensity() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHLuminousIntensity()

def createMPHAmountOfSubstance() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHAmountOfSubstance()

def createMPHAngle() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHAngle()

def createMPHSolidAngle() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHSolidAngle()

def createMPHPeople() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHPeople()

def createMPHCycle() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHCycle()

def createMPHCurrency() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHCurrency()

def createMPHVelocity() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHVelocity()

def createMPHLuminousFlux() -> "openstudio::MPHUnit":
    return _openstudioutilitiesunits.createMPHLuminousFlux()
class WhExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, W: "int"=0, h: "int"=0, m: "int"=0, K: "int"=0, A: "int"=0, cd: "int"=0, mol: "int"=0, rad: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.WhExpnt_swiginit(self, _openstudioutilitiesunits.new_WhExpnt(W, h, m, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhExpnt

# Register WhExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhExpnt_swigregister(WhExpnt)

class WhUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.WhUnit_swiginit(self, _openstudioutilitiesunits.new_WhUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnit

# Register WhUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhUnit_swigregister(WhUnit)


def createWhPower() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhPower()

def createWhTime() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhTime()

def createWhLength() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhLength()

def createWhTemperature() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhTemperature()

def createWhElectricCurrent() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhElectricCurrent()

def createWhLuminousIntensity() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhLuminousIntensity()

def createWhAmountOfSubstance() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhAmountOfSubstance()

def createWhAngle() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhAngle()

def createWhSolidAngle() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhSolidAngle()

def createWhPeople() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhPeople()

def createWhCycle() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhCycle()

def createWhCurrency() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhCurrency()

def createWhEnergy() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhEnergy()

def createWhElectricalPotential() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhElectricalPotential()

def createWhElectricResistance() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhElectricResistance()

def createWhLuminousFlux() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhLuminousFlux()

def createWhIlluminance() -> "openstudio::WhUnit":
    return _openstudioutilitiesunits.createWhIlluminance()
class ThermExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, therm: "int"=0, t_in: "int"=0, yr: "int"=0, R: "int"=0, A: "int"=0, cd: "int"=0, lbmol: "int"=0, deg: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.ThermExpnt_swiginit(self, _openstudioutilitiesunits.new_ThermExpnt(therm, t_in, yr, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermExpnt

# Register ThermExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermExpnt_swigregister(ThermExpnt)

class ThermUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.ThermUnit_swiginit(self, _openstudioutilitiesunits.new_ThermUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnit

# Register ThermUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermUnit_swigregister(ThermUnit)


def createThermEnergy() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermEnergy()

def createThermLength() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermLength()

def createThermTime() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermTime()

def createThermTemperature() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermTemperature()

def createThermElectricCurrent() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermElectricCurrent()

def createThermLuminousIntensity() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermLuminousIntensity()

def createThermAmountOfSubstance() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermAmountOfSubstance()

def createThermAngle() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermAngle()

def createThermSolidAngle() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermSolidAngle()

def createThermPeople() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermPeople()

def createThermCycle() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermCycle()

def createThermCurrency() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermCurrency()

def createThermLuminousFlux() -> "openstudio::ThermUnit":
    return _openstudioutilitiesunits.createThermLuminousFlux()
class Misc1Expnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ftH2O: "int"=0, L: "int"=0, day: "int"=0, K: "int"=0, A: "int"=0, cd: "int"=0, mol: "int"=0, rad: "int"=0, sr: "int"=0, people: "int"=0, cycle: "int"=0, dollar: "int"=0):
        _openstudioutilitiesunits.Misc1Expnt_swiginit(self, _openstudioutilitiesunits.new_Misc1Expnt(ftH2O, L, day, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Expnt

# Register Misc1Expnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1Expnt_swigregister(Misc1Expnt)

class Misc1Unit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.Misc1Unit_swiginit(self, _openstudioutilitiesunits.new_Misc1Unit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Unit

# Register Misc1Unit in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1Unit_swigregister(Misc1Unit)


def createMisc1Pressure() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Pressure()

def createMisc1Length() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Length()

def createMisc1Time() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Time()

def createMisc1Temperature() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Temperature()

def createMisc1ElectricCurrent() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1ElectricCurrent()

def createMisc1LuminousIntensity() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1LuminousIntensity()

def createMisc1AmountOfSubstance() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1AmountOfSubstance()

def createMisc1Angle() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Angle()

def createMisc1SolidAngle() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1SolidAngle()

def createMisc1People() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1People()

def createMisc1Cycle() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Cycle()

def createMisc1Currency() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Currency()

def createMisc1Volume() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1Volume()

def createMisc1LuminousFlux() -> "openstudio::Misc1Unit":
    return _openstudioutilitiesunits.createMisc1LuminousFlux()

def isFixedPrecisionValue(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isFixedPrecisionValue(s)

def containsFixedPrecisionValue(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsFixedPrecisionValue(s)

def isScientificNotationValue(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isScientificNotationValue(s)

def containsScientificNotationValue(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsScientificNotationValue(s)

def isAtomicUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isAtomicUnit(s)

def containsAtomicUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsAtomicUnit(s)

def isCompoundUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isCompoundUnit(s)

def containsCompoundUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsCompoundUnit(s)

def isScaledUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isScaledUnit(s)

def containsScaledUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsScaledUnit(s)

def isDirectScaledUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isDirectScaledUnit(s)

def containsDirectScaledUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsDirectScaledUnit(s)

def isUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isUnit(s)

def containsUnit(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsUnit(s)

def isQuantity(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isQuantity(s)

def containsQuantity(s: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsQuantity(s)

def getSystem(unitString: "std::string const &") -> "openstudio::UnitSystem":
    return _openstudioutilitiesunits.getSystem(unitString)

def isInSystem(unitString: "std::string const &", system: "UnitSystem") -> "bool":
    return _openstudioutilitiesunits.isInSystem(unitString, system)

def containsRegisteredBaseUnit(unitString: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.containsRegisteredBaseUnit(unitString)

def extractUnitString(text: "std::string const &") -> "std::string":
    return _openstudioutilitiesunits.extractUnitString(text)

def convertToStandardForm(unitString: "std::string const &") -> "std::string":
    return _openstudioutilitiesunits.convertToStandardForm(unitString)

def replaceUnitString(text: "std::string const &", newUnitString: "std::string const &") -> "std::string":
    return _openstudioutilitiesunits.replaceUnitString(text, newUnitString)

def isUnitString(unitString: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.isUnitString(unitString)

def createDimensionlessUnit(system: "UnitSystem") -> "openstudio::Unit":
    return _openstudioutilitiesunits.createDimensionlessUnit(system)

def createUnit(*args) -> "boost::optional< openstudio::Unit >":
    return _openstudioutilitiesunits.createUnit(*args)

def unitStringsEqual(uStr1: "std::string const &", uStr2: "std::string const &") -> "bool":
    return _openstudioutilitiesunits.unitStringsEqual(uStr1, uStr2)

def createIPPowerDensity() -> "openstudio::Unit":
    return _openstudioutilitiesunits.createIPPowerDensity()

def createGPMVolumetricFlowrate() -> "openstudio::Unit":
    return _openstudioutilitiesunits.createGPMVolumetricFlowrate()

def createIPPressure() -> "openstudio::Unit":
    return _openstudioutilitiesunits.createIPPressure()
class QuantityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesunits.QuantityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesunits.QuantityVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesunits.QuantityVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Quantity >::size_type":
        return _openstudioutilitiesunits.QuantityVector___len__(self)

    def __getslice__(self, i: "std::vector< openstudio::Quantity >::difference_type", j: "std::vector< openstudio::Quantity >::difference_type") -> "std::vector< openstudio::Quantity,std::allocator< openstudio::Quantity > > *":
        return _openstudioutilitiesunits.QuantityVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesunits.QuantityVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< openstudio::Quantity >::difference_type", j: "std::vector< openstudio::Quantity >::difference_type") -> "void":
        return _openstudioutilitiesunits.QuantityVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.QuantityVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Quantity >::value_type const &":
        return _openstudioutilitiesunits.QuantityVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesunits.QuantityVector___setitem__(self, *args)

    def pop(self) -> "std::vector< openstudio::Quantity >::value_type":
        return _openstudioutilitiesunits.QuantityVector_pop(self)

    def append(self, x: "Quantity") -> "void":
        return _openstudioutilitiesunits.QuantityVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.QuantityVector_empty(self)

    def size(self) -> "std::vector< openstudio::Quantity >::size_type":
        return _openstudioutilitiesunits.QuantityVector_size(self)

    def swap(self, v: "QuantityVector") -> "void":
        return _openstudioutilitiesunits.QuantityVector_swap(self, v)

    def begin(self) -> "std::vector< openstudio::Quantity >::iterator":
        return _openstudioutilitiesunits.QuantityVector_begin(self)

    def end(self) -> "std::vector< openstudio::Quantity >::iterator":
        return _openstudioutilitiesunits.QuantityVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Quantity >::reverse_iterator":
        return _openstudioutilitiesunits.QuantityVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Quantity >::reverse_iterator":
        return _openstudioutilitiesunits.QuantityVector_rend(self)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.QuantityVector_clear(self)

    def get_allocator(self) -> "std::vector< openstudio::Quantity >::allocator_type":
        return _openstudioutilitiesunits.QuantityVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.QuantityVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Quantity >::iterator":
        return _openstudioutilitiesunits.QuantityVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.QuantityVector_swiginit(self, _openstudioutilitiesunits.new_QuantityVector(*args))

    def push_back(self, x: "Quantity") -> "void":
        return _openstudioutilitiesunits.QuantityVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Quantity >::value_type const &":
        return _openstudioutilitiesunits.QuantityVector_front(self)

    def back(self) -> "std::vector< openstudio::Quantity >::value_type const &":
        return _openstudioutilitiesunits.QuantityVector_back(self)

    def assign(self, n: "std::vector< openstudio::Quantity >::size_type", x: "Quantity") -> "void":
        return _openstudioutilitiesunits.QuantityVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesunits.QuantityVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesunits.QuantityVector_insert(self, *args)

    def reserve(self, n: "std::vector< openstudio::Quantity >::size_type") -> "void":
        return _openstudioutilitiesunits.QuantityVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Quantity >::size_type":
        return _openstudioutilitiesunits.QuantityVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_QuantityVector

# Register QuantityVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.QuantityVector_swigregister(QuantityVector)

class OptionalQuantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalQuantity_swiginit(self, _openstudioutilitiesunits.new_OptionalQuantity(*args))

    def reset(self) -> "void":
        return _openstudioutilitiesunits.OptionalQuantity_reset(self)

    def __ref__(self) -> "openstudio::Quantity":
        return _openstudioutilitiesunits.OptionalQuantity___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesunits.OptionalQuantity_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesunits.OptionalQuantity_isNull(self)

    def get(self) -> "openstudio::Quantity":
        return _openstudioutilitiesunits.OptionalQuantity_get(self)

    def set(self, t: "Quantity") -> "void":
        return _openstudioutilitiesunits.OptionalQuantity_set(self, t)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalQuantity

# Register OptionalQuantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalQuantity_swigregister(OptionalQuantity)

class Quantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.Quantity_swiginit(self, _openstudioutilitiesunits.new_Quantity(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Quantity

    def value(self) -> "double":
        return _openstudioutilitiesunits.Quantity_value(self)

    def setValue(self, newValue: "double") -> "void":
        return _openstudioutilitiesunits.Quantity_setValue(self, newValue)

    def units(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.Quantity_units(self)

    def system(self) -> "openstudio::UnitSystem":
        return _openstudioutilitiesunits.Quantity_system(self)

    def isTemperature(self) -> "bool":
        return _openstudioutilitiesunits.Quantity_isTemperature(self)

    def baseUnits(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesunits.Quantity_baseUnits(self)

    def baseUnitExponent(self, baseUnit: "std::string const &") -> "int":
        return _openstudioutilitiesunits.Quantity_baseUnitExponent(self, baseUnit)

    def setBaseUnitExponent(self, baseUnit: "std::string const &", exponent: "int") -> "void":
        return _openstudioutilitiesunits.Quantity_setBaseUnitExponent(self, baseUnit, exponent)

    def standardUnitsString(self, withScale: "bool"=True) -> "std::string":
        return _openstudioutilitiesunits.Quantity_standardUnitsString(self, withScale)

    def prettyUnitsString(self, withScale: "bool"=True) -> "std::string":
        return _openstudioutilitiesunits.Quantity_prettyUnitsString(self, withScale)

    def setPrettyUnitsString(self, str: "std::string const &") -> "void":
        return _openstudioutilitiesunits.Quantity_setPrettyUnitsString(self, str)

    def scale(self) -> "openstudio::Scale":
        return _openstudioutilitiesunits.Quantity_scale(self)

    def setScale(self, *args) -> "bool":
        return _openstudioutilitiesunits.Quantity_setScale(self, *args)

    def isAbsolute(self) -> "bool":
        return _openstudioutilitiesunits.Quantity_isAbsolute(self)

    def isRelative(self) -> "bool":
        return _openstudioutilitiesunits.Quantity_isRelative(self)

    def setAsAbsolute(self) -> "void":
        return _openstudioutilitiesunits.Quantity_setAsAbsolute(self)

    def setAsRelative(self) -> "void":
        return _openstudioutilitiesunits.Quantity_setAsRelative(self)

    def lbmToLbf(self) -> "void":
        return _openstudioutilitiesunits.Quantity_lbmToLbf(self)

    def lbfToLbm(self) -> "void":
        return _openstudioutilitiesunits.Quantity_lbfToLbm(self)

    def __iadd__(self, rQuantity: "Quantity") -> "openstudio::Quantity &":
        return _openstudioutilitiesunits.Quantity___iadd__(self, rQuantity)

    def __isub__(self, rQuantity: "Quantity") -> "openstudio::Quantity &":
        return _openstudioutilitiesunits.Quantity___isub__(self, rQuantity)

    def __imul__(self, *args) -> "openstudio::Quantity &":
        return _openstudioutilitiesunits.Quantity___imul__(self, *args)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.Quantity___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def pow(self, expNum: "int", expDenom: "int"=1) -> "openstudio::Quantity &":
        return _openstudioutilitiesunits.Quantity_pow(self, expNum, expDenom)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesunits.Quantity___str__(self)

    def __neg__(self) -> "openstudio::Quantity":
        return _openstudioutilitiesunits.Quantity___neg__(self)

    def __add__(self, rQuantity: "Quantity") -> "openstudio::Quantity":
        return _openstudioutilitiesunits.Quantity___add__(self, rQuantity)

    def __sub__(self, rQuantity: "Quantity") -> "openstudio::Quantity":
        return _openstudioutilitiesunits.Quantity___sub__(self, rQuantity)

    def __mul__(self, *args) -> "openstudio::Quantity":
        return _openstudioutilitiesunits.Quantity___mul__(self, *args)

    def __truediv__(self, *args):
        return _openstudioutilitiesunits.Quantity___truediv__(self, *args)
    __div__ = __truediv__



# Register Quantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.Quantity_swigregister(Quantity)


def __lshift__(*args) -> "std::ostream &":
    return _openstudioutilitiesunits.__lshift__(*args)

def pow(*args) -> "openstudio::Quantity":
    return _openstudioutilitiesunits.pow(*args)
class OSOptionalQuantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OSOptionalQuantity_swiginit(self, _openstudioutilitiesunits.new_OSOptionalQuantity(*args))

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.OSOptionalQuantity_empty(self)

    def isSet(self) -> "bool":
        return _openstudioutilitiesunits.OSOptionalQuantity_isSet(self)

    def get(self) -> "openstudio::Quantity":
        return _openstudioutilitiesunits.OSOptionalQuantity_get(self)

    def units(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.OSOptionalQuantity_units(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OSOptionalQuantity

# Register OSOptionalQuantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.OSOptionalQuantity_swigregister(OSOptionalQuantity)

class OSQuantityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OSQuantityVector_swiginit(self, _openstudioutilitiesunits.new_OSQuantityVector(*args))

    def units(self) -> "openstudio::Unit":
        return _openstudioutilitiesunits.OSQuantityVector_units(self)

    def system(self) -> "openstudio::UnitSystem":
        return _openstudioutilitiesunits.OSQuantityVector_system(self)

    def scale(self) -> "openstudio::Scale":
        return _openstudioutilitiesunits.OSQuantityVector_scale(self)

    def quantities(self) -> "std::vector< openstudio::Quantity,std::allocator< openstudio::Quantity > >":
        return _openstudioutilitiesunits.OSQuantityVector_quantities(self)

    def values(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiesunits.OSQuantityVector_values(self)

    def getQuantity(self, i: "unsigned int") -> "openstudio::Quantity":
        return _openstudioutilitiesunits.OSQuantityVector_getQuantity(self, i)

    def empty(self) -> "bool":
        return _openstudioutilitiesunits.OSQuantityVector_empty(self)

    def size(self) -> "unsigned int":
        return _openstudioutilitiesunits.OSQuantityVector_size(self)

    def setScale(self, *args) -> "bool":
        return _openstudioutilitiesunits.OSQuantityVector_setScale(self, *args)

    def push_back(self, q: "Quantity") -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_push_back(self, q)

    def pop_back(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_pop_back(self)

    def resize(self, n: "unsigned int", value: "double"=0.0) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_resize(self, n, value)

    def clear(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_clear(self)

    def isTemperature(self) -> "bool":
        return _openstudioutilitiesunits.OSQuantityVector_isTemperature(self)

    def isAbsolute(self) -> "bool":
        return _openstudioutilitiesunits.OSQuantityVector_isAbsolute(self)

    def isRelative(self) -> "bool":
        return _openstudioutilitiesunits.OSQuantityVector_isRelative(self)

    def setAsAbsolute(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_setAsAbsolute(self)

    def setAsRelative(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_setAsRelative(self)

    def lbmToLbf(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_lbmToLbf(self)

    def lbfToLbm(self) -> "void":
        return _openstudioutilitiesunits.OSQuantityVector_lbfToLbm(self)

    def __iadd__(self, *args) -> "openstudio::OSQuantityVector &":
        return _openstudioutilitiesunits.OSQuantityVector___iadd__(self, *args)

    def __isub__(self, *args) -> "openstudio::OSQuantityVector &":
        return _openstudioutilitiesunits.OSQuantityVector___isub__(self, *args)

    def __imul__(self, *args) -> "openstudio::OSQuantityVector &":
        return _openstudioutilitiesunits.OSQuantityVector___imul__(self, *args)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_destroy__ = _openstudioutilitiesunits.delete_OSQuantityVector

# Register OSQuantityVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.OSQuantityVector_swigregister(OSQuantityVector)


def __add__(*args) -> "openstudio::OSQuantityVector":
    return _openstudioutilitiesunits.__add__(*args)

def __sub__(*args) -> "openstudio::OSQuantityVector":
    return _openstudioutilitiesunits.__sub__(*args)

def __mul__(*args) -> "openstudio::OSQuantityVector":
    return _openstudioutilitiesunits.__mul__(*args)

def __truediv__(*args) -> "openstudio::OSQuantityVector":
    return _openstudioutilitiesunits.__truediv__(*args)

def dot(lVector: "OSQuantityVector", rVector: "OSQuantityVector") -> "openstudio::Quantity":
    return _openstudioutilitiesunits.dot(lVector, rVector)

def __eq__(*args) -> "bool":
    return _openstudioutilitiesunits.__eq__(*args)

def __ne__(*args) -> "bool":
    return _openstudioutilitiesunits.__ne__(*args)

def createQuantity(*args) -> "boost::optional< openstudio::Quantity >":
    return _openstudioutilitiesunits.createQuantity(*args)
class TemperatureConversionRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STND = _openstudioutilitiesunits.TemperatureConversionRule_STND
    ABS = _openstudioutilitiesunits.TemperatureConversionRule_ABS
    REL = _openstudioutilitiesunits.TemperatureConversionRule_REL

    def __init__(self):
        _openstudioutilitiesunits.TemperatureConversionRule_swiginit(self, _openstudioutilitiesunits.new_TemperatureConversionRule())
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureConversionRule

# Register TemperatureConversionRule in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureConversionRule_swigregister(TemperatureConversionRule)

class baseUnitConversionFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    system = property(_openstudioutilitiesunits.baseUnitConversionFactor_system_get, _openstudioutilitiesunits.baseUnitConversionFactor_system_set)
    originalUnit = property(_openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_set)
    targetUnit = property(_openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_set)
    factor = property(_openstudioutilitiesunits.baseUnitConversionFactor_factor_get, _openstudioutilitiesunits.baseUnitConversionFactor_factor_set)
    offset = property(_openstudioutilitiesunits.baseUnitConversionFactor_offset_get, _openstudioutilitiesunits.baseUnitConversionFactor_offset_set)

    def __init__(self):
        _openstudioutilitiesunits.baseUnitConversionFactor_swiginit(self, _openstudioutilitiesunits.new_baseUnitConversionFactor())
    __swig_destroy__ = _openstudioutilitiesunits.delete_baseUnitConversionFactor

# Register baseUnitConversionFactor in _openstudioutilitiesunits:
_openstudioutilitiesunits.baseUnitConversionFactor_swigregister(baseUnitConversionFactor)


def convert(*args) -> "openstudio::OSQuantityVector":
    return _openstudioutilitiesunits.convert(*args)


