########################################################################################
#
# runemre.py - Top level Python script used to run the eMRE runtime main script.
#              This main script initializes the emre runtime state and starts the CLIPs runtime
#              environment.
#
#              runemre.py can be invoked with optional command line parameters described below:
#
#              runemre.py --facts=/path_to/facts --rules=/path_to/rules --init=/path_to/initial-facts --facts=/path_to/test-facts --model=0 --runone=0

import os
from emreclass import EMRE
from optparse import OptionParser

def main():
    #
    # eMRE accepts five files that define parameters used to control eMRE execution
    # The files are defined as optional parameters.  If not parameter is provided when eMRE is started
    # default file names are used assuming the files are located in the directory where runemre.py is started
    #
    #    facts - Initial configurations for eMRE including:
    #                       initial_facts - Initial FACTs to assert when eMRE is started
    #                       fact collection instructions - Instructions used by eMRE runtime to collect FACT data from many sources
    #                       triggering events - Definitions of events used to trigger eMRE execution in the main script
    #                       configurations - Definitions of configurations applied by RULEs when RULEs are executed
    #                       control flags - Flags that control eMRE execution
    #
    #    rules - CLIPs "declarations" used to control runtime execution.  Declarations include "deffacts" which are initial FACTs
    #                       that can be loaded and then asserted when CLIPs is started.  "deftemplates" are definitions of the fields in FACTS.
    #                       "defrules" define the RULEs executed by CLIPs when FACTs are asserted that satisfy the RULE requirements
    #
    #    init - Optional file containing additional FACTs defined in CLIPs format that can be asserted by emre on startup
    #
    #    tests - eMRE can be run using simulated FACTs instead of collecting FACT data from devices.  Simulated FACTs can be used
    #                            test workflows including failure paths which would be difficult to create on an actual network.  A set of test FACTs
    #                            are asserted each time the eMRE main script runs through a cycle
    #
    #    log(emre-log) - Absolute path to a log file to persist all messages generated by eMRE RULEs
    #
    # Additional command line options
    #
    #    model(0) - If the model parameter is set to 1, eMRE will use the cisco-ios-xe-emre-control.yang model to load the content defined in the "facts" file above
    #    runone(0) - If set to 1, the main eMRE script will run through one cycle then exit
    #
    # Read optional command line arguments for set defaults
    #
    parser = OptionParser('')
    parser.add_option("--facts", dest="facts", type="string", default='/bootflash/guest-share/emre/emre-facts',
                      help="Relative path to the file containing instructions for collecting FACTS")
    parser.add_option("--rules", dest="rules", type="string", default='/bootflash/guest-share/emre/emre-rules',
                      help="Relative path to the file containing the RULES")
    parser.add_option("--tests", dest="tests", type="string", default='/bootflash/guest-share/emre/emre-test',
                      help="Relative path to the file containing the test facts")
    parser.add_option("--log", dest="log", type="string", default='/bootflash/guest-share/emre/emre-log',
                      help="Absolute path to log file for persisted EMRE messages")
    parser.add_option("--init", dest="init", type="string", default='/bootflash/guest-share/emre/emre-init',
                      help="Absolute path to initial-facts file")
    parser.add_option("--model", dest="model", type=int, default=0,
                      help="Set to 1 to use emre-control model")
    parser.add_option("--runone", dest="runone", type=int, default=0,
                      help="Set to 1 to stop eMRE after one execution cycle")

    (o, args) = parser.parse_args()
    factsfile = o.facts
    rulesfile = o.rules
    testsfile = o.tests
    logfile = o.log
    initfacts = o.init
    model_control = o.model
    run_one = o.runone
    #
    # Run the main eMRE script
    #
    try:
        flist = [factsfile, rulesfile, testsfile, logfile, initfacts]
    #
    # Create instance of emre class
    # 
        engine = EMRE()
    #
    # Start eMRE passing a the list of configuration files, whether to use model control and a single execution flag
    #
        engine.emre(flist, model_control, run_one)
    except Exception as e:
        print("%%%%% eMRE Execution Terminated: " + str(e))

if __name__ == "__main__":
    main()

