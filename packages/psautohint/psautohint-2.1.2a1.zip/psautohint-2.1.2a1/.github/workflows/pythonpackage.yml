name: Test and Build

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches: [master]
  repository_dispatch:
    types: manual-trigger

jobs:
  run_tests:
    if: contains(toJson(github.event.commits), '[skip ci]') == false && contains(toJson(github.event.commits), '[skip github]') == false

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        exclude:
          - os: macos-latest
            python-version: 3.6
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8
          - os: ubuntu-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        echo "::set-env name=OS_PY_VERS::${{ matrix.os }}_${{ matrix.python-version }}"
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r dev-requirements.txt
        
    - name: Lint with flake8 (only Ubuntu/Python 3.9)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-line-length=127 --statistics

    - name: Test with tox (except Ubuntu/Python 3.7)
      if: ${{ env.OS_PY_VERS }} != 'ubuntu-latest_3.7'
      run: |
        tox -e py-cov

  build_wheels:
    needs: run_tests
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
    
      - name: Use MSBuild (Windows only)
        uses: microsoft/setup-msbuild@v1.0.0
        if: matrix.os == 'windows-latest'
    
      - name: Install Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
        
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      
      - name: Build wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env: 
          CIBW_BUILD: "cp3?-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_SKIP: "pp* cp35* cp*manylinux_i686 cp*manylinux_aarch64 cp*manylinux_ppc64le cp*manylinux_s390x"
      
      - name: Build sdist
        run: |
          python setup.py sdist
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      
      - name: Publish package to TEST PyPI
        run: |
          pip install twine
          twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
